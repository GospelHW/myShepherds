/*
 * copyright (c)2018-8-15
 * DXC technology
 */

package gospel.v2.base;

public class mcKey {
	public static int[] getMcKey() {
		int[] key = new int[120610];
		init0(key);
		init1(key);
		init2(key);
		init3(key);
		init4(key);
		init5(key);
		init6(key);
		init7(key);
		init8(key);
		init9(key);
		init10(key);
		init11(key);
		init12(key);
		init13(key);
		init14(key);
		init15(key);
		init16(key);
		init17(key);
		init18(key);
		init19(key);
		init20(key);
		init21(key);
		init22(key);
		init23(key);
		init24(key);
		init25(key);
		init26(key);
		init27(key);
		init28(key);
		init29(key);
		init30(key);
		init31(key);
		init32(key);
		init33(key);
		init34(key);
		init35(key);
		init36(key);
		init37(key);
		init38(key);
		init39(key);
		init40(key);
		init41(key);
		init42(key);
		init43(key);
		init44(key);
		init45(key);
		init46(key);
		init47(key);
		init48(key);
		init49(key);
		init50(key);
		init51(key);
		init52(key);
		init53(key);
		init54(key);
		init55(key);
		init56(key);
		init57(key);
		init58(key);
		init59(key);
		init60(key);
		init61(key);
		init62(key);
		init63(key);
		init64(key);
		init65(key);
		init66(key);
		init67(key);
		init68(key);
		init69(key);
		init70(key);
		init71(key);
		init72(key);
		init73(key);
		init74(key);
		init75(key);
		init76(key);
		init77(key);
		init78(key);
		init79(key);
		init80(key);
		init81(key);
		init82(key);
		init83(key);
		init84(key);
		init85(key);
		init86(key);
		init87(key);
		init88(key);
		init89(key);
		init90(key);
		init91(key);
		init92(key);
		init93(key);
		init94(key);
		init95(key);
		init96(key);
		init97(key);
		init98(key);
		init99(key);
		init100(key);
		init101(key);
		init102(key);
		init103(key);
		init104(key);
		init105(key);
		init106(key);
		init107(key);
		init108(key);
		init109(key);
		init110(key);
		init111(key);
		init112(key);
		init113(key);
		init114(key);
		init115(key);
		init116(key);
		init117(key);
		init118(key);
		init119(key);
		init120(key);
		init121(key);
		init122(key);
		init123(key);
		init124(key);
		init125(key);
		init126(key);
		init127(key);
		init128(key);
		init129(key);
		init130(key);
		init131(key);
		init132(key);
		init133(key);
		init134(key);
		init135(key);
		init136(key);
		init137(key);
		init138(key);
		init139(key);
		init140(key);
		init141(key);
		init142(key);
		init143(key);
		init144(key);
		init145(key);
		init146(key);
		init147(key);
		init148(key);
		init149(key);
		init150(key);
		init151(key);
		init152(key);
		init153(key);
		init154(key);
		init155(key);
		init156(key);
		init157(key);
		init158(key);
		init159(key);
		init160(key);
		init161(key);
		init162(key);
		init163(key);
		init164(key);
		init165(key);
		init166(key);
		init167(key);
		init168(key);
		init169(key);
		init170(key);
		init171(key);
		init172(key);
		init173(key);
		init174(key);
		init175(key);
		init176(key);
		init177(key);
		init178(key);
		init179(key);
		init180(key);
		init181(key);
		init182(key);
		init183(key);
		init184(key);
		init185(key);
		init186(key);
		init187(key);
		init188(key);
		init189(key);
		init190(key);
		init191(key);
		init192(key);
		init193(key);
		init194(key);
		init195(key);
		init196(key);
		init197(key);
		init198(key);
		init199(key);
		init200(key);
		init201(key);
		init202(key);
		init203(key);
		init204(key);
		init205(key);
		init206(key);
		init207(key);
		init208(key);
		init209(key);
		init210(key);
		init211(key);
		init212(key);
		init213(key);
		init214(key);
		init215(key);
		init216(key);
		init217(key);
		init218(key);
		init219(key);
		init220(key);
		init221(key);
		init222(key);
		init223(key);
		init224(key);
		init225(key);
		init226(key);
		init227(key);
		init228(key);
		init229(key);
		init230(key);
		init231(key);
		init232(key);
		init233(key);
		init234(key);
		init235(key);
		init236(key);
		init237(key);
		init238(key);
		init239(key);
		init240(key);
		init241(key);
		init242(key);
		init243(key);
		init244(key);
		init245(key);
		init246(key);
		init247(key);
		init248(key);
		init249(key);
		init250(key);
		init251(key);
		init252(key);
		init253(key);
		init254(key);
		init255(key);
		init256(key);
		init257(key);
		init258(key);
		init259(key);
		init260(key);
		init261(key);
		init262(key);
		init263(key);
		init264(key);
		init265(key);
		init266(key);
		init267(key);
		init268(key);
		init269(key);
		init270(key);
		init271(key);
		init272(key);
		init273(key);
		init274(key);
		init275(key);
		init276(key);
		init277(key);
		init278(key);
		init279(key);
		init280(key);
		init281(key);
		init282(key);
		init283(key);
		init284(key);
		init285(key);
		init286(key);
		init287(key);
		init288(key);
		init289(key);
		init290(key);
		init291(key);
		init292(key);
		init293(key);
		init294(key);
		init295(key);
		init296(key);
		init297(key);
		init298(key);
		init299(key);
		init300(key);
		init301(key);
		init302(key);
		init303(key);
		init304(key);
		init305(key);
		init306(key);
		init307(key);
		init308(key);
		init309(key);
		init310(key);
		init311(key);
		init312(key);
		init313(key);
		init314(key);
		init315(key);
		init316(key);
		init317(key);
		init318(key);
		init319(key);
		init320(key);
		init321(key);
		init322(key);
		init323(key);
		init324(key);
		init325(key);
		init326(key);
		init327(key);
		init328(key);
		init329(key);
		init330(key);
		init331(key);
		init332(key);
		init333(key);
		init334(key);
		init335(key);
		init336(key);
		init337(key);
		init338(key);
		init339(key);
		init340(key);
		init341(key);
		init342(key);
		init343(key);
		init344(key);
		init345(key);
		init346(key);
		init347(key);
		init348(key);
		init349(key);
		init350(key);
		init351(key);
		init352(key);
		init353(key);
		init354(key);
		init355(key);
		init356(key);
		init357(key);
		init358(key);
		init359(key);
		init360(key);
		init361(key);
		init362(key);
		init363(key);
		init364(key);
		init365(key);
		init366(key);
		init367(key);
		init368(key);
		init369(key);
		init370(key);
		init371(key);
		init372(key);
		init373(key);
		init374(key);
		init375(key);
		init376(key);
		init377(key);
		init378(key);
		init379(key);
		init380(key);
		init381(key);
		init382(key);
		init383(key);
		init384(key);
		init385(key);
		init386(key);
		init387(key);
		init388(key);
		init389(key);
		init390(key);
		init391(key);
		init392(key);
		init393(key);
		init394(key);
		init395(key);
		init396(key);
		init397(key);
		init398(key);
		init399(key);
		init400(key);
		init401(key);
		init402(key);
		return key;
	}

	private static void init0(int[] key) {
		int[] aFor = { 0x28d8667a, 0xb45e134c, 0x390ca70e, 0x1a19e8eb, 0x3983e221, 0x69d250ac, 0xd6185995, 0x5c4577dc, 0x192, 0x12c };
		System.arraycopy(aFor, 0, key, 0, aFor.length);
	}

	private static void init1(int[] key) {
		int[] aFor = { 0xeff2fb, 0x0, 0xeff2fb, 0x0, 0xeff2fb, 0x0, 0xeef2fb, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0 };
		System.arraycopy(aFor, 0, key, 10, aFor.length);
	}

	private static void init2(int[] key) {
		int[] aFor = { 0xeff2fb, 0x0, 0xeff2fb, 0x0, 0xeff2fb, 0x0, 0xeef2fb, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0 };
		System.arraycopy(aFor, 0, key, 310, aFor.length);
	}

	private static void init3(int[] key) {
		int[] aFor = { 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0 };
		System.arraycopy(aFor, 0, key, 610, aFor.length);
	}

	private static void init4(int[] key) {
		int[] aFor = { 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0 };
		System.arraycopy(aFor, 0, key, 910, aFor.length);
	}

	private static void init5(int[] key) {
		int[] aFor = { 0xeef3f7, 0x0, 0xeef3f7, 0x0, 0xeef3f7, 0x0, 0xeef3f7, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xecf3fb, 0x0, 0xecf3fb, 0x0, 0xeef2fb, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0 };
		System.arraycopy(aFor, 0, key, 1210, aFor.length);
	}

	private static void init6(int[] key) {
		int[] aFor = { 0xeef3f7, 0x0, 0xeef3f7, 0x0, 0xeef3f7, 0x0, 0xeef3f7, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xecf3fb, 0x0, 0xecf3fb, 0x0, 0xeef2fb, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0 };
		System.arraycopy(aFor, 0, key, 1510, aFor.length);
	}

	private static void init7(int[] key) {
		int[] aFor = { 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef2fb, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xecf3fb, 0x0, 0xecf3fb, 0x0, 0xeef2fb, 0x0, 0xeef2fb, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0 };
		System.arraycopy(aFor, 0, key, 1810, aFor.length);
	}

	private static void init8(int[] key) {
		int[] aFor = { 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef2fb, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9,
				0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0, 0xecf3fb, 0x0, 0xecf3fb, 0x0, 0xeef2fb, 0x0, 0xeef2fb, 0x0, 0xeef3f9, 0x0, 0xeef3f9, 0x0 };
		System.arraycopy(aFor, 0, key, 2110, aFor.length);
	}

	private static void init9(int[] key) {
		int[] aFor = { 0xeef2fb, 0x0, 0xeef2fb, 0x0, 0xeef2fb, 0x0, 0xeef2fb, 0x0, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeef3fc, 0x10107, 0xeef3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc,
				0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc,
				0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc,
				0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeff3fc, 0x10107, 0xeef2fb, 0x10107, 0xedf2fc, 0x10107, 0xeff3fc, 0x10107, 0xecf0fd, 0x10107, 0xeff2fe, 0x604, 0xeef5fd, 0x604, 0xeef5fd, 0x604 };
		System.arraycopy(aFor, 0, key, 2410, aFor.length);
	}

	private static void init10(int[] key) {
		int[] aFor = { 0xeef4ff, 0x604, 0xeef4ff, 0x604, 0xeef4ff, 0x30505, 0xeef4ff, 0x30505, 0xeef4ff, 0x30505, 0xeef4ff, 0x30505, 0xedf4ff, 0x30505, 0xedf4ff, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406,
				0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406,
				0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406,
				0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x406, 0xedf5fc, 0x60706, 0xebf6fc, 0x60706, 0xe8f5fd, 0x60706, 0xe8f4ff, 0x60706, 0xe8f4ff, 0x60706, 0xe8f4ff, 0x60706 };
		System.arraycopy(aFor, 0, key, 2710, aFor.length);
	}

	private static void init11(int[] key) {
		int[] aFor = { 0xe8f5fd, 0x60706, 0xe8f5fd, 0x60706, 0xebf6fc, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xebf7f1, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe,
				0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe,
				0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe,
				0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x60706, 0xe8f6fe, 0x50406, 0xebf7ff, 0x60507, 0xebf7ff, 0x60507, 0xe8f6fe, 0x70204, 0xe9f1fd, 0x70204, 0xe9f1fd, 0x70204, 0xe9f1fd, 0x70204 };
		System.arraycopy(aFor, 0, key, 3010, aFor.length);
	}

	private static void init12(int[] key) {
		int[] aFor = { 0xeaf3fe, 0x70204, 0xeaf3fe, 0x70106, 0xeaf0fc, 0x40305, 0xf4f0ff, 0x40305, 0xf4f0ff, 0x40307, 0xebf1fe, 0x1b0206, 0xebf1fe, 0x1b0206, 0xf4f0f1, 0x1b0206, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206,
				0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204,
				0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206,
				0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xebf1fe, 0x40309, 0xebf1f0, 0x40307, 0xebf1fe, 0x1b0206, 0xebf1fc, 0x1b0204, 0xeaf6ff, 0x50207, 0xebf1fe, 0x60306, 0xe8f0ff, 0x60306, 0xebf1fe, 0x60306, 0xe8f0ff, 0x60306, 0xe8f0ff, 0x60306 };
		System.arraycopy(aFor, 0, key, 3310, aFor.length);
	}

	private static void init13(int[] key) {
		int[] aFor = { 0xebf1fe, 0x60306, 0xeaf2f1, 0x70007, 0xe8f2fe, 0x190607, 0xeaf0fc, 0x1e0700, 0xeaf0fc, 0x190706, 0xedf2fc, 0x1e0604, 0xeaf3fd, 0x1e0604, 0xeaf3fd, 0x1e0604, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd,
				0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe,
				0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd,
				0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xeaf3fe, 0x1e0607, 0xeaf3fd, 0x1e0604, 0xebf0ff, 0x180705, 0xecf0f9, 0x180802, 0xeafdf8, 0x1a0e00, 0xf5fcf7, 0x1b0d01, 0xf6fff7, 0x1b0d01, 0xf5fef8, 0x1b0d01, 0xf5fef8, 0x1b0d01 };
		System.arraycopy(aFor, 0, key, 3610, aFor.length);
	}

	private static void init14(int[] key) {
		int[] aFor = { 0xf6fff9, 0x1b0d0f, 0xf6fff9, 0x180c0e, 0xe9f8f7, 0x1d0f0b, 0xebf6f5, 0x130a0a, 0xe4f1f4, 0x120b0f, 0xe4fcf4, 0x110a0c, 0xe7fdf5, 0x110502, 0xe6fdf8, 0x110502, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb,
				0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9,
				0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb,
				0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe7f2fb, 0x110502, 0xe7f2f9, 0x110500, 0xe6fdfc, 0x110506, 0xe7f2fd, 0x110504, 0xe6fdf8, 0x110502, 0xe6fdfe, 0x110502, 0xe6fefc, 0x110502, 0xe7ffff, 0x140805, 0xe5fcfc, 0xa0e0b, 0xe7fcfd, 0x90f0a, 0xe7fcf3, 0x90f0a, 0xe7fcf3, 0x90f0a };
		System.arraycopy(aFor, 0, key, 3910, aFor.length);
	}

	private static void init15(int[] key) {
		int[] aFor = { 0xe7fefc, 0x80d0a, 0xf9f8f2, 0xb0e0b, 0xfff6f0, 0x90c0d, 0xf1f0f2, 0x90c0f, 0xf3f7f2, 0xa0c08, 0xf2f5f3, 0xa0f0a, 0xf3f6f3, 0xa0f04, 0xf0f5fe, 0xa0f04, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd,
				0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff,
				0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd,
				0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf2f5fd, 0xa0f04, 0xf2f6ff, 0xa0c06, 0xf3f6fa, 0xb0c03, 0xf3f5f8, 0xb0f01, 0xf3f6fa, 0xa0d00, 0xf3f7fc, 0xa0d00, 0xf2f1fd, 0xa0d00, 0xf2f1ff, 0x50a01, 0xf1f2fa, 0x30403, 0xecf0fb, 0x2030c, 0xeff1f4, 0x1020d, 0xedf1f4, 0x1020d };
		System.arraycopy(aFor, 0, key, 4210, aFor.length);
	}

	private static void init16(int[] key) {
		int[] aFor = { 0xf0f0fb, 0x40e, 0xf5f2f4, 0xb0e, 0xf9f1f0, 0x10d0d, 0xfbf6f0, 0x10d0d, 0xfaf0f1, 0x10d0d, 0xfbf1f6, 0x10d0d, 0xfaf6f4, 0x10d0d, 0xfaf6f4, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c,
				0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c,
				0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c,
				0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf0f7, 0xc0c, 0xfaf7f1, 0x20b0c, 0xf8f0f1, 0x10d0f, 0xfbf6f0, 0xe0f0c, 0xfffaf4, 0x120802, 0xfcf9f4, 0x110b0c, 0xfff8f5, 0x130b0c };
		System.arraycopy(aFor, 0, key, 4510, aFor.length);
	}

	private static void init17(int[] key) {
		int[] aFor = { 0xe6fefb, 0x13090d, 0xebf1f7, 0x120a0d, 0xe9f1f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0,
				0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0,
				0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0,
				0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xeef0f0, 0x120c0c, 0xe9f7f7, 0x120a0b, 0xeef6f7, 0x150b0b, 0xe9f7f5, 0x100d09, 0xe6faf0, 0x160e07, 0xe6fff2, 0x80e04, 0xe7fcfd, 0x90f04 };
		System.arraycopy(aFor, 0, key, 4810, aFor.length);
	}

	private static void init18(int[] key) {
		int[] aFor = { 0xfef8f3, 0x6000b, 0xfff9f2, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5,
				0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5,
				0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5,
				0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xf8fef5, 0x40209, 0xfff9f2, 0x3050e, 0xfff9f2, 0x3050e, 0xf8fef5, 0x3050e, 0xf4fdf4, 0x803, 0xf1faf5, 0x803, 0xeef9fb, 0x803 };
		System.arraycopy(aFor, 0, key, 5110, aFor.length);
	}

	private static void init19(int[] key) {
		int[] aFor = { 0xfaf2f9, 0x10902, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9,
				0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9,
				0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9,
				0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x60e05, 0xfaf2f9, 0x10902, 0xfdf5fe, 0x10902, 0xf8f3fe, 0xf0b04, 0xfcfffc, 0xe0c0b, 0xe0fdf3, 0xd0d04 };
		System.arraycopy(aFor, 0, key, 5410, aFor.length);
	}

	private static void init20(int[] key) {
		int[] aFor = { 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xc0c05, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8,
				0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8,
				0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8,
				0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xd0d04, 0xf1f1f8, 0xa0a03, 0xf6f6ff, 0xa0a03, 0xf0f1fe, 0x90b02, 0xfcfdf8, 0xf0900, 0xe1f8f8, 0xc080f };
		System.arraycopy(aFor, 0, key, 5710, aFor.length);
	}

	private static void init21(int[] key) {
		int[] aFor = { 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3,
				0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3,
				0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3,
				0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xb0f08, 0xf7f3f4, 0xa0e09, 0xf1f2f7, 0x8080b, 0xfff0f7, 0xb050e, 0xe4f7f7, 0x90700 };
		System.arraycopy(aFor, 0, key, 6010, aFor.length);
	}

	private static void init22(int[] key) {
		int[] aFor = { 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc,
				0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc,
				0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc,
				0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0x90700, 0xf5fbfc, 0xe0007, 0xf2fcfb, 0xf0106, 0xf4fdf8, 0xd0704, 0xfafff8, 0xe0a01, 0xe1f8f8, 0xc080f };
		System.arraycopy(aFor, 0, key, 6310, aFor.length);
	}

	private static void init23(int[] key) {
		int[] aFor = { 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3,
				0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3,
				0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3,
				0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf0f4f3, 0xc080f, 0xf7f3f4, 0xb0f08, 0xf7f3f4, 0xb0f08, 0xf7f3f4, 0xb0f08, 0xf2f5f4, 0x50d0e, 0xf3faf5, 0xe0d, 0xeefff5, 0x30f02 };
		System.arraycopy(aFor, 0, key, 6610, aFor.length);
	}

	private static void init24(int[] key) {
		int[] aFor = { 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe,
				0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe,
				0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe,
				0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xfff3fe, 0x30f02, 0xf8f4f9, 0x40805, 0xf8f4f9, 0x40805, 0xf8f4f9, 0x40805, 0xfdf2f9, 0xb0500, 0xfef3fa, 0xc000d, 0xe2f1f5, 0xf0102 };
		System.arraycopy(aFor, 0, key, 6910, aFor.length);
	}

	private static void init25(int[] key) {
		int[] aFor = { 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0x80605, 0xf4faf9, 0x80605, 0xf3fdfe, 0xf0102, 0xf5faff, 0xc07, 0xf5fafd, 0x60e05, 0xe9fcfc, 0x70d04 };
		System.arraycopy(aFor, 0, key, 7210, aFor.length);
	}

	private static void init26(int[] key) {
		int[] aFor = { 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8,
				0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8,
				0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8,
				0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0xa03, 0xfcf6ff, 0xa03, 0xfbf1f8, 0x70d04, 0xfdf6f9, 0x80001, 0xfdf6fb, 0xe0203, 0xe1f0fa, 0xf0102 };
		System.arraycopy(aFor, 0, key, 7510, aFor.length);
	}

	private static void init27(int[] key) {
		int[] aFor = { 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0x80605, 0xf4faf9, 0x80605, 0xf3fdfe, 0xf0102, 0xf5faff, 0xc07, 0xf5fafd, 0x60e05, 0xe9fcfc, 0x70d04 };
		System.arraycopy(aFor, 0, key, 7810, aFor.length);
	}

	private static void init28(int[] key) {
		int[] aFor = { 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8,
				0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8,
				0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8,
				0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0xa03, 0xfcf6ff, 0xa03, 0xfbf1f8, 0x70d04, 0xfdf6f9, 0x80001, 0xfdf6fb, 0xe0203, 0xe1f0fa, 0xf0102 };
		System.arraycopy(aFor, 0, key, 8110, aFor.length);
	}

	private static void init29(int[] key) {
		int[] aFor = { 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0x80605, 0xf4faf9, 0x80605, 0xf3fdfe, 0xf0102, 0xf5faff, 0xc07, 0xf5fafd, 0x60e05, 0xe9fcfc, 0x70d04 };
		System.arraycopy(aFor, 0, key, 8410, aFor.length);
	}

	private static void init30(int[] key) {
		int[] aFor = { 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8,
				0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8,
				0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8,
				0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0xa03, 0xfcf6ff, 0xa03, 0xfbf1f8, 0x70d04, 0xfdf6f9, 0x80001, 0xfdf6fb, 0xe0203, 0xe1f0fa, 0xf0102 };
		System.arraycopy(aFor, 0, key, 8710, aFor.length);
	}

	private static void init31(int[] key) {
		int[] aFor = { 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0x80605, 0xf4faf9, 0x80605, 0xf3fdfe, 0xf0102, 0xf5faff, 0xc07, 0xf5fafd, 0x60e05, 0xe9fcfc, 0x70d04 };
		System.arraycopy(aFor, 0, key, 9010, aFor.length);
	}

	private static void init32(int[] key) {
		int[] aFor = { 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8,
				0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8,
				0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8,
				0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0x70d04, 0xfbf1f8, 0xa03, 0xfcf6ff, 0xa03, 0xfbf1f8, 0x70d04, 0xfdf6f9, 0x80001, 0xfdf6fb, 0xe0203, 0xe1f0fa, 0xf0102 };
		System.arraycopy(aFor, 0, key, 9310, aFor.length);
	}

	private static void init33(int[] key) {
		int[] aFor = { 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0x80605, 0xf4faf9, 0x80605, 0xf3fdf8, 0xe0007, 0xf5fbfa, 0x30d02, 0xf6fbf8, 0x50f00, 0xeafdf9, 0x40c01 };
		System.arraycopy(aFor, 0, key, 9610, aFor.length);
	}

	private static void init34(int[] key) {
		int[] aFor = { 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd,
				0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd,
				0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd,
				0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x40c01, 0xf8f0fd, 0x30b06, 0xfff7fa, 0x30b06, 0xf8f0fb, 0x50d04, 0xfef6f9, 0x80001, 0xfdf6fb, 0xe0203, 0xe1f0fa, 0xf0102 };
		System.arraycopy(aFor, 0, key, 9910, aFor.length);
	}

	private static void init35(int[] key) {
		int[] aFor = { 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0x80605, 0xf4faf9, 0x80605, 0xf3fdfe, 0xe0003, 0xf5fbfe, 0x30d06, 0xf6fbfc, 0x50f04, 0xeafdfd, 0x40c05 };
		System.arraycopy(aFor, 0, key, 10210, aFor.length);
	}

	private static void init36(int[] key) {
		int[] aFor = { 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9,
				0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9,
				0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9,
				0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x30b02, 0xfff7fe, 0x30b02, 0xf8f0f9, 0x50d04, 0xfef6f9, 0x80001, 0xfdf6fb, 0xe0203, 0xe1f0fa, 0xf0102 };
		System.arraycopy(aFor, 0, key, 10510, aFor.length);
	}

	private static void init37(int[] key) {
		int[] aFor = { 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0x80605, 0xf4faf9, 0x80605, 0xf3fdfe, 0xe0003, 0xf5fbfe, 0x30d06, 0xf6fbfc, 0x50f04, 0xeafdfd, 0x40c05 };
		System.arraycopy(aFor, 0, key, 10810, aFor.length);
	}

	private static void init38(int[] key) {
		int[] aFor = { 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9,
				0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9,
				0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9,
				0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x30b02, 0xfff7fe, 0x30b02, 0xf8f0f9, 0x50d04, 0xfef6f9, 0x80001, 0xfdf6fb, 0xe0203, 0xe1f0fa, 0xf0102 };
		System.arraycopy(aFor, 0, key, 11110, aFor.length);
	}

	private static void init39(int[] key) {
		int[] aFor = { 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0x80605, 0xf4faf9, 0x80605, 0xf3fdfe, 0xe0003, 0xf5fbfe, 0x30d06, 0xf6fbfc, 0x50f04, 0xeafdfd, 0x40c05 };
		System.arraycopy(aFor, 0, key, 11410, aFor.length);
	}

	private static void init40(int[] key) {
		int[] aFor = { 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9,
				0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9,
				0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9,
				0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x40c05, 0xf8f0f9, 0x30b02, 0xfff7fe, 0x30b02, 0xf8f0f9, 0x50d04, 0xfef6f9, 0x80001, 0xfdf6fb, 0xe0203, 0xe1f0fa, 0xf0102 };
		System.arraycopy(aFor, 0, key, 11710, aFor.length);
	}

	private static void init41(int[] key) {
		int[] aFor = { 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe, 0xf0102, 0xf3fdfe,
				0xf0102, 0xf3fdfe, 0xf0102, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf4faf9, 0x80605, 0xf5fbf8, 0x90704, 0xf5fbf8, 0x90704, 0xf5fbf8, 0x80605, 0xf3fdf8, 0x50b00, 0xf0fdfa, 0x30902, 0xecfbfb, 0x20a03 };
		System.arraycopy(aFor, 0, key, 12010, aFor.length);
	}

	private static void init42(int[] key) {
		int[] aFor = { 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff,
				0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff,
				0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff,
				0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xfef6ff, 0x20a03, 0xf9f1f8, 0x40c05, 0xfff7f8, 0x90100, 0xfcf7fa, 0xf0302, 0xe0f1fb, 0xe0003 };
		System.arraycopy(aFor, 0, key, 12310, aFor.length);
	}

	private static void init43(int[] key) {
		int[] aFor = { 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff,
				0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff,
				0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff,
				0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0x90704, 0xf5fbf8, 0x90704, 0xf2fcff, 0xf0102, 0xf4faff, 0x20c07, 0xf7fafd, 0x40e05, 0xebfcfc, 0x50d04 };
		System.arraycopy(aFor, 0, key, 12610, aFor.length);
	}

	private static void init44(int[] key) {
		int[] aFor = { 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8,
				0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8,
				0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8,
				0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x50d04, 0xf9f1f8, 0x40c05, 0xfff7f8, 0x90100, 0xfcf7fa, 0xf0302, 0xe0f1fb, 0xe0003 };
		System.arraycopy(aFor, 0, key, 12910, aFor.length);
	}

	private static void init45(int[] key) {
		int[] aFor = { 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff,
				0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff,
				0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff,
				0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xe0003, 0xf2fcff, 0xf0102, 0xf3fdfc, 0x50b04, 0xf0fdfe, 0x30906, 0xecfbff, 0x20a07 };
		System.arraycopy(aFor, 0, key, 13210, aFor.length);
	}

	private static void init46(int[] key) {
		int[] aFor = { 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb,
				0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xf9f1fc, 0x20a07, 0xf9f1fc, 0x50d00, 0xf9f1fc, 0x20a07, 0xf9f1fc, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd,
				0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd, 0x20a07, 0xf8f0fd,
				0x20a07, 0xf8f0fd, 0x20a07, 0xf9f1fc, 0x20a07, 0xf9f1fc, 0x20a07, 0xf9f1fc, 0x20a07, 0xf9f1fc, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x20a07, 0xfef6fb, 0x50d00, 0xf9f1fc, 0x50d00, 0xf9f1fc, 0x40c01, 0xf8f0ff, 0xe0607, 0xfbf0fd, 0x80405, 0xe7f6fc, 0x90704 };
		System.arraycopy(aFor, 0, key, 13510, aFor.length);
	}

	private static void init47(int[] key) {
		int[] aFor = { 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff,
				0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe,
				0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe, 0x90704, 0xf3fdfe,
				0x90704, 0xf3fdfe, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0x90704, 0xf2fcff, 0xf0102, 0xf4faff, 0x20c07, 0xf7fafd, 0x40e05, 0xebfcfc, 0x50d04 };
		System.arraycopy(aFor, 0, key, 13810, aFor.length);
	}

	private static void init48(int[] key) {
		int[] aFor = { 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7fe, 0x50d04, 0xfff7f8, 0x50d02, 0xfff7f8, 0x50d02, 0xfff7f8, 0x50d02, 0xfff7f8, 0x50d02, 0xfef4f8, 0x40e02, 0xfef4f8,
				0x40e02, 0xfef4f8, 0x40e02, 0xfef4f8, 0x40e02, 0xfef4f8, 0x40e02, 0xfff7f8, 0x40c03, 0xfff7f8, 0x40c03, 0xfff7f8, 0x40c03, 0xfff7f8, 0x50d02, 0xf8f0ff, 0x50d02, 0xf8f0ff, 0x50d02, 0xf8f0ff, 0x50d02, 0xf8f0ff, 0x50d02, 0xf8f0ff, 0x40e02, 0xf9f3ff, 0x40e02, 0xf9f3ff, 0x40e02, 0xf9f3ff, 0x40e02, 0xf9f3ff, 0x40e02, 0xf9f3ff, 0x40e02, 0xf9f3ff, 0x50d02, 0xf8f0ff, 0x40e02, 0xf9f3ff, 0x50d02, 0xf8f0ff, 0x40e02, 0xf9f3ff, 0x50d02, 0xf8f0ff, 0x50d02, 0xf8f0ff, 0x50d02, 0xf8f0ff, 0x50d02, 0xf8f0ff, 0x50d02, 0xf8f0fd, 0x40e00, 0xf9f3ff, 0x50e00, 0xf8f3ff, 0x40e00, 0xf9f3ff, 0x50e00, 0xf9f3ff, 0x50e00, 0xf9f3ff, 0x50d02, 0xf8f0fd, 0x40e00, 0xf9f3ff, 0x50d02, 0xf8f0fd, 0x40d02, 0xf9f0fd, 0x50d02, 0xf8f0fd, 0x40d02, 0xf9f0fd, 0x50d02, 0xf8f0fd, 0x40d02, 0xf9f0ff, 0x50e02, 0xf8f3ff,
				0x40d02, 0xf9f0ff, 0x50e02, 0xf9f3fd, 0x50e02, 0xf9f3fd, 0x50e02, 0xf9f3fd, 0x50e02, 0xf9f3fd, 0x50e02, 0xf9f3fd, 0x50e02, 0xf9f3fd, 0x50d00, 0xf9f0ff, 0x50e02, 0xf9f3fd, 0x50d00, 0xf9f0ff, 0x50e02, 0xf9f3fd, 0x50d00, 0xf9f0ff, 0x50e02, 0xf9f3fd, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f0ff, 0x50d00, 0xf9f3fd, 0x50d00, 0xf9f3fd,
				0x50e02, 0xf9f3fd, 0x50d00, 0xfef6fb, 0x50d00, 0xf9f7fb, 0x50d00, 0xf9f7fb, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf8f6fa, 0x20c00, 0xf9f7fb, 0x30d01, 0xf8f6fa, 0x30d01, 0xf9f7fb, 0x50b07, 0xfef0fa, 0xb050d, 0xfef3f7, 0xd070f, 0xe2f5f8, 0xc0400 };
		System.arraycopy(aFor, 0, key, 14110, aFor.length);
	}

	private static void init49(int[] key) {
		int[] aFor = { 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf7fdfa, 0xc0400, 0xf6fefa, 0xc0400, 0xf6fefa, 0xc0400, 0xf6fefa, 0xc0400, 0xf6fefa, 0xc0400, 0xf6fefa, 0xc0400, 0xf6fefa, 0xc0400, 0xf6fefa, 0xc0400, 0xf6fefa, 0xc0400, 0xf6fffd, 0xc0400, 0xf5fefc, 0xc0400, 0xf6fefc, 0xc0400, 0xf6fdfe, 0xc0702, 0xf7fcff, 0xd0603, 0xf6fff9, 0xd0603, 0xf6fcfb, 0xd0603, 0xf1fef4, 0xb0703, 0xf2fcfb,
				0xb0703, 0xf2fcfb, 0x80603, 0xf1fff4, 0xb0603, 0xf0fcfb, 0xb0603, 0xf5fcfa, 0x90703, 0xf5fcfa, 0x90703, 0xf5fbf9, 0x90703, 0xf4f8ff, 0xa0702, 0xf7faff, 0xa0702, 0xf4f9fc, 0xa0702, 0xf6fafd, 0xa0702, 0xf6fafd, 0xa0702, 0xf6fafd, 0xc0402, 0xf1fafd, 0xc0402, 0xf0f9fd, 0xc0402, 0xf0f9fd, 0xc0402, 0xf1fafd, 0xc0402, 0xf1fafd, 0xc0402, 0xf1fafd, 0xa0502, 0xf7fbfd, 0xc0402, 0xf1fafd, 0xa0502, 0xf7fbfd, 0xc0402, 0xf1fafd, 0xa0502, 0xf7fbfd, 0xa0502, 0xf7fbfd, 0xa0502, 0xf7fbfd, 0xa0502, 0xf7fbfd, 0xa0502, 0xf7fbfd, 0xc0402, 0xf0f9fd, 0xa0702, 0xf6fafd, 0xc0402, 0xf0f9fd, 0xa0702, 0xf0f9fd, 0xb0602, 0xf0f9fd, 0xb0602, 0xf6f8fd, 0xd0702, 0xf0f9fd, 0xb0602, 0xf6f8fd, 0xd0702, 0xf0f9fd, 0xb0602, 0xf6f8fd, 0xd0702, 0xf0f9fd, 0xb0602, 0xf6f8fd, 0xd0702, 0xf1fafd, 0xb0402, 0xf7f9fd,
				0xc0602, 0xf1f8fd, 0xa0702, 0xf1f8fd, 0xa0702, 0xf1f8fd, 0xb0602, 0xf1f8fd, 0xa0702, 0xf1f9fd, 0xa0702, 0xf0f8fd, 0x90602, 0xf2f9fd, 0x90602, 0xf2f9fd, 0x80702, 0xf3f8fd, 0x80702, 0xf3f8fd, 0x80702, 0xf3f8fd, 0x80702, 0xf2f8fd, 0x80702, 0xf2f8fd, 0x80702, 0xf2f8fd, 0x80702, 0xf2f9fd, 0x80702, 0xf2f9fd, 0x80702, 0xf2f9fd, 0x80702, 0xf2f9fd, 0x80702, 0xf2f9fd, 0x90602, 0xf2f9fd, 0x90602, 0xf3f8fd, 0x90602, 0xf2f9fd, 0x90602, 0xf3f9fd, 0x90602, 0xf3f9fd, 0x90602, 0xf3f9fd, 0x90602, 0xf3f9fd, 0x90602, 0xf0f8fd, 0x90602, 0xf3fbfd, 0x80502, 0xf3fafd, 0x80502, 0xf3fafd, 0x80502, 0xf3fafd, 0x80502, 0xf3fafd, 0x80502, 0xf3fafd, 0x80502, 0xf3fafd, 0x80502, 0xf3fafd, 0x80502, 0xf3fafd, 0x80502, 0xf3fafd, 0x80502, 0xf3fafd, 0x80402, 0xf2f9fd, 0xe0602, 0xf2f9ff, 0xb0705, 0xf0f8fa,
				0xa0705, 0xf0f8fa, 0xa0605, 0xf4f9fa, 0x90206, 0xf4fbfc, 0x80c07, 0xf5f5fd, 0xe0c07, 0xf7f5fe, 0xd0f04, 0xf7f5fe, 0xc0c04, 0xf7f5fe, 0xc0c04, 0xf7f5fe, 0xc0c04, 0xf7f5fe, 0xc0c04, 0xf7f5fe, 0xc0c04, 0xf7f5fe, 0xc0c04, 0xf7f5fe, 0xc0c04, 0xf7f5fe, 0xc0c04, 0xf7f5fe, 0xc0c04, 0xf7f5fe, 0xc0c04, 0xf7f5fe, 0xc0c04, 0xf7f5fe, 0xc0c04, 0xf7f5fe, 0xc0c04, 0xf7f5fe, 0xc0c04, 0xf7f5fe, 0xc0c04, 0xf7f5fe, 0xc0c04, 0xf6f6fe, 0xc0c04, 0xf6f6fe, 0xc0c04, 0xf6f6fe, 0xa0a02, 0xf0f0f8, 0x5050f, 0xf1f0f6, 0x30301, 0xedf2f7, 0x30301 };
		System.arraycopy(aFor, 0, key, 14410, aFor.length);
	}

	private static void init50(int[] key) {
		int[] aFor = { 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf8fafb, 0x30301, 0xf9f9fb, 0x30301, 0xf9f9fb, 0x30301, 0xf9f9fb, 0x30301, 0xf9f9fb, 0x30301, 0xf9f9fb, 0x30301, 0xf9f9fb, 0x30301, 0xf9f9fb, 0x30301, 0xf9f9fb, 0x30301, 0xf9f9fb, 0x307, 0xfaf9fb, 0x307, 0xfaf9fb, 0x307, 0xfafaf9, 0x5, 0xf9f9fe, 0x5, 0xfaf8fc, 0x10106, 0xfaf8fc, 0x60305, 0xfaf9fe, 0x60207, 0xfff9ff, 0x60207, 0xfff9ff,
				0x60008, 0xfcf9ff, 0x60008, 0xfaf8f1, 0x70109, 0xfaf8f3, 0x1020b, 0xfdf8f0, 0x7020a, 0xfdf8f0, 0x4030a, 0xfdf8f2, 0x50409, 0xfdf8f4, 0xb030a, 0xfcf8f4, 0x90209, 0xfcf8f7, 0xe020a, 0xfafbf7, 0x8010a, 0xfafbf7, 0xb000a, 0xf8fbf4, 0xa0109, 0xf8fbf4, 0x90208, 0xf8fbf4, 0xa0109, 0xf8fbf4, 0xa0109, 0xf8fbf4, 0x90208, 0xf8fbf4, 0x80108, 0xf9f8f4, 0x90208, 0xf9fbf6, 0x9010a, 0xf9f8f4, 0x90208, 0xf9fbf6, 0x9010a, 0xf9f8f4, 0x90208, 0xf8faf6, 0x90208, 0xf8faf6, 0x90208, 0xf9f5f5, 0x90208, 0xe6faf7, 0x90208, 0xf9fbf7, 0x90208, 0xf9fbf7, 0x90208, 0xf9fbf7, 0x90208, 0xe6fbf7, 0x160208, 0xf8f5f6, 0x160208, 0xf9f4f6, 0x170308, 0xf8f5f6, 0x160208, 0xf8f5f6, 0x160208, 0xf9faf7, 0x160208, 0xf9faf7, 0x160208, 0xf9faf7, 0x170d08, 0xf9faf7, 0x170d09, 0xf9faf5, 0x170d09, 0xf9faf5, 0x170d09,
				0xf9faf5, 0x14020b, 0xf9faf5, 0x14020b, 0xf9faf5, 0x150c0a, 0xf9faf5, 0x150c0a, 0xf9faf5, 0x130d0a, 0xf9faf5, 0x100c0b, 0xfbf9f5, 0x100c0b, 0xfbf9f5, 0x100c0b, 0xfbf9f5, 0x120f0b, 0xf9faf5, 0x100c0b, 0xfcfaf4, 0x150c0a, 0xfcfaf4, 0x150c0a, 0xfcfaf4, 0x150c0a, 0xfcfaf4, 0x150c0a, 0xfcfaf4, 0x150c0a, 0xfcfaf4, 0x150c0a, 0xfcfaf4, 0x150c0a, 0xfdf9f7, 0x150c0a, 0xfdf9f7, 0x150c0a, 0xfdf9f7, 0x150c0a, 0xf2f8f6, 0x150c0a, 0xf2f8f6, 0x1a0d0b, 0xfdf8f5, 0x1b0c08, 0xfdf8f5, 0x190d08, 0xfff9f5, 0x1c0d0b, 0xf9fef5, 0x1c0d0b, 0xf9fef5, 0x1c0d0b, 0xf9fef5, 0x1f0d09, 0xf9fef5, 0x1f0d09, 0xf9fef5, 0x1f0d09, 0xf9fef5, 0x1f0d09, 0xf8f9f4, 0x1f0d09, 0xf9fef5, 0x1f0d09, 0xf9fef5, 0x1f0d09, 0xf9fef5, 0x1f0d09, 0xfafff2, 0x1f0d09, 0xfafff2, 0x1f0d09, 0xfafff2, 0x1f0d09, 0xf7fcf6, 0x1f0e08,
				0xf7fdff, 0x140c0d, 0xf3f8f1, 0x17090b, 0xfdfdf6, 0xd0408, 0xf8fdf4, 0x50e, 0xfbfcf2, 0x6040e, 0xfbfdf4, 0x40e, 0xfafef4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf8fcf4, 0x3050e, 0xf9fff4, 0x3050e, 0xf9fff4, 0x3050e, 0xf9fff4, 0x50308, 0xfff9f2, 0xa0c07, 0xfef9fe, 0xc0a09, 0xe2fbff, 0xc0a09 };
		System.arraycopy(aFor, 0, key, 14710, aFor.length);
	}

	private static void init51(int[] key) {
		int[] aFor = { 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf6f0f3, 0xc0a09, 0xf6f0f3, 0xc0a09, 0xf6f0f3, 0xc0a09, 0xf6f0f3, 0xc0a09, 0xf6f0f3, 0xc0a09, 0xf6f0f3, 0xc0a09, 0xf6f0f3, 0xc0a09, 0xf6f0f3, 0xc0a09, 0xf6f0f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf7f3f3, 0xc0a09, 0xf0f0f4, 0xc0a0f, 0xf7f3f5, 0xc0a0f, 0xf6f0f3, 0xc0a0f, 0xf6f0f3, 0xc0a09, 0xf6f0f5, 0xc0a0f, 0xf6f0f5,
				0xc0a0f, 0xf7f1f4, 0xb0b0f, 0xf6f0f3, 0xb0b0f, 0xf5f7f0, 0xb0b0d, 0xf7f1f0, 0xb0d0c, 0xf6f0f3, 0xa0c0d, 0xf1f7f0, 0x90e0b, 0xfff9f2, 0xd0e08, 0xe0f6f4, 0x80108, 0xeff5f2, 0xb060a, 0xeff5f0, 0xe0709, 0xedf6f3, 0xd070a, 0xedf6f3, 0x32040a, 0xd2f5f3, 0x32040a, 0xedf4f2, 0x32040a, 0xedf4f2, 0x32040a, 0xedf4f0, 0x331b09, 0xedf4f0, 0x331b09, 0xedf4f0, 0x301b09, 0xedf5f1, 0x311b09, 0xedf5f3, 0x311b0b, 0xedf5f1, 0x361806, 0xedf5ff, 0x361808, 0xedf5f1, 0x361806, 0xedf3fe, 0x361806, 0xecf4fe, 0x361806, 0xeff3f1, 0x361806, 0xeff3ff, 0x361806, 0xeef2fe, 0x361806, 0xe1f2fe, 0x371b09, 0xe1f2f1, 0x371b06, 0xe1f2fe, 0x371b09, 0xe0f2fe, 0x371b09, 0xeff3fe, 0x381a09, 0xe0f2fe, 0x361a08, 0xe0f2fe, 0x361a08, 0xe3fcfe, 0x361a08, 0xe2fffd, 0x361a08, 0xe5fcfd, 0x371909, 0xe5fcfd, 0x371909,
				0xe7fffa, 0x37190b, 0xe7fffa, 0x281a0a, 0xe7fffa, 0x281a08, 0xe7fffa, 0x291908, 0xe4fcf9, 0x281f08, 0xe3fdf8, 0x291c17, 0xe3fdf8, 0x291c17, 0xe0fce7, 0x271d17, 0xeefde5, 0x271d17, 0xeefde5, 0x262214, 0xeefde5, 0x281d14, 0xe0c2e5, 0x272317, 0xeffce6, 0x291c17, 0xecc3e7, 0x291c17, 0xecc3e7, 0x291c17, 0xedc2f8, 0x291c17, 0xeac3fa, 0x291c17, 0xeac3fa, 0x291c17, 0xeac3fa, 0x291c17, 0xebc1f9, 0x291c17, 0xebc1f9, 0x291c17, 0xebc1f9, 0x2a1d14, 0xebc1f9, 0x2a1d14, 0xebc1f9, 0x2a1d14, 0x95c1fa, 0x291a17, 0x95c1fa, 0x2e1d17, 0x95c7fb, 0x2f1c15, 0x94c6fb, 0x2f1c15, 0x94c6fb, 0x2f1c15, 0x94c6fb, 0x291f15, 0x94c6fb, 0x291c17, 0x94c6fb, 0x2a1f17, 0x94c6fb, 0x2a1f17, 0x94c6fb, 0x291e10, 0x94c6fb, 0x291e10, 0x95c9fa, 0x291e10, 0x95c9fa, 0x291e10, 0x95c9fa, 0x291e10, 0x92c8f9, 0x291e10,
				0x95cbf9, 0x291e12, 0xe9cbe2, 0x541e0d, 0xe9c9e5, 0x521c03, 0xefcaef, 0x551a08, 0x93c2e4, 0x4a2412, 0xa3d6e9, 0x522013, 0xa9daec, 0x542113, 0xafd8e9, 0x55211e, 0xacd8e9, 0x562410, 0xadddea, 0x562410, 0xadddea, 0x562410, 0xadddea, 0x562410, 0xadddea, 0x562410, 0xadddea, 0x562410, 0xadddea, 0x562410, 0xadddea, 0x562410, 0xadddea, 0x562410, 0xadddea, 0x562410, 0xadddea, 0x562410, 0xadddea, 0x562410, 0xadddea, 0x562410, 0xadddea, 0x562410, 0xadddea, 0x562410, 0xadddea, 0x562410, 0xadddea, 0x562410, 0xaddfeb, 0x572511, 0xacdeea, 0x572511, 0xaddfeb, 0x512317, 0xabd9ed, 0x5e2c18, 0xaad9e1, 0x582a16, 0xb6dbe0, 0x582a16 };
		System.arraycopy(aFor, 0, key, 15010, aFor.length);
	}

	private static void init52(int[] key) {
		int[] aFor = { 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa3d3ec, 0x582a16, 0xa2d0ec, 0x582a16, 0xa2d0ec, 0x582a16, 0xa2d0ec, 0x582a16, 0xa2d0ec, 0x582a16, 0xa2d0ec, 0x582a16, 0xa2d0ec, 0x582a16, 0xa2d0ec, 0x582a16, 0xa2d0ec, 0x582a16, 0xa4d0ed, 0x582a16, 0xa4d0ed, 0x582a16, 0xa4d0ed, 0x582a16, 0xa4d0ed, 0x582a16, 0xa5d1ea, 0x582a16, 0xa4d0eb, 0x5e2a17, 0xa7d3ec,
				0x502b16, 0xa8d2ed, 0x512811, 0xabd2eb, 0x512811, 0xaad3ea, 0x562f14, 0xaad2eb, 0x562f14, 0xacd1eb, 0x572f14, 0xafd2eb, 0x5a2e14, 0xafd2eb, 0x5b2f14, 0xaad3eb, 0x442b14, 0xacdee9, 0x4e2d12, 0x94dfec, 0x402f10, 0x91c4e8, 0x5f2e1e, 0x91c4e6, 0x5d2d11, 0x96c5e9, 0x5c221e, 0x96c5e9, 0x5e2d1e, 0x96c5e9, 0x51221f, 0x96c5e9, 0x50231c, 0x96c5e9, 0x50231c, 0x95c7ea, 0x50231c, 0x95c7ea, 0x51241f, 0x95c7e8, 0x56251e, 0x95c7e8, 0x56251e, 0x94c6e8, 0x56251e, 0x97c4e8, 0x57241d, 0x97c4e8, 0x281b1c, 0x97c4e8, 0x281b1c, 0x97c5ef, 0x281b1c, 0x95c6e8, 0x281b1c, 0x95c6e8, 0x291a1b, 0x95c6e8, 0x2e1d1a, 0x92c1ef, 0x2e1d1a, 0x97c6ee, 0x2e1d1a, 0x96c7e9, 0x2e1d1a, 0x96c7e9, 0x211e1b, 0x96c7e9, 0x211e1b, 0x98c7e9, 0x2e1f18, 0x98c7e9, 0x2d1019, 0x99c6f6, 0x2a1119, 0x99c6e8, 0x2a1119, 0x98c7e9,
				0x2a1119, 0x9ac4f6, 0x2a1119, 0x85c5f7, 0x2a1119, 0x87c4f7, 0x2a121b, 0x87c7f5, 0x2b1318, 0x87c7f5, 0x2d1319, 0x87c7f5, 0x2d1318, 0x85c1f3, 0x201019, 0x86c0f0, 0x250f1a, 0x81c2f3, 0x200f1b, 0x81c2f3, 0x200f1b, 0x80c3f2, 0x200819, 0x80c3f2, 0x1f0918, 0x80c3f2, 0x1d091b, 0x83c0f2, 0x1d0b18, 0x83c2f1, 0x1e0818, 0x83c0f0, 0x1f0918, 0x83ceff, 0x180618, 0x84c1ff, 0x1f0918, 0x85cefe, 0x1c061a, 0x85c0f9, 0x1d071a, 0x84c1f9, 0x13071b, 0x84c1ff, 0x13071b, 0x84c1ff, 0x12041c, 0x84c1ff, 0x12041c, 0x87c7f8, 0x12031a, 0x87c0fe, 0x12031a, 0x82c2fb, 0x12031a, 0x9cc2fa, 0x12031a, 0x9fc3c5, 0x127c25, 0x9fc3c5, 0x127c25, 0x9fc2fa, 0x127c25, 0x9fc2fa, 0x127c25, 0x9dc1fa, 0x127c24, 0x9dc1fa, 0xd7c24, 0x9dc1fa, 0xd7c24, 0x9cc0fb, 0xc7b26, 0x9cc0f8, 0x137a24, 0x9cc0f9, 0x127922, 0x9dc3ff,
				0x127923, 0x9dc3fe, 0x137a25, 0x9dc3f9, 0x137a22, 0x83c2fe, 0xc7525, 0x9ec2c4, 0xf7424, 0x9ecdf8, 0xe7421, 0x9dc2ff, 0x116e2c, 0xb0d5f0, 0x71021f, 0xa8ebe7, 0x42181b, 0xbae3e4, 0x471f1b, 0xbde5e1, 0x451d17, 0xbce4e0, 0x40181a, 0xbae2e0, 0x411b1a, 0xbae2e0, 0x411b1a, 0xbae2e0, 0x411b1a, 0xbae2e0, 0x411b1a, 0xbae2e0, 0x411b1a, 0xbae2e0, 0x411b1a, 0xbae2e0, 0x411b1a, 0xbae2e0, 0x411b1a, 0xbae2e0, 0x411b1a, 0xbae2e0, 0x411b1a, 0xbae2e0, 0x411b1a, 0xbae2e0, 0x411b1a, 0xbae2e0, 0x411b1a, 0xbae2e0, 0x411b1a, 0xbae2e0, 0x411b1a, 0xbae2e0, 0x411b1a, 0xbae0e1, 0x401a1b, 0xbbe1e0, 0x401a1b, 0xbae0e1, 0x461c1d, 0xbce6e7, 0x491312, 0xbde6eb, 0x4c141d, 0xa2e5eb, 0x4c141d };
		System.arraycopy(aFor, 0, key, 15310, aFor.length);
	}

	private static void init53(int[] key) {
		int[] aFor = { 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb7efe6, 0x4c141d, 0xb0e8e1, 0x4c141d, 0xb0eee6, 0x4c141d, 0xb2eee6, 0x4c141d, 0xb2eee4, 0x4c141d, 0xb2eee4, 0x4e151d, 0xb2efe6, 0x48151c, 0xb2efe0,
				0x48141d, 0xb3e8e3, 0x4f151c, 0xb4e8e0, 0x4f151c, 0xb6e8e2, 0x41151f, 0xb2eee1, 0x5d141f, 0xb6ece1, 0x501b1f, 0xb5ece0, 0x6a191f, 0xb0e8e0, 0x65071e, 0xb6e9e1, 0x79051f, 0xb1e2e6, 0x70061e, 0xcde0e4, 0x7a041d, 0xcfdbe8, 0x7e051b, 0xced8ef, 0x61051b, 0xcfd9ef, 0x63051c, 0xc8dfe8, 0x62061b, 0xcadcee, 0x62061b, 0xc5dfef, 0x63071c, 0xc5dfef, 0x60081d, 0xc4ddee, 0x67091c, 0xc4ddee, 0x660e1f, 0xc7dced, 0x660e1f, 0xc6dfee, 0x660e1f, 0xf8dfef, 0x660e1f, 0xfbc1ef, 0x670f00, 0xfcc2ee, 0x670f00, 0xfdc3ed, 0x670f00, 0xfdc3ed, 0x640801, 0xfcc2ec, 0x6b0b00, 0xfcc2ec, 0x6b0b00, 0xffc2eb, 0x6c0a01, 0xffcded, 0x6c0a01, 0xfeccea, 0x6f0900, 0xfeccea, 0x6e0803, 0xe0cce9, 0x6e0803, 0xe2cce4, 0x680903, 0xe3caeb, 0x6a0903, 0xe2cbe4, 0x650a02, 0xe3cae4, 0x660b02, 0xe2cbe7, 0x617403, 0xe0cbe5,
				0x607500, 0x1ecbe4, 0x637607, 0x1fcae5, 0x637101, 0x19cae2, 0x617601, 0x19cde4, 0x6e7700, 0x18cee3, 0x6d7400, 0x19cde2, 0x6d7401, 0x1fc3e0, 0x707500, 0xc0df, 0x6c7300, 0x1c2de, 0x6a7000, 0xc1dd, 0x6a7000, 0x2dfdd, 0x6a7000, 0xddedc, 0x6b7307, 0xddedc, 0x697306, 0xcdfdc, 0x687206, 0xdd9da, 0x697506, 0xddfdd, 0x6e7406, 0xddddc, 0x6c7405, 0xedcdc, 0x6c7405, 0xdd3df, 0x6c7405, 0xed1dc, 0x6e7705, 0xfd3dd, 0x507605, 0xed2dd, 0x507605, 0xdd5d2, 0x517704, 0xdd5d2, 0x567407, 0xdd4d0, 0x577404, 0xdebd2, 0x574b06, 0xfd5d7, 0x574b06, 0xd6d6, 0x574b06, 0x1d7c9, 0x544c06, 0x1d7c9, 0x544c06, 0x2d5c8, 0x544c06, 0x2d5c8, 0x544c06, 0x3d4c8, 0x554c04, 0x3d4c8, 0x5b4304, 0xcd5cf, 0x5b4304, 0x3d6c8, 0x5b4303, 0xcd7c8, 0x5a4401, 0xcd7cb, 0x5a4402, 0xdd6c8, 0x5a4501, 0xcd4c8, 0x5a4600, 0xcd7c9,
				0x59460e, 0xec9c6, 0x59460e, 0xec9c6, 0x584701, 0xd6c7, 0x585902, 0xd3c7, 0x53537e, 0x21c5b8, 0x817b5a, 0x45a2b4, 0x994843, 0x6bb1bc, 0x904f43, 0x6bb4b8, 0x934c4e, 0x69b6b6, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x954a4c, 0x6eb1b7, 0x944b4d, 0x6fb0b6, 0x944b4d, 0x6eb1b7, 0x924d4b, 0x68b7b1, 0x9d4244, 0x69b7bd, 0x98454b, 0x76b4bd, 0x98454b };
		System.arraycopy(aFor, 0, key, 15610, aFor.length);
	}

	private static void init54(int[] key) {
		int[] aFor = { 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb0, 0x98454b, 0x63beb6, 0x98454b, 0x63beb6, 0x98474c, 0x63beb6, 0x9e474c, 0x63beb6, 0x9e474e, 0x62bfb9, 0x98464e, 0x63bfb4, 0x98444f, 0x63b8b1,
				0x99464e, 0x63b8b1, 0x9a464e, 0x62bbb1, 0x97464e, 0x66bdb3, 0x8d444f, 0x6eb0b4, 0xb24043, 0x66acb5, 0xa84042, 0x6ea7b4, 0xd04441, 0x6698b0, 0xc94141, 0x6296b1, 0xca4041, 0x6c93b1, 0xcc415c, 0x5193ad, 0xcb4242, 0x5c8cae, 0xc84144, 0x5b8dae, 0xcb4647, 0x448cad, 0xc94644, 0x458eae, 0xcc4647, 0x458eac, 0xc24946, 0x4a8eac, 0xcc4845, 0x4a8dad, 0xce494a, 0x4f88af, 0xce494a, 0x4e89ac, 0x313649, 0x4f88ad, 0x313649, 0x4c8baa, 0x303748, 0x4b8dab, 0x313648, 0x488caa, 0x3f3448, 0x4983a9, 0x3c3549, 0x488096, 0x3c3476, 0x4f87a9, 0x3d3577, 0x4d85ab, 0x3d3577, 0x4d85a9, 0x222a74, 0x4e85a8, 0x252b73, 0x4c87aa, 0x252b73, 0x4d81a9, 0x2a2870, 0x4c80a8, 0x29277f, 0x4a80a9, 0x29277f, 0x4980aa, 0x16287f, 0x488fab, 0x14297e, 0x4f8caa, 0x152879, 0x4c8bad, 0x1a297e, 0x49b6ae, 0x182961, 0x49b6b1,
				0x7287e, 0x4bb4b3, 0x1287f, 0x4bb4b1, 0x22f7c, 0x44b6b1, 0x2c7c, 0x43b5b0, 0x1227d, 0x40b4b1, 0x7f227a, 0x41b7b0, 0x7f227b, 0x43b1b2, 0x7a227a, 0x4db3bc, 0x7b3c7b, 0x4eb2bd, 0x7b3c7b, 0x4fb1be, 0x7c3d7a, 0x53b7b9, 0x7c3d7a, 0x52b4b8, 0x7f3c79, 0x53bbb9, 0x7f3c79, 0x53bbb9, 0x783d06, 0x52b9c6, 0x783d06, 0x51beb9, 0x793c07, 0x51beb9, 0x763f04, 0x51beb9, 0x773e07, 0x5041b9, 0x773e07, 0x5140b9, 0x743d05, 0x5140b8, 0x753c04, 0x5647bf, 0x743c02, 0x5645be, 0x763c05, 0x6944b9, 0x773302, 0x6944b9, 0x743203, 0x6944b9, 0x75310e, 0x6b47b8, 0x75310e, 0x6844bb, 0x74300f, 0x6f43bc, 0x753208, 0x6f43bc, 0x753208, 0x6e42bb, 0x753208, 0x6f5dba, 0x753208, 0x6e5cba, 0x743115, 0x685cba, 0x743115, 0x6f5bba, 0x743115, 0x6f5bba, 0x743115, 0x6f59bb, 0x753e16, 0x6f59bb, 0x753e16, 0x6e5bba, 0x753e16,
				0x6f5abd, 0x753e16, 0x6f5cbc, 0x753e16, 0x6f5cbc, 0x763d15, 0x6f5fb2, 0x773e17, 0x6c5cb3, 0x760317, 0x6f5ab4, 0x771422, 0x497885, 0x31e54c, 0x9f2daf, 0x52f242, 0xbf04bd, 0x45fb42, 0xbe06be, 0x47ff49, 0xbd05b1, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbd05b3, 0x46fe48, 0xbc04b2, 0x40f84e, 0xba02b4, 0x4ff741, 0xbb02b8, 0x4af04e, 0xa401b8, 0x4af04e };
		System.arraycopy(aFor, 0, key, 15910, aFor.length);
	}

	private static void init55(int[] key) {
		int[] aFor = { 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af04e, 0xb10bb5, 0x4af048, 0xb30ab6, 0x4af048, 0xb30ab6, 0x49f04a, 0xb30ab6, 0x48f34c, 0xb409b7, 0x48f34c, 0xb30ab6, 0x49f04c, 0xb30bb1, 0x4af64f, 0xbd0ab0,
				0x4ef14d, 0xa106b4, 0x48f24c, 0xad06b7, 0x72f44e, 0xa81ab9, 0x7af04d, 0xb317bf, 0x71f34f, 0xca13bf, 0x7ecc4f, 0xd515bf, 0x71c350, 0xed11be, 0x7ac150, 0xe90fbe, 0x7bc14e, 0xeb0dbe, 0x66c151, 0xed0bbc, 0x67c151, 0xef09ba, 0x69c150, 0xed07b9, 0x6cc251, 0xed07bb, 0x92c350, 0xef01bb, 0x94c250, 0xee00ba, 0x96c253, 0xef02b9, 0x98c250, 0xef7cb8, 0x9ac25f, 0xe97eb8, 0x9bc55e, 0xea7fbb, 0x9ac65f, 0xf57eba, 0x9bc95e, 0xf67fbd, 0x9ac95e, 0xf17cba, 0x9bc859, 0xf27bbb, 0x95ca59, 0xf37ab8, 0x96d558, 0xf27b87, 0x91d758, 0xf17b86, 0xafd15a, 0xf27881, 0xaed05b, 0xf27887, 0xa9df5c, 0xf07986, 0xa8dc5f, 0xf07986, 0xa8dc5f, 0xff7885, 0xa9db5c, 0xfd7a8b, 0xaeda5d, 0xfd7a8b, 0xafe55e, 0xe2788c, 0xafe55e, 0xe4798f, 0xaee25d, 0xe67b8d, 0xa0e242, 0xe5758d, 0xa7e243, 0xe57593, 0xa5e35c, 0x9a7692,
				0xa6e35f, 0x9d7791, 0xa4e35c, 0x9c7090, 0xa9e25b, 0x987291, 0xa9e25b, 0x996d92, 0xb7e358, 0x9a6e91, 0xb6e259, 0x9d699e, 0xb5e359, 0x936b9c, 0xb6ec58, 0x926a9b, 0xb6ec5e, 0x95699a, 0xb7ed59, 0x97699b, 0x88ea5a, 0x956a9b, 0x891559, 0x926b9b, 0x88165a, 0x916a9a, 0x88165a, 0x9e6de5, 0x88165a, 0x9c6fe7, 0x88165a, 0x9b6ee6, 0x89195d, 0x986fe7, 0x881a5e, 0x986fe5, 0x881a5e, 0x876ee4, 0x881a5c, 0x8669e5, 0x8b1b53, 0x876ae4, 0x8c1a52, 0x876ae4, 0x8e0553, 0x876be5, 0x8f0553, 0x8868e4, 0x8e0452, 0x8b6fe7, 0x8e0452, 0x8a6ee6, 0x890755, 0x8c6ee1, 0x880652, 0x8b61e0, 0x890751, 0x8862e1, 0x890750, 0x8963e0, 0x890750, 0x8965fe, 0x890750, 0x8966fe, 0x890653, 0x8966fe, 0x890653, 0x8959ff, 0x890654, 0x895afe, 0x890154, 0x895afe, 0x890154, 0x895bfd, 0x890154, 0x8958fd, 0x890055, 0x8957f2,
				0x890055, 0x8956f3, 0x890055, 0x8954f0, 0x890055, 0x8953f1, 0x890055, 0x8953f6, 0x890056, 0x8952c8, 0x891d56, 0x8954c8, 0x896a58, 0xa137c7, 0xc9a503, 0x6a65dd, 0xa2be37, 0x4e48c8, 0xb5b737, 0x4e4acb, 0xb7b33c, 0x4d49c6, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4d4bc7, 0xb6b03c, 0x4a4cc0, 0xb1b73b, 0x4a4cc0, 0xb1b73b, 0x4a4cc0, 0xb6b03c, 0x4c4ac6, 0xb9bf33, 0x4d4aca, 0xbcb83c, 0x5249ca, 0xbcb83c };
		System.arraycopy(aFor, 0, key, 16210, aFor.length);
	}

	private static void init56(int[] key) {
		int[] aFor = { 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4743c7, 0xbcb83c, 0x4641c2, 0xbcb83c, 0x4641c2, 0xbcbb3e, 0x4740c3, 0xbcbb3e, 0x4047c0, 0xbcbb3e, 0x4046c1, 0xb9bb3e, 0x4146c1, 0xb5b83e, 0x4543c1,
				0xadb63a, 0x725ac8, 0xa4bd27, 0x6e5cc8, 0xaabd39, 0x1460d6, 0xa3ba3b, 0x126dd1, 0xbeba3b, 0x196fd7, 0xbaba39, 0x256fc8, 0xb9ba3a, 0x2169c9, 0xb4bd3c, 0x206fcb, 0xb2bd3d, 0x236cca, 0xb3bc3c, 0x3d6ccf, 0xb3bc3c, 0x3f6ccf, 0xb4a33d, 0x3d6cce, 0xbaa13f, 0x3f6cca, 0xbaa13f, 0x3b6bcc, 0xbaa13f, 0xc56bcd, 0xbba23c, 0xc56bcf, 0xb8a33d, 0xc365cd, 0xb9a022, 0xc165d3, 0xb9a022, 0xce64d2, 0xb8a73d, 0xcc66d2, 0xbfa63c, 0xcd19d1, 0xbfa63c, 0xcf18d2, 0xbfa63c, 0xd01bd2, 0xbda03e, 0xd11ad5, 0xbba23c, 0xd214d6, 0xb5a33c, 0xd315d7, 0xb6a03d, 0xd214d4, 0xb1a73c, 0xd214d4, 0xb3a633, 0xec16d4, 0xb2b932, 0xef17d7, 0xb2b932, 0xee14d6, 0xb5b835, 0xec12d7, 0xb4bb36, 0xe313d6, 0xb4bb36, 0xe313d6, 0xb5b409, 0xe112d7, 0xb2b70a, 0xfd13d7, 0xb3b00b, 0xff12d6, 0xb4b30a, 0xfd11d4, 0xbab009, 0xfc10d5,
				0xbfb00e, 0xfe2ed5, 0xbeb30f, 0x802fd6, 0xbdb20f, 0x8728d9, 0xbfb30f, 0x882ad9, 0xbdbd0d, 0x8e2ade, 0xbcbc0c, 0x8d29df, 0xbcbc0c, 0x9228de, 0xbcbc0c, 0x912fdf, 0xbcbc0c, 0x902ede, 0xbbbf0f, 0x922edf, 0xbaa10e, 0x9d2fdf, 0xbba20d, 0x9e29de, 0xbaa30c, 0x992add, 0xbba20d, 0x9a2bdd, 0xbba20d, 0x9b2ac2, 0xbba20d, 0xa425c3, 0xbaa30e, 0xa726c2, 0xbba209, 0xa021c5, 0xbba20f, 0xa321c6, 0xb4a30e, 0xa321c6, 0xb5a001, 0xa020c7, 0xb45f02, 0xa721c4, 0xb45f02, 0xa524c7, 0xaa5f03, 0xa425c6, 0xa95c02, 0xa425c6, 0xa85d05, 0xa32ac7, 0xa95c06, 0xae29c6, 0xa95c04, 0xaf28c5, 0xaa5b05, 0xa92abb, 0xaa5b7b, 0xa82bc4, 0xaa5b7b, 0xaa35c6, 0xaa5b7b, 0xab37c5, 0xaa5b79, 0xab31c4, 0xaa5b7f, 0xab31c4, 0xab587e, 0xa930c4, 0xab577d, 0xa931c6, 0xab567f, 0xa930c4, 0xa8567c, 0xaa33c6, 0xa8567e, 0xab35c7,
				0xa95771, 0xaa36c9, 0xa8577c, 0xaa37cb, 0xab577f, 0xaa08c9, 0xaa577a, 0xa908c8, 0xaa6878, 0xa836c9, 0xa96d78, 0xab38c9, 0xaa7069, 0x8716c4, 0xe88c09, 0x4d48e8, 0x879504, 0x696dfb, 0x929204, 0x6a6eff, 0x929609, 0x686ef0, 0x93970a, 0x686cf1, 0x93970a, 0x686cf1, 0x93970a, 0x686cf1, 0x93970a, 0x686cf1, 0x93970a, 0x686cf1, 0x93970a, 0x686cf1, 0x93970a, 0x686cf1, 0x93970a, 0x686cf1, 0x93970a, 0x686cf1, 0x93970a, 0x686cf1, 0x93970a, 0x686cf1, 0x93970a, 0x686cf1, 0x93970a, 0x686cf1, 0x93970a, 0x686cf1, 0x93970a, 0x686cf1, 0x93970a, 0x686cf1, 0x93970a, 0x6f6bf6, 0x94900d, 0x6f6bf6, 0x94900d, 0x6f6bf6, 0x93970a, 0x696df0, 0x9c9805, 0x6f6cfd, 0x9e9e0b, 0x706ffd, 0x9e9e0b };
		System.arraycopy(aFor, 0, key, 16510, aFor.length);
	}

	private static void init57(int[] key) {
		int[] aFor = { 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6565f0, 0x9e9e0b, 0x6464f1, 0x9f9f0a, 0x6363f6, 0x9f9f0a, 0x6464f1, 0x9f9f0a, 0x6264f6, 0x999d0c, 0x6264f6, 0x999f0d, 0x6264f6, 0x989f0b, 0x6165f7, 0x969908, 0x6364f7, 0x929e08, 0x7966f7, 0x9f9108, 0x7f63f4,
				0xa88802, 0x656bf2, 0xa1b402, 0x166df0, 0xa6b502, 0xa60f3, 0xa2b41c, 0x467ec, 0xa6b303, 0x3961ec, 0xa5b01c, 0x3e62ed, 0xa5b61f, 0x3e65eb, 0xa6b61e, 0x3164ea, 0xa6b51c, 0x3065e9, 0xa5aa1d, 0x307bee, 0xa2aa1c, 0x327bed, 0xbdab1d, 0x337bef, 0xbeb41e, 0x347aed, 0xbdb71f, 0x3a7bec, 0xbcb01e, 0x387cea, 0xbbb719, 0x3a7ceb, 0xbab61a, 0x3a7ceb, 0x45b51b, 0x3b7df4, 0x46ba1a, 0x3d7ff6, 0x46ba1a, 0x3c79f6, 0x45bb1d, 0x3279f1, 0x44b81a, 0x3107f6, 0x45b91d, 0x3706f0, 0x46b81c, 0x3605f7, 0x59b91d, 0x3400f7, 0x58b81e, 0x330ff7, 0x59b71e, 0x3000f6, 0x58b611, 0x3000f6, 0x57b510, 0x3106f7, 0x53b412, 0x3205f6, 0x53b412, 0x3205f6, 0x52b515, 0xd1af1, 0x53b412, 0xe19f0, 0x52b511, 0xc1ef0, 0x51b410, 0xb1df1, 0x53ba2e, 0x412f1, 0x53ba2e, 0x71cf0, 0x55b82c, 0x51df2, 0x4bb92f, 0x71bf2, 0x4eb92e,
				0x618f3, 0x41b92e, 0x719f2, 0x43b82e, 0x226f7, 0x42b92e, 0x7d27f6, 0x40bb20, 0x7b20f5, 0x41ba21, 0x7823f4, 0x4fb427, 0x782ef2, 0x4eb726, 0x7b20f2, 0x4fb621, 0x7c21f2, 0x4eb720, 0x7f22f1, 0x4eb722, 0x6225f0, 0x49b423, 0x6324f1, 0x49b423, 0x6324f1, 0x4aab20, 0x6225f0, 0x45a83f, 0x6323f0, 0x45a83f, 0x6022f1, 0x44ab3c, 0x6723f0, 0x45a43b, 0x6723f0, 0x45a43b, 0x6523f1, 0x45a438, 0x5a22f1, 0x44a739, 0x5822fe, 0x43a638, 0x5925ff, 0x40a739, 0x5926f1, 0x41a636, 0x57d8f1, 0x44a637, 0x56dbf2, 0x44a637, 0x54dcf3, 0x5aa630, 0x51dcf2, 0x5ba636, 0x52dff5, 0x5aa737, 0x5cdff6, 0x59a934, 0x5ddcf5, 0x5ea835, 0x5fda8b, 0x5ea835, 0x5cd9f5, 0x5eab4b, 0x5cda8b, 0x5dab36, 0x5cc48a, 0x5caa31, 0x5cc48a, 0x5da830, 0x5cc48c, 0x5da836, 0x5dc38d, 0x5da834, 0x5cc28f, 0x5ca837, 0x5dcf8e, 0x5ca739,
				0x5ec080, 0x5fa636, 0x5ec08e, 0x5ea53b, 0x5fc18c, 0x5ea539, 0x5cc68b, 0x5ea53f, 0x5ec689, 0x5fa73e, 0x5bfc86, 0x5fb221, 0x6ed995, 0x1a4647, 0xb68ca1, 0x666e51, 0x8896ae, 0x726951, 0x8995af, 0x716d57, 0x889aaf, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x756153, 0x8e9aa8, 0x746052, 0x8f9ba9, 0x746052, 0x8e9aa8, 0x726654, 0x889cae, 0x7d695b, 0x899ca2, 0x786e54, 0x969fa2, 0x786e54 };
		System.arraycopy(aFor, 0, key, 16810, aFor.length);
	}

	private static void init58(int[] key) {
		int[] aFor = { 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786e54, 0x8395af, 0x786c55, 0x8595ad, 0x786c55, 0x8497ac, 0x796c50, 0x8590ac, 0x7c6d52, 0x8891ad, 0x796b52, 0x909dac, 0x726e51, 0xa981ab, 0x7a6b53, 0xb68cab,
				0x756e5f, 0xc8b2af, 0x7f695c, 0xd0b1aa, 0x7a6652, 0xddb3a4, 0x796651, 0xdab3a7, 0x786752, 0xe7b3a6, 0x7a6755, 0xe7b3a6, 0x7a6552, 0xe7b1a1, 0x7b6253, 0xe0b3a0, 0x7b6253, 0xe1b2a1, 0x787d50, 0xeeaca1, 0x7a7d51, 0xe9adbe, 0x796250, 0xe9ada0, 0x67624f, 0xeaafbf, 0x61624f, 0xeba9be, 0x63654f, 0xe4aebf, 0x61644e, 0xe5adbe, 0x666551, 0xe5adbe, 0x656550, 0xe4a3bd, 0x9a6551, 0xe5a1ba, 0x996550, 0xe2a6b9, 0x986453, 0xe1a5ba, 0x966553, 0xe0dabb, 0x966551, 0xe3dbb8, 0x906550, 0xe2d9b9, 0x936251, 0xfcdbb7, 0x926350, 0xfcdbb7, 0x976351, 0xfdd5b6, 0x976253, 0xfed7b5, 0x976253, 0xf0d1b7, 0x956254, 0xf1d0b7, 0x956254, 0xf6d3b6, 0x946357, 0xf5ccb7, 0x956268, 0xcace88, 0x956268, 0xcbc9b7, 0x966369, 0xcacab4, 0x91626a, 0xc9cab7, 0x91626a, 0xc4c4b1, 0x96616a, 0xd9c5b0, 0x96616b, 0xdbc5b1,
				0x97676a, 0xdec5b0, 0x966469, 0xd1c4b3, 0x94646a, 0xd7fabd, 0x96646a, 0xd6f9bc, 0xe86268, 0xd4f9bb, 0xe86268, 0xd2fbbb, 0xeb6369, 0xd2faba, 0xea6268, 0xddf5bb, 0xeb6369, 0xdff4bb, 0xec626a, 0xdef7ba, 0xef646a, 0xc1f6ba, 0xec6775, 0xc0f7bb, 0xeb7876, 0xc0f7bb, 0xeb7876, 0xc1f6ba, 0xe87b71, 0xc0f0bd, 0xe87b71, 0xcff1ba, 0xe97870, 0xccf0b9, 0xe87771, 0xccf0b9, 0xe87771, 0xcbf1b6, 0xe87771, 0xcaf2b9, 0xd5777e, 0xcbf3b8, 0xd6707d, 0xcaf1b8, 0xd1717c, 0xcaf1ba, 0xd3717f, 0xc40cba, 0xd2707e, 0xc70bbd, 0xd3777e, 0xc00ebd, 0xcf747f, 0xc30fbd, 0xca747c, 0xc30dbd, 0xc4747d, 0xc20cc2, 0xc1747c, 0xc502c3, 0xc4777d, 0xc504c1, 0xc4777d, 0xc505c3, 0xc4767f, 0xc407c2, 0xc47579, 0xc405c3, 0xc46a7a, 0xc405c3, 0xc46a7a, 0xc407c0, 0xc46a78, 0xc406c1, 0xc46a76, 0xc401cf, 0xc46a79, 0xc403ce,
				0xc46a7b, 0xc502cc, 0xc56578, 0xc502ce, 0xc5647d, 0xc501c8, 0xc5647b, 0xc401c8, 0xc4657a, 0xc401cc, 0xc4637b, 0xc73fc3, 0xc36f65, 0xf700d0, 0x8da406, 0x3f69ee, 0xec8a1e, 0x372e1, 0xf98d1e, 0x271e0, 0xfa8918, 0x17ee0, 0xfc851c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfb841c, 0x7fe7, 0xfa851d, 0x17ee6, 0xfa851d, 0x7fe7, 0xfc831b, 0x679e1, 0xf38c14, 0x779ed, 0xf68b1b, 0x187aed, 0xf68b1b };
		System.arraycopy(aFor, 0, key, 17110, aFor.length);
	}

	private static void init59(int[] key) {
		int[] aFor = { 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf68b1b, 0xd70e0, 0xf78a1a, 0xd70e0, 0xf18b19, 0xf72ef, 0xf08819, 0xf73e1, 0xf48818, 0xe73e5, 0xfa8f1a, 0x1476e5, 0xf08318, 0x2b6ce2, 0xfb8615, 0x3c62e3, 0x818217, 0x365fe3, 0x868511, 0x285de0, 0x838413, 0x2a5ce5,
				0x8d841d, 0x2b53ea, 0x8e8b1d, 0x2b53ea, 0x8e8b1d, 0x2c5ceb, 0x8d8a1e, 0x2d5fea, 0x8d881f, 0x2d5deb, 0xb28918, 0x2c5aea, 0xb28918, 0x2f5be9, 0xb58a06, 0x2c58e9, 0xba8906, 0x2f59e8, 0xbc8905, 0x2e46eb, 0xa18804, 0x2f45f4, 0xa3891b, 0x2842f4, 0xa28e1b, 0x2b45f5, 0xad8f1a, 0x2846f4, 0xad8f1a, 0x2947f7, 0xaa8e1a, 0x2848f1, 0xa88e1b, 0x284af2, 0x568e1a, 0x2b4dfd, 0x578c15, 0x2c4cf2, 0x548c1a, 0x2c4cf2, 0x5bf21a, 0x2d4ffd, 0x59f21b, 0x2d4ff3, 0x5ff415, 0x2e4ef0, 0x41f716, 0x2f4ff3, 0x42f817, 0x2e4ef2, 0x42f811, 0x2e4ef4, 0x45fb10, 0x2c48f2, 0x4afb13, 0x2c49f0, 0x49f812, 0x2c49f0, 0x48f911, 0x2b56f1, 0x49f82e, 0x2855f1, 0x77f82f, 0x2954f2, 0x77f82f, 0x2a53f3, 0x73fa2f, 0x2a53f3, 0x72fb28, 0x2453f2, 0x77f528, 0x3850f0, 0x77f42a, 0x3a50f3, 0x77f429, 0x3d50f0, 0x74f328, 0x3353f0,
				0x76f327, 0x326cff, 0x70f327, 0x306eff, 0xef529, 0x336ffc, 0xef529, 0x356ffd, 0xff62e, 0x356cf8, 0xcf52d, 0x346df9, 0x3fa2a, 0x376cf9, 0x4f92b, 0x366dfa, 0x7fe2a, 0x286de4, 0x6ff29, 0x2a6fe5, 0x6ff29, 0x2a6fe5, 0x1e02e, 0x2b6ee4, 0x2e32d, 0x2a6fe7, 0x2e32d, 0x2568e4, 0x3e22c, 0x266beb, 0x2e32d, 0x206beb, 0x4ec23, 0x206ae4, 0x4ec23, 0x2768eb, 0x6ec2c, 0x266fea, 0x39ed2f, 0x276cea, 0x39ed2f, 0x2492e9, 0x3eed2c, 0x2793ea, 0x3fee2f, 0x2995ec, 0x3def2e, 0x2896ea, 0x3aec29, 0x3496eb, 0x3fea2b, 0x3490ea, 0x3ce955, 0x3b91eb, 0x3ee656, 0x3a92ea, 0x39e756, 0x3b95ec, 0x39e756, 0x3b95ea, 0x39e750, 0x3896eb, 0x38e653, 0x3896eb, 0x38f95c, 0x3896eb, 0x38f95c, 0x3894e4, 0x38fa52, 0x3896e5, 0x38fb50, 0x3897e7, 0x38fc53, 0x3895e6, 0x38fc55, 0x3994e0, 0x39f352, 0x3994e6, 0x39f257, 0x3997e4,
				0x39f155, 0x3894e4, 0x38f054, 0x3895e0, 0x38f655, 0x3babe0, 0x3ef944, 0x78af7, 0x852120, 0x3ef5ca, 0xe7123a, 0x16ebc6, 0xec1539, 0x16e9c2, 0xee113a, 0x15e6c2, 0xe81d3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xef1c3e, 0x14e7c5, 0xee1d3f, 0x15e6c4, 0xee1d3f, 0x14e7c5, 0xe81b39, 0x12e1c3, 0xe71436, 0x13e1cf, 0xe21339, 0xce2cf, 0xe21339 };
		System.arraycopy(aFor, 0, key, 17410, aFor.length);
	}

	private static void init60(int[] key) {
		int[] aFor = { 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe21339, 0x19e8c2, 0xe31238, 0x19e8c2, 0xe31238, 0x18e9c3, 0xe41539, 0x1aefce, 0xe41237, 0x18eecd, 0xec1634, 0x2e0cd, 0xe51437, 0x3bfbc0, 0xef1137, 0x23f9c1, 0xe01d36, 0x5ac3c2, 0xee1f37, 0x40c5c2,
				0xeb1f34, 0x43c6c3, 0xea1c3b, 0x43c6c3, 0xea1c3b, 0x43c6c3, 0xeb1d3b, 0x4cc7cc, 0xea1e3a, 0x4fc6cf, 0xed1e3b, 0x4cc9c8, 0xee113c, 0x4ec9cf, 0xd01f3e, 0x4dcace, 0xd01e3c, 0x4ccdcd, 0xd61e3d, 0x4fcccd, 0xd91d22, 0x4ccdcc, 0xdf1d23, 0x4ccdcc, 0xdc023c, 0x53cccd, 0xde013c, 0x52cdcc, 0xd80123, 0x52cad2, 0xd50122, 0x5dc8cd, 0xd80123, 0x5cc9cc, 0xd80121, 0x5bc6cd, 0xda0126, 0x5bc4ca, 0x240021, 0x5ac3cb, 0x210022, 0x5dc1c8, 0x240021, 0x5cc0c9, 0x2b0020, 0x5cbec8, 0x29002f, 0x5dbdc7, 0x2f0020, 0x5ebac5, 0x2e0022, 0x41b9c4, 0x2d0021, 0x40b7c7, 0x2b0f23, 0x47b9c6, 0x2e0f22, 0x44bbc1, 0x220820, 0x44bac3, 0x210920, 0x44b8c2, 0x270923, 0x44a6c2, 0x25091d, 0x44a4c2, 0x240a1d, 0x7ba7c3, 0x250b1e, 0x78a0c2, 0x220a1f, 0x7ba3c3, 0x220a1f, 0x75a3c4, 0x21041f, 0x73a1c6, 0x23041d, 0x6ca0c7,
				0x21041d, 0x6da7c4, 0x26051c, 0x6ca4cb, 0x2b0413, 0x6ea4c4, 0x2c3b1c, 0x6fa5cb, 0x50391e, 0x10a3c8, 0x2e381e, 0x13a2cb, 0x293b18, 0x12a1cc, 0x283b1a, 0x10a3ce, 0x27341d, 0x11a2cf, 0x22341e, 0x10a0cf, 0x213400, 0x10a0cf, 0x3f3301, 0x11a2cd, 0x3c3301, 0x12a3cc, 0x3e3300, 0x12bdcb, 0x383301, 0x11b8c9, 0x393403, 0x11beca, 0x373402, 0x11bcc5, 0x353403, 0x11bcc5, 0x353b0d, 0x11bdca, 0x353b0d, 0x16becb, 0x373a0c, 0x16b8ca, 0x93a0f, 0x16b8c9, 0x8390c, 0x15b9c8, 0xe390e, 0x1446cb, 0xc3b08, 0x1b47cc, 0xf3d0e, 0x1a47cc, 0x93c0e, 0x1947cf, 0x153c0f, 0x1e46b0, 0x143f70, 0x1c48ce, 0x1a3f73, 0x1e4ac8, 0x1a3e74, 0x194dcf, 0x1a3e74, 0x184cc8, 0x1a3e72, 0x1b4fc9, 0x1b3f71, 0x1b4fcb, 0x1b207c, 0x1b4ec5, 0x1b2172, 0x1b4fcb, 0x1b217d, 0x1b4cc5, 0x1b2170, 0x1b4dc7, 0x1b2172, 0x1b4bc4, 0x1b2170,
				0x1a49c5, 0x1b2176, 0x1b46c2, 0x1b2170, 0x1b44c3, 0x1a2172, 0x1945c3, 0x192173, 0x1944c1, 0x192772, 0x1b7bc0, 0x1e2a5f, 0x205cec, 0xabee37, 0x6e32d9, 0xb0d928, 0x4420d4, 0xb8dd2b, 0x4421d7, 0xbdd82e, 0x4120d7, 0xbcdb2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbbda2b, 0x4021d0, 0xbadb2a, 0x4120d1, 0xbadb2a, 0x4021d0, 0xbcdd2c, 0x4627d6, 0xb3d223, 0x4727da, 0xb6d52c, 0x5824da, 0xb6d52c };
		System.arraycopy(aFor, 0, key, 17710, aFor.length);
	}

	private static void init61(int[] key) {
		int[] aFor = { 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4d2ed7, 0xb6d52c, 0x4c2fd6, 0xb6d52c, 0x4f2cd5, 0xb6d52c, 0x4f2cd5, 0xb5d62f, 0x492ad3, 0xb5d42e, 0x4e29d2, 0xb6d72c, 0x472ed0, 0xa0dc26, 0x7d30d5, 0xa8d927, 0x653cd6, 0xa6dc26, 0x1b3cd5, 0xa2e321, 0x163dd7, 0xa7e02f, 0x83ed5,
				0xa4e32e, 0xf3fd4, 0xa4e32e, 0xe3fdb, 0xa2e328, 0x938da, 0xa0e328, 0x839db, 0xade02a, 0x937d8, 0xa8e029, 0xa38dd, 0xabe129, 0x3439dc, 0xa9ef2f, 0x3339dd, 0xa9ec2e, 0x3139dc, 0xa6ed2d, 0x3139de, 0xa7ea2c, 0x3238dd, 0xa0e92f, 0x3139dc, 0xbef62f, 0x3038dd, 0xbcf52e, 0x3739dc, 0xbef42e, 0x3638dd, 0xb0f32f, 0x3639de, 0xb2f02e, 0x3639dc, 0xb5f133, 0x3736dd, 0xb7fe33, 0x3638dc, 0x48fe32, 0x343ade, 0x4efe35, 0x343fde, 0x4dfd35, 0x353cdf, 0x43fd34, 0x3542de, 0x41fd37, 0x3240dd, 0x42fd34, 0x3346dc, 0x5dfd35, 0x3047dd, 0x5bfe3a, 0x3746d3, 0x5dfe35, 0x3649dd, 0x5ffe3a, 0x374adf, 0x51fe3b, 0x344ddf, 0x57fe3b, 0x334cd8, 0x52fd3a, 0x3052d9, 0x6ffd39, 0xf50d8, 0x6ffd39, 0x3051d9, 0x50fd39, 0xf56e6, 0x53ff39, 0xf56e6, 0x55fc39, 0xd54e4, 0x58f239, 0xd54e4, 0x59f139, 0xb52e2, 0x5bf03e,
				0x1451e5, 0x58f03f, 0x1451e5, 0x5ff13c, 0x1851e4, 0x5df133, 0x196ce6, 0x58f035, 0x196ae1, 0x58f634, 0x186de0, 0x25f733, 0x186de0, 0x23f734, 0x196ee7, 0x21f936, 0x196ee7, 0x2ff837, 0x1a6de6, 0x2ef936, 0x1d6ae6, 0x2df829, 0x1c69e7, 0x32f92a, 0x276e5, 0x2ce62a, 0x26be7, 0x29e62b, 0x26ce1, 0x2be72d, 0x16ee6, 0x29e42d, 0x6ce7, 0x26e42e, 0x363e6, 0x27e42e, 0x263e6, 0x21e423, 0x263e6, 0x22e520, 0x361e5, 0x1de521, 0x66e4, 0x1de521, 0x664e2, 0x1ce526, 0x565e5, 0x1d1a27, 0xb67e5, 0x1f1a24, 0xa66e5, 0x1e1a26, 0xe61e7, 0x11a24, 0xf60e6, 0x51927, 0xc61e7, 0xb1759, 0xd62e4, 0x8115a, 0xb62e7, 0x8115a, 0xb62e5, 0x91059, 0x861e4, 0x9105f, 0x960e3, 0x91059, 0x87fe5, 0x8115c, 0xa7ce7, 0xb115f, 0xa7de5, 0xa1152, 0xb7aeb, 0xa115c, 0xa7be4, 0xa1152, 0xb79e5, 0xa1150, 0xa76e6, 0xa1152, 0xa74e7,
				0xb1154, 0x875e5, 0xa1655, 0xa70e6, 0xa1355, 0xb4ffa, 0xe1e67, 0x4c67d5, 0xdfde0b, 0x103bf8, 0xf6d40c, 0x32ef1, 0xffd30e, 0x32ff2, 0xf9d508, 0x52dff, 0xf9d606, 0x52cfd, 0xfed706, 0x52cfd, 0xfed706, 0x52cfd, 0xfed706, 0x52cfd, 0xfed706, 0x52cfd, 0xfed706, 0x52cfd, 0xfed706, 0x52cfd, 0xfed706, 0x52cfd, 0xfed706, 0x52cfd, 0xfed706, 0x52cfd, 0xfed706, 0x52cfd, 0xfed706, 0x52cfd, 0xfed706, 0x52cfd, 0xfed706, 0x52cfd, 0xfed706, 0x52cfd, 0xfed706, 0x52cfd, 0xfed706, 0x52cfd, 0xffd607, 0x42dfc, 0xffd607, 0x52cfd, 0xf9d001, 0x32afb, 0xf6df0e, 0x22af7, 0xf3d801, 0x1d29f7, 0xf3d801 };
		System.arraycopy(aFor, 0, key, 18010, aFor.length);
	}

	private static void init62(int[] key) {
		int[] aFor = { 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x823fa, 0xf3d801, 0x922fb, 0xf3d801, 0xa21f8, 0xf3d801, 0x922fb, 0xf2d900, 0x922fb, 0xf1de06, 0x222f9, 0xefd806, 0xc2cfa, 0xd5c70f, 0x1a22fd, 0xddc10c, 0x1d1efd, 0xa4c00d, 0x101dfe, 0xa3c00b, 0x121dfd, 0xa3c204, 0x1222f8, 0xa2fd03, 0xc20fa, 0xa2fd03, 0xf20f7,
				0xa3fc05, 0x827f7, 0xa3fc05, 0xb26f6, 0xa3fc05, 0x425f7, 0xa1fd04, 0x325f0, 0xa2fc04, 0x22bf1, 0x9ffd02, 0x528f1, 0x9ffd02, 0x728f6, 0x90fc05, 0x728f6, 0x90fb03, 0x52af0, 0x97fb02, 0x52af6, 0x95fa02, 0x1b34f0, 0x96fa04, 0x1d36f6, 0x94fb04, 0x1c37f7, 0x9bfb04, 0x1c30f6, 0x99fa07, 0x1c33f7, 0x98fa07, 0x1b32f6, 0x9afb07, 0x183cf7, 0x66f918, 0x1b3df6, 0x61fe1a, 0x1a3cf6, 0x63fe1b, 0x1a3cf6, 0x6dfe1a, 0x1b3ff1, 0x6e801d, 0x1a3ef6, 0x6b801c, 0x193cf5, 0x76801f, 0x183bf6, 0x74811e, 0x1839f7, 0x73801e, 0x1837f6, 0x718011, 0x1835f7, 0x7e8112, 0x1b32f6, 0x788112, 0x1c33f1, 0x7e8112, 0x1c2ef1, 0x438111, 0x222ff3, 0x428212, 0x222ff3, 0x428212, 0x1d29cd, 0x408313, 0x1d29f3, 0x468213, 0x1f2bcd, 0x488d13, 0x1f2bcd, 0x4a8d13, 0x1929cf, 0x498b15, 0x62acc, 0x498b17, 0x72bcd, 0x4b8a17,
				0x215cf, 0x45b517, 0x2bc1, 0x42b615, 0x2dc6, 0x41b113, 0x2dc6, 0x3db715, 0x2dc6, 0x3bb712, 0x12ec1, 0x39b613, 0x121c2, 0x37b712, 0x222c3, 0x36b613, 0x525c3, 0x35b712, 0x427c2, 0x2ab70d, 0x1a38c2, 0x34a80d, 0x1a25c2, 0x31a80c, 0x1d23c1, 0x37af0c, 0x1c25c2, 0x34ac0f, 0x1e25c2, 0x39ad0e, 0x1f2ac5, 0x3aac0f, 0x1e2bc7, 0x3aac0f, 0x192ac8, 0x39ac0e, 0x2629cb, 0x38ad0d, 0x252ec8, 0x39ad0d, 0x222fc8, 0x38ae0c, 0x212ecf, 0x36ae0d, 0x20d1ce, 0x35af0c, 0x21d2cd, 0x35ae0e, 0x24d2cc, 0x34a90f, 0x3ad3cd, 0x37aa0c, 0x3dd3cd, 0x35a472, 0x32d2cc, 0x37a773, 0x33d3cd, 0x37a773, 0x34d4cc, 0x35a770, 0x37d5ce, 0x37a775, 0x36d6c8, 0x36a672, 0x37c9ce, 0x36a674, 0x34cbcf, 0x36a576, 0x37c9cc, 0x37a57b, 0x36cec2, 0x37a575, 0x37cfcd, 0x37a57b, 0x35ccc3, 0x34a476, 0x34c3c0, 0x34a474, 0x34c1c1,
				0x35a472, 0x36c0c1, 0x34a373, 0x34c5c6, 0x34a172, 0x35fddd, 0x33af40, 0x74d1f4, 0xea1310, 0x30feeb, 0xdc0813, 0x24f4ec, 0xd80913, 0x25f4ee, 0xdf0e14, 0x25f7e3, 0xd90c1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xde0d1a, 0x25f6e1, 0xdf0c1b, 0x24f7e0, 0xdf0c1b, 0x25f6e1, 0xd90a1d, 0x23f0e7, 0xd60512, 0x22f0eb, 0xd3021d, 0x3df3eb, 0xd3021d };
		System.arraycopy(aFor, 0, key, 18310, aFor.length);
	}

	private static void init63(int[] key) {
		int[] aFor = { 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd3021d, 0x28f9e6, 0xd2031c, 0x28f9e6, 0xd2031c, 0x28f9e6, 0xd3021d, 0x2ffee1, 0xd4051a, 0x2dfce3, 0xde041f, 0x38f3e0, 0xe2021f, 0x32e8e8, 0xfa0b1c, 0x39e9e8, 0x860b1e, 0x3deae8, 0x8a0a1e, 0x39eae9, 0x8b341e, 0x39eae9, 0x8a3511, 0x39eae9,
				0x88341c, 0x38e9e8, 0x88351d, 0x27ebe5, 0x8c3613, 0x25ede7, 0x8d3714, 0x26ede2, 0x8d3714, 0x27eee1, 0x803617, 0x25e0e3, 0x813715, 0x22e2e3, 0xbd3617, 0x23e3e3, 0xbd3617, 0x21e3e4, 0xb83716, 0x21e3e4, 0xb93017, 0x2ee2e5, 0xbb3316, 0x2fe3e4, 0xbe3317, 0x31fce5, 0xbf3217, 0x32ffe6, 0xb93216, 0x32fee4, 0xba3215, 0x33f8e5, 0xb5320a, 0x32fae4, 0xb7330a, 0x33fbe5, 0xb0330a, 0x33f4e4, 0xb2320b, 0xcdf6e6, 0xb1320a, 0xccf0e1, 0xb7320d, 0xcdf3e6, 0xb5320c, 0xc2f2e5, 0xb44d0f, 0xc1f3e6, 0xb24d0e, 0xc1f1e9, 0xb34d00, 0xc3f7e7, 0xae4d01, 0xc1f4e9, 0xad4d0e, 0xc3f5e9, 0xa84d0f, 0xc3f8eb, 0xab4c0e, 0xccffea, 0xaa4b0e, 0xccf9ed, 0xa84b0f, 0xccfbed, 0xae4b0d, 0xcce5ed, 0xad4a0d, 0xcde4d2, 0x934a0d, 0xcce7d3, 0x974c0f, 0xcce7d1, 0x974c0f, 0xcde6d2, 0x9a4e0f, 0xcce9d3, 0x984e0e, 0xcbe8d2,
				0x9a4c08, 0xcaefd1, 0x874d08, 0xcbecd0, 0x804e08, 0xc8efd1, 0x8e4e0b, 0xcbeed2, 0x8b7304, 0xcaefd1, 0x8a7209, 0xb5eede, 0x887208, 0xb4e9dd, 0x8e730b, 0xb7eade, 0x81730a, 0xb6e4d9, 0x837c0a, 0xb7ead9, 0x847f0b, 0xb6ebda, 0x867f0a, 0xa9eec4, 0x877c0a, 0xa8edc4, 0x857c09, 0xa8f3c7, 0x827d0b, 0xa8f1c6, 0x817d0b, 0xabf1c6, 0x837a0a, 0xabf0c1, 0x8d790b, 0xa8f1c0, 0x8d790b, 0xa8ffc1, 0x8c780b, 0xaffec2, 0x8d7b0a, 0xacffcd, 0xb27c0a, 0xacffcd, 0xb17d0b, 0xacffc3, 0xb77d04, 0xaefdc1, 0xb68205, 0xa1ffc0, 0xb68205, 0xa0fec1, 0xb48202, 0xa5fec0, 0xb58302, 0xbaffc3, 0xb48403, 0xbefdc3, 0xb7857c, 0xb0fdc2, 0xb68b7c, 0xb3fec1, 0xb08b7d, 0xb3fec3, 0xb38b78, 0xb2f8c4, 0xb28b7d, 0xb2f9c6, 0xb28b7f, 0xb2fbc5, 0xb38b7d, 0xb3e5c4, 0xb38a73, 0xb2e7cb, 0xb38a7d, 0xb3e6ca, 0xb38a7f, 0xb2e1c8,
				0xb28b7c, 0xb2e1ca, 0xb28879, 0xb3e0cc, 0xb3877e, 0xb3e0ca, 0xb38579, 0xb7e0cf, 0xb48378, 0xb4e6cf, 0xb4857a, 0xb6d8ca, 0xbe8d57, 0xf109ef, 0x58c503, 0xbd32fc, 0x4ec901, 0xb437fe, 0x48ca01, 0xb337fd, 0x4ace04, 0xb037f3, 0x4ccc0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4bcd0a, 0xb036f1, 0x4acc0b, 0xb137f0, 0x4acc0b, 0xb036f1, 0x4cca0d, 0xb630f7, 0x43c502, 0xb730fb, 0x46c20d, 0xa833fb, 0x46c20d };
		System.arraycopy(aFor, 0, key, 18610, aFor.length);
	}

	private static void init64(int[] key) {
		int[] aFor = { 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x46c20d, 0xbd39f6, 0x47c50d, 0xbd3ef0, 0x47c50d, 0xbd3ff7, 0x47c50d, 0xbb3ff6, 0x41c50c, 0xba3ef7, 0x46c308, 0xbc3df7, 0x4bc108, 0xba38f4, 0x52cf0a, 0x8720f4, 0x4fc908, 0xf029fb, 0x4bf709, 0xf028fc, 0x4bc904, 0xf22bfc, 0x4ac906, 0xfd2dfd, 0x4bce07, 0xff2efe, 0x49ce06, 0xfc11f3,
				0x4fcc00, 0xfc11f3, 0x4dcf06, 0xfd11fe, 0x56cc08, 0xfc15fd, 0x55cd09, 0xff14fc, 0x55cd0b, 0xfc15fd, 0x54c208, 0xf314fc, 0x55c30b, 0xf114fd, 0x53c008, 0xcc14fc, 0x53c008, 0xcd15fc, 0x51c00f, 0xca14fd, 0x52c70c, 0xc515fe, 0x53c40f, 0xc614fd, 0x55db0c, 0xc514fe, 0x4bda0f, 0xc617fe, 0x4adb0e, 0xc617fe, 0x4cdb11, 0xc510ff, 0x4dda12, 0xc510ff, 0x42d811, 0xc610fc, 0x45d813, 0xc110fc, 0x40d611, 0x3f12fc, 0x41d110, 0x3c13fb, 0x41d110, 0x3a13fc, 0x40d217, 0x386dfe, 0x4ed216, 0x3b6cff, 0x4ed216, 0x3a6ffe, 0x49d319, 0x3868f1, 0x48d216, 0x276bf0, 0x49d315, 0x276bf2, 0x4adc14, 0x2169f0, 0x4bdd13, 0x2c6ef7, 0x4bdd13, 0x2c6ef7, 0x4adc14, 0x2f6df6, 0x4bdd17, 0x2872f7, 0x4adc28, 0x2a72f7, 0x74dc28, 0x2971f6, 0x75dd2b, 0x2e76f7, 0x75dd2b, 0x2f77f6, 0x78de2d, 0x2d78f6, 0x79df2d, 0x2a79f7,
				0x78dc2e, 0x2978f4, 0x67db2d, 0x2b7afa, 0x61db2d, 0x297af4, 0x6ed82d, 0x2b78f4, 0x68e623, 0x2a7bf5, 0x6ae62d, 0x2a7bf5, 0x14e622, 0x287cf5, 0x12e623, 0x2b7ff6, 0x1de622, 0x257ef7, 0x10e923, 0x267ff0, 0x12e923, 0x217cf1, 0x10e920, 0x207bef, 0xfe820, 0x217aee, 0xfe820, 0x2378ee, 0x8f723, 0x217bee, 0x8f723, 0x217bee, 0x8f723, 0x207cef, 0x7f624, 0x217fe8, 0x4f723, 0x2070e8, 0x4f723, 0x2771e9, 0x5f420, 0x2470e8, 0x5f420, 0x1b77e9, 0x5f420, 0x1876e8, 0x4f72f, 0x1d77ea, 0x5082e, 0x1d76e8, 0xa082b, 0x1c74ef, 0x9082e, 0x1874ee, 0x8092e, 0x775ef, 0x90e2f, 0x47490, 0xe0d2e, 0x77591, 0xd2f, 0x57892, 0x10e2f, 0x27b93, 0x20e28, 0x27a92, 0x20e28, 0x27d91, 0x20f28, 0x27f90, 0x30f28, 0x3609f, 0x30f28, 0x2629e, 0x30f28, 0x3639d, 0x30f28, 0x2649d, 0x20e29, 0x2649d, 0x20d2e, 0x3659d, 0x3022f,
				0x3659d, 0x3002e, 0x16596, 0x12f, 0x6596, 0x723, 0x25a8d, 0xe0c10, 0x5a85ab, 0xea565a, 0x6aba5, 0xff555a, 0x1aba5, 0xfd5759, 0x7aba2, 0xfe525b, 0x7aaad, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfb5154, 0xaaaf, 0xfa5055, 0x1abae, 0xfa5055, 0xaaaf, 0xfc5653, 0x6aca9, 0xf3595c, 0x7aca5, 0xf65e53, 0x18afa5, 0xf65e53 };
		System.arraycopy(aFor, 0, key, 18910, aFor.length);
	}

	private static void init65(int[] key) {
		int[] aFor = { 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5ae, 0xf65e53, 0xda5ae, 0xf65e53, 0xda5ae, 0xf65e53, 0xda5ae, 0xf65e53, 0xda5a8, 0xf65e53, 0xda5a8, 0xf65e53, 0xaa5aa, 0xf15e53, 0xba2a8, 0xf35e55, 0xaa3aa, 0xf35e55, 0x8a5a8, 0xf35c52, 0x8aba4, 0xf5575e, 0x8aaa3, 0xf0565c, 0x1faca2, 0xf95b5c, 0x22a9a6, 0xf2475f, 0x32a2a7, 0x8b405f, 0x3f9dac, 0x8c415e, 0x399faa, 0x807d52, 0x3b99a8, 0x817a51, 0x3899a8, 0x807b50, 0x3899aa, 0x8f785d, 0x3998ab, 0x8c475e, 0x3998ab, 0x8b475d,
				0x249aa8, 0x89475c, 0x249ca9, 0x88475c, 0x249ca9, 0x8f465f, 0x259faa, 0x8c475e, 0x2b9eaa, 0x8d495f, 0x2891aa, 0x8b475f, 0x2b92ab, 0xb44658, 0x2a95aa, 0xb74159, 0x2c95ab, 0xb64758, 0x2f96aa, 0xb9475b, 0x2f96a8, 0xbb465a, 0x2889a9, 0xb8465b, 0x2889a9, 0xa64758, 0x2a8ba8, 0xa14047, 0x2b8bb6, 0xa24146, 0x2a88a9, 0xaf4147, 0x2c88aa, 0xad4247, 0x2f85a9, 0xae4344, 0x2e86a8, 0x514243, 0x2c80a8, 0x514243, 0x2c80af, 0x564144, 0x2f81a8, 0x573e43, 0x2080a9, 0x563d40, 0x2280aa, 0x563d40, 0x2786a8, 0x573c4f, 0x3885a9, 0x563d4c, 0x3885a9, 0x563d4c, 0x3d85aa, 0x57324f, 0x3e84ab, 0x563148, 0x3182ac, 0x57304f, 0x3281ad, 0x56314c, 0x349fac, 0x553273, 0x349d93, 0x54334c, 0xb9fac, 0x563572, 0xb9fac, 0x563572, 0xa9caf, 0x523474, 0x593a8, 0x503573, 0x490af, 0x563574, 0x791ae, 0x563574, 0x1b97ac,
				0x57367b, 0x1c94a3, 0x543674, 0x1396ac, 0x55097b, 0x1194ae, 0x530978, 0x1295ad, 0x2d0978, 0x1093ad, 0x2c0878, 0x1792ac, 0x2e0b7f, 0x179cab, 0x2f047f, 0x1792ac, 0x21047e, 0x1590ae, 0x240461, 0x1696ae, 0x260461, 0x1696ae, 0x390760, 0x1488ac, 0x380667, 0x1488aa, 0x3f0566, 0x1588a8, 0x3c0465, 0x148fa9, 0x330562, 0x158ca8, 0x330562, 0x168da9, 0x340563, 0x168da9, 0x340563, 0x1582aa, 0x350462, 0x2a80aa, 0x34036d, 0x2981ab, 0x34036d, 0x2882a8, 0x33026c, 0x297da9, 0x310068, 0x267caa, 0x300168, 0x237da8, 0x32016a, 0x227aab, 0x2c0314, 0x217bd4, 0x2d0314, 0x217bd4, 0x290c6a, 0x217bd5, 0x270d6b, 0x2278d4, 0x210d6a, 0x2379d7, 0x220a6b, 0x2278d0, 0x220a6b, 0x227bd1, 0x220b6b, 0x227bd1, 0x221468, 0x227ad1, 0x221769, 0x227ad1, 0x221769, 0x227bde, 0x221769, 0x227ddf, 0x221769, 0x227ddf,
				0x22146a, 0x2273de, 0x22146a, 0x2273dc, 0x22176a, 0x2275d3, 0x222a60, 0x2574cd, 0x342850, 0x6bbd93, 0xdf6561, 0x2b9a9e, 0xd56461, 0x2a989f, 0xd56265, 0x2f989f, 0xd76266, 0x2d989e, 0xd66367, 0x2d989c, 0xd66367, 0x2d989c, 0xd66367, 0x2d989c, 0xd66367, 0x2d989c, 0xd66367, 0x2d989c, 0xd66367, 0x2d989c, 0xd66367, 0x2d989c, 0xd66367, 0x2d989c, 0xd66367, 0x2d989c, 0xd66367, 0x2d989c, 0xd66367, 0x2d989c, 0xd66367, 0x2d989c, 0xd66367, 0x2d989c, 0xd66367, 0x2d989c, 0xd66367, 0x2d989c, 0xd66367, 0x2d989c, 0xd66367, 0x2a9f9b, 0xd16460, 0x2a9f9b, 0xd16460, 0x2a9f9b, 0xd66367, 0x2c999d, 0xd96c68, 0x2d9991, 0xdc6b67, 0x329a91, 0xdc6b67 };
		System.arraycopy(aFor, 0, key, 19210, aFor.length);
	}

	private static void init66(int[] key) {
		int[] aFor = { 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909a, 0xdc6b67, 0x27909a, 0xdc6b67, 0x27909a, 0xdc6b67, 0x27909a, 0xdc6b67, 0x27909c, 0xdc6b67, 0x27909c, 0xdc6b65, 0x209092, 0xdd6c68, 0x269194, 0xd16a68, 0x269196, 0xd16a68, 0x2b9092, 0xd06a6a, 0x2d9690, 0xd06b6f, 0x279790, 0xcb6e6f, 0x149d91, 0xc47169, 0x69599, 0xbf4b69, 0xc969a, 0xbd4b6c, 0xc9599, 0xbd4b6c, 0xbab94, 0xb24a6e, 0x8a997, 0xb14b6f, 0xba896, 0xb14b6f, 0x8a997, 0xb04860, 0x6a896, 0xb37763,
				0x1a897, 0xb37763, 0x1caa96, 0xb37763, 0x1dab97, 0xb37763, 0x1fac96, 0xb47662, 0x1eaf97, 0xb47662, 0x13af96, 0xb47662, 0x11ae97, 0xb57963, 0x14af96, 0xb47a62, 0x2bae91, 0xb57b62, 0x28a897, 0xb37b63, 0x29a990, 0xb37b63, 0x24a997, 0xb37b63, 0x27ab97, 0xb46464, 0x25b497, 0xaa7a66, 0x27b797, 0xab7b67, 0x20b795, 0xab7b67, 0x22b197, 0xa47b78, 0x20b196, 0xa27a78, 0x23b397, 0xa37b79, 0x22bd94, 0xa27878, 0xddbc95, 0xa37f79, 0xdebd95, 0xa37f79, 0xd9be94, 0xa07e78, 0xd7c092, 0xa17d7b, 0xd4c390, 0xa07e7a, 0xd2c293, 0xa3797b, 0xd3c39c, 0xbc7a7a, 0xd3c39c, 0xbc7a7a, 0xd7c29c, 0xbd7579, 0xd7c29c, 0xbe7478, 0xd6c09d, 0xb17379, 0xd6c09d, 0xb0727e, 0xd5c39d, 0xb1737f, 0xd0dc9f, 0xb1737f, 0xd1de9e, 0x8f7541, 0xd1de9e, 0x8f7541, 0xd2df9f, 0x897743, 0xd1df9e, 0x867842, 0xd3de9f, 0x877b43,
				0xd4dd9f, 0x867844, 0xc9dc9e, 0x847e46, 0xcfdc9e, 0x847e46, 0xcedf91, 0x864044, 0xc3de92, 0x804246, 0xc2df90, 0x834345, 0xbdd893, 0x834345, 0xbfd890, 0x844244, 0xbeda91, 0x874d45, 0xbfdb96, 0x874d45, 0xb2d894, 0x864c44, 0xb5df94, 0x874d5b, 0xb7df94, 0x984e5a, 0xb6de97, 0x9b515b, 0xb6de95, 0x9a5058, 0xb0dd96, 0x99515b, 0xb1da97, 0x96505c, 0xb1da97, 0x96505c, 0xb5d997, 0x96505c, 0xb4d896, 0x96505c, 0xb7d795, 0x97515d, 0x88d595, 0x965652, 0x88d595, 0x955753, 0x88d595, 0x945450, 0x8e2b93, 0x975551, 0x8f2890, 0x985651, 0x8d2d92, 0x995151, 0x882d93, 0x875753, 0x892e92, 0x875753, 0x8a2e92, 0x81592d, 0x892e92, 0x8e582c, 0x8b2d93, 0x8f592d, 0x8d2d90, 0x8c5e2c, 0x8c2c97, 0x8c5e2c, 0x8c2f96, 0x8c5e2c, 0x8c2e96, 0x8c5e2c, 0x8c3095, 0x8c5e2c, 0x8c3394, 0x8c5e2c, 0x8c329b, 0x8c5e2c,
				0x8d359b, 0x8d5f2d, 0x8d359b, 0x8d5c2e, 0x8c349b, 0x8d5c2e, 0x8d3698, 0x8d502d, 0x8d309a, 0x8d6c2b, 0x810e84, 0xa16921, 0xcccbeb, 0x72151e, 0x87eae1, 0x79161e, 0x86efe4, 0x79161d, 0x80efe4, 0x78161f, 0x82ece5, 0x79171c, 0x82ece7, 0x79171c, 0x82ece7, 0x79171c, 0x82ece7, 0x79171c, 0x82ece7, 0x79171c, 0x82ece7, 0x79171c, 0x82ece7, 0x79171c, 0x82ece7, 0x79171c, 0x82ece7, 0x79171c, 0x82ece7, 0x79171c, 0x82ece7, 0x79171c, 0x82ece7, 0x79171c, 0x82ece7, 0x79171c, 0x82ece7, 0x79171c, 0x82ece7, 0x79171c, 0x82ece7, 0x79171c, 0x82ece7, 0x79171c, 0x85ebe0, 0x7e101b, 0x85ebe0, 0x7e101b, 0x85ebe0, 0x79171c, 0x83ede6, 0x761813, 0x82edea, 0x731f1c, 0x9deeea, 0x731f1c };
		System.arraycopy(aFor, 0, key, 19510, aFor.length);
	}

	private static void init67(int[] key) {
		int[] aFor = { 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e1, 0x731f1c, 0x88e4e1, 0x731f1c, 0x88e4e1, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e7, 0x731f1c, 0x88e4e5, 0x741f1c, 0x8ae5eb, 0x751e13, 0x89e2ef, 0x701813, 0x88e1e8, 0x721d13, 0x8fe1e9, 0x711c12, 0x88e6ee, 0x671e13, 0x85eaec, 0x510413, 0x96ece8, 0x2d0c1b, 0x99d6f6, 0x360e1a, 0x9bd9f5, 0x350306, 0x84def0, 0x370108, 0x81e1f0, 0x39030a, 0x80e1f2, 0x39030a, 0x83e0f3, 0x39030a, 0x80e1f2, 0x39030a, 0x8ee2fd,
				0x3b3d08, 0x8ee2fd, 0x3c3d09, 0x8ce3ff, 0x3c3d09, 0x93e0fc, 0x3c3d09, 0x92e1ff, 0x3f3a0a, 0x94e0fe, 0x3f3a0a, 0x97e0ff, 0x30390b, 0x96e0fd, 0x333808, 0x97effe, 0x34390b, 0x94ecff, 0xa390c, 0x97eaf9, 0xc390d, 0x96ebfe, 0xc390d, 0x9bebff, 0xc390d, 0x98e9ff, 0xb260e, 0x9af6fd, 0xa390f, 0x84f7fd, 0xa390f, 0x87f6fd, 0xb380c, 0x81f3fd, 0x6380d, 0x80f4fd, 0x33812, 0x80f3e3, 0x23913, 0x81f1fc, 0x3711, 0x80f2ff, 0xff3612, 0x81f5ff, 0xff3612, 0x84f4fc, 0xfd3410, 0x858bfb, 0xf23511, 0x878bf8, 0xf23511, 0x868bfa, 0xf43713, 0x858cfb, 0xf5361c, 0x858cfb, 0xf5361c, 0x998ffb, 0xf2371d, 0x9880f8, 0xf1361c, 0x9982f9, 0xf1361c, 0x9685f8, 0xf0371b, 0x9685f8, 0xf3341a, 0x9184fb, 0xf3341a, 0x929bfa, 0xcd3624, 0x929ac4, 0xcd3624, 0x939dfb, 0xcf3426, 0x959ef9, 0xcc3727, 0x9a90fb, 0xcc3727,
				0x9890fa, 0xcb3626, 0x9b93fd, 0xd43727, 0x9894fe, 0xd43727, 0x9e96f0, 0xd73626, 0x91a9f1, 0xd43727, 0x96aaf1, 0xd43727, 0xebabf2, 0xd43727, 0xe9abf1, 0xd53024, 0xeea9f2, 0xd43127, 0xeda6f3, 0xd43127, 0xe3a6f4, 0xd63325, 0xe2a7f5, 0xd1343a, 0xe2a7ea, 0xd03525, 0xffa4eb, 0xd13426, 0xffa4e9, 0xd22b27, 0xf8a5eb, 0xd02921, 0xf7a3ea, 0xd02921, 0xf7a3ea, 0xd02921, 0xf5a1ea, 0xd02921, 0xf3a0ea, 0xd12820, 0xf0afe9, 0xd02921, 0xcface6, 0xd02921, 0xcfade9, 0xd12e2e, 0xcfade9, 0xd22f2f, 0xc9afeb, 0xd3d028, 0xcaaeea, 0xd2d128, 0xc4adec, 0xd1d028, 0xc5aceb, 0xd7d62a, 0xd8acea, 0xd7d62a, 0xd9ace8, 0xd5d428, 0xdcace8, 0xd4db57, 0xd1aeea, 0xd5da56, 0xd6afe8, 0xd4db55, 0xd5a8e9, 0xd5da52, 0xd5a8e9, 0xd5da52, 0xd5a8e9, 0xd5d953, 0xd5a9e9, 0xd5c650, 0xd5a8e9, 0xd5c650, 0xd4abe8, 0xd5c650,
				0xd4ade7, 0xd4c751, 0xd4ade7, 0xd4c751, 0xd4aee4, 0xd4c751, 0xd6aee5, 0xd6ca57, 0xd694e3, 0xd6ce4e, 0xc1a8ff, 0xf6d14a, 0x736393, 0xbb876a, 0x4d7895, 0xb3846a, 0x4c7f90, 0xb08469, 0x4a7e93, 0xb3846f, 0x487f94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x4f7e94, 0xb4856f, 0x487993, 0xb38268, 0x487993, 0xb38268, 0x497892, 0xb5846e, 0x4f7e94, 0xba8b61, 0x4e7e98, 0xbf8c6e, 0x517d98, 0xbf8c6e };
		System.arraycopy(aFor, 0, key, 19810, aFor.length);
	}

	private static void init68(int[] key) {
		int[] aFor = { 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447793, 0xbf8c6e, 0x447793, 0xbf8c6e, 0x447793, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447795, 0xbf8c6e, 0x447797, 0xb88c6e, 0x457598, 0xbb8f61, 0x40749a, 0xb98f60, 0x43759a, 0xbf8960, 0x42749b, 0xbb8965, 0x547198, 0x8a8164, 0x40669d, 0xfc8665, 0x4e5a90, 0xe58361, 0x495a91, 0xe68662, 0x4b5f90, 0xfb8365, 0x495d92, 0xfb8365, 0x4e5c92, 0xf8bc6a, 0x415e92, 0xf8bc6a, 0x425f93, 0xf8bc6a, 0x425f93, 0xfbbd6b, 0x4c5c9c,
				0xfabc6a, 0x4f639f, 0xfbbd6b, 0x4a609d, 0xfabe6b, 0x4a609d, 0xe5bd68, 0x4b619e, 0xe6ba6b, 0x4d609f, 0xe1bb6a, 0x49619f, 0xe1bb6a, 0x47629c, 0xe2ba69, 0x466d9f, 0xe5bb6a, 0x456e9e, 0xe5bb6a, 0x786f99, 0xe3bc6d, 0x796e9e, 0xe3bc6d, 0x746e9f, 0xe3bc6d, 0x766c9f, 0xe5a36e, 0x74739d, 0xe4bc6f, 0x6b739c, 0xe5bd6e, 0x68729c, 0xe4bc6d, 0x6e779c, 0xe9bc6c, 0x6f709c, 0xebbd6c, 0x68769d, 0xeabc6d, 0x697482, 0xebb36c, 0x6a7583, 0xeab06d, 0x957483, 0xebb76e, 0x907580, 0xeab46d, 0x937481, 0xe4ca6b, 0x927581, 0xe7cb68, 0x937583, 0xe0c869, 0x917381, 0xe0c869, 0x90728e, 0xe0c869, 0x8d7281, 0xe1cb66, 0x8b7c83, 0xe2ca67, 0x8a7e82, 0xedcd66, 0x8a7e82, 0xeccc61, 0x897d83, 0xeccc61, 0x8e7c80, 0xeccc61, 0x8d6381, 0xedcd5e, 0xb261be, 0xedcd5e, 0xb36681, 0xefcf5c, 0xb464bc, 0xeece63, 0xb966be,
				0xefc162, 0xba69bc, 0xeece61, 0xbf68bd, 0xefcd66, 0xa16ebc, 0xedcd65, 0xa66fbd, 0xefcf6b, 0xa86fb3, 0xeef064, 0xad6eb3, 0xeff365, 0xaf6eb3, 0x90f266, 0xad6eb0, 0x91f565, 0xaa6cb3, 0x91f565, 0xab6db0, 0x92fa64, 0xa56db7, 0x93fb65, 0xa76fb5, 0x94fc7a, 0xa76faa, 0x94fc7a, 0xa46eb5, 0x8bff7b, 0xa56fb4, 0x88e07a, 0xa36fb7, 0x8ae27c, 0xa269b0, 0x85e37b, 0xa269b0, 0x85e37b, 0xa36ab7, 0x85e37b, 0xa66ab0, 0x84e27a, 0xa565b3, 0x84e27a, 0xa464b2, 0xbbe175, 0xa465bd, 0xbbe175, 0xa562b2, 0xb8e074, 0xa461b1, 0xbfe175, 0xa59eb6, 0xbc1e75, 0xab60b6, 0xbd1e73, 0xa962b0, 0xbb1871, 0xab63b0, 0xbb1871, 0xb562b3, 0xb91a73, 0xb062b3, 0xb8150c, 0xbe63b2, 0xbb160f, 0xb863b1, 0xba170c, 0xbb64b0, 0xbb160b, 0xbb64b0, 0xbb160b, 0xbb64b0, 0xbb150a, 0xbb65b0, 0xbb0a09, 0xbb64b0, 0xbb0a09, 0xb964b0,
				0xb80908, 0xb962bf, 0xb90809, 0xb962bf, 0xb90b0a, 0xb961bc, 0xb90b08, 0xb862ba, 0xb8070a, 0xb859b8, 0xb80112, 0x986ba1, 0xd6e260, 0x4a2184, 0x99c97d, 0x6e3782, 0x93ca7f, 0x6f3683, 0x94cd78, 0x6d3682, 0x97cd7f, 0x6b3784, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x96cc78, 0x6d3783, 0x97cd79, 0x6c3682, 0x97cd79, 0x6d3783, 0x91cb7f, 0x6b3185, 0x9ec470, 0x6a3189, 0x9bc37f, 0x753289, 0x9bc37f };
		System.arraycopy(aFor, 0, key, 20110, aFor.length);
	}

	private static void init69(int[] key) {
		int[] aFor = { 0x603884, 0x9bc37f, 0x603884, 0x9bc37f, 0x603884, 0x9bc37f, 0x603884, 0x9bc37f, 0x603884, 0x9bc37f, 0x603884, 0x9bc37f, 0x603884, 0x9bc37f, 0x603884, 0x9bc37f, 0x603884, 0x9bc37f, 0x603884, 0x9bc37f, 0x603884, 0x9bc37f, 0x603884, 0x9bc37f, 0x603884, 0x9bc37f, 0x603884, 0x9bc37f, 0x603884, 0x9bc37f, 0x603884, 0x9bc37f, 0x603882, 0x9bc37f, 0x603882, 0x9bc37f, 0x603882, 0x9bc37f, 0x603882, 0x9bc37f, 0x673982, 0x9bc37f, 0x673984, 0x9bc37f, 0x673984, 0x9bc37f, 0x673886, 0x9bc37f, 0x673984, 0x9bc37f, 0x603a85, 0x9ac07d, 0x673c87, 0x9ac17c, 0x6d3a80, 0x80c27c, 0x603683, 0xaddc7f, 0x1b0288, 0xb0da7d, 0x150c8b, 0xb6da78, 0x11038c, 0xbdd879, 0x12058c, 0xa2db7a, 0x10058d, 0xa1d87b, 0x15068d, 0xa3e675, 0x1a078f, 0xa3e675, 0x1a048d, 0xa0e774, 0x1a048d, 0xa0e774, 0x18058c,
				0xafe47b, 0x1a3b8e, 0xaee57a, 0x1f388c, 0xaee57a, 0x1f3a8d, 0xafe47b, 0x1388f, 0xace37c, 0x3889, 0xace37c, 0x43989, 0xace37c, 0xb3b8a, 0xadec7f, 0x93b8b, 0xaaed78, 0x93b8d, 0xa9ee79, 0x36388c, 0xa8ed78, 0x333e8c, 0xa8ed78, 0x333e8c, 0xabed7f, 0x3d3c8c, 0xa9ec7e, 0x383c8d, 0xa8f37f, 0x263d8e, 0xa8f37f, 0x263d8d, 0xabf07c, 0x213c93, 0xa6f77d, 0x203b8d, 0xa5f062, 0x203b8d, 0xa4f163, 0x27398c, 0xa5fe62, 0x24388d, 0xa4fd63, 0xdb398d, 0xa4fd63, 0xdf3f8f, 0xa5fe64, 0xdc3e88, 0xa48163, 0xd23e89, 0xa78060, 0xd33e8b, 0xa08361, 0xd13889, 0xa08361, 0xd03986, 0xa08361, 0xcf3a89, 0xa1826e, 0xca3a88, 0xa08d6d, 0xc9388b, 0xa18c6e, 0xc63f8a, 0xa18c6e, 0xc43d8c, 0xa18c6e, 0xc2238f, 0xa08d6f, 0xc1228f, 0xa18c50, 0xfe20b0, 0xa08b6f, 0xfd21b1, 0xa1886c, 0xfa238c, 0xa38a52, 0xf4228f, 0xa28553,
				0xf72d8d, 0xa38a50, 0xf02c8c, 0xa08957, 0xef2d8c, 0xa28f55, 0xe82e82, 0xa28f55, 0xe52f8d, 0xa3b05a, 0xe72f8c, 0xa5b258, 0xe52f8e, 0xdab35b, 0xe4288d, 0xd9b258, 0xe22b8e, 0xd8b35b, 0xe1248f, 0xd8b35b, 0xef2488, 0xd9b25a, 0xed268a, 0xdeb545, 0xed2695, 0xdeb545, 0xee278a, 0xc1b644, 0xef268b, 0xc2a945, 0xee2788, 0xc5aa44, 0xec2689, 0xc4ad45, 0xe3278e, 0xc4ad45, 0xe22489, 0xc5ae44, 0xe32788, 0xc6af43, 0xe22889, 0xc1ae40, 0xe12888, 0xfead4f, 0xe12987, 0xfead4f, 0xe02e88, 0xfdac4e, 0xe12d8b, 0xfaad4f, 0xe0d28c, 0xf9524f, 0xee2c8c, 0xf8534f, 0xec2f8c, 0xfe554d, 0xee2e8c, 0xfe554d, 0xf02f8f, 0xfc574f, 0xf62e8f, 0xff5630, 0xf8218f, 0xfe5731, 0xfa218e, 0xf95430, 0xfb208d, 0xfa5331, 0xfa218a, 0xfa5331, 0xfa218a, 0xfa5030, 0xfa218a, 0xfa5133, 0xfa3e8a, 0xfa5133, 0xfa3f8a, 0xfa5232,
				0xfa3e85, 0xfa5533, 0xfa3e85, 0xfa5430, 0xfa3d85, 0xfa5436, 0xfb3d84, 0xfa5835, 0xfa0786, 0xfa5021, 0xd23c92, 0xb1aa59, 0x37bb7, 0xdf974e, 0x276ab1, 0xdc914a, 0x256ab0, 0xdc914a, 0x2b6ab0, 0xd2914a, 0x2968b6, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd2914a, 0x296ab1, 0xd3904b, 0x286bb0, 0xd3904b, 0x296ab1, 0xd5964d, 0x2f6cb7, 0xda9942, 0x2e6cbb, 0xdf9e4d, 0x316fbb, 0xdf9e4d };
		System.arraycopy(aFor, 0, key, 20410, aFor.length);
	}

	private static void init70(int[] key) {
		int[] aFor = { 0x2465b6, 0xdf9e4d, 0x2465b6, 0xdf9e4d, 0x2465b6, 0xdf9e4d, 0x2465b6, 0xdf9e4d, 0x2465b6, 0xdf9e4d, 0x2465b6, 0xdf9e4d, 0x2465b6, 0xdf9e4d, 0x2465b6, 0xdf9e4d, 0x2465b6, 0xdf9e4d, 0x2465b6, 0xdf9e4d, 0x2465b6, 0xdf9e4d, 0x2465b6, 0xdf9e4d, 0x2465b6, 0xdf9e4d, 0x2465b6, 0xdf9e4d, 0x2465b6, 0xdf9e4d, 0x2465b6, 0xdf9e4d, 0x2465b0, 0xdf9e4d, 0x2465b0, 0xdf9e4d, 0x2465b0, 0xdf9e4d, 0x2465b0, 0xdf9e4d, 0x2364b0, 0xdf9e4d, 0x2364b6, 0xdf9e4d, 0x2364b6, 0xdf9e4d, 0x2365b4, 0xd89e4f, 0x2164b1, 0xda9e4e, 0x2664b5, 0xda9f4c, 0x2461b0, 0xde9f4d, 0x3265b0, 0xee974d, 0x2872ba, 0x9f924c, 0x3545b8, 0x91924e, 0x324ab9, 0x91924e, 0x374bb8, 0x9e904e, 0x334cb8, 0x9c914d, 0x2d4cbb, 0x9c914d, 0x284fbb, 0x9eaf43, 0x264fba, 0x9eaf43, 0x274dbb, 0x9eaf43, 0x244cba, 0x9eaf43, 0x274cba,
				0x90ad4d, 0x264dbb, 0x93924e, 0x214db8, 0x93934f, 0x224cb8, 0x92924e, 0x3d4fbb, 0x93934f, 0x3f48ba, 0x93934f, 0x394aba, 0x91904f, 0x3648b9, 0x909f4c, 0x3547b9, 0x91904d, 0x3246b8, 0x93904d, 0x3345b8, 0xad904c, 0x3643b8, 0xad904c, 0x3643b8, 0xac914b, 0x3b43bf, 0xae934d, 0x3a43b9, 0xab934a, 0x3b5cb8, 0xb59249, 0x3b5cbb, 0xb6914a, 0x3d5cba, 0xb49754, 0x335ca4, 0xb6974b, 0x335ca4, 0xb7964a, 0x345ea5, 0xb6994b, 0x375fa4, 0xb6994b, 0x365ca4, 0x49984a, 0x355ba7, 0x4e994b, 0x3759a7, 0x4fe64c, 0x3959a6, 0x4fe64c, 0x3959a0, 0x4ae44a, 0x3858a3, 0x49e34b, 0x3858a3, 0x48e244, 0x275bac, 0x49e34b, 0x225bad, 0x48ec48, 0x2159ae, 0x49ed4b, 0x2e5eaf, 0x48ec4c, 0x2d5dae, 0x49ed4f, 0x2a42ae, 0x48ec4e, 0x2943ae, 0x48ec4e, 0x2841af, 0x76ea70, 0x2b40ae, 0x76ea70, 0x2d4190, 0x74e84e, 0x234093,
				0x75e74f, 0x234091, 0x77e74c, 0x244190, 0x76e44b, 0x274790, 0x69e44a, 0x254592, 0x6fe445, 0x25449c, 0x62e444, 0x277a92, 0x64e447, 0x267991, 0x19e544, 0x277e92, 0x1ae447, 0x267e90, 0x1de746, 0x277f93, 0x1ee847, 0x297f94, 0x1fe946, 0x2b7d96, 0x1fe946, 0x2b7d97, 0x18ee47, 0x287c88, 0x7ed46, 0x297d89, 0x7ed46, 0x2a6288, 0x6ec45, 0x2c618b, 0x4ea47, 0x23608c, 0x4ea47, 0x22638b, 0x5e946, 0x22638b, 0x7eb40, 0x236c8a, 0x7eb40, 0x266c89, 0x39e94e, 0x266d86, 0x39e94e, 0x276a89, 0x39e94e, 0x246b88, 0x38ea4d, 0x236a89, 0x39154a, 0x2e6b89, 0x38144a, 0x2d698e, 0x3e124c, 0x2c688d, 0x3c134c, 0x33698e, 0x3e104f, 0x33698e, 0x39104e, 0x3167f1, 0x37114f, 0x3264f0, 0x31114e, 0x3365f3, 0x32164f, 0x3264f4, 0x32164f, 0x3264f4, 0x32164f, 0x3267f5, 0x32174c, 0x3278f5, 0x32174c, 0x3279f5, 0x32144d,
				0x3278fa, 0x32144d, 0x327ffb, 0x32154e, 0x327cfb, 0x331448, 0x317cfa, 0x31184a, 0x3146f8, 0x31135d, 0x1e63ef, 0x6bc03b, 0xad1ecd, 0x4aef37, 0xb011c8, 0x4bea33, 0xb210cf, 0x45eb33, 0xb210c9, 0x4beb33, 0xb012cf, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4beb33, 0xb010c8, 0x4aea32, 0xb111c9, 0x4aea32, 0xb010c8, 0x4beb33, 0xb111c9, 0x44e43c, 0xb011c5, 0x41e333, 0xaf12c5, 0x41e333 };
		System.arraycopy(aFor, 0, key, 20710, aFor.length);
	}

	private static void init71(int[] key) {
		int[] aFor = { 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xba18ce, 0x41e333, 0xbd19ce, 0x41e333, 0xba1ac9, 0x41e333, 0xba1ac9, 0x41e333, 0xba19cb, 0x41e333, 0xbb19cb, 0x42e337, 0xb41ac8, 0x43e037, 0xbf1acc, 0x42e636, 0xbe18cd, 0x4ee330, 0x9411cc, 0x57f735, 0xfb2fc4, 0x5ff935, 0xfd2ac4, 0x5efc37, 0xf925c3, 0x50fe35, 0xf825c3, 0x51f934, 0xfa23c0, 0x54ff36, 0xe421c0, 0x54ff36, 0xe621c1, 0x52c138, 0xe421c0, 0x52c138, 0xea20cf, 0x53c237, 0xe921ce, 0x52c534, 0xe826cd,
				0x51c435, 0xe625c2, 0x50c534, 0xe325c3, 0x51fa35, 0xe325c3, 0x52fb36, 0xe225c0, 0x4df835, 0xe324c3, 0x4fff36, 0xe425c0, 0x4efc35, 0xe626c0, 0x41ff34, 0xe427c1, 0x40f035, 0xe427c1, 0x46f037, 0xe625c2, 0x78f036, 0xe524c5, 0x79f737, 0xe224c3, 0x78f630, 0xef24c2, 0x7af432, 0xef25c1, 0x7df433, 0xed3bc1, 0x7df433, 0xf23bc0, 0x7cf532, 0xf138c3, 0x7af533, 0xfd3ec3, 0x7bf233, 0xfd3ec3, 0x78f52c, 0xfc3cdc, 0x7ff433, 0xfd33dd, 0x7ff433, 0xfe32dc, 0x7ef732, 0x333dc, 0x78f130, 0x230db, 0x7bf031, 0x34fda, 0x748f31, 0x34fda, 0x75f030, 0x14dd8, 0x72f13f, 0x4dd6, 0x71f63e, 0x14cd9, 0x6ef53f, 0x4dd8, 0x6dfa3e, 0x74ddb, 0x6efb3f, 0x64fda, 0x60fd39, 0x54cdb, 0x61fc3a, 0x54cd8, 0x66e339, 0x54cd8, 0x66e339, 0x74cd9, 0x58e107, 0x64ad8, 0x58e107, 0x34ad9, 0x59e004, 0x49da, 0x57e107, 0x146db,
				0x57e107, 0x344dd, 0x51e106, 0x345da, 0x4de600, 0x147d8, 0x4ae500, 0x147d8, 0x49e50f, 0xf7ad8, 0x4ce40d, 0xf7ada, 0x4de70c, 0x727bdb, 0x4ce00d, 0x727bdb, 0x4fe10e, 0x7479db, 0x4ee10e, 0x7976dd, 0x4ee10e, 0x7b74df, 0x4ee10e, 0x7b74df, 0x4fe00f, 0x7c73df, 0x4ee110, 0x6170de, 0x4fe013, 0x626fdd, 0x4ee110, 0x646fdc, 0x4ce316, 0x646fdc, 0x43e415, 0x646ede, 0x4ce512, 0x6b6fdf, 0x4ee714, 0x6a60de, 0x4ee714, 0x6d61dd, 0x4ce51a, 0x6d61dd, 0x4ce51a, 0x5361d2, 0x4de215, 0x5060d3, 0x4ce116, 0x5761d2, 0x4ce116, 0x5561d3, 0x4d1e17, 0x5a60d4, 0x4e1d15, 0x5d66d7, 0x4c1a15, 0x5c61d4, 0x521a14, 0x5f63d5, 0x551a15, 0x5c62d5, 0x5b156a, 0x5d63d4, 0x581669, 0x5a62d2, 0x5b1168, 0x5b62d4, 0x5b1168, 0x5a62d4, 0x5a106f, 0x5a62d4, 0x5a136e, 0x5a63d7, 0x5a136e, 0x5a7cd7, 0x5a136e, 0x5a7ed6, 0x5a1261,
				0x5a7ed6, 0x5a1560, 0x5a7fd6, 0x5b1765, 0x597fd7, 0x591c78, 0x5942ca, 0x5c1a6c, 0x6563db, 0xecd705, 0x343afa, 0xdacf01, 0x2731fe, 0xdbcd02, 0x2237fe, 0xd5cc02, 0x2f30f9, 0xd5cc02, 0x2936ff, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934fe, 0xd2cf03, 0x2934f8, 0xd3ce02, 0x2835f9, 0xd2cf03, 0x2835f9, 0xd3ce02, 0x2934f8, 0xdcc10d, 0x2834f4, 0xd9c602, 0x3737f4, 0xd9c602 };
		System.arraycopy(aFor, 0, key, 21010, aFor.length);
	}

	private static void init72(int[] key) {
		int[] aFor = { 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x203ff9, 0xd9c602, 0x233ef9, 0xd9c602, 0x233efb, 0xd9c602, 0x233efb, 0xd9c602, 0x233ff5, 0xd9c602, 0x203ff5, 0xd8c60e, 0x2f3cf1, 0xd7c70e, 0x2c3cf5, 0xd6c60d, 0x243df7, 0xc5c90d, 0x2ff8, 0xabf608, 0xb23fc, 0x95f608, 0xa22fb, 0xa9f70b, 0xe20e5, 0xa7f915, 0xf22e3, 0xa7f915, 0xb22e0, 0xa4ff17, 0x1421e1, 0xa4ff17, 0x1522e1, 0xa6fd19, 0x101de1, 0xa6fd19, 0x1e1cee, 0xa7fe16, 0x1d1def, 0xa6f915, 0x1d1def, 0xa7fe16,
				0x101fe1, 0xa6ff17, 0x101fef, 0xa3ff18, 0x1120ee, 0xa3ff18, 0x1222ee, 0xa2fc18, 0xd21ef, 0xa3fd19, 0x827ef, 0xa3fd19, 0xb27ec, 0xa3fd19, 0x425ef, 0xa1fd1a, 0x425ef, 0xa0f21b, 0x124ee, 0x9ef21b, 0x27ef, 0x9df31c, 0x20e9, 0x9bf31d, 0x121ee, 0x96f31c, 0x121e8, 0x94f01b, 0x73fe8, 0x97f01a, 0x73ee9, 0x88f11a, 0x63fe8, 0x8af119, 0x23de8, 0x85f019, 0x33ce9, 0x85f019, 0x3ae8, 0x84f318, 0x73bf7, 0x85fc19, 0x43af6, 0x85fc19, 0xf838f7, 0x84fb1a, 0xff39f6, 0x86f91c, 0xff39f0, 0x87861b, 0xff47f7, 0x88871c, 0xfd39f5, 0x89841d, 0xfa39f7, 0x88851e, 0xf93ef6, 0x898411, 0xe63df9, 0x88851e, 0xe33df8, 0x898a1d, 0xe03ffb, 0x888b1e, 0xef38fa, 0x898a19, 0xec3bfa, 0x888b18, 0xec3bfa, 0x888b18, 0xea3bf9, 0x8a9526, 0xd43ef9, 0x8b9219, 0xd73ec6, 0x8c9518, 0xd53cc6, 0x8d941b, 0xda3cc6, 0x8c9b1a,
				0xd93dc1, 0x8d981b, 0xd93dc7, 0x889e1c, 0xc73fc5, 0x8b9e1d, 0xc63cc4, 0x8d9e1c, 0xca3ec4, 0x8fa012, 0xcb3fca, 0x88a11d, 0xc83cc5, 0xf7a012, 0xc93bc4, 0xf7a012, 0xcb39c4, 0xf7a012, 0xce37c6, 0xf9a015, 0xce37c6, 0xf8a114, 0xce37c6, 0xfba217, 0xcf36c6, 0xfca516, 0xcc37d9, 0xe3a617, 0xce29d9, 0xe5a415, 0xcc29de, 0xe4a514, 0xcc29de, 0xe4a514, 0xc32fdf, 0xeba413, 0xc32fdd, 0xe6a716, 0xc220dc, 0xe7a817, 0xc32fdd, 0xe2ab1a, 0xc02ed2, 0xe1aa15, 0xfe2edd, 0xe0ad1a, 0xfe2edd, 0xe3ac1b, 0xff2dde, 0xe4ad1a, 0xff2ddc, 0xe6ad19, 0xfed2dd, 0xe8af1f, 0xfcd3dc, 0xe8af1f, 0xf9d3dd, 0xe9a81c, 0xe7d2de, 0xeaab1f, 0xe3d3df, 0xeba460, 0xedd2de, 0xe8a763, 0xebd2df, 0xe9a664, 0xe9d5d8, 0xe9a664, 0xe8d5d8, 0xe9a664, 0xe9d4df, 0xe9a565, 0xe9d4df, 0xe9a565, 0xe9cadc, 0xe9a565, 0xe9cbdc, 0xe9a664,
				0xe9cad3, 0xe9a664, 0xe9ccd2, 0xe8a467, 0xecccd3, 0xeeaf63, 0xecced0, 0xe0ae79, 0xa72bc7, 0x3fe821, 0xd91fde, 0x2fe523, 0xd218dc, 0x2ee221, 0xd718df, 0x2fe124, 0xd61adc, 0x2ce024, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd61ade, 0x2fe325, 0xd418de, 0x2ee224, 0xd418de, 0x2ee224, 0xd418de, 0x2fe325, 0xd519df, 0x20ec2a, 0xd419d3, 0x25eb25, 0xcb1ad3, 0x25eb25 };
		System.arraycopy(aFor, 0, key, 21310, aFor.length);
	}

	private static void init73(int[] key) {
		int[] aFor = { 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdd12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdc12de, 0x25eb25, 0xdf13dc, 0x25eb25, 0xdf13dc, 0x23e927, 0xda10de, 0x22e826, 0xd812dc, 0x22e826, 0xdb11df, 0x21eb23, 0xdb10dc, 0x21eb23, 0xdc16de, 0x2beb23, 0xc213d8, 0xefb2b, 0xa32cc6, 0x1f432, 0x9820c6, 0x3f63e, 0xa220cb, 0x4f83a, 0xae20d5, 0x5f925, 0xac22d1, 0x4f927, 0xa925d1, 0x4f927, 0xa925d1, 0x4f927, 0xb427d1, 0x5f826, 0xb618d1, 0x2f929, 0xb419d1, 0x3f828, 0xba1ad0, 0xf929, 0xba1ad0, 0xf929, 0xb91bd1,
				0xefa26, 0xbb25d1, 0xffb27, 0xbc26d2, 0xdf827, 0xbf26d0, 0xefb26, 0xa027d2, 0xdfc21, 0xa127d4, 0xafd20, 0xa024d5, 0x9ff23, 0xa126d4, 0x4f020, 0xa025d3, 0x3f320, 0xa225d5, 0x2f021, 0x9d24d2, 0x3f121, 0x9e25d2, 0x2f021, 0x9923d5, 0x1f026, 0x9622d2, 0x3f321, 0x9723d3, 0x6f322, 0x963cd0, 0x6f322, 0x893dd3, 0x4f023, 0x883ed2, 0x1f322, 0x893fd3, 0xef423, 0x8b3fcc, 0xff522, 0x8c3dcd, 0xff522, 0x8e33cd, 0xef623, 0x7333ce, 0xff722, 0x7435ce, 0xff722, 0x7536c9, 0xcf623, 0x7437cf, 0x28825, 0x7736cc, 0x38b24, 0x7635cf, 0x28825, 0x7333cd, 0x1c8a2b, 0x7232cc, 0x1c8a2b, 0x7033cc, 0x1b8b2a, 0x713dcd, 0x18882b, 0x703cce, 0x18882b, 0x7e3ac8, 0x1b8b2a, 0x7f3bc8, 0x1c9429, 0x7e24c8, 0x1f8b28, 0x7f26c9, 0x208a29, 0x7c26f6, 0x278d28, 0x7d27f7, 0x278d28, 0x7d27f7, 0x248e29, 0x7329f5, 0x278c2f,
				0x7329f3, 0x218c28, 0x702ff3, 0x3e8c29, 0x732ef0, 0x398f27, 0x7e2fff, 0x398f27, 0x7c2ffe, 0x398f27, 0x7811fe, 0x388c26, 0x710f1, 0x398b27, 0x411f2, 0x388826, 0x211f5, 0x3b8927, 0xc1cf5, 0x3b8927, 0xd1ff5, 0x388a24, 0xc1ef5, 0x3f8d25, 0xf1fea, 0x208e24, 0xe1eeb, 0x239125, 0xf1fe8, 0x249224, 0xe1eef, 0x249224, 0xd1ee9, 0x259525, 0x21fee, 0x249624, 0x11eed, 0x249624, 0x11eef, 0x249624, 0x11ee, 0x239727, 0x112ef, 0x209628, 0x15ee, 0x209628, 0x3f14ee, 0x23952b, 0x3f14ec, 0x24942a, 0x3cebee, 0x2b952d, 0x3eebef, 0x2a962e, 0x3aedef, 0x349450, 0x39ed91, 0x349450, 0x3eed90, 0x37952f, 0x3fedef, 0x389a50, 0x3defed, 0x3e9a51, 0x3fefef, 0x3f9b52, 0x3fe9e9, 0x3f9853, 0x3feae8, 0x3f9853, 0x3feae8, 0x3f9853, 0x3fe8e9, 0x3f8750, 0x3feae8, 0x3f865f, 0x3feae8, 0x3f865f, 0x3fece9, 0x3e845c,
				0x3fe1ef, 0x3b825c, 0x3ce6e8, 0x2d8242, 0x6108f9, 0xc9d916, 0x2626e9, 0xdcd816, 0x2224e9, 0xdcdd14, 0x2625e9, 0xdedd13, 0x2625e5, 0xdedc11, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2624e9, 0xdfdd12, 0x2725ea, 0xdedc13, 0x2725ea, 0xdedc13, 0x2725ea, 0xdddf10, 0x2527e8, 0xd3d11e, 0x2724e7, 0xd6d611, 0x3827e7, 0xd6d611 };
		System.arraycopy(aFor, 0, key, 21610, aFor.length);
	}

	private static void init74(int[] key) {
		int[] aFor = { 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x212eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2e2eeb, 0xd6d611, 0x2f21e9, 0xd6d611, 0x2e20e6, 0xd4d81f, 0x2c20e7, 0xdbd710, 0x232fe8, 0xdad611, 0x232fe8, 0xdad611, 0x202ced, 0xd8d516, 0x2d2cea, 0xc5da13, 0x1334eb, 0xa9eb04, 0x939ef, 0x90ed1d, 0x638eb, 0x9cee13, 0x3c39e6, 0x99e115, 0x3038e5, 0x99e115, 0x313be6, 0x99e010, 0x333ce5, 0x9fe710, 0x323be6, 0x9ce611, 0x2c38e7, 0x9de710, 0x2e07e7, 0x9de710, 0x2b07e8, 0x9ce611, 0x2504e9, 0x9fe710, 0x2504e9,
				0x9fe710, 0x2605e8, 0x9ee41f, 0x2b3be8, 0x9ee41f, 0x2a3ae9, 0x99e71c, 0x283aea, 0x99e71c, 0x373be8, 0x9ae01b, 0x343ced, 0x98e718, 0x333dee, 0x98e718, 0x303eef, 0x96e91a, 0x333fee, 0x96e91a, 0x323eec, 0x93e819, 0x333ded, 0xace91e, 0x313ded, 0xace91e, 0x303bea, 0xaae919, 0x3d3bed, 0xabea1e, 0x3f3aec, 0xabea1e, 0x3a3aed, 0xaaf51f, 0x253bee, 0xa8f61e, 0x2438ef, 0xadf51f, 0x2539ee, 0xa2f21e, 0x2438f1, 0xa0f21f, 0x233af0, 0xa0f21f, 0x2235ef, 0xa3f300, 0xdd35ee, 0xa0f003, 0xdc33ee, 0xa7f102, 0xdd30e9, 0xa7f102, 0xdf30ee, 0xa8f005, 0xdd4eec, 0xa8f005, 0xdd4eee, 0xa9f304, 0xd848ec, 0xa8f20b, 0xc64aec, 0xa8f20b, 0xc44bec, 0xaff30a, 0xc545ed, 0xacf00b, 0xc444ee, 0xacf00b, 0xca42e8, 0xaff30a, 0xcb43e8, 0xa8ec09, 0xca5ce8, 0xabf308, 0xcb5ee9, 0x94f209, 0xc85ed6, 0x93f508, 0xc85ee8,
				0x92f437, 0xc85ee8, 0x91f736, 0xc650ea, 0x90f631, 0xc352ea, 0x90f631, 0xc155ea, 0x8ef433, 0xc255eb, 0x89f53c, 0xc06ae4, 0x86f533, 0xc155e9, 0x84f530, 0xc768e9, 0x87f531, 0xb869e6, 0x86f230, 0xbb68e5, 0x87f131, 0xbd68e2, 0x84f030, 0xbc66e3, 0x8bf331, 0xbd65e3, 0x88f032, 0xbc64e3, 0x8ff733, 0xbf65fc, 0x8ff733, 0xa066e3, 0x8de92d, 0xa167e0, 0x8aea2c, 0xa066e7, 0x8aea2c, 0xa366e1, 0x8bed2d, 0xac67e6, 0x8aee2c, 0xaf66e5, 0x8aee2c, 0xaf66e7, 0x8aee2c, 0xa968e5, 0x8aee2c, 0xa86be4, 0x89ef23, 0xa96ce5, 0xb6ee20, 0xa96ce6, 0xb7ed23, 0xab6ce4, 0xb0ec22, 0xa96ce7, 0xbe1224, 0xa86fe6, 0xbc1227, 0xae68e6, 0xa11226, 0xae68e4, 0xa31125, 0xaf69e5, 0xa51025, 0xac68e5, 0xab1f5a, 0xae6ae7, 0xaa1e5b, 0xa96be5, 0xa91f58, 0xa96de3, 0xa91f58, 0xa96de3, 0xa91f58, 0xa96de3, 0xa91c59, 0xa973e0,
				0xa91c59, 0xa972e0, 0xa91e57, 0xa972e0, 0xa91e57, 0xa974e1, 0xa91355, 0xab70e1, 0xad1352, 0xbc78e5, 0x980a57, 0xc69394, 0x724a67, 0x80b598, 0x7d4b67, 0x82b199, 0x7d4864, 0x81bf99, 0x784863, 0x81b097, 0x784a62, 0x81b39b, 0x794a60, 0x81b29a, 0x794a60, 0x81b29a, 0x794a60, 0x81b29a, 0x794a60, 0x81b29a, 0x794a60, 0x81b29a, 0x794a60, 0x81b29a, 0x794a60, 0x81b29a, 0x794a60, 0x81b29a, 0x794a60, 0x81b29a, 0x794a60, 0x81b29a, 0x794a60, 0x81b29a, 0x794a60, 0x81b29a, 0x794a60, 0x81b29a, 0x794a60, 0x81b29a, 0x794a60, 0x81b29a, 0x794a60, 0x81b29a, 0x794a60, 0x81b298, 0x784b61, 0x81b298, 0x784b61, 0x81b298, 0x7b4862, 0x83b09a, 0x75466c, 0x81b395, 0x704163, 0x9eb095, 0x704163 };
		System.arraycopy(aFor, 0, key, 21910, aFor.length);
	}

	private static void init75(int[] key) {
		int[] aFor = { 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x88b898, 0x704163, 0x89b89a, 0x704163, 0x89b89a, 0x704163, 0x8ab99a, 0x704163, 0x88b99b, 0x714062, 0x88b99b, 0x7f4e6c, 0x88b696, 0x704f6d, 0x89b591, 0x704e6b, 0x8eb390, 0x764969, 0x9dbf93, 0x485465, 0xf6b697, 0x5f6179, 0xc7b192, 0x516260, 0xc8b495, 0x536c62, 0xcdb595, 0x6f6c62, 0xccb597, 0x6a6c63, 0xcdb696, 0x6a6c63, 0xc2b696, 0x686a61, 0xc6b796, 0x69696e, 0xd9b798, 0x69696e, 0xdbb799, 0x686861, 0xde8899, 0x686861, 0xd18a99, 0x6b6960, 0xd18a99,
				0x6b6960, 0xd08898, 0x696a60, 0xdf8a96, 0x6a5563, 0xde8b95, 0x6a5563, 0xdb8b96, 0x6b5662, 0xdb8a97, 0x755663, 0xdb8a95, 0x765160, 0xda8a97, 0x765160, 0xdc8895, 0x755061, 0xd38892, 0x755f67, 0xd18891, 0x755f67, 0xd58a93, 0x4a5e60, 0xd48d93, 0x485e61, 0xd38c90, 0x4a5e60, 0xd28d93, 0x455f61, 0xd08e92, 0x445e60, 0xd08e92, 0x434163, 0xd38e91, 0x5d4060, 0xd68d90, 0x5d4060, 0xd78c8f, 0x504761, 0xd68d8e, 0x534460, 0xd08d8d, 0x534460, 0xd28d8f, 0x524561, 0x2d828e, 0x534460, 0x2e808e, 0x524363, 0x29818f, 0x534064, 0x2a8088, 0x523f63, 0x258189, 0x533c60, 0x268289, 0x523f61, 0x218388, 0x50396f, 0x3f8089, 0x50396f, 0x3e8188, 0x50396f, 0x3b8189, 0x51366c, 0x388088, 0x50356b, 0x368788, 0x53366a, 0x37868b, 0x53366a, 0x31868b, 0x53366a, 0x3398b5, 0x6c356b, 0x31988b, 0x6d3454, 0x369f8a,
				0x6d3454, 0x379e8b, 0x6d3454, 0x359c89, 0x633a52, 0x379f8e, 0x633a52, 0x309e89, 0x613a53, 0x2c988a, 0x603952, 0x2a998b, 0x6d3953, 0x2a9989, 0x6f3950, 0x2ca787, 0x6e3a51, 0x51a686, 0x6f3d50, 0x52a785, 0x6e3e51, 0x55a485, 0x6c3c57, 0x54ab86, 0x6c3c57, 0x5aaa85, 0x6c3c57, 0x59a986, 0x6d3d56, 0x5eae86, 0x6c3c49, 0x43ad87, 0x6d3d4a, 0x40b284, 0x6c3c49, 0x47b185, 0x6d3d4e, 0x45b682, 0x6d3d4e, 0x45b682, 0x623c49, 0x44b583, 0x613d4a, 0x44b583, 0x60324b, 0x43b482, 0x60324b, 0x41b68c, 0x60324b, 0x40b18d, 0x5f3348, 0x40b18d, 0x5e3049, 0x42b18c, 0x593148, 0x42b18c, 0x5ace4e, 0x4cb38c, 0x58ce4d, 0x4bb58f, 0x5bce4e, 0x4bb58f, 0x45ce4f, 0x48b78e, 0x42ce4e, 0x4bb6f1, 0x43c14f, 0x44b7f1, 0x41c24c, 0x43b6f1, 0x41c24c, 0x40b1f0, 0x41c24c, 0x41b1f0, 0x41c24c, 0x41b0f7, 0x41c14d, 0x41aef5,
				0x41de4f, 0x40b1f5, 0x40dc4d, 0x40b0fa, 0x41dd42, 0x41b7f4, 0x41d247, 0x43b3f4, 0x44d25b, 0x5ba0e3, 0x65255e, 0x138e93, 0xad6f67, 0x599098, 0xa26c66, 0x5f949a, 0xa16364, 0x5c949f, 0xa06c66, 0x5a9593, 0xa36f66, 0x5a969f, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa26f64, 0x5b969d, 0xa16c67, 0x59949f, 0xaf6269, 0x5b9790, 0xaa6566, 0x449490, 0xaa6566 };
		System.arraycopy(aFor, 0, key, 22210, aFor.length);
	}

	private static void init76(int[] key) {
		int[] aFor = { 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x539f9a, 0xaa6566, 0x509f9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x519c9c, 0xaa6566, 0x509f9c, 0xaa6566, 0x539c9f, 0xa46567, 0x539d9d, 0xa46661, 0x5d9b9f, 0xaa6063, 0x509e9e, 0xbe6664, 0x65899c, 0xa5686e, 0xcbf80, 0x976c6e, 0x3a383, 0x947770, 0xda185, 0x917672, 0xfaf8b, 0x907571, 0x31af89, 0x93767e, 0x37ac88, 0x90767d, 0x38ac88, 0x92707f, 0x3fac89, 0x91717e, 0x3eac89, 0x91717c, 0x23af8b, 0x907073, 0x25af84, 0x934f7c, 0x2bae8b, 0x924c73, 0x28af8a, 0x924c73,
				0x29ad8b, 0x924c73, 0x25ac85, 0x934c73, 0x269384, 0x924d72, 0x239387, 0x934e73, 0x239286, 0x934e73, 0x3d9285, 0x934e73, 0x3f9584, 0x934e73, 0x389485, 0x914c71, 0x369585, 0x904d76, 0x359583, 0x914275, 0x309480, 0x904174, 0xf9580, 0x914673, 0xa9482, 0x904572, 0xa9781, 0x924472, 0x59686, 0x904775, 0x49787, 0x975876, 0x79784, 0x885975, 0x59484, 0x8e5974, 0x4959b, 0x8d5e75, 0xb949a, 0x8e5d74, 0xd9499, 0x8e5d74, 0xf949b, 0x8e5d74, 0xf19a9b, 0x8f5c75, 0xf2989b, 0x8e5b76, 0xf5999a, 0x8f5871, 0xf5999c, 0x8d2677, 0xfa989d, 0x8d2677, 0xfb999d, 0x8e2774, 0xfd9b9d, 0x8f2075, 0xff9a92, 0x8f2075, 0xe0999d, 0x8e217a, 0xe5999c, 0x8f2e79, 0xe6989d, 0x8e2d7e, 0xe99e9a, 0x8f2c79, 0xea9d9b, 0x8e2d7a, 0xed9c98, 0x8f2c79, 0xee8399, 0x8e2d46, 0xd380a6, 0x8f2c79, 0xd380a6, 0x882b78, 0xd38098,
				0x892a47, 0xd08399, 0x872445, 0xd0829b, 0x852446, 0xd1819a, 0x822541, 0xd2879b, 0x9f2542, 0xd48498, 0x9e2441, 0xd9849b, 0x9f1b42, 0xdb849a, 0x981a4d, 0xd88795, 0xe71b42, 0xda8197, 0xe71b42, 0xdc8196, 0xe61845, 0xdf8097, 0xe71746, 0xd08095, 0xe61647, 0xd38396, 0xe71746, 0xd48496, 0xe71746, 0xd78589, 0xf81447, 0xd59b89, 0xf91544, 0xd59b89, 0xfe1645, 0xd79a88, 0xff1144, 0xd79a88, 0xf01043, 0xd69989, 0xf31140, 0xd69989, 0xf21e41, 0xd19888, 0xf21e41, 0xd09b89, 0xf11f4e, 0xd19c88, 0xce1e4d, 0xd19c88, 0xcf1d4c, 0xd39c89, 0xcf1d4c, 0xd39c89, 0xc9e34a, 0xde9d89, 0xcbe148, 0xd89a8a, 0xcbe148, 0xda9d8a, 0xcae64b, 0xc49c89, 0xc9e548, 0xc39c88, 0xcae437, 0xcd9289, 0xc8e734, 0xcb9489, 0xc9e034, 0xc89388, 0xcae735, 0xca9388, 0xcae034, 0xca918e, 0xcae137, 0xca8e8f, 0xcaff35, 0xcb908f,
				0xcbfd37, 0xca908f, 0xcbfd37, 0xcb9781, 0xcbf232, 0xc9ad9d, 0xc5f236, 0xf5888f, 0xae1048, 0x3eac9f, 0xf54b6c, 0xb493, 0xf84e6a, 0x4b991, 0xf94f6c, 0x4b897, 0xf9416d, 0x2bb9b, 0xf8406d, 0x1b994, 0xf9406f, 0x3ba95, 0xf9406f, 0x3ba95, 0xf9406f, 0x3ba95, 0xf9406f, 0x3ba95, 0xf9406f, 0x3ba95, 0xf9406f, 0x3ba95, 0xf9406f, 0x3ba95, 0xf9406f, 0x3ba95, 0xf9406f, 0x3ba95, 0xf9406f, 0x3ba95, 0xf9406f, 0x3ba95, 0xf9406f, 0x3ba95, 0xf9406f, 0x3ba95, 0xf9406f, 0x3ba95, 0xf9406f, 0x3ba95, 0xf9406f, 0x3ba95, 0xf9406f, 0xb996, 0xf9406f, 0xb996, 0xf9406f, 0x3ba95, 0xf9406f, 0x1b897, 0xf74e61, 0x3bb98, 0xf2496e, 0x1cb898, 0xf2496e };
		System.arraycopy(aFor, 0, key, 22510, aFor.length);
	}

	private static void init77(int[] key) {
		int[] aFor = { 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0xbb294, 0xf2496e, 0x8b394, 0xf2496e, 0x8b394, 0xf2496e, 0x8b396, 0xf2496e, 0x8b394, 0xf14a6d, 0x9b396, 0xfe4b6c, 0xbb296, 0xfc4f6b, 0x4b294, 0xf64869, 0x1db296, 0xca5d6f, 0xab99b, 0xa36e75, 0x3bbf9b, 0xa96e6b, 0x3bbf99, 0xa2696c, 0x38bc99, 0xa46b6e, 0x39b396, 0xa76a6d, 0x39b394, 0x996b6d, 0x3bb29a, 0x9f686c, 0x38b299, 0x91696f, 0x3ab497, 0x916961, 0x3cb597, 0x926860, 0x22b696, 0x90566e, 0x23b699, 0x96696e, 0x218998, 0x99686f, 0x208a97, 0x99686f, 0x228997, 0x99686f,
				0x218998, 0x99686f, 0x2f8899, 0x9a576c, 0x298a99, 0x9a576c, 0x2b8a9a, 0x9a576c, 0x348b9a, 0x9a576c, 0x368c99, 0x9d566d, 0x378f98, 0x9d566d, 0x348e99, 0x93576d, 0x358e9b, 0x90566e, 0x348198, 0x97576d, 0x8839e, 0x96506c, 0xa839e, 0x91516f, 0xb839c, 0x93506f, 0x4829b, 0x925368, 0x6839a, 0x954c6b, 0x7829b, 0x974d69, 0x1a8098, 0x974d69, 0x1c8099, 0x964c76, 0x10869b, 0x964c76, 0x128698, 0x964c76, 0x148686, 0x954f69, 0x158799, 0x6a4076, 0x148698, 0x694375, 0x128199, 0x684072, 0x12819f, 0x6b4173, 0x13fe98, 0x644072, 0x13fe98, 0x654371, 0x11fe9b, 0x624272, 0x13f99a, 0x63437d, 0x13f994, 0x7c407c, 0x10f99b, 0x7b417d, 0x12f799, 0x7b417d, 0x13f598, 0x74467c, 0x12f49f, 0x77457d, 0x13f79e, 0x70467c, 0x12f69d, 0x725842, 0x2cf6a3, 0x715b43, 0x2df79c, 0x715b43, 0x2cf1a3, 0x715b43, 0x2af39d,
				0x725b40, 0x25fd9e, 0x735843, 0x27fd9f, 0x745944, 0x24fb9e, 0x695947, 0x22f89d, 0x685844, 0x20f99d, 0x675945, 0x22f99c, 0x61674b, 0x23fb93, 0x626044, 0x5cfb92, 0x616147, 0x5dfa92, 0x666046, 0x5cf995, 0x656147, 0x5cf693, 0x646040, 0x52f692, 0x676343, 0x53f792, 0x676343, 0x56f093, 0x79615d, 0x57f192, 0x7a7e5c, 0x56f091, 0x7a7e5c, 0x50f291, 0x7a7e5c, 0x50f291, 0x79795d, 0x51f396, 0x767a5c, 0x53f295, 0x767a5c, 0x52fd96, 0x717b5f, 0x53fe97, 0x727a50, 0x53fe97, 0x737d51, 0x6cff94, 0x737d51, 0x6ffc94, 0x737d51, 0x6ffc94, 0x747c50, 0x630293, 0x757f51, 0x610290, 0x757f51, 0x640393, 0x757f51, 0x7a0492, 0x747e50, 0x7f0491, 0x767c2e, 0x7e0b90, 0x787d2e, 0x7c0990, 0x7f7c2e, 0x7d0893, 0x7f7c2e, 0x7f0893, 0x7f7b2f, 0x7f0994, 0x7f792d, 0x7f0994, 0x7f782e, 0x7e1794, 0x7e792d, 0x7c1794,
				0x7d7a2c, 0x7d109a, 0x7d762b, 0x7d2d81, 0x694f2b, 0x21c6ea, 0xa1743d, 0x12a0da, 0xcc512d, 0x35aed2, 0xcd562a, 0x36a0d0, 0xcb572b, 0x36aed1, 0xcd5429, 0x37afdf, 0xcd5527, 0x37afdb, 0xcd5527, 0x37afdd, 0xcd5527, 0x37afdd, 0xcd5527, 0x37afdd, 0xcd5527, 0x37afdd, 0xcd5527, 0x37afdd, 0xcd5527, 0x37afdd, 0xcd5527, 0x37afdd, 0xcd5527, 0x37afdd, 0xcd5527, 0x37afdd, 0xcd5527, 0x37afdd, 0xcd5527, 0x37afdd, 0xcd5527, 0x37afdd, 0xcd5527, 0x37afdd, 0xcd5527, 0x37afdd, 0xcd5527, 0x37afdd, 0xcd5527, 0x37afdd, 0xcd5527, 0x34acde, 0xce5624, 0x34acde, 0xcd5527, 0x37afdd, 0xcd5527, 0x35addf, 0xc35b29, 0x37aed0, 0xc65c26, 0x28add0, 0xc65c26 };
		System.arraycopy(aFor, 0, key, 22810, aFor.length);
	}

	private static void init78(int[] key) {
		int[] aFor = { 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3fa7dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6dc, 0xc65c26, 0x3ca6de, 0xc65c26, 0x3ca6dc, 0xcb5f24, 0x33a6df, 0xc45d23, 0x31a6d8, 0xc95826, 0x3ea4d9, 0xd75225, 0x4bfdf, 0xbf5e2b, 0x1786c4, 0x8f572a, 0x198c5, 0x914a30, 0x299c6, 0x954f31, 0xf9ac4, 0x924c30, 0xc9ac7, 0x934d3f, 0xc9ac7, 0xac423e, 0xe9bc6, 0xaa423e, 0xd98c9, 0xa4433f, 0xe9fc8, 0xa4433f, 0x898ca, 0xa5443c, 0x159aca, 0xa77a32, 0x15a5c4, 0xa64533, 0x109ac6, 0xa77a30, 0x1f9bc7, 0xa6793f,
				0x1d98c7, 0xa17a3e, 0x1898c6, 0xa17a3e, 0x169bc9, 0xa07b3f, 0x15a4c8, 0xa17a3e, 0x13a4c9, 0xa2793f, 0xda4c8, 0xa2793f, 0xfa5c9, 0xa47f3d, 0xfa5cb, 0xa47f3d, 0xea6c8, 0xa77e3c, 0xa6ca, 0xa57e3f, 0x1a9c9, 0xa27f3c, 0x2aac8, 0x9d7e3b, 0xaac8, 0x9d7e3b, 0x6adcf, 0x9c7f3c, 0xbadc8, 0x9d7c3b, 0x8adc8, 0x9c7d3a, 0xfb2cb, 0x9f7d3b, 0x10b3ca, 0x9d7e3b, 0x11b0ca, 0x9b7c25, 0x1cb7cb, 0x9b7c25, 0x1eb7ca, 0x9b7c25, 0x19b6d5, 0x987f3a, 0x18b7ca, 0x987f3a, 0xe7b8d5, 0x9a7d38, 0xe6bed5, 0x9d7c39, 0xe7bdd4, 0x9e7d38, 0xe7bdd4, 0x9f023f, 0xe8bcd5, 0x9f023f, 0xebbfd5, 0x9f023f, 0xeeb9d7, 0x9f023f, 0xefb8d6, 0x9f023f, 0xf3bbd8, 0x98033e, 0xf2b4db, 0x9b023f, 0xf2b7d9, 0x9a033c, 0xfdb0d8, 0x9b023b, 0xfeb1df, 0x9a033c, 0xf9b2de, 0x981d3e, 0xc7b2dc, 0x991c3d, 0xc4b1dd, 0x981d02, 0xc6b6e3,
				0x9b1c03, 0xc7b5dc, 0x9c1d02, 0xc4badd, 0x931c03, 0xc6bade, 0x921f02, 0xc3bcd9, 0x931e03, 0xdebcd8, 0x951d02, 0xdcbfd8, 0x941e01, 0xd2bfdb, 0x962003, 0xd5bdda, 0x972102, 0xa8bdd5, 0x962603, 0xaabdd6, 0x912702, 0xabbed1, 0x912702, 0xa8b0d6, 0x912702, 0xa6b0d1, 0x932500, 0xa6b0d2, 0x922403, 0xa3b7d3, 0x93251c, 0xbcb4cc, 0x922403, 0xbfabcd, 0x922403, 0xb9a9cd, 0x922403, 0xb8a8ce, 0x912302, 0xb9a9c9, 0x912302, 0xb7aac8, 0x922201, 0xb7aaca, 0x932d00, 0xb0abc9, 0x922e01, 0xb0abc9, 0x912f0e, 0xb1acc8, 0xae2e0d, 0xb3accb, 0xae2e0d, 0xb2afc8, 0xa92f0c, 0xb150c8, 0xa62e0b, 0xb350c9, 0xa62e0b, 0xb453c8, 0xa52f0a, 0xaa54c9, 0xa42e0b, 0xaf54ca, 0xa52d0a, 0xac55b5, 0xab2d0b, 0xad5bcb, 0xa92d74, 0xaa58ca, 0xa82c77, 0xa858ca, 0xa82c77, 0xa85ecc, 0xa82f76, 0xa85dcd, 0xa82d77, 0xa843ce,
				0xa82d77, 0xaa43ce, 0xaa2f79, 0xaa46cc, 0xa8207e, 0xa97bd9, 0x8b1669, 0xef8aa4, 0x4a464f, 0x9fadb7, 0x70574b, 0x8ca8b4, 0x74504c, 0x8fa6b6, 0x73514d, 0x88a8b7, 0x72524f, 0x8ba9b9, 0x725241, 0x88a8bd, 0x725143, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x88abbf, 0x725145, 0x8aa9bd, 0x7c5f4b, 0x88aab2, 0x795844, 0x97a9b2, 0x795844 };
		System.arraycopy(aFor, 0, key, 23110, aFor.length);
	}

	private static void init79(int[] key) {
		int[] aFor = { 0x83a2be, 0x795844, 0x83a2be, 0x795844, 0x83a2be, 0x795844, 0x83a2be, 0x795844, 0x83a2be, 0x795844, 0x83a2be, 0x795844, 0x83a2be, 0x795844, 0x83a2be, 0x795844, 0x83a2be, 0x795844, 0x83a2be, 0x795844, 0x83a2be, 0x795844, 0x83a2be, 0x795844, 0x83a2be, 0x795844, 0x83a2be, 0x795844, 0x83a2be, 0x795844, 0x83a2be, 0x795844, 0x80a3be, 0x795844, 0x83a2bc, 0x795844, 0x83a2bc, 0x795844, 0x83a2bc, 0x795844, 0x83a4bf, 0x745d47, 0x8da7bb, 0x745a45, 0x82a1bb, 0x745a45, 0x9badbc, 0x414048, 0xf9a1bd, 0x64754f, 0xf6baa1, 0x7a7451, 0xf0a4a5, 0x7e705d, 0xeea4aa, 0x7b7152, 0xe2a5a6, 0x7e7055, 0xe0a5a1, 0x7f7354, 0xe0a5a1, 0x407257, 0xe1aaa1, 0x427256, 0xe5a8a1, 0x4d7156, 0xe4aaa0, 0x4e7657, 0xe3aaa1, 0x4d7756, 0xfda9a0, 0x4d7756, 0xffa8a0, 0x4d7756, 0xfba9a1, 0x4d7756, 0xf4a8a0,
				0x4e4857, 0xf5a9af, 0x4e4857, 0xf4abae, 0x4d4956, 0xf5a8a1, 0x4d4956, 0xfba9ae, 0x4d4956, 0xff97a1, 0x4e4a57, 0xe197a2, 0x514954, 0xfe94a3, 0x534f56, 0xf895a0, 0x534f56, 0xf895a0, 0x524c55, 0xf594a3, 0x534356, 0xf69ba3, 0x524c57, 0xf39aa2, 0x524c57, 0xcd9aa2, 0x534f56, 0xcf9ba3, 0x544857, 0xcc9ba4, 0x5b4956, 0xce98a5, 0x5b4956, 0xcf99a4, 0x5e4955, 0xce86a7, 0x404856, 0xcc86a7, 0x474b57, 0xcf87b8, 0x474b57, 0xc187a7, 0x474b57, 0xc581a7, 0x474b57, 0xc682a6, 0x464a56, 0xc682a6, 0xb94549, 0xc481a7, 0xb8424a, 0xc283a1, 0xb8424a, 0xc182a6, 0xb93d4d, 0xc182a6, 0xb63c4c, 0xc382a7, 0xb73f4d, 0xc583a4, 0xb73f4d, 0xc684a7, 0xb63e4e, 0xdb84a6, 0xb03c40, 0xda8ba5, 0xb03c40, 0xdc8aa7, 0xb73f41, 0xdf8ba4, 0xb83840, 0xde8ca5, 0xbb3f41, 0xdf8da2, 0xbd3d43, 0xe292a1, 0xbc3c40, 0xe390a0,
				0xbd3b7f, 0xe390a0, 0xbd3b7f, 0xe0919f, 0xbc3840, 0xe590a0, 0xbc3840, 0xeb9e9e, 0xbe3843, 0xed9d9e, 0xbc3e45, 0xf29d9f, 0xbe3e46, 0xf49d9d, 0xbd3f47, 0xfb9e9d, 0xbe3e44, 0xfaa09e, 0xb93d47, 0x86a190, 0xb93d47, 0x84a191, 0xb83a44, 0x83a090, 0xb93943, 0x83a196, 0xba3642, 0x8da191, 0xbb3743, 0x8ea291, 0xbb3743, 0x8fa392, 0xbc3042, 0x93a18c, 0xbd3141, 0x93a18e, 0xbe2e40, 0x92a08f, 0xbe2e40, 0x95a38e, 0xbf2f43, 0x96a48f, 0xbe2e44, 0x96a48f, 0xb12d45, 0x97a48f, 0xb22c46, 0x96ab8c, 0xb52d45, 0x97a88d, 0xb52d45, 0x94a982, 0xb42a44, 0x94a983, 0x8b2b45, 0x97aa80, 0x8c2a44, 0x95aa87, 0x8dd545, 0x9baa86, 0x8ed444, 0x9ca987, 0x8dd545, 0x9da887, 0x92d446, 0x9cae84, 0x91d745, 0x9bae85, 0x93d73a, 0x94a0fb, 0x91d73b, 0x92a285, 0x90d638, 0x92a285, 0x90d638, 0x91a584, 0x91d73f, 0x90a684,
				0x90d63e, 0x91b984, 0x93c93f, 0x92a487, 0x92cc33, 0x92ab87, 0x97c233, 0x86ab80, 0xbed43d, 0x3f66e6, 0xfeb911, 0x1343ee, 0xebbf15, 0x1743ef, 0xeeb417, 0x1542ed, 0xe9ba14, 0x1340ec, 0xe9bc1b, 0x1e40ed, 0xe9bc15, 0x1345eb, 0xe8bc15, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1246e9, 0xe8bc13, 0x1145ea, 0xe7b31c, 0x1346e5, 0xe2b413, 0xc45e5, 0xe2b413 };
		System.arraycopy(aFor, 0, key, 23410, aFor.length);
	}

	private static void init80(int[] key) {
		int[] aFor = { 0x184ee9, 0xe2b413, 0x184ee9, 0xe2b413, 0x184ee9, 0xe2b413, 0x184ee9, 0xe2b413, 0x184ee9, 0xe2b413, 0x184ee9, 0xe2b413, 0x184ee9, 0xe2b413, 0x184ee9, 0xe2b413, 0x184ee9, 0xe2b413, 0x184ee9, 0xe2b413, 0x184ee9, 0xe2b413, 0x184ee9, 0xe2b413, 0x184ee9, 0xe2b413, 0x184ee9, 0xe2b413, 0x184ee9, 0xe2b413, 0x184ee9, 0xe2b413, 0x1b4fe9, 0xe2b413, 0x184eeb, 0xe2b413, 0x194eeb, 0xe2b413, 0x184ee9, 0xe2b413, 0x184fee, 0xedb616, 0x174aed, 0xeeb711, 0x1a4eed, 0xf4b710, 0x1647e9, 0xd1a31d, 0x737be9, 0xf9b707, 0x7c7ee9, 0xfab11b, 0x7261ed, 0xfeb517, 0x7166e1, 0xe2b517, 0x7561e4, 0xe9b417, 0x7761e3, 0xe8b717, 0x7761e3, 0xd7b616, 0x766ee0, 0xd4b717, 0x726ee1, 0xdab716, 0x736ce0, 0xd9b017, 0x776dee, 0xd9b019, 0x766dee, 0xd9b01b, 0x686ded, 0xdab21b, 0x6e6ced, 0xd8b21a, 0x6f6de2,
				0xd58d15, 0x6e6ced, 0xd58d15, 0x686eef, 0xd18c17, 0x696de0, 0xd18c17, 0x696cee, 0xde8d17, 0x6b52e0, 0xda8f16, 0x6b52e0, 0xdb8c16, 0x7451e1, 0xd98a14, 0x7250e2, 0xde8b15, 0x7250e2, 0xd98a14, 0x7e52e2, 0xd88517, 0x7d5de2, 0xd98a16, 0x7d5de0, 0xdc8b15, 0x7d5de3, 0xe28b16, 0x7f58e3, 0xe48b17, 0x7e59e4, 0xe68a17, 0x7158e3, 0xe48910, 0x7059e2, 0xe39613, 0x7359e1, 0xfc9613, 0x7258e1, 0xfe9610, 0x755be0, 0xfd970f, 0x755bfe, 0xf3970e, 0x775efe, 0xf5940e, 0x745dff, 0xf5940e, 0x755cfe, 0xa9b11, 0x745efe, 0x99a10, 0x7258fc, 0x89917, 0x7159fb, 0x89917, 0x7026fc, 0x79816, 0x7226fd, 0x69b17, 0x7527fe, 0x79b17, 0x7620fd, 0x69a14, 0x6b20fc, 0x7991b, 0x6d2efe, 0x7991b, 0x6d2ffc, 0x49a1a, 0x6c2eff, 0xb9d1b, 0x6d29fe, 0x89a1a, 0x6c28f9, 0xf991b, 0x6d36f8, 0xc981a, 0x5334fa, 0xc981a, 0x5334fa,
				0xd9f25, 0x5035c5, 0xc9c1a, 0x5534fa, 0xd9325, 0x5a35fb, 0xc9026, 0x5f34fd, 0xe9726, 0x5e35fc, 0x139725, 0x5f34fc, 0x169626, 0x5e37ff, 0x1b9726, 0x5f08fe, 0x1c9629, 0x5e0bff, 0x619728, 0x5f0cfe, 0x63972b, 0x580dff, 0x62942c, 0x580cf9, 0x62942c, 0x5503ff, 0x63952d, 0x5503fe, 0x60962c, 0x5402fd, 0x67912d, 0x5703e2, 0x78922c, 0x5602e3, 0x7b8d2d, 0x5602fd, 0x7a8c32, 0x5101fc, 0x7b8d31, 0x5206fd, 0x7a8c36, 0x5206fd, 0x7a8c36, 0x5c05fc, 0x7a8c36, 0x5e0bfc, 0x7a8c36, 0x590aff, 0x7b8f37, 0x590aff, 0x788e38, 0x580dff, 0x478f39, 0x5b0efc, 0x408e38, 0x5b0efc, 0x428e3f, 0x55f0fc, 0x408e3e, 0x54f2fd, 0x458e3f, 0x54f2fd, 0x5b8e3c, 0x55f4fe, 0x588d3f, 0x54f5ff, 0x5d8d40, 0x55f580, 0x53833e, 0x57f780, 0x55833d, 0x57f780, 0x55833d, 0x57f780, 0x56843c, 0x57f581, 0x579a3a, 0x57ea80,
				0x549b3c, 0x55f684, 0x559334, 0x57f580, 0x5a9c34, 0x72e58e, 0x207448, 0xb7cbaa, 0x652251, 0x92dcae, 0x692757, 0x92ddaf, 0x692455, 0x93dcae, 0x6a2555, 0x90dfad, 0x6a235a, 0x93d8ac, 0x6a2354, 0x90d9a8, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6b2054, 0x91daae, 0x6a2155, 0x90dbaf, 0x6a2155, 0x90dbaf, 0x6a2155, 0x93d8ac, 0x652e5a, 0x91dba3, 0x602955, 0x8ed8a3, 0x602955 };
		System.arraycopy(aFor, 0, key, 23710, aFor.length);
	}

	private static void init81(int[] key) {
		int[] aFor = { 0x9ad3af, 0x602955, 0x9ad3af, 0x602955, 0x9ad3af, 0x602955, 0x9ad3af, 0x602955, 0x9ad3af, 0x602955, 0x9ad3af, 0x602955, 0x9ad3af, 0x602955, 0x9ad3af, 0x602955, 0x9ad3af, 0x602955, 0x9ad3af, 0x602955, 0x9ad3af, 0x602955, 0x9ad3af, 0x602955, 0x9ad3af, 0x602955, 0x9ad3af, 0x602955, 0x9ad3af, 0x602955, 0x9ad3af, 0x602955, 0x99d2af, 0x602955, 0x9ad3af, 0x612a55, 0x9cd3ad, 0x612a57, 0x9ad3ab, 0x632957, 0x9bd5a8, 0x6f2d51, 0x95d1a8, 0x692f53, 0x99d6ab, 0x462452, 0x81c3ae, 0x2d1859, 0xbcc8aa, 0x380244, 0xb9c8a9, 0x3e185a, 0xb0cca2, 0x3f1f54, 0xaecca2, 0x3b195a, 0xa3cdac, 0x3a1958, 0xa3cdaa, 0x3e1b5e, 0xa0ccaa, 0x3f145f, 0xa0ccaa, 0x1b5f, 0xa3c2aa, 0x51b5c, 0xadc2ab, 0x4195d, 0xa8c2aa, 0x61952, 0xa9c5ab, 0x6185c, 0xa8c4aa, 0x18185f, 0xaac6a8, 0x1f195f, 0xaac6a8, 0x1d1950,
				0xa5f9a9, 0x1e1953, 0xa3faa9, 0x1e1953, 0xa2fbaa, 0x1a1a5d, 0xa2fbaa, 0x151a5d, 0xa3faab, 0x11255d, 0xa3faab, 0x12245e, 0xbdf9ab, 0x13255f, 0xbefeaa, 0x12245e, 0xbefda8, 0x14245d, 0xbcfdaa, 0x1b255c, 0xbdf2a9, 0x19255d, 0xbdf2a9, 0x1c255a, 0xbcf0ae, 0x22255d, 0xbff1ae, 0x24255c, 0xbff6a8, 0x27255b, 0xbff6a8, 0x28245a, 0xbdf4a8, 0x29245a, 0xb8f4a9, 0x373b5b, 0xb9f5aa, 0x373b5b, 0xbaf6aa, 0x313b5a, 0xbbf0ab, 0x3c3b5b, 0xbaf1b4, 0x3f3a5b, 0xbbf3ab, 0x383b44, 0xbbf3b5, 0x393445, 0xb8f2aa, 0x383744, 0x45f3aa, 0x3e3146, 0x47f1ac, 0x3f4e45, 0x47f1ac, 0x3f4e45, 0x48f0af, 0x3d4e46, 0x49f3ac, 0x3d4e46, 0x4ff2af, 0x3e4947, 0x53f3af, 0x3f4a48, 0x54f2ae, 0x3f4a48, 0x55fdad, 0x3c4b49, 0x54ffac, 0x334c48, 0x55feab, 0x304f49, 0x55feab, 0x314e4a, 0x53e0aa, 0x324f4a, 0x52e2ab, 0x324f4a,
				0x6fe2aa, 0x324f4a, 0x6ee395, 0x35484b, 0x6ce195, 0x344948, 0x6ce195, 0x3a474e, 0x6ee294, 0x3c474f, 0x6de395, 0x23404c, 0x6ce496, 0x21404c, 0x6ae294, 0x22434d, 0x65e395, 0x237c42, 0x67e197, 0x267d42, 0x19e195, 0x277a43, 0x1be397, 0x277a43, 0x1ce097, 0x267944, 0x1fee90, 0x277843, 0x10ed91, 0x277843, 0x12ed91, 0x207f5e, 0x12ed91, 0x207f5e, 0x11ee90, 0x3f7e5d, 0x11ee92, 0x3d7e5c, 0x16f191, 0x3c7f5d, 0x14f397, 0x3c7f5d, 0x1bf596, 0x3c7f5d, 0x1af697, 0x3c7f5d, 0x19f796, 0x3d705c, 0x19f595, 0x3a715d, 0x19f594, 0x3a715d, 0x1af29b, 0x5705e, 0x1bf19a, 0x4735f, 0x1af29a, 0x8d59, 0x18f09a, 0xf8e59, 0x18f39c, 0xd8e58, 0x19f29d, 0x88e59, 0x18f59a, 0x158c5b, 0x19f49a, 0x158c5a, 0x1cf4e7, 0x1b825a, 0x1df7e7, 0x198359, 0x1af6e5, 0x1b8059, 0x1bf5e2, 0x1a865e, 0x1bf6e1, 0x198721, 0x19e89a,
				0x1d9c24, 0x1df091, 0x1c9720, 0x1dc98c, 0x38bc30, 0x7f348e, 0x29b5a, 0xb14ab1, 0x6ea54f, 0x965eb0, 0x6ba34b, 0x9c54be, 0x66a845, 0x9153b9, 0x66a845, 0x9c52bf, 0x67a847, 0x9c52b1, 0x67a847, 0x9c52bf, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9c52bd, 0x66a847, 0x9f51be, 0x69a748, 0x9d52b1, 0x6ca047, 0x8251b1, 0x6ca047 };
		System.arraycopy(aFor, 0, key, 24010, aFor.length);
	}

	private static void init82(int[] key) {
		int[] aFor = { 0x965abd, 0x6ca047, 0x965abd, 0x6ca047, 0x965abd, 0x6ca047, 0x965abd, 0x6ca047, 0x965abd, 0x6ca047, 0x965abd, 0x6ca047, 0x965abd, 0x6ca047, 0x965abd, 0x6ca047, 0x965abd, 0x6ca047, 0x965abd, 0x6ca047, 0x965abd, 0x6ca047, 0x965abd, 0x6ca047, 0x965abd, 0x6ca047, 0x965abd, 0x6ca047, 0x965abd, 0x6ca047, 0x965abd, 0x6ca047, 0x955bbd, 0x6fa147, 0x955bbd, 0x6ea247, 0x935bbf, 0x6ea245, 0x9458b9, 0x6ca144, 0x9a5abb, 0x6ca040, 0x975dba, 0x6da241, 0x875ab8, 0x56b64f, 0xe769b6, 0x7fbb41, 0xf674b2, 0x74b843, 0xf673ad, 0x71a35e, 0xfc70ab, 0x72a25e, 0xe270aa, 0x76a45d, 0xe370a8, 0x7ba45e, 0xe171ab, 0x7aa75f, 0xe771ab, 0x79a65f, 0xe67eaa, 0x79a65f, 0xdb7caa, 0x78a55f, 0xdf7fa8, 0x76a550, 0xdd7fa6, 0x70a551, 0xde7ea9, 0x71a250, 0xdf7ea6, 0x70a351, 0xc17ea7, 0x73a050, 0xc67fa7,
				0x709f5f, 0xc87fa6, 0x719e5c, 0xcd7ca5, 0x709d5c, 0xcc7fa5, 0x779e5d, 0xcf7faa, 0x779e5d, 0xc17eab, 0x75a05f, 0xc77fa9, 0x76a15c, 0xd97ca9, 0x77a05d, 0xda7ba8, 0x76a15c, 0xda78aa, 0x76a15c, 0xdc78ab, 0x7ba05d, 0xdd77a8, 0x78a15c, 0xdc76a8, 0x78a15c, 0xd874a8, 0x47a05b, 0xda74a8, 0x46a75a, 0xdd74ae, 0x47a65d, 0xd074af, 0x46a55e, 0xd375ac, 0x40ba5d, 0xd375ae, 0x43ba5c, 0xcc75ae, 0x42bb5f, 0xcf76ae, 0x43ba5e, 0xc971af, 0x40bb5f, 0xc671b0, 0x40bb5f, 0xc472af, 0x40bb5f, 0xc373ae, 0x41b45e, 0xc072b1, 0x40b75f, 0x3d73b1, 0x46b15d, 0x3c70b6, 0x45b05c, 0x3c70b6, 0x44cf5f, 0x3371b5, 0x45cc5c, 0x3171b6, 0x45cc5c, 0x3770b5, 0x46cb5d, 0x2b71b5, 0x47c852, 0x2c70b4, 0x47c852, 0x2e7fb7, 0x47c852, 0x2e7db4, 0x46c951, 0x217ab5, 0x44cb57, 0x217ab5, 0x45ca54, 0x2665b5, 0x45ca54, 0x2464b6,
				0x44c957, 0x1964b7, 0x45c868, 0x1e63b6, 0x44c96b, 0x1e63b4, 0x47ca6a, 0x1f62b7, 0x48c56b, 0x1d63b0, 0x49c66a, 0x1b63b1, 0x4ac76b, 0x464b2, 0x49c66a, 0x264b2, 0x48c565, 0x67b2, 0x46c767, 0x25ab2, 0x40c766, 0x15bb3, 0x3fc065, 0x25ab0, 0x3ec364, 0x559b0, 0x3fc063, 0x657b7, 0x3ec164, 0x954b6, 0x3ec164, 0xb54b6, 0x38c766, 0xa55a9, 0x38c766, 0x956a8, 0x27c665, 0x956aa, 0x25c664, 0xe49a9, 0x24c765, 0xd4aae, 0x25c664, 0xd4da8, 0x2ac763, 0xd4da8, 0x2bc462, 0xe4ca9, 0x2acb63, 0xe4eaa, 0x2acb63, 0x94faa, 0x2acb63, 0xb4fa4, 0x14cd61, 0xb4fa4, 0x14cd61, 0xa4ca4, 0x163367, 0xf4da3, 0x163367, 0x14ea2, 0x173266, 0x24fa0, 0x113464, 0x14fa7, 0xe3565, 0x34ca7, 0xf3467, 0x443d8, 0xe3566, 0x840db, 0xe3566, 0xa43da, 0xb3561, 0xb40da, 0xb3366, 0xb42d9, 0xa3019, 0xa40a5, 0x8301e, 0x85bad,
				0xa3f00, 0x962a9, 0x261814, 0x4e86de, 0xd0403e, 0x199fca, 0xf36b34, 0x897cb, 0xf46c32, 0x39bc7, 0xf4603d, 0x29cc1, 0xf4603d, 0xe9ac7, 0xf5633d, 0x89ac5, 0xf56333, 0xf98c5, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xf98c7, 0xf5623d, 0xc9bc4, 0xfa6d32, 0xe98cb, 0xff6a3d, 0x119bcb, 0xff6a3d };
		System.arraycopy(aFor, 0, key, 24310, aFor.length);
	}

	private static void init83(int[] key) {
		int[] aFor = { 0x590c7, 0xff6a3d, 0x590c7, 0xff6a3d, 0x590c7, 0xff6a3d, 0x590c7, 0xff6a3d, 0x590c7, 0xff6a3d, 0x590c7, 0xff6a3d, 0x590c7, 0xff6a3d, 0x590c7, 0xff6a3d, 0x590c7, 0xff6a3d, 0x590c7, 0xff6a3d, 0x590c7, 0xff6a3d, 0x590c7, 0xff6a3d, 0x590c7, 0xff6a3d, 0x590c7, 0xff6a3d, 0x590c7, 0xff6a3d, 0x590c7, 0xff6a3d, 0x590c1, 0xff6a3d, 0x590c7, 0xff6a3d, 0x390c6, 0xf86b3d, 0x191c1, 0xf76b3c, 0x191c1, 0xf96d3e, 0x290c2, 0xf16b3f, 0x2e98c5, 0x917b36, 0xea9d9, 0x846337, 0xaec7, 0x816336, 0x5adc7, 0x8d7c33, 0x1aec7, 0x8c7f33, 0x1cadc7, 0x8e7f32, 0x1aacc6, 0x8d7f33, 0x17aac6, 0x8d7f35, 0x10a9c1, 0x8d7f35, 0x13a8c1, 0x8c7034, 0x2da9c0, 0x8e7035, 0x28a9c3, 0x807034, 0x2baacc, 0x807034, 0x2daac3, 0x83713b, 0x2caccc, 0x83713b, 0x33afcd, 0x82723b, 0x36accc, 0x837334, 0x3b93cd, 0x827237,
				0x3993cf, 0x857136, 0x3892cc, 0x847035, 0x3d92cd, 0x85733a, 0x3393cc, 0x864c39, 0x3493cf, 0x864c39, 0x3791cf, 0x874d3a, 0x2991cc, 0x844a39, 0x2893cf, 0x844a39, 0x2f90cf, 0x85493a, 0x239ecf, 0x85493a, 0x2091cf, 0x84463b, 0x2590ce, 0x85453a, 0x1b90ce, 0x85453a, 0x1991cf, 0x82423b, 0x1b96cf, 0x83453c, 0x1497c8, 0x81463b, 0x1289c8, 0x83593b, 0x1396c9, 0x9c5838, 0x1296c9, 0x9f5b39, 0x1597d6, 0x9f5b39, 0x1890c9, 0x9e5a26, 0x1b93d6, 0x9e5a26, 0x1d92c9, 0x9f5527, 0x1e93c8, 0x9e5626, 0xe393cb, 0x9f5727, 0xe596cc, 0x9f5727, 0xe596cc, 0x9c5626, 0xe4e9cd, 0x925424, 0xe6e9cc, 0x925424, 0xe0e8cd, 0x915325, 0xe1e9cc, 0x8f512b, 0xe3e8cc, 0x88502a, 0xe3e8cc, 0x88502a, 0xe2e7cf, 0x8b512b, 0xece2cf, 0x89532d, 0xece2cf, 0x89532d, 0xede3cf, 0x89532d, 0xebe3cc, 0x8a4c2c, 0xeae1cd, 0xb44a12,
				0xefe1cc, 0xb54b11, 0xeee0f1, 0xb44a2e, 0xede3f0, 0xb54b2d, 0xe3ecf1, 0xb64a2a, 0xe5ecf6, 0xb7492d, 0xf9eaf4, 0xb4482c, 0xffeaf4, 0xb4482c, 0xfceafb, 0xbb4b2d, 0xfed4f9, 0xbd4a2c, 0xffd7fa, 0xc04b2f, 0xfed0f9, 0xc34a2c, 0xfed0f9, 0xc2492d, 0xf8d1f8, 0xc1462c, 0xf6d3fe, 0xc1462c, 0xf4d3fe, 0xc0472f, 0xf3d4ff, 0xc0472f, 0xf1d6e1, 0xdf462c, 0xf1d6e3, 0xdc472c, 0xf7c8e1, 0xdd462d, 0xf4cbe6, 0xdc472c, 0xf4cce0, 0xdc472c, 0xfbcde7, 0xdc472c, 0xfacee0, 0xdf462b, 0xfbc1e1, 0xd84728, 0xfbc1e1, 0xd84728, 0xf9c3ef, 0xd94029, 0xc6c2ec, 0xd94029, 0xc6c2ef, 0xdb422b, 0xc13dee, 0xd8432a, 0xcf3eef, 0xd8432a, 0xcd3eee, 0xd9422d, 0xc939ee, 0xc6432c, 0xcb3aed, 0xc7422c, 0xce3aec, 0xc64d53, 0xc03bed, 0xc64c50, 0xc33aec, 0xc74c50, 0xc538eb, 0xc54b57, 0xc53897, 0xc54a28, 0xc53a94, 0xc6572d,
				0xc3309f, 0xcb5432, 0xc7309e, 0xf8ba5a, 0x700085, 0xb3e37f, 0x6d1280, 0x9fe97f, 0x621480, 0x9eec77, 0x691b82, 0x9fe17b, 0x691d87, 0x9ee67b, 0x641c81, 0x9fe57b, 0x621c83, 0x99e67b, 0x601d83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x631c83, 0x99e679, 0x601f80, 0x96e976, 0x621c8f, 0x93ee79, 0x7d1f8f, 0x93ee79 };
		System.arraycopy(aFor, 0, key, 24610, aFor.length);
	}

	private static void init84(int[] key) {
		int[] aFor = { 0x691483, 0x93ee79, 0x691483, 0x93ee79, 0x691483, 0x93ee79, 0x691483, 0x93ee79, 0x691483, 0x93ee79, 0x691483, 0x93ee79, 0x691483, 0x93ee79, 0x691483, 0x93ee79, 0x691483, 0x93ee79, 0x691483, 0x93ee79, 0x691483, 0x93ee79, 0x691483, 0x93ee79, 0x691483, 0x93ee79, 0x691483, 0x93ee79, 0x691483, 0x93ee79, 0x691483, 0x93ee79, 0x691485, 0x93ee79, 0x691485, 0x93ee7f, 0x691284, 0x93e979, 0x641285, 0x92e878, 0x6a1185, 0x96ec7a, 0x631684, 0x86e27f, 0x480889, 0xe4d167, 0x6a1a8d, 0xe8d261, 0x691991, 0xebd763, 0x6d0790, 0xead664, 0x610791, 0xead662, 0x7a0497, 0xead663, 0x780590, 0xedd165, 0x740790, 0xeed265, 0x720796, 0xeed265, 0x700591, 0xefdd64, 0x4f0a91, 0xeed365, 0x4d0a90, 0xebd366, 0x430a91, 0xe8d069, 0x450a9e, 0xebd166, 0x440c91, 0xebd166, 0x440c93, 0xebd166, 0x590f91,
				0xecd069, 0x5b0f91, 0xe3ef68, 0x590f9f, 0xe5ed66, 0x580e9c, 0xe4ec65, 0x5d0e9d, 0xe5ef6a, 0x520e9d, 0xe4ee6b, 0x50309d, 0xe2ef6b, 0x53329d, 0xe3ee68, 0x4d329e, 0xe0e96b, 0x4d339c, 0xe1ea6a, 0x4a309c, 0xe0e969, 0x47319f, 0xe1e66a, 0x47319f, 0xe2e96a, 0x413f9f, 0xe1ea6b, 0x413f9e, 0xdfea6a, 0x42399f, 0xdeed6a, 0x453e9e, 0xdcea6a, 0x4b389e, 0xdde96d, 0x493999, 0xd8e96a, 0x482698, 0xd8e96a, 0x56279b, 0xdbea6b, 0x57269b, 0xddea74, 0x542084, 0xd3eb74, 0x552185, 0xd0e875, 0x542185, 0xd7e96a, 0x552e9a, 0xd4e875, 0xa92d98, 0xd5e974, 0xae2b98, 0xd5e974, 0xaf289f, 0xd5e974, 0xad569f, 0xdae875, 0xaf569c, 0xdae875, 0xa9559f, 0xdbe976, 0xaa529c, 0xc5eb74, 0xa95293, 0xc5eb74, 0xae5392, 0xc2ea75, 0xa95293, 0xc3e576, 0xa45692, 0xc2e471, 0xa75593, 0xc1e770, 0xa45693, 0xc0e671, 0xa25690,
				0xc3f970, 0xa35491, 0xfcf871, 0xa054ae, 0xfbff70, 0xa05490, 0xfafe4f, 0xa05490, 0xf8fc4d, 0xae5b91, 0xfbfd4a, 0xa85b96, 0xfbfd4a, 0xaa5990, 0xe4fa49, 0xa95890, 0xe2fa48, 0xa95890, 0xe1fa47, 0xa75a92, 0xe3c546, 0xa05b91, 0xe0c647, 0xde5d91, 0xe0c647, 0xdd5c92, 0xe0c647, 0xda5e92, 0xe3c946, 0xdb5f95, 0xecca47, 0xda5c94, 0xefc946, 0xdb5d97, 0xe8ce47, 0xda5c88, 0xf4cc45, 0xdb5d95, 0xf6cc5a, 0xda5c94, 0xf1d359, 0xdb5d95, 0xf2d05e, 0xdb5c93, 0xf3d75f, 0xdb5c93, 0xfcd658, 0xda5f94, 0xffd75f, 0xdb5095, 0xffd75f, 0xdc5196, 0xffd75f, 0xdd5297, 0xfcd650, 0xdc5596, 0xfcd650, 0xe35496, 0xfdd553, 0xe65595, 0xfc2a50, 0xe45496, 0xfc2a50, 0xea5495, 0xfe2856, 0xef5492, 0xff2f51, 0xf15593, 0xfc2c51, 0xf75b93, 0xfe2c51, 0xf854ee, 0xfe2c50, 0xf85beb, 0xfd2d57, 0xfe58eb, 0xfe2b57, 0xfe5fe9,
				0xfe2d54, 0xfc5deb, 0xf83452, 0xf353e6, 0xe03a54, 0xfc4be5, 0xa9d62a, 0x371fc3, 0xeaeb3c, 0x712c3, 0xf1e93c, 0xc12c2, 0xf6e437, 0xe1cc1, 0xf7e73b, 0x1cc7, 0xf7e73b, 0xc1ec1, 0xf1e73b, 0xc1ec3, 0xf7e739, 0xe1cc3, 0xf9e73f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x1cc5, 0xfae63f, 0x31fc6, 0xf5e930, 0x11cc9, 0xf0ee3f, 0x1e1fc9, 0xf0ee3f };
		System.arraycopy(aFor, 0, key, 24910, aFor.length);
	}

	private static void init85(int[] key) {
		int[] aFor = { 0xa14c5, 0xf0ee3f, 0xa14c5, 0xf0ee3f, 0xa14c5, 0xf0ee3f, 0xa14c5, 0xf0ee3f, 0xa14c5, 0xf0ee3f, 0xa14c5, 0xf0ee3f, 0xa14c5, 0xf0ee3f, 0xa14c5, 0xf0ee3f, 0xa14c5, 0xf0ee3f, 0xa14c5, 0xf0ee3f, 0xa14c5, 0xf0ee3f, 0xa14c5, 0xf0ee3f, 0xa14c5, 0xf0ee3f, 0xa14c5, 0xf0ee3f, 0xa14c5, 0xf0ee3f, 0xa14c5, 0xf0ee39, 0xa17c7, 0xf0ee39, 0xa14c5, 0xf3ee39, 0xb12c4, 0xf3ee39, 0x415c5, 0xfcec3e, 0x616c2, 0xfbe83d, 0x161ec2, 0xc2f435, 0x7814c0, 0xe3c72e, 0x600fc7, 0x1dc62a, 0x620dc5, 0xe1c236, 0x6910c1, 0xeec135, 0x6411c1, 0xefc032, 0x7f12c7, 0xefc033, 0x7d13c0, 0xe9c034, 0x7115c0, 0xe9c034, 0x7014c6, 0xeac135, 0x7117c1, 0xefc035, 0x4f17c0, 0xeecf36, 0x4d16c3, 0xebcf35, 0x4316c2, 0xeacc3a, 0x4617cd, 0xeacc3a, 0x4710cc, 0xeacc3a, 0x4410cc, 0xebcd3b, 0x5a10cd, 0xe9cf35, 0x5f2fcc,
				0xe7cf35, 0x5e10c3, 0xe5f13b, 0x5812c1, 0xe4f038, 0x5d12c0, 0xe4f038, 0x5c11cf, 0xebf038, 0x5e2fcf, 0xebf038, 0x592ecf, 0xe8f339, 0x472ece, 0xe9f238, 0x4429cd, 0xe9f238, 0x4529cf, 0xeff03a, 0x4628ce, 0xe1f13a, 0x4629cc, 0xe3f139, 0x4726cf, 0xe6f03a, 0x4625ce, 0xd8f03d, 0x4423cf, 0xdff73d, 0x4424c9, 0xdef63a, 0x4924c8, 0xdff539, 0x4a24ca, 0xdef438, 0x4f24cb, 0xdfeb39, 0x5025c8, 0xdeeb39, 0x5326c8, 0xd8eb38, 0x5220c9, 0xdbea39, 0x5d20d6, 0xdbea39, 0x5f23c9, 0xdceb26, 0x5e2cc8, 0xdfea25, 0xa12ccb, 0xdce926, 0xa02dca, 0xdce926, 0xa72bca, 0xddea21, 0xa42acb, 0xd39423, 0xa52bc9, 0xd39423, 0xa62ac8, 0xd29722, 0xa02bcb, 0xd19023, 0xbf2bca, 0xd29122, 0xbe28c5, 0xd29122, 0xbe28c5, 0xd49f20, 0xbc2bc5, 0xda9926, 0xbc2bc5, 0xda9926, 0xbf28c5, 0xdb9827, 0xb928c6, 0xdb9827, 0xba36c5,
				0xda9b24, 0x8537c4, 0xdb9c1b, 0x8037fb, 0xda9d24, 0x8334fa, 0xdb9c27, 0x8d3bfb, 0xd89d20, 0x8c38fc, 0xdf9e20, 0x8d3bfb, 0xc29f21, 0x8c3cfb, 0xc09f22, 0x8b3dfa, 0xc19c2d, 0x873cf8, 0xc3a32c, 0x873cf4, 0xc7a122, 0xf83df7, 0xc6a623, 0xf83df5, 0xc5a720, 0xfe3df4, 0xc4a427, 0xfd33f3, 0xc5a520, 0xf333f2, 0xc6a623, 0xf232f2, 0xc1a122, 0xf333ed, 0xdca223, 0xec30f2, 0xc2a222, 0xef33ed, 0xc4bc20, 0xee32ec, 0xc4bc20, 0xed30ed, 0xc4bc20, 0xec37ec, 0xcbbd27, 0xed34eb, 0xc8bc20, 0xec3bea, 0xc8bc20, 0xeb3ae9, 0xc8bc20, 0xea39e8, 0xcbbd2f, 0xeb3ee9, 0xf4bc2c, 0xeb3eea, 0xf5bf2f, 0xee3feb, 0xf44028, 0xedc0ed, 0xf5bf29, 0xe3c1ec, 0xf6bc28, 0xe4c1ed, 0xf4ba2e, 0xfbc0ec, 0xf5ba2f, 0xf9cdea, 0xf0ba2e, 0xf7c3ee, 0xf3ba50, 0xf5c2ee, 0xf0b553, 0xf4c1ef, 0xf6b554, 0xf6c1e9, 0xf6b354, 0xf5ddea,
				0xf7b852, 0xe7dde4, 0xc5ad5c, 0xf32ee7, 0x838032, 0x3754d9, 0xdbae26, 0x2f55d9, 0xd5ac27, 0x2855dd, 0xd2a328, 0x2a5bd0, 0xd3a02a, 0x2a5ad6, 0xd3a02a, 0x2e59d0, 0xd3a02a, 0x2e59d0, 0xd5a02a, 0x225bd4, 0xd4a02a, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2d5ad6, 0xd7a02c, 0x2e59d5, 0xd8af23, 0x2c5ada, 0xdda82c, 0x3359da, 0xdda82c };
		System.arraycopy(aFor, 0, key, 25210, aFor.length);
	}

	private static void init86(int[] key) {
		int[] aFor = { 0x2752d6, 0xdda82c, 0x2752d6, 0xdda82c, 0x2752d6, 0xdda82c, 0x2752d6, 0xdda82c, 0x2752d6, 0xdda82c, 0x2752d6, 0xdda82c, 0x2752d6, 0xdda82c, 0x2752d6, 0xdda82c, 0x2752d6, 0xdda82c, 0x2752d6, 0xdda82c, 0x2752d6, 0xdda82c, 0x2752d6, 0xdda82c, 0x2752d6, 0xdda82c, 0x2752d6, 0xdda82c, 0x2752d6, 0xdda82c, 0x2752d6, 0xdda82a, 0x2751d4, 0xdda82a, 0x2752d6, 0xdda82a, 0x2a53d6, 0xdda82a, 0x2a53d6, 0xd3a92a, 0x2852d7, 0xd1ac28, 0x335fd5, 0xf2bf27, 0x5768d5, 0xdaa63b, 0xa66ed7, 0xdca438, 0xa268c8, 0x21a73b, 0xa676cd, 0x21a73b, 0xa976cf, 0x22a73a, 0xaf76ce, 0x3fa43b, 0xae75cf, 0x3da13b, 0xa875ce, 0x30a03a, 0xa974ce, 0x30a03c, 0xaa75cf, 0x31a33b, 0xae7bce, 0xfa338, 0xad79cd, 0x9a33b, 0xaf7acd, 0x7a33a, 0xac79cc, 0xa23b, 0xad7ec3, 0xa235, 0xae7ec3, 0x1a334, 0xb07ec2, 0x2a035,
				0xb77fcd, 0x19f34, 0xb640cc, 0xda134, 0xb143cd, 0xda134, 0xb443cc, 0xea035, 0xb742cd, 0xfa33a, 0xba7ccd, 0xfa33a, 0xbd7dcd, 0xca03b, 0xbc7ccc, 0x12a03a, 0xbc7ccc, 0x11a739, 0xbd7cce, 0x16a638, 0xbc7fcd, 0x15a739, 0xb27fcf, 0x15a739, 0xb07fce, 0x14a838, 0xb57ecd, 0x2aaa3e, 0xb77ecd, 0x2bad3f, 0xb07ecb, 0x2bad3f, 0xb37ecc, 0x25af3d, 0xb07ece, 0x25af3d, 0xb47fce, 0x24b03c, 0xb47fce, 0x3bb13f, 0xb67cce, 0x3bb13f, 0xb17ace, 0x3bb13f, 0xbc7acf, 0x3ab020, 0xbf7ad1, 0x3bb321, 0xb87bce, 0x3abc20, 0x457bcf, 0x3bbd21, 0x4678cc, 0x3abc20, 0x467fcd, 0x3dbd21, 0x447dcb, 0x3cc222, 0x4b02c9, 0x3cc222, 0x4a7dce, 0x3fc325, 0x4c7ecf, 0x3dc527, 0x5279cd, 0x3cc224, 0x5178cc, 0x3dc12b, 0x5679cd, 0x3cce28, 0x557bce, 0x3dcf2b, 0x5a7ccf, 0x3cce2c, 0x597fcf, 0x3dcf2d, 0x5e7ecf, 0x3cce2e, 0x5e61cd,
				0x3fcf2f, 0x5f62ce, 0xce2e, 0x5b65ce, 0x1cf11, 0x5b65ce, 0x2cc10, 0x546bcc, 0x1cd17, 0x5568cb, 0x1cd17, 0x526bcb, 0xce10, 0x4e6dca, 0xce10, 0x4c6dc9, 0x7cf11, 0x406ec7, 0x6ce12, 0x4251ca, 0x3cf1d, 0x3c53c8, 0x3cf1d, 0x3d54cb, 0x3cf1d, 0x3855c9, 0x2cc1a, 0x3b5bce, 0x3cd1d, 0x355bcf, 0x3cd1d, 0x3658cf, 0x5cb1f, 0x3759d0, 0x5cb1f, 0x3559ce, 0x1bcb1e, 0x365ad1, 0x1aca1f, 0x3145d2, 0x1bcb1e, 0x3146d0, 0x1bcb1e, 0x3340d2, 0x14ca19, 0x3243d5, 0x17cb1e, 0x3243d5, 0x16c41f, 0x3243d5, 0x11c51c, 0x3340d4, 0x11c51c, 0x3041db, 0x2fc31e, 0x3041d8, 0x2fc31e, 0x3342db, 0x293d18, 0x30bddd, 0x293d18, 0x3143de, 0x273d1b, 0x3341de, 0x223d1a, 0x3246d9, 0x3d3c1b, 0x3045df, 0x3a3d1c, 0x3d44dc, 0x383e1c, 0x3f47dc, 0x393f63, 0x3d49de, 0x3e3c62, 0x3c48d9, 0x3e3a65, 0x3e51d8, 0x3c336e, 0x2b59d6,
				0x1dd917, 0x4044dc, 0xd1863c, 0x1866d2, 0xed982d, 0x1664d2, 0xec9c29, 0x1165d3, 0xea922b, 0x126ad3, 0xea902a, 0x136bd0, 0xe9912a, 0x1468d0, 0xea902a, 0x1769d0, 0xed932c, 0x1a68d2, 0xec932c, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x1569d0, 0xef932a, 0x166ad3, 0xe09c25, 0x1469dc, 0xe59b2a, 0xb6adc, 0xe59b2a };
		System.arraycopy(aFor, 0, key, 25510, aFor.length);
	}

	private static void init87(int[] key) {
		int[] aFor = { 0x1f61d0, 0xe59b2a, 0x1f61d0, 0xe59b2a, 0x1f61d0, 0xe59b2a, 0x1f61d0, 0xe59b2a, 0x1f61d0, 0xe59b2a, 0x1f61d0, 0xe59b2a, 0x1f61d0, 0xe59b2a, 0x1f61d0, 0xe59b2a, 0x1f61d0, 0xe59b2a, 0x1f61d0, 0xe59b2a, 0x1f61d0, 0xe59b2a, 0x1f61d0, 0xe59b2a, 0x1f61d0, 0xe59b2a, 0x1f61d0, 0xe59b2a, 0x1f61d0, 0xe59b2a, 0x1f61d0, 0xe59b2c, 0x1c61d2, 0xe6982c, 0x1c62d0, 0xe6982a, 0x1e61d1, 0xe6982a, 0x1f62d6, 0xe5992b, 0x1e62d6, 0xed9e29, 0x3b73d2, 0x94ab3c, 0x565d1, 0x84ae3f, 0xfe64d0, 0x86ae3f, 0xf963ce, 0x7aac3d, 0xff63c9, 0x79b33c, 0xfe63cf, 0x75b23a, 0xf863ce, 0x75b23a, 0xe461cf, 0x76b23c, 0xe261c8, 0x77b53b, 0xef60cf, 0x76b63a, 0xec63cf, 0x76b63c, 0xea6ec8, 0x75b63d, 0xd46ecb, 0x77b63c, 0xd16fca, 0x79b63d, 0xd36fca, 0x78b53c, 0xd46ecb, 0x78b53c, 0xd46ec9, 0x7ab23f, 0xcb6fc9,
				0x79b13e, 0xcc6ec6, 0x79b13e, 0xc151c7, 0x78b03d, 0xc152c5, 0x78b03d, 0xc152c5, 0x7bb13c, 0xc152c5, 0x78b03d, 0xce50c5, 0x7b8f32, 0xcf51c4, 0x7e8f31, 0xce53c4, 0x618830, 0xcf54c6, 0x618830, 0xcd53c5, 0x668931, 0xcc50c4, 0x668931, 0xce53c4, 0x698a30, 0xcc52c5, 0x688531, 0xca52c7, 0x6b8432, 0xf551c6, 0x688535, 0xf450c6, 0x688535, 0xf356c1, 0x6b8532, 0xfd57c6, 0x688635, 0xfc56c7, 0x6f9936, 0xff56c4, 0x709835, 0xfe56c4, 0x739b34, 0xf957db, 0x739b34, 0xf450c4, 0x739b34, 0xf651c5, 0x729835, 0xf150da, 0x739734, 0xf35fc4, 0x8c982b, 0xf15dc6, 0x8d992a, 0xf15dc6, 0x8a9e2d, 0xf05fc6, 0x899f2c, 0xf05fc0, 0x88e02b, 0xfe5fc1, 0x8be128, 0xf85cc2, 0x8ae02b, 0xe55cc3, 0x8be724, 0xe65dcc, 0x8ae42b, 0xe15ccd, 0x8beb28, 0xe25dcc, 0x8beb28, 0xec58cc, 0x8aea2f, 0xef5bcd, 0x8aea2f, 0xee5acd,
				0x8df52c, 0xef45cd, 0x8eea2d, 0xee44f2, 0x8eea2d, 0xd246f2, 0x89ed2c, 0xd246f2, 0x88ec2f, 0xd044f2, 0x87e32e, 0xd245f5, 0x87e32e, 0xd445f2, 0x86e029, 0xc944f3, 0x87e72a, 0xca43f0, 0x86e029, 0xcc41fe, 0x8be028, 0xcf7ff0, 0x8ce127, 0xce7cf1, 0x8fe024, 0xb17bf0, 0x8fe024, 0xb379f0, 0x88e123, 0xb278f0, 0x8aef21, 0xbc79f3, 0x8aef21, 0xbf7af0, 0x8ce93f, 0xbf7aef, 0x8ce93f, 0xbd7aef, 0x8de820, 0xa279ee, 0x8ff622, 0xa378ef, 0x8ff622, 0xa578ee, 0x8ff622, 0xa67aef, 0x8ef123, 0xa97be8, 0x8ff222, 0xaa7ae9, 0x8ff222, 0xab75e8, 0x8ff222, 0xac74eb, 0x8ff222, 0xad77ea, 0x8df42c, 0x9276ea, 0x8df42c, 0x9076ea, 0x8bf62e, 0x9076e8, 0x89f62d, 0x9089ea, 0x86f72f, 0x938aeb, 0x87f628, 0x978de9, 0x87f628, 0x888cea, 0x85f528, 0x8c8ce9, 0x8bf52b, 0x8e8ce9, 0x8af428, 0x8f8395, 0x8bf62e, 0x888595,
				0x8cf728, 0x8c9e94, 0x8ffa21, 0xae899d, 0xfd1c52, 0x70a3b0, 0xcc7e40, 0x1390b5, 0xef6f4a, 0x1393b4, 0xe96b4d, 0x159cb6, 0xee654a, 0x199db0, 0xee664a, 0x179db0, 0xed6748, 0x109eb0, 0xee6648, 0x139fb2, 0xe9654e, 0x1e9eb0, 0xe8654e, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x119fb2, 0xeb6548, 0x129cb1, 0xe46a47, 0x109fbe, 0xe16d48, 0xf9cbe, 0xe16d48 };
		System.arraycopy(aFor, 0, key, 25810, aFor.length);
	}

	private static void init88(int[] key) {
		int[] aFor = { 0x1b97b2, 0xe16d48, 0x1b97b2, 0xe16d48, 0x1b97b2, 0xe16d48, 0x1b97b2, 0xe16d48, 0x1b97b2, 0xe16d48, 0x1b97b2, 0xe16d48, 0x1b97b2, 0xe16d48, 0x1b97b2, 0xe16d48, 0x1b97b2, 0xe16d48, 0x1b97b2, 0xe16d48, 0x1b97b2, 0xe16d48, 0x1b97b2, 0xe16d48, 0x1b97b2, 0xe16d48, 0x1b97b2, 0xe16d48, 0x1b97b2, 0xe16d48, 0x1b97b2, 0xe16d48, 0x1897b4, 0xe26c49, 0x1e96b2, 0xe56f48, 0x1c98b2, 0xe56149, 0x1f9bb5, 0xe4674b, 0x1c9bb4, 0xf0604b, 0x398ab0, 0xa75b5c, 0x269cb5, 0x5c5545, 0x2699b7, 0x5c5545, 0xdc9bb1, 0x5e5543, 0xda9bb0, 0x5f5444, 0xd884b7, 0x505543, 0xdb84b6, 0x565542, 0xc786b7, 0x565542, 0xc486b1, 0x505545, 0xc881b3, 0x515746, 0xcb82b3, 0x515746, 0xca81b2, 0x565946, 0xc981b3, 0x685945, 0xcb81b2, 0x6d5844, 0xc581b3, 0x6e5b4b, 0xc280bc, 0x6e5b4b, 0xc280be, 0x6f5c48, 0xdf82b0,
				0x6d5c47, 0xd982b0, 0x6d5c47, 0xd5bcbe, 0x6d5c47, 0xd5bdb0, 0x6d5c47, 0xd7bfbe, 0x6c5b44, 0xd6b8bd, 0x6f5a45, 0xd9babd, 0x6c654a, 0xd9babd, 0x6d644b, 0xdcb9bd, 0x6c6548, 0xc2b9be, 0x6c6548, 0xc1bebd, 0x6a6449, 0xc0bdbc, 0x6a6449, 0xc0bdbc, 0x676448, 0xc1b3bd, 0x656449, 0xc1b3bf, 0x61664b, 0xffb5b8, 0x62614b, 0xffb5b8, 0x63604b, 0xf8b3bf, 0x61624d, 0xf6b0b9, 0x63614a, 0xf7b1b8, 0x647e49, 0xf6b0bb, 0x667f49, 0xe9b1b8, 0x647c48, 0xe8b0b8, 0x627c57, 0xebb6a7, 0x6c7d57, 0xeab7a6, 0x6e7e56, 0xedb6b9, 0x6f7157, 0xeeb8a6, 0x917f49, 0xecbaa4, 0x907e48, 0xecbaa4, 0x97794f, 0xedb8a4, 0x97794f, 0xeeb9a3, 0x960648, 0xe0b9a2, 0x95074b, 0xe6baa1, 0x940648, 0xfbbaa0, 0x950147, 0xf8bbaf, 0x940248, 0xfeb5ad, 0x970349, 0xfdb4ac, 0x940248, 0xfcb6ad, 0x9a044e, 0xfcb6ad, 0x99074f, 0xfdb7ad,
				0x99074f, 0xfbb7ae, 0x9a184e, 0xfab691, 0x9a184e, 0xc7b5ae, 0x9b1971, 0xc7b5ae, 0x9d1f73, 0xc4b6ad, 0x9c1e70, 0xcab9ac, 0x9c1e70, 0xcfbaab, 0x9d1f70, 0xccbbaa, 0x821873, 0xccbba9, 0x801870, 0xcbbaa8, 0x8c1b7e, 0xc985a8, 0x8a1b7f, 0xc886a9, 0x891a7c, 0xb686a9, 0x881d7d, 0xb484a9, 0x8f1c7a, 0xb486ae, 0x8d1e7c, 0xbb88ae, 0x8d1e7c, 0xb88bad, 0x8b1862, 0xb88bb2, 0x8b1862, 0xba8bb2, 0x8a197d, 0xa588b3, 0x8b187e, 0xa697b0, 0x8a197d, 0xa097b1, 0x8a197d, 0xa395b0, 0x8a197d, 0xa292b1, 0x85187a, 0xa391b6, 0x86197d, 0xa391b6, 0x86197d, 0xa29eb7, 0x86197d, 0xa49cb5, 0x841f73, 0xa49cb4, 0x841f73, 0x999db5, 0x851c70, 0x9e9cb6, 0x851c70, 0x9c63b7, 0x841d71, 0x9160b5, 0x851c76, 0x9460b4, 0x841b75, 0x9460ca, 0x9b1a0a, 0x9163cb, 0x991b09, 0x9c62cb, 0x981a0a, 0x9d6db7, 0x981b0b, 0x9b69b1,
				0x9c180c, 0x9d70bb, 0x94170a, 0xba6bb0, 0xd6cd64, 0x601597, 0xbfe46a, 0x521192, 0xadee6f, 0x501593, 0xa9e26b, 0x501591, 0xabee6c, 0x5e1796, 0xa7ea6a, 0x5e1192, 0xa4eb6a, 0x59129c, 0xa7eb6a, 0x5a1292, 0xa1eb68, 0x561094, 0xa0ec68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x591792, 0xa3ed68, 0x5a1491, 0xace267, 0x58179e, 0xa9e568, 0x47149e, 0xa9e568 };
		System.arraycopy(aFor, 0, key, 26110, aFor.length);
	}

	private static void init89(int[] key) {
		int[] aFor = { 0x531f92, 0xa9e568, 0x531f92, 0xa9e568, 0x531f92, 0xa9e568, 0x531f92, 0xa9e568, 0x531f92, 0xa9e568, 0x531f92, 0xa9e568, 0x531f92, 0xa9e568, 0x531f92, 0xa9e568, 0x531f92, 0xa9e568, 0x531f92, 0xa9e568, 0x531f92, 0xa9e568, 0x531f92, 0xa9e568, 0x531f92, 0xa9e568, 0x531f92, 0xa9e568, 0x531f92, 0xa9e568, 0x531f92, 0xaae468, 0x521895, 0xa8e368, 0x541993, 0xaae16b, 0x571692, 0xabee6b, 0x571496, 0xabe969, 0x5b1395, 0x87e669, 0x33399b, 0xa3f471, 0xdb379b, 0xaeff6b, 0xd73498, 0xa8fa6d, 0x283499, 0xaaf96d, 0x29369e, 0xaaf96d, 0x2f3699, 0xa7e76d, 0x2c3698, 0xa7e76b, 0x2a3598, 0xbae76c, 0x29349a, 0xbde16f, 0x2b3499, 0xbde16f, 0x24379a, 0xbde16f, 0x24379c, 0xb8e069, 0x18399e, 0xbae069, 0x19389e, 0xbce069, 0x14399e, 0xbde366, 0x153993, 0xbce265, 0x103992, 0xbde564, 0x133992,
				0xbce465, 0xe3a9c, 0xbde564, 0xb059c, 0xbde564, 0xa3a9c, 0xbde564, 0x4079c, 0xbee465, 0x4079c, 0xbde564, 0x5059d, 0xb2da65, 0x70592, 0xb3db64, 0x20591, 0xb2d865, 0x20490, 0xadd965, 0x30593, 0xacd864, 0x20492, 0xaedf67, 0x40692, 0xacdc67, 0xb0491, 0xafd365, 0xb0491, 0xaad362, 0xa0696, 0x95d062, 0xb0596, 0x95d062, 0x90591, 0x92d163, 0xa0290, 0x9dd062, 0xb0193, 0x9fd063, 0xc1f92, 0x9cd062, 0x131e93, 0x9ed363, 0x121f93, 0x99d263, 0x121f93, 0x9ad37c, 0x1d188c, 0x9bd263, 0x1f188d, 0x9cd160, 0x1f198f, 0x9edf62, 0x1e1a8c, 0x9fdc63, 0x1f198d, 0x61da61, 0x1a188d, 0x61da61, 0x1b1b8a, 0x62db60, 0x14648a, 0x61da63, 0x126789, 0x60db60, 0x116088, 0x60db60, 0x106187, 0x7fd861, 0x116086, 0x7cd760, 0x166085, 0x7fd661, 0x176284, 0x71d067, 0x166383, 0x70d160, 0x156083, 0x71d061, 0x156083,
				0x76cf62, 0x146182, 0x74cf5d, 0x2962bd, 0x75ce62, 0x2962bd, 0x72c963, 0x2863bc, 0x71ca62, 0x266dbe, 0x70ca62, 0x256cbf, 0x71cb62, 0x226dbe, 0x6dc964, 0x236abe, 0x6fcb66, 0x256ab1, 0x6dc866, 0x2b57b1, 0x6ef766, 0x2d69b1, 0x6ff467, 0x2e68b2, 0x6ef366, 0x5068b0, 0x6df265, 0x576bb6, 0x6df265, 0x5465b1, 0x6cf362, 0x5a65b0, 0x6ff061, 0x5b64b1, 0x68f77e, 0x5a63af, 0x6bf07f, 0x4461b1, 0x69ee7d, 0x4461b3, 0x69ee7d, 0x4560b0, 0x6fec7b, 0x4660b6, 0x6eeb7a, 0x4961b1, 0x6fe87b, 0x4a60b0, 0x6fe87b, 0x4a60b0, 0x6ee77a, 0x4a60b0, 0x68e578, 0x4a60b0, 0x68e578, 0x4961bf, 0x56e37a, 0x4862bf, 0x56e37a, 0x4d63bc, 0x56e37a, 0x4c62bc, 0x541d78, 0x4263bd, 0x561f7e, 0x4263bd, 0x511f7d, 0x4364c0, 0x4c1e7e, 0x4267bf, 0x491d7d, 0x4167bc, 0x441002, 0x4167bc, 0x491f7c, 0x4f6ec3, 0x4c0474, 0x4375ce,
				0x620c76, 0x3298b5, 0xa65a56, 0x7eb0a8, 0x884a57, 0x72b6ac, 0x894a5b, 0x72b0a3, 0x884a59, 0x70b3a2, 0x87485c, 0x70b3a0, 0x87485a, 0x7eb3a2, 0x844854, 0x79b1a2, 0x874854, 0x7ab1ac, 0x814856, 0x78b3ac, 0x8f4856, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x76b3ac, 0x8c4956, 0x75b0af, 0x824758, 0x76b2a1, 0x874057, 0x69b1a1, 0x874057 };
		System.arraycopy(aFor, 0, key, 26410, aFor.length);
	}

	private static void init90(int[] key) {
		int[] aFor = { 0x7dbaad, 0x874057, 0x7dbaad, 0x874057, 0x7dbaad, 0x874057, 0x7dbaad, 0x874057, 0x7dbaad, 0x874057, 0x7dbaad, 0x874057, 0x7dbaad, 0x874057, 0x7dbaad, 0x874057, 0x7dbaad, 0x874057, 0x7dbaad, 0x874057, 0x7dbaad, 0x874057, 0x7dbaad, 0x874057, 0x7dbaad, 0x874057, 0x7dbaad, 0x874057, 0x7dbaad, 0x874057, 0x7dbaad, 0x844157, 0x73baab, 0x844151, 0x78b9a6, 0x854e51, 0x7ab8a8, 0x844052, 0x79bbac, 0x834453, 0x67b2a9, 0xae5b5d, 0x318db6, 0xb4475f, 0xc683b5, 0xb24a47, 0xc980b4, 0xb74c47, 0x3680b4, 0xb44d40, 0x3683b2, 0xb54c41, 0x3083b5, 0xb65340, 0x3e82b4, 0xb55341, 0x3882b5, 0xb65141, 0x2782b4, 0xb45142, 0x2185b7, 0xb45142, 0x2c85b4, 0xb55341, 0x2c85b2, 0xb65246, 0x2b8ab0, 0x8b5347, 0x2984b1, 0x8c5c46, 0x2b84b0, 0x835d47, 0x2b84b0, 0x825f46, 0x2e84b1, 0x835849, 0x2d84bf,
				0x825948, 0x3087b1, 0x825946, 0x34b9bf, 0x825947, 0x3586bf, 0x8d6646, 0x3484be, 0x8d6646, 0x3785bf, 0x8e6747, 0x3786bd, 0x8e6747, 0x3986be, 0x8f6646, 0x3ab9b1, 0x886647, 0x39bbb1, 0x886647, 0x26bab1, 0x886647, 0x26bab1, 0x8a6045, 0x20b9b0, 0x8a6045, 0x2db8b3, 0x886e47, 0x2db6b2, 0x896146, 0x28b7b3, 0x886247, 0x16b7b3, 0x886247, 0x14b7b4, 0x8f6346, 0x14b0b2, 0x8c6341, 0x1bb1b3, 0x8d6042, 0x19b0b0, 0x8d6042, 0x1cb0b1, 0x8c7f43, 0x1b2b2, 0x8c7f43, 0x7b2b3, 0x8d7e5c, 0xab5ac, 0x8c7f43, 0x8b5ad, 0x8c7f43, 0x8b6b3, 0x8a715d, 0xbb7b2, 0x8a715d, 0xbb7b2, 0x74735f, 0xfb1b3, 0x74735f, 0xeb2b4, 0x77725e, 0xfb3b2, 0x790c58, 0xdb2b3, 0x7e0f59, 0xcb3b0, 0x7e0f59, 0xcb3b0, 0x7d0858, 0x12b1b0, 0x7d0858, 0x11b1bf, 0x7a0959, 0x13bcbf, 0x7b085a, 0x1cbbbe, 0x7a095d, 0x1fb8be, 0x7a095d,
				0x1fb8be, 0x7b085c, 0x18a7bd, 0x780962, 0x27a582, 0x7a0862, 0x27a582, 0x7b095d, 0x20a2bd, 0x790b63, 0x21a3be, 0x760462, 0x21a2bc, 0x740461, 0x20a1bd, 0x720466, 0x22a6bc, 0x6f0465, 0x23a5bd, 0x69046a, 0x2ea4b2, 0x68056a, 0x2c9ab2, 0x6f0465, 0x2d99b3, 0x6c0566, 0x5399b1, 0x6d0267, 0x5199b2, 0x6a0366, 0x509bb3, 0x690c67, 0x5e9bb4, 0x690c67, 0x5f9ab5, 0x6a0f64, 0x589bb5, 0x6a0f64, 0x5a9dab, 0x740d66, 0x5a9da9, 0x740d66, 0x5982a8, 0x720f64, 0x5b83a9, 0x730865, 0x5482ae, 0x730865, 0x5581a9, 0x730865, 0x5680ae, 0x730865, 0x578faf, 0x740966, 0x568cae, 0x740966, 0x568cae, 0x760f68, 0x698dae, 0x760f68, 0x6b8da0, 0x760f68, 0x6d8daf, 0x740d6a, 0x6c73ac, 0x7a0d69, 0x6f70ad, 0x7b0d6c, 0x6c8dae, 0x78f011, 0x778ad1, 0x7af310, 0x7189d1, 0x78f010, 0x7f87af, 0x79f16f, 0x7f80ae, 0x7fe301,
				0x6295b9, 0x2f0c72, 0xaab7af, 0x1f6245, 0xfb8cbf, 0x57740, 0xf98cb9, 0x3774f, 0xf98db5, 0x1744e, 0xf78eb3, 0x754d, 0xf689b1, 0x1724b, 0xf889b3, 0x27245, 0xff8bb3, 0x2724b, 0xff8bb3, 0x4714b, 0xfd8ab3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x47149, 0xfe8bb3, 0x7724a, 0xfd88b0, 0x7724a, 0xfe8bb3, 0x97c44, 0xfd89bd, 0xf7a4a, 0xe18bbc, 0xf7a4a };
		System.arraycopy(aFor, 0, key, 26710, aFor.length);
	}

	private static void init91(int[] key) {
		int[] aFor = { 0xf580b0, 0xf7a4a, 0xf580b0, 0xf7a4a, 0xf580b0, 0xf7a4a, 0xf580b0, 0xf7a4a, 0xf580b0, 0xf7a4a, 0xf580b0, 0xf7a4a, 0xf580b0, 0xf7a4a, 0xf580b0, 0xf7a4a, 0xf580b0, 0xf7a4a, 0xf580b0, 0xf7a4a, 0xf580b0, 0xf7a4a, 0xf580b0, 0xf7a4a, 0xf580b0, 0xf7a4a, 0xf580b0, 0xf7a4a, 0xf580b0, 0xf7a4a, 0xf580b0, 0xc7b4a, 0xfa81b3, 0xc7b4a, 0xf083bd, 0xd744a, 0xf282b3, 0xc7a4f, 0xf081b0, 0x57f4f, 0xdd8eb7, 0x6f505c, 0xe39abf, 0x985d58, 0xe999b4, 0x9e5340, 0xe398b2, 0x625340, 0xe39fb3, 0x9c5240, 0x1d9eb3, 0x9f5347, 0x1b9db4, 0x9e5240, 0x1982b3, 0x915347, 0x1a82b4, 0x975340, 0x781b4, 0x965241, 0x480b4, 0x975440, 0x280b5, 0x945541, 0x382b2, 0x9a5441, 0x683b4, 0x995b42, 0x3b8cb4, 0x985443, 0x3d8cb4, 0x9b5542, 0x3c8fb5, 0x9b5542, 0x328eb4, 0x985243, 0x358ebb, 0x855341, 0x348eb9, 0x85534f,
				0x308cb7, 0x855340, 0x33b3b8, 0x845241, 0x3cb2b8, 0x845241, 0x3db0b9, 0x875340, 0x3eb1b8, 0x875340, 0x3fb3b9, 0x895341, 0x3c8cb6, 0x885240, 0x3a8db6, 0x8b5343, 0x3b8fb6, 0x8b5343, 0x258fb5, 0x895541, 0x238cb2, 0x895541, 0x2e8cb5, 0x885446, 0x2d8cb3, 0x895b47, 0x288db2, 0x885846, 0x178eb2, 0x895b41, 0x148fb2, 0x885a41, 0x1389b5, 0x895b46, 0x1e89b4, 0x885845, 0x1d88b7, 0x8e4746, 0x1f97b7, 0x8f5847, 0x196b6, 0x8f5847, 0x396b6, 0x885b46, 0x97a9, 0x875c47, 0x196a8, 0x875c47, 0x395b7, 0x805d58, 0x29ab6, 0x805d58, 0x19bb7, 0x815e59, 0xff9db5, 0x815e59, 0xfb9fb2, 0x815e59, 0xf89cb4, 0x805d58, 0xf79db3, 0x82235a, 0xf19db2, 0x832055, 0xf19cbc, 0x802754, 0xf09db3, 0x9f2455, 0xf19cb2, 0x9c2b54, 0xf69cb1, 0x9e2952, 0xf69db7, 0x912e53, 0xf79cb0, 0x912e53, 0xf49fb0, 0x912e53, 0xf281b2,
				0x932e52, 0xf383b3, 0xad2d52, 0xf281b2, 0xad2d52, 0xf0878c, 0xac2e51, 0xf7868f, 0xae2f51, 0xf6878c, 0xa02050, 0xf5868d, 0xa62051, 0xf7848b, 0xb92752, 0xf4858a, 0xbf2752, 0xf7868b, 0xbf2752, 0xf8878a, 0xbd195c, 0xfe878b, 0xbc1a5d, 0xfc878b, 0xc31b5e, 0xfe8788, 0xc21c5d, 0xf98689, 0xc31f5a, 0xfb878e, 0xc31f5a, 0xf48889, 0xc21e5b, 0xf18b89, 0xc21e5b, 0xf38d8b, 0xc31f44, 0xec8e8a, 0xc31f44, 0xed8f8b, 0xc10146, 0xeb8d8d, 0xc10146, 0xe98a8a, 0xc10146, 0xe68b8d, 0xc10146, 0xe7888c, 0xc10146, 0xe4898d, 0xc00e47, 0xe3888e, 0xc00e47, 0xe28b8f, 0xc30f48, 0xe38c8f, 0xc30f48, 0xdd8c8f, 0xc00e49, 0xdb8e8f, 0xc20e4a, 0xdb8e8f, 0xc3f14b, 0xd68f89, 0xc2f248, 0xd289f7, 0xddf349, 0xd38af4, 0xddf34b, 0xd2898b, 0xdcf349, 0xd5848b, 0xd0f74b, 0xd687f5, 0xd1ef58, 0xea6498, 0x95df78, 0x2d0288,
				0xf5e87c, 0x61e83, 0xf9e07c, 0x21a84, 0xf8e07c, 0x11987, 0xf9e07a, 0xf1a87, 0xf8e179, 0xf1a85, 0xf8e17f, 0x11a87, 0xfbe171, 0x1b89, 0xfbe273, 0x1b89, 0xfbe171, 0x11b89, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xfbe171, 0x11b8b, 0xf8e272, 0x21888, 0xf8e272, 0x11b8b, 0xf6ec7c, 0x21985, 0xf0ea72, 0x1e1b84, 0xf0ea72 };
		System.arraycopy(aFor, 0, key, 27010, aFor.length);
	}

	private static void init92(int[] key) {
		int[] aFor = { 0x9138b, 0xf0ea72, 0x9138b, 0xf0ea72, 0x9138b, 0xf0ea72, 0x9138b, 0xf0ea72, 0x9138b, 0xf0ea72, 0x9138b, 0xf0ea72, 0x9138b, 0xf0ea72, 0x9138b, 0xf0ea72, 0x9138b, 0xf0ea72, 0x9138b, 0xf0ea72, 0x9138b, 0xf0ea72, 0x9138b, 0xf0ea72, 0x9138b, 0xf0ea72, 0x9138b, 0xf0ea72, 0x9138b, 0xf0ea72, 0x9138b, 0xf1e972, 0x7138b, 0xffe972, 0x51085, 0xfbe87d, 0x41086, 0xfae97b, 0xc1085, 0xe0eb7a, 0x2c0580, 0x8dd167, 0xf013b8, 0x87d452, 0xf412bc, 0x8dd849, 0xd13ba, 0x8cd848, 0xc13ba, 0x73de49, 0xf212ba, 0x70df4e, 0xf411bd, 0x71de49, 0xf60eba, 0x71de49, 0xfa0fba, 0x71de49, 0xfc0cba, 0x6cde4e, 0xfe0cbb, 0x6ddf4d, 0xf80bb8, 0x6ede4e, 0xf908bb, 0x6edf48, 0xf509bc, 0x6bde49, 0xca06bf, 0x69de48, 0xcc06bf, 0x69de48, 0xce04bf, 0x69de48, 0xc104bd, 0x68df4b, 0xc503b3, 0x6bde4a, 0xdb00b2,
				0x6add4a, 0xd900bc, 0x6cdf4b, 0xda3fb3, 0x6cdf4b, 0xdb00b3, 0x6cdf4b, 0xd53db3, 0x6fde4a, 0xd63cb2, 0x6fde4a, 0xd73eb3, 0x60e14b, 0xd53ebc, 0x61e04a, 0xd33fbc, 0x62e149, 0xd33cbf, 0x62e149, 0xcc3dbf, 0x61e64a, 0xcd3cbe, 0x67e54d, 0xcd3cb8, 0x65e64d, 0xc23ebb, 0x67e64e, 0xc331b8, 0x62e74d, 0xc232b9, 0x5de44d, 0xc331b9, 0x5ee54a, 0xc231bf, 0x59e24b, 0xc330b8, 0x55e149, 0xc031bb, 0x54fe4a, 0xc630ba, 0x49fe55, 0xc630a4, 0x48fe55, 0xc430a4, 0x48fe55, 0xc032ba, 0x47f954, 0xc133bb, 0x47f954, 0xc233a5, 0x41fb4a, 0xc33ca4, 0x41fb4a, 0xc33cba, 0x42fa55, 0x3d3eb8, 0x43fd54, 0x383fb8, 0x43fd54, 0x3a3fb9, 0x42fe55, 0x353ebe, 0x408057, 0x333ebf, 0x408057, 0x323cbe, 0x438756, 0x333db1, 0x5c8457, 0x323cb0, 0x5f8b56, 0x353cb3, 0x5d8950, 0x343cb6, 0x5c8853, 0x3b3bb7, 0x5d8954, 0x3b3bb0,
				0x5e8a53, 0x3a3ab1, 0x588a50, 0x3924b2, 0x668b50, 0x626b1, 0x598a51, 0x7218e, 0x5a8b50, 0x6228f, 0x5d8a51, 0x5228c, 0x5d8a51, 0xa2c8f, 0x5e8953, 0xc2c88, 0x5d8852, 0x132b8b, 0x5f8853, 0x142989, 0x5c8850, 0x1b2888, 0x5db75f, 0x192887, 0x5ab650, 0x1a2b86, 0x25b753, 0x1b2c85, 0x27b750, 0x1c2d84, 0x26b457, 0x1e2c83, 0x29bb50, 0x1f2d82, 0x2ab853, 0x192d81, 0x2ab853, 0x182c82, 0x28be4d, 0x182c82, 0x28be4d, 0x62e82, 0x2aa04f, 0x2c84, 0x2aa04f, 0x22b83, 0x2aa04f, 0x22b83, 0x2aa04f, 0xd2a84, 0x2ba34e, 0xe2b85, 0x2aac4f, 0x92a86, 0x2aac4f, 0x92a86, 0x28ae41, 0x82d86, 0x28ae41, 0x362d86, 0x2baf40, 0x302f86, 0x2a5043, 0x33d086, 0x2baf42, 0x3ed180, 0x2aac41, 0x3ad7fe, 0x2bab3e, 0x3ad7fe, 0x2aac41, 0x3ad5fc, 0x36a241, 0x31d1ff, 0x35bf45, 0x3fd0f2, 0x20a540, 0x43018e, 0xe8d67e, 0x92381,
				0xfbd97c, 0x2383, 0xfadb78, 0x3228f, 0xfadb78, 0x22283, 0xfadb7e, 0x22280, 0xf4d87d, 0xd2281, 0xf4d979, 0xc238e, 0xf5da79, 0xc2380, 0xf6db7b, 0xc2380, 0xf6db79, 0xf228e, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf6db79, 0xf2280, 0xf5d87a, 0xc2183, 0xf5d87a, 0xc2183, 0xf6db79, 0xe2381, 0xf8d577, 0xc208e, 0xfed379, 0x10228f, 0xfed379 };
		System.arraycopy(aFor, 0, key, 27310, aFor.length);
	}

	private static void init93(int[] key) {
		int[] aFor = { 0x72a82, 0xfed379, 0x72a82, 0xfed379, 0x72a82, 0xfed379, 0x72a82, 0xfed379, 0x72a82, 0xfed379, 0x72a82, 0xfed379, 0x72a82, 0xfed379, 0x72a82, 0xfed379, 0x72a82, 0xfed379, 0x72a82, 0xfed379, 0x72a82, 0xfed379, 0x72a82, 0xfed379, 0x72a82, 0xfed379, 0x72a82, 0xfed379, 0x72a82, 0xfed379, 0x72a82, 0xfed37b, 0x62982, 0xfed375, 0x72a8c, 0xfcd376, 0x3288a, 0xf8d377, 0x172b8a, 0xc8de75, 0x77368f, 0xe2f866, 0x944786, 0xe28f6b, 0x94479b, 0xef8d68, 0x6f449a, 0xee8f68, 0x6e449a, 0x118969, 0x6e449a, 0xee8a6e, 0x6d459d, 0xe99569, 0x6f459a, 0xe99569, 0x61449b, 0xea9568, 0x67449c, 0xea9568, 0x7a479c, 0xeb9469, 0x78479f, 0xec926a, 0x7a479e, 0xed916b, 0x774498, 0xe9936d, 0x49449b, 0xeb9d63, 0x484594, 0xeb9d63, 0x4c4794, 0xea9e62, 0x4c4796, 0xe59c60, 0x494797, 0xe79a6e, 0x484697,
				0xe79b60, 0x564696, 0xe49861, 0x527899, 0xe49861, 0x534799, 0xe49861, 0x5e7896, 0xe29a6f, 0x5e7896, 0xe29a6f, 0x5b7897, 0xe39960, 0x547897, 0xe29861, 0x574796, 0xe39960, 0x514797, 0xe09a61, 0x504694, 0xfe9a60, 0x534195, 0xf89b61, 0x524294, 0xfa9861, 0x5d4195, 0xf89966, 0x5c4e92, 0xfd9961, 0x5c4f94, 0xfc9a60, 0x624f93, 0xfc9a60, 0x624f94, 0xfe9a67, 0x654993, 0xfc9861, 0x6a4990, 0xff9960, 0x6c5691, 0xfc9961, 0x6c5693, 0xe29862, 0x6f5790, 0xe39961, 0x6a5491, 0xe2987e, 0x655390, 0xe3997f, 0x67508f, 0xe3997f, 0x605190, 0xe2967e, 0x605190, 0xe1977d, 0x615293, 0x1f917f, 0x645393, 0x1f917f, 0x675095, 0x10907c, 0x662f96, 0x13917f, 0x672e96, 0x13917f, 0x672c95, 0x14907c, 0x642a9b, 0xb937d, 0x642a95, 0xa9272, 0x612a94, 0x89c70, 0x612996, 0x99d73, 0x6e2e97, 0x89c74, 0x6e2e90, 0x89c74,
				0x6c2c96, 0xe9c77, 0x6f3295, 0x309d77, 0x503096, 0xf9c76, 0x5137a9, 0xc9d77, 0x5034a8, 0xc9d77, 0x563aaa, 0xe9277, 0x5934a9, 0xd9175, 0x5f34ae, 0xe9074, 0x4033ad, 0xc9075, 0x4731af, 0xf9076, 0x4830ae, 0xeaf79, 0x4a30af, 0x9ae7a, 0x4b33ac, 0x74af79, 0x4935aa, 0x74af79, 0x4f35ad, 0x75ac7e, 0x4d34ac, 0x7aa37d, 0x4c35af, 0x79a07e, 0x4c35ac, 0x79a07e, 0x4d34af, 0x7fa660, 0x4f34af, 0x60a561, 0x4e35ae, 0x65b862, 0x4e35ae, 0x64b965, 0x4d35a8, 0x65be64, 0x4d35a8, 0x65be64, 0x4234af, 0x64bd65, 0x4135ae, 0x65b264, 0x4634ad, 0x65b264, 0x4634ad, 0x67b06a, 0x4733ad, 0x67b06a, 0x4634a2, 0x66b765, 0x7a36a2, 0x61b664, 0x7b37a2, 0x62b767, 0x75c9a4, 0x60b766, 0x72caa5, 0x60b766, 0x70ccd9, 0x7fb667, 0x71cfda, 0x7db867, 0x75cadb, 0x7da76e, 0x5dddd7, 0x1c546c, 0x97edb6, 0x5a0a4e, 0xaff4b1,
				0x510a4f, 0xadf6b1, 0x570c4d, 0xaff4bb, 0x570c43, 0xaff4b9, 0x560c44, 0xaff4b9, 0x570d42, 0xaef4bb, 0x540e43, 0xadf7b4, 0x540e4d, 0xadf7b6, 0x540f4b, 0xadf7b6, 0x540e4d, 0xaef7ba, 0x540e4d, 0xadf7b4, 0x540e4f, 0xadf7b4, 0x540e4f, 0xadf7b4, 0x540e4f, 0xadf7b4, 0x540e4f, 0xadf7b4, 0x540e4f, 0xadf7b4, 0x540e4f, 0xadf7b4, 0x540e4f, 0xadf7b4, 0x540e4f, 0xadf7b4, 0x540e4f, 0xadf7b4, 0x540e4f, 0xadf7b4, 0x540e4f, 0xadf7b4, 0x540e4f, 0xadf7b4, 0x540e4f, 0xadf7b4, 0x540e4f, 0xadf7b4, 0x540e4f, 0xadf7b4, 0x540e4f, 0xadf7b6, 0x540e4f, 0xadf7b6, 0x540e4f, 0xadf7b6, 0x570d4c, 0xaff5b4, 0x590342, 0xadf6bb, 0x5f054c, 0xb1f4ba, 0x5f054c };
		System.arraycopy(aFor, 0, key, 27610, aFor.length);
	}

	private static void init94(int[] key) {
		int[] aFor = { 0xa7fdb6, 0x5f054c, 0xa7fdb6, 0x5f054c, 0xa7fdb6, 0x5f054c, 0xa7fdb6, 0x5f054c, 0xa7fdb6, 0x5f054c, 0xa7fdb6, 0x5f054c, 0xa7fdb6, 0x5f054c, 0xa7fdb6, 0x5f054c, 0xa7fdb6, 0x5f054c, 0xa7fdb6, 0x5f054c, 0xa7fdb6, 0x5f054c, 0xa7fdb6, 0x5f054c, 0xa7fdb6, 0x5f054c, 0xa7fdb6, 0x5f054c, 0xa7fdb6, 0x5f054c, 0xa7fdb6, 0x5f054c, 0xa6fcb5, 0x5e044d, 0xa9f3ba, 0x500a43, 0xacf6bf, 0x5a0d41, 0xbcf8bb, 0x6e0840, 0xc1d7b5, 0x4b1c5c, 0x38a3bf, 0x4d6450, 0x34aca1, 0x4f6551, 0x32a2bf, 0x4d6b4f, 0xcda0bd, 0xb36c4f, 0xcca1bc, 0xb36c4f, 0x31a2bd, 0xb26d4e, 0x37a2bc, 0xb1724f, 0x36a2bc, 0xbe734e, 0x32a3bd, 0xbf7249, 0x2fa0bd, 0xbe7348, 0x2da0be, 0xbe744a, 0x28a1bc, 0xbe7448, 0x27a2bb, 0xbb754e, 0x24adb8, 0x85754f, 0x27a2b9, 0x847a4e, 0x22a3b8, 0x847a4e, 0x22a3ba, 0x85794f, 0x29a2b8,
				0x847e40, 0x2ba2b9, 0x847f4e, 0x34a3b9, 0x857e4f, 0x30a1b8, 0x857e4f, 0x33a0b8, 0x847f40, 0x3e9fb7, 0x857e4f, 0x3e9fb7, 0x857e4f, 0x3c9cb7, 0x847d40, 0x329db6, 0x874243, 0x339cb5, 0x874243, 0x369fb5, 0x864340, 0x2998b4, 0x864340, 0x2b98b5, 0x874241, 0x2d9bb4, 0x874241, 0x2f98b4, 0x884140, 0x2d99b5, 0x894e41, 0x2898b4, 0x894e41, 0x1698b5, 0x884d46, 0x1599b5, 0x894a47, 0x1398b4, 0x8a4946, 0x1d9bb4, 0x8b4a45, 0x1f9ab7, 0x8b4a45, 0x1b85b7, 0x944a45, 0x1a84b7, 0x964a46, 0x1f87b6, 0x974b59, 0x1080b7, 0x974b59, 0x1280b6, 0x964946, 0x1581a9, 0x974647, 0x1581a9, 0x974647, 0x1783a9, 0x684744, 0x1484a9, 0x6f4645, 0x1787af, 0x604746, 0x16f8ac, 0x634645, 0x17f9ac, 0x634645, 0x10faac, 0x624144, 0x12fba3, 0x7d4245, 0x12fbad, 0x7c434a, 0x17fbac, 0x7e4d48, 0x17f8ae, 0x7f4c4b, 0x18ffaf,
				0x7f4c4b, 0x18ffae, 0x7e4d4a, 0x1bfca9, 0x785348, 0x19fdaa, 0x465248, 0x26ffa9, 0x795349, 0x27f896, 0x7a5248, 0x26fb97, 0x7a5248, 0x20f595, 0x795349, 0x2ff694, 0x7a5248, 0x29f693, 0x785249, 0x28f190, 0x655348, 0x2ef292, 0x675048, 0x2ff191, 0x685149, 0x2df19e, 0x6e6f4b, 0x2cf29d, 0x6d6e48, 0x53f59c, 0x6e6f4f, 0x55f59b, 0x6e6f4f, 0x57f69c, 0x6f6e4e, 0x58f99d, 0x6e6f4f, 0x5bfa9d, 0x6e6f4f, 0x5afb9e, 0x686951, 0x58fb9e, 0x686951, 0x46f99e, 0x6a7753, 0x46f99e, 0x6d7452, 0x44f89f, 0x6d7452, 0x45ff9e, 0x6d7452, 0x4afe99, 0x6c7753, 0x4afe9f, 0x6e7955, 0x4dff9c, 0x697856, 0x4afe9f, 0x687b57, 0x49ff9f, 0x687b57, 0x49ff9f, 0x697c58, 0x75fd9f, 0x6e7d59, 0x74fc9f, 0x6d7c5a, 0x7a0299, 0x6f7c5b, 0x7a019d, 0x6b7d5f, 0x7b06e0, 0x6b7d5f, 0x66049e, 0x6e7022, 0x681e95, 0x61763f, 0x51f68a,
				0x3f5e5a, 0x8382a9, 0x667354, 0x9c88ab, 0x637351, 0x9888aa, 0x617350, 0x998ba8, 0x617350, 0x998baa, 0x607c56, 0x9a84ab, 0x607c50, 0x9a84a9, 0x607d5e, 0x9885a8, 0x607d50, 0x9785ad, 0x607d50, 0x988aad, 0x607d51, 0x9985a7, 0x607d51, 0x9885a9, 0x607d53, 0x9885a9, 0x607d53, 0x9885a9, 0x607d53, 0x9885a9, 0x607d53, 0x9885a9, 0x607d53, 0x9885a9, 0x607d53, 0x9885a9, 0x607d53, 0x9885a9, 0x607d53, 0x9885a9, 0x607d53, 0x9885a9, 0x607d53, 0x9885a9, 0x607d53, 0x9885a9, 0x607d53, 0x9885a9, 0x607d53, 0x9885a9, 0x607d53, 0x9885a9, 0x607d53, 0x9885a9, 0x607d53, 0x9885ab, 0x617c52, 0x9885ab, 0x607d53, 0x9984aa, 0x607d53, 0x9885ab, 0x6e735d, 0x9a86a4, 0x687553, 0x8684a5, 0x687553 };
		System.arraycopy(aFor, 0, key, 27910, aFor.length);
	}

	private static void init95(int[] key) {
		int[] aFor = { 0x908da9, 0x687553, 0x908da9, 0x687553, 0x908da9, 0x687553, 0x908da9, 0x687553, 0x908da9, 0x687553, 0x908da9, 0x687553, 0x908da9, 0x687553, 0x908da9, 0x687553, 0x908da9, 0x687553, 0x908da9, 0x687553, 0x908da9, 0x687553, 0x908da9, 0x687553, 0x908da9, 0x687553, 0x908da9, 0x687553, 0x908da9, 0x687553, 0x908da9, 0x687553, 0x928daa, 0x6b7a52, 0x9d8dab, 0x6a7657, 0x9088a8, 0x627456, 0xb984a3, 0x786150, 0xe5b4be, 0x677c54, 0x17c2b1, 0x630741, 0x18ceb1, 0x65065e, 0x19c0b3, 0x660943, 0xe6c2b1, 0x980e43, 0xe6c2b1, 0x990f42, 0x1bc1b0, 0x980e43, 0x1cc0b0, 0x990f42, 0x1fc0b0, 0x981043, 0x13dfb1, 0x9e0e45, 0x11dfb6, 0x810d42, 0x13dfb7, 0x810c44, 0x12d8b0, 0x840d44, 0x1ddbb1, 0x860d47, 0x18dab2, 0x870c47, 0x26dab2, 0x840d44, 0x27d4b1, 0x830e47, 0x25d7b1, 0x820d46, 0x29d7b0,
				0x850c47, 0x2bd7bf, 0x840a48, 0x34d6bf, 0x850b49, 0x31d5bf, 0x840a48, 0x32d4bf, 0x850b47, 0x3febb0, 0x840a48, 0x3febb0, 0x840a48, 0x3de8b0, 0x850947, 0x33e9b1, 0x863644, 0x32e8b0, 0x813545, 0x30e8b3, 0x803446, 0x30e8b3, 0x803446, 0x2ee8b0, 0x823244, 0x28ebb7, 0x833143, 0x2bebb6, 0x8c3242, 0x29eab7, 0x8d3d43, 0x2feab5, 0x8e3c40, 0x2ee9b4, 0xb13d47, 0x2ce9b4, 0xb03a46, 0x2ae9b7, 0xb33b47, 0x24e9b5, 0xb33b47, 0x26eab4, 0xb23a46, 0x23eab5, 0xb33a46, 0x3cf5b4, 0xb13a45, 0x3bf4b4, 0xb23944, 0x3af5ab, 0xbd3e45, 0x38f5aa, 0xbd3e45, 0x39f7b5, 0xba3f5a, 0x38f8b4, 0xbb305b, 0x3af6b4, 0x453259, 0x39f1b4, 0x453259, 0x3ef0b5, 0x47305f, 0x30f0b4, 0x47305f, 0x32f0b5, 0x47305f, 0x338db5, 0x40315c, 0x318bbb, 0x40315c, 0x2f88b4, 0x40315c, 0x2b89ba, 0x413e5f, 0x2b88b8, 0x423d5e, 0x2a89bb,
				0x423d5e, 0x258eba, 0x423d5e, 0x258dbd, 0x413d5f, 0x238dbe, 0x7c225e, 0x1c8fbf, 0x43235f, 0x1d8880, 0x40225e, 0x1e8bbe, 0x40225e, 0x1b8a80, 0x412d5d, 0x168b83, 0x402e5e, 0x148b82, 0x462e59, 0x178a83, 0x582e59, 0x148c82, 0x582e59, 0x118c83, 0x592d5a, 0x1e8d82, 0x5b1354, 0x188d83, 0x5a1055, 0x658c80, 0x5b1754, 0x678c81, 0x5b1754, 0x618d80, 0x581453, 0x608c81, 0x571b50, 0x608c83, 0x561a51, 0x638f83, 0x501c53, 0x608e9c, 0x501c53, 0x7f8d83, 0x52024d, 0x7f8d83, 0x53034e, 0x798e80, 0x50024d, 0x798e80, 0x51054c, 0x798e80, 0x5e044b, 0x788d87, 0x5d054c, 0x798286, 0x5d054c, 0x798286, 0x5a044f, 0x788186, 0x59054e, 0x788186, 0x580241, 0x458087, 0x590142, 0x438084, 0x5bff40, 0x4c8183, 0x5afe40, 0x437f8a, 0x56ff42, 0x458186, 0x4afa45, 0x4c8c85, 0x4dfd3c, 0x448f8a, 0x5dfc25, 0x136d9b,
				0x8ca771, 0x655c8e, 0x9da071, 0x635c8e, 0x9ea772, 0x695e84, 0x9baa75, 0x63528d, 0x9aa575, 0x63528f, 0x98a473, 0x635289, 0x98a571, 0x635287, 0x98a571, 0x615d87, 0x99a57d, 0x6e5282, 0x9baa7d, 0x6c5d82, 0x94aa7f, 0x6d5d87, 0x94a571, 0x6c5d89, 0x94a573, 0x6c5d89, 0x94a573, 0x6c5d89, 0x94a573, 0x6c5d89, 0x94a573, 0x6c5d89, 0x94a573, 0x6c5d89, 0x94a573, 0x6c5d89, 0x94a573, 0x6c5d89, 0x94a573, 0x6c5d89, 0x94a573, 0x6c5d89, 0x94a573, 0x6c5d89, 0x94a573, 0x6c5d89, 0x94a573, 0x6c5d89, 0x94a573, 0x6c5d89, 0x94a573, 0x6c5d89, 0x94a573, 0x6c5d89, 0x94a573, 0x6c5d8b, 0x94a573, 0x6c5d8b, 0x94a573, 0x6d5c8a, 0x94a573, 0x6c5d8b, 0x9aab7d, 0x6e5e84, 0x9cad73, 0x725c85, 0x9cad73 };
		System.arraycopy(aFor, 0, key, 28210, aFor.length);
	}

	private static void init96(int[] key) {
		int[] aFor = { 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x645589, 0x9cad73, 0x655488, 0x9ea876, 0x625789, 0x8dad75, 0x424786, 0xf39b69, 0x615487, 0x1c936b, 0x732d8c, 0x7e87c, 0x7c228d, 0x3e87c, 0x7f2e91, 0xffe460, 0x802e91, 0xfde560, 0x802e91, 0xfee263, 0x7f2f92, 0xfde160, 0x792f93, 0xfde160, 0x782c93, 0xfee361, 0x743395, 0xf8e366, 0x773292, 0xf8e361, 0x693295, 0xf8e361, 0x6a3092, 0xffe461, 0x683294, 0xf2e562, 0x6f3094, 0xf1e560, 0x513296, 0xf3e560, 0x513296, 0xf2eb63, 0x553194, 0xf2eb63, 0x5b3095,
				0xf0ea63, 0x5e319b, 0xf1ec6c, 0x41309b, 0xf0ed6d, 0x433098, 0xf7ee6e, 0x413099, 0xf6ef61, 0x4c0f96, 0xf6ef61, 0x4a0d98, 0xf6ef61, 0x4c0c98, 0xf5ee60, 0x420f97, 0xf4ef61, 0x413094, 0xf5ee62, 0x473194, 0xf6ec62, 0x463097, 0xf7ed61, 0x583096, 0xf5eb63, 0x5e3197, 0xf5eb63, 0x5e3195, 0xf6eb60, 0x503c95, 0xf5e460, 0x513396, 0xf0e563, 0x503097, 0xf0e563, 0x6f3396, 0xf1e662, 0x6d3391, 0xf6e763, 0x6c3590, 0xf4e663, 0x633497, 0xf6e564, 0x623590, 0xf0e464, 0x603497, 0xeee465, 0x632b97, 0xeae667, 0x602a88, 0xe8e667, 0x6f2d97, 0xe9e167, 0x6c2b96, 0xefe379, 0x6c2b96, 0xefe379, 0x6d2489, 0xede167, 0x91228a, 0xede167, 0x91228a, 0xeae066, 0x93228b, 0xebe367, 0x9c238c, 0xea9c66, 0x9f228d, 0xeb9f67, 0x98238e, 0xeb9f67, 0x9a248d, 0xea9e64, 0x85278c, 0xe99e6b, 0x822983, 0xe89f64, 0x812a82,
				0xe99e67, 0x812a82, 0xe69966, 0x802b82, 0xe59a61, 0x872a80, 0xe79a61, 0x863483, 0xd99863, 0x8733bc, 0xd99863, 0x843283, 0xd99863, 0x8531bc, 0xd99863, 0x803083, 0xd8975c, 0x8d3181, 0xd9945d, 0x8d3181, 0xdf945a, 0x913780, 0xdc945c, 0x903687, 0xd9945d, 0x913584, 0xd7aa53, 0x92348b, 0xd1aa5c, 0x93378a, 0xacab5f, 0x923089, 0xaeab5c, 0x953188, 0xaca85b, 0x943089, 0xaca85b, 0x94308f, 0xa3a75c, 0x96328e, 0xa2a65f, 0x91358f, 0xa0a65f, 0x90348e, 0xbea441, 0x90348e, 0xbdbb40, 0x96358f, 0xbcb841, 0x95348c, 0xbdbf40, 0x95348c, 0xbdbf40, 0x9a358d, 0xbfbd46, 0x9a358f, 0xbfbd46, 0x9a358f, 0xb9b346, 0x9b368e, 0xb9b347, 0x9b368e, 0xbab246, 0x9b3681, 0x86b544, 0x9a3481, 0x804b42, 0x99cb87, 0x814b40, 0x953485, 0x874a43, 0x953786, 0x994f47, 0x9a3efb, 0x964a40, 0xbecc84, 0xf55b4d, 0x70e191,
				0xb50568, 0x42fa97, 0xb80368, 0x44f997, 0xbf006d, 0x48f79a, 0xb00d6d, 0x48f595, 0xb1026d, 0x48f597, 0xb3036d, 0x48f597, 0xb3026f, 0x48f599, 0xb3026f, 0x4af597, 0xb20d6d, 0x45f590, 0xb2026f, 0x45f590, 0xbd026d, 0x44f595, 0xbd026d, 0x45fa95, 0xbd026f, 0x45fa95, 0xbd026f, 0x45fa95, 0xbd026f, 0x45fa95, 0xbd026f, 0x45fa95, 0xbd026f, 0x45fa95, 0xbd026f, 0x45fa95, 0xbd026f, 0x45fa95, 0xbd026f, 0x45fa95, 0xbd026f, 0x45fa95, 0xbd026f, 0x45fa95, 0xbd026f, 0x45fa95, 0xbd026f, 0x45fa95, 0xbd026f, 0x45fa95, 0xbd026f, 0x45fa95, 0xbd026f, 0x45fa95, 0xbd026f, 0x45fa97, 0xbd026f, 0x45fa97, 0xbd026f, 0x44fb96, 0xbd026f, 0x45fa97, 0xb30c61, 0x46fa9b, 0xb4096c, 0x5af89a, 0xb4096c };
		System.arraycopy(aFor, 0, key, 28510, aFor.length);
	}

	private static void init97(int[] key) {
		int[] aFor = { 0x4df095, 0xb4096c, 0x4df095, 0xb4096c, 0x4df095, 0xb4096c, 0x4df095, 0xb4096c, 0x4df095, 0xb4096c, 0x4df095, 0xb4096c, 0x4df095, 0xb4096c, 0x4df095, 0xb4096c, 0x4df095, 0xb4096c, 0x4df095, 0xb4096c, 0x4df095, 0xb4096c, 0x4df095, 0xb4096c, 0x4df095, 0xb4096c, 0x4df095, 0xb4096c, 0x4df095, 0xb4096c, 0x4df095, 0xbb076c, 0x4fff95, 0xb7066e, 0x4cff94, 0xb2056d, 0x4ff995, 0xa2016f, 0x66e997, 0xc63f65, 0x45f88b, 0x323c65, 0x47fe89, 0x303866, 0x48f294, 0x333b64, 0x4cfc8b, 0xce3b65, 0x4ef194, 0x313b65, 0x4ef194, 0xce3a66, 0x4ff695, 0xcd3b61, 0x49f594, 0xcc3a60, 0x4af494, 0xcc3b66, 0x44f594, 0xce3b65, 0x40eb96, 0xcf3a62, 0x5eeb96, 0xce3b65, 0x5de996, 0xc83d63, 0x5ee895, 0xc63d61, 0x5ce894, 0xc23f61, 0x5de797, 0xfd3062, 0x5fe794, 0xfc3f63, 0x59e796, 0xff3e60, 0x57e495,
				0xfe3f63, 0x52e494, 0xff3862, 0x50e595, 0xff3860, 0x4ee596, 0xff3860, 0x4be696, 0xfe3961, 0x46d896, 0xfc3b6f, 0x45d997, 0xfc3b6f, 0x46d994, 0xfc3b6f, 0x46d994, 0xfe396d, 0x49e695, 0xfc3962, 0x4fd995, 0xfd0663, 0x4cdb95, 0xfc0760, 0x53da95, 0xfd0661, 0x50dd94, 0xfb0760, 0x50dd96, 0xf80763, 0x5fde97, 0xfa0664, 0x5fde91, 0xfa0664, 0x5ed190, 0xfc0666, 0x62d392, 0xfc0666, 0x60d594, 0xfb0166, 0x61d395, 0xf60167, 0x60d094, 0xf40066, 0x67cf97, 0xf70067, 0x67cf95, 0xe80067, 0x66ce95, 0xea0064, 0x66cc94, 0xec007b, 0x6bcb8b, 0xed0164, 0x69cb8a, 0xed0164, 0x69c894, 0xea007b, 0x6ac895, 0x150f78, 0x6bc996, 0x160c7b, 0x6acf96, 0x110d7a, 0x6bcc91, 0x120c7b, 0x6ab390, 0x1d737b, 0x6bcc91, 0x1e7278, 0x6acf90, 0x197377, 0x6bc89f, 0x1b7278, 0x75ca9d, 0x187d79, 0x77c491, 0x1a7377, 0x73c691,
				0x1b7274, 0x73c691, 0x1b7274, 0x7cc190, 0x197273, 0x7dc090, 0x1e7172, 0x7fde92, 0x1e7172, 0x7edfad, 0x217273, 0x7fd9ac, 0x237573, 0x7fd9ac, 0x247272, 0x7ed8ad, 0x267070, 0x7ed8ad, 0x297f71, 0x7fdaac, 0x2b7f70, 0x65dca9, 0x287e70, 0x64dfa8, 0x2e7e7f, 0x64dfa8, 0x237e7e, 0x66e0a8, 0x257e7d, 0x66e0aa, 0x267d7c, 0x19e1ab, 0x247d7d, 0x18e6a8, 0x237c7c, 0x19e4a9, 0x20737d, 0x1aeba8, 0x227d7b, 0x14e9aa, 0x277a65, 0x14e9aa, 0x277a65, 0x15e8aa, 0x247964, 0xae9a9, 0x276665, 0xbe8a8, 0x206564, 0xaeba8, 0x236663, 0xbedaf, 0x2d6465, 0x5eda8, 0x226763, 0x6edab, 0x226763, 0x7eea4, 0x236861, 0xeca9, 0x236861, 0x3eba7, 0x216e6f, 0x2e8a8, 0x236b6a, 0x3ceaa8, 0x216a6b, 0x3bebad, 0x2d6a6a, 0x3eeaaf, 0x2e956b, 0x21eeaf, 0x289d12, 0x22f2a5, 0x3e8410, 0x7217d9, 0xfa400, 0xbc71ee, 0x659a19,
				0x9264e6, 0x6c9a19, 0x956de3, 0x6d9b1a, 0x946ce0, 0x629a18, 0x9b63e1, 0x629a18, 0x9b63e1, 0x619b18, 0x9b63e1, 0x619b18, 0x9b63e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e3, 0x619b18, 0x9862e3, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9862e1, 0x619b18, 0x9963e0, 0x6e9417, 0x9b62ed, 0x69911a, 0x8760ec, 0x69911a };
		System.arraycopy(aFor, 0, key, 28810, aFor.length);
	}

	private static void init98(int[] key) {
		int[] aFor = { 0x9068e3, 0x69911a, 0x9068e3, 0x69911a, 0x9068e3, 0x69911a, 0x9068e3, 0x69911a, 0x9068e3, 0x69911a, 0x9068e3, 0x69911a, 0x9068e3, 0x69911a, 0x9068e3, 0x69911a, 0x9068e3, 0x69911a, 0x9068e3, 0x69911a, 0x9068e3, 0x69911a, 0x9068e3, 0x69911a, 0x9068e3, 0x69911a, 0x9068e3, 0x69911a, 0x9068e3, 0x69911a, 0x9068e3, 0x669014, 0x9569ed, 0x639316, 0x9e6aee, 0x639318, 0x9a69ed, 0x7f9d1a, 0xc57eed, 0x51af1d, 0x2d6af3, 0x58a902, 0x2d6def, 0x55aa01, 0x2d60f3, 0x57a901, 0x296fef, 0xa8a902, 0xd760f2, 0xa8aa03, 0xd760f2, 0x57ab00, 0xd667f3, 0x54aa07, 0xd064f2, 0x54aa07, 0xd264f3, 0x54aa07, 0xdc64f5, 0x55ab06, 0xd97bf5, 0x56aa01, 0xc678f5, 0x57a901, 0xc67bf3, 0x52a807, 0xc77cf2, 0x51a904, 0xc87ff1, 0x54a806, 0xcb70f0, 0x6ba907, 0xca71f1, 0x68a607, 0xcd7ef2, 0x6ba704, 0xc37df1,
				0x6aa607, 0xc67df0, 0x6ba108, 0xc57dfe, 0x6aa00b, 0xdb7dfd, 0x69a30a, 0xdd7dfc, 0x68a20b, 0xdf42fd, 0x66a005, 0xdf42fd, 0x66a005, 0xdc42fe, 0x66a005, 0xdc42fe, 0x65a304, 0xd27cfc, 0x67a30b, 0xd27cfc, 0x60a30a, 0xd17efc, 0x61a209, 0xce7ffc, 0x61a209, 0xcc79fc, 0x60a308, 0xcb79fe, 0x61a00b, 0xc679ff, 0x60a10c, 0xc579f9, 0x60a10c, 0xc476f8, 0x60a10c, 0xc074f9, 0x5ea10d, 0xc375fe, 0x5fa60c, 0xc574ff, 0x5ca50d, 0xca74fe, 0x5fa40c, 0xcc6bfd, 0x5fa40c, 0xcf6bfe, 0x5fa40c, 0xd16afe, 0x5ca70f, 0xd06bff, 0x5aa710, 0xd36de0, 0x55a70f, 0xd16de1, 0x55a70f, 0xd16eff, 0x52a610, 0xd26efe, 0xada913, 0xd36ffd, 0xada913, 0xd06dfd, 0xacae10, 0xd66ffb, 0xafaf11, 0xd710fa, 0xafaf11, 0xd910fb, 0xacae12, 0xd813fa, 0xabaf1d, 0xd914f5, 0xa8ae12, 0xc717f4, 0xa9af11, 0xc616f9, 0xaba11f, 0xc214f9,
				0xaaa01c, 0xc214f9, 0xaaa01c, 0xcc14f8, 0xa9a71b, 0xcd15f8, 0xafa519, 0xce0af9, 0xafa519, 0xcf0bc6, 0x90a618, 0xcc0ac7, 0x90a618, 0xcc0ac7, 0x97a119, 0xcd0bc6, 0x94a218, 0xcc0ac5, 0x9bad19, 0xcd08c4, 0x99ad18, 0xc809c2, 0x86aa1b, 0xca0bc3, 0x81ab14, 0xcb0ac3, 0x82aa15, 0xc435c2, 0x81ab14, 0xc235c3, 0x80a815, 0xbf34c2, 0x81af14, 0xbd34c1, 0x86ae15, 0xbc36c0, 0x85a114, 0xbc36c0, 0x84a013, 0xb234c2, 0x87a712, 0xb333c2, 0x80a00d, 0xb232c2, 0x83a30c, 0xad33c1, 0x80bc0d, 0xac32c0, 0x87bf0c, 0xad31c0, 0x84bc0b, 0xac37c7, 0x8abe0d, 0xad34c3, 0x88bf0e, 0xac35c4, 0x8abf0c, 0xac37cb, 0x8bb10d, 0xad34c4, 0x8eb00d, 0xae35c4, 0xb1b003, 0x9335c5, 0xb7b600, 0x9436c3, 0xb5b607, 0xae36c1, 0xb94907, 0xaa36c0, 0xa54d03, 0xa93abc, 0xba4f00, 0xa539b9, 0xe5b079, 0x9c1ea1, 0x2dca51, 0xf821a8,
				0x14d655, 0xee28aa, 0x14d250, 0xe127a5, 0x16d05c, 0xec2aa0, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xef29a5, 0x16d05c, 0xee28a4, 0x19df53, 0xec29a9, 0x1eda5e, 0xf02ba8, 0x1eda5e };
		System.arraycopy(aFor, 0, key, 29110, aFor.length);
	}

	private static void init99(int[] key) {
		int[] aFor = { 0xe723a7, 0x1eda5e, 0xe723a7, 0x1eda5e, 0xe723a7, 0x1eda5e, 0xe723a7, 0x1eda5e, 0xe723a7, 0x1eda5e, 0xe723a7, 0x1eda5e, 0xe723a7, 0x1eda5e, 0xe723a7, 0x1eda5e, 0xe723a7, 0x1eda5e, 0xe723a7, 0x1eda5e, 0xe723a7, 0x1eda5e, 0xe723a7, 0x1eda5e, 0xe723a7, 0x1eda5e, 0xe723a7, 0x1eda5e, 0xe723a7, 0x1eda5e, 0xe723a7, 0x11db50, 0xe422a8, 0x13d952, 0xef22ab, 0x15d853, 0xe120a4, 0x3cd053, 0x8c0da1, 0x7c74a, 0x7106a1, 0xc44e, 0x7500a5, 0xdc74b, 0x7a0eba, 0x3c64b, 0x7e01a5, 0x1c64a, 0x7e0fba, 0xc64a, 0x7f0cbb, 0xc64a, 0x800db8, 0x1c14b, 0x820cbf, 0x6c24a, 0x820cb9, 0x4c24d, 0x8d0dbe, 0x7dd4a, 0x8c12b8, 0xc24b, 0x8d10b8, 0x1dc24c, 0x8c13b8, 0x1fc04e, 0x8a14bb, 0x1cc14d, 0x8517b8, 0x19c04f, 0x8618b9, 0x19c04f, 0xb818b9, 0x1acf4f, 0xbf17ba, 0x19ce4c, 0xb114b9, 0x18cf4f, 0xb414b8,
				0x18cf4f, 0xb514ba, 0x1bc84c, 0xaa15ba, 0x18cb4d, 0xac15bb, 0x19ca4c, 0xaf2ab4, 0x19ca4c, 0xa12bbb, 0x18c943, 0xa12bbb, 0x1bc842, 0xa12ab9, 0x18cb43, 0xa02bba, 0x16cb42, 0xa314b5, 0x11cb43, 0xa015b6, 0x11cb43, 0xa016b5, 0x10ca40, 0xbe16b6, 0x12cc42, 0xb916b4, 0x13cf41, 0xb416b5, 0x12ce46, 0xb419b3, 0x12ce46, 0xb619b2, 0x12ce46, 0xb21bb3, 0x2dcf47, 0xb01bb4, 0x2cc846, 0xb71cb4, 0x2dcf45, 0xba1db7, 0x2ccc46, 0xb81cb4, 0x2ccc46, 0xbd1cb5, 0x2dd347, 0xa31db6, 0x2ed046, 0xa31db7, 0x28d047, 0xa21bb6, 0x25d046, 0xa11aa8, 0x25d046, 0xa119b6, 0x25d046, 0xa518a8, 0xdadf45, 0xa518aa, 0xdbde44, 0xa61aaa, 0xdad947, 0xa11bab, 0xdbda40, 0xa21aaa, 0xdaa543, 0xac1aa9, 0xdaa543, 0xaf1baa, 0xdba642, 0xa81aab, 0xdaa143, 0xb518a5, 0xdba040, 0xb419a8, 0xd9ae4e, 0xb318a9, 0xdaad4f, 0xb219aa,
				0xdaad4f, 0xbc1fac, 0xdaad4f, 0xbe1fac, 0xdcaf4d, 0xbd00ad, 0xdcaf4d, 0xbc0192, 0xe3ac4c, 0xbd0793, 0xe3ac4c, 0xbf0093, 0xe4ab4d, 0xbe0192, 0xe7a84c, 0xbf0091, 0xe8a74d, 0xbe0196, 0xeaa44c, 0xb80197, 0xf6a24e, 0xbb0097, 0xf7a14f, 0xbc0397, 0xf6a240, 0xb10298, 0xf79d4f, 0xb30297, 0xf09c40, 0xb00198, 0x8e9a4e, 0xb30698, 0x889c4c, 0xb2059f, 0x8b9d4d, 0xb20a99, 0x8a9c4a, 0xbd0998, 0x8b9d49, 0xbe0898, 0x8a9c48, 0xb80e87, 0x899f49, 0xa60e87, 0x889e4a, 0xa41087, 0x889e4a, 0xa21086, 0x889e4a, 0xa01280, 0x85994d, 0xa1129d, 0x85984f, 0xa21281, 0x859a4d, 0xac1c84, 0x84994c, 0xa01c86, 0x82984d, 0xa31f82, 0xbd9b4e, 0x9f1f85, 0xba9c4c, 0x98e389, 0xba9c4d, 0x9a1d8b, 0x83634d, 0x911a8b, 0x9f6f49, 0x8f1ef1, 0xa8614e, 0xedef8b, 0x834658, 0x1d83bc, 0xd16645, 0x3a9eba, 0xcf6444, 0x359fb9,
				0xcd6741, 0x3a90b6, 0xc26a41, 0x3896b8, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3995b6, 0xc06c4f, 0x3894b7, 0xcf6340, 0x3a95ba, 0xc8664d, 0x2697bb, 0xc8664d };
		System.arraycopy(aFor, 0, key, 29410, aFor.length);
	}

	private static void init100(int[] key) {
		int[] aFor = { 0x319fb4, 0xc8664d, 0x319fb4, 0xc8664d, 0x319fb4, 0xc8664d, 0x319fb4, 0xc8664d, 0x319fb4, 0xc8664d, 0x319fb4, 0xc8664d, 0x319fb4, 0xc8664d, 0x319fb4, 0xc8664d, 0x319fb4, 0xc8664d, 0x319fb4, 0xc8664d, 0x319fb4, 0xc8664d, 0x319fb4, 0xc8664d, 0x319fb4, 0xc8664d, 0x319fb4, 0xc8664d, 0x319fb4, 0xc8664d, 0x319fb4, 0xc76743, 0x319cb4, 0xc8624e, 0x349eb2, 0xc26449, 0x2891be, 0xe77b4b, 0x42acbb, 0xc36953, 0xb3d4b4, 0xdd1559, 0xaed0b2, 0xd8185f, 0xaed2b0, 0xd81a5e, 0xa3dcb0, 0xde1b5e, 0xa0d2ae, 0xde1b5e, 0xa0d2ae, 0xdf185f, 0x5fd3ad, 0xde1f5e, 0x5dd2aa, 0xde1f5e, 0x5ad1ad, 0xdf1e59, 0x58ceaa, 0xd10159, 0x5bd1ab, 0xd01e59, 0x5dccaa, 0xd31f5e, 0x42ccab, 0xd11f5d, 0x44cba8, 0xd21e5e, 0x4acaa8, 0xd01d5e, 0x4ccaa9, 0xd21d5c, 0x72caaa, 0xd21d5f, 0x70caa9, 0xd5125c, 0x72caaa,
				0xda105f, 0x71caa9, 0xdd115e, 0x70caab, 0xde165d, 0x6ecaa8, 0xdf175e, 0x6ccaa8, 0xd8145e, 0x6dcba9, 0xdb2b51, 0x6ccba7, 0xd42a50, 0x6dc8a8, 0xd72b51, 0x6dc9aa, 0xd42850, 0x6cc8a9, 0xdb1751, 0x6df7a9, 0xde175e, 0x6cc8a8, 0xdd165d, 0x6ccbab, 0xdc175e, 0x72cba8, 0xdf105d, 0x74caab, 0xde135e, 0x76c9ab, 0xd1105f, 0x76c8a9, 0xd01f5c, 0x74c8a8, 0xd01f5c, 0x70caa8, 0xd01f5d, 0x4ecaa9, 0xd31e5a, 0x4fcda8, 0xd51e59, 0x4ccfab, 0xdb1d59, 0x4dccaa, 0xd91c58, 0x4ad3ab, 0xda1c59, 0x4ad3ab, 0xc41d5a, 0x49d0ab, 0xc51e5a, 0x4fd5ab, 0xc81e5b, 0x4dd5b4, 0xc91f5a, 0x4dd6aa, 0xc91f5a, 0x48d6b5, 0xc81e5b, 0xb7d9b4, 0xc81e5b, 0xb6dbb4, 0xcb1f5a, 0xb0ddb6, 0xca1c5d, 0xb3dcb7, 0xca1c5d, 0xbddcb6, 0xcb635c, 0xbeddb5, 0xca605d, 0xb9dcb4, 0xcb675c, 0xbbddbb, 0xd4645d, 0xbbddb5, 0xd56552, 0xbfd3b5,
				0xd66653, 0xbfd3b5, 0xd76750, 0xb0d4b4, 0xd66657, 0xb2d4b4, 0xd16556, 0xb0cab6, 0xd16556, 0xb1cb89, 0xee6657, 0xb0cd88, 0xee6657, 0xb2ca88, 0xe96156, 0xb3cb89, 0xea6257, 0xb3cb89, 0xeb6354, 0xbdc58f, 0xe96055, 0xbbc58e, 0xf46154, 0xbac28e, 0xf76057, 0xbbc38e, 0xf06156, 0xbac18f, 0xfc5e58, 0xb8c180, 0xfb5f57, 0xbbc28f, 0x845e58, 0xb9c28e, 0x85595b, 0xbec38f, 0x845a5c, 0xbdcd88, 0x845a5c, 0xbccc8f, 0x845a5c, 0xb2cc8e, 0x87595f, 0xb4ca8f, 0x855b41, 0xaaca8f, 0x845a42, 0xa9d58c, 0x855b41, 0xaed48c, 0x845a40, 0xadd78b, 0x885c40, 0xabd090, 0x8f5a42, 0xa8d392, 0x805a5c, 0xa9d290, 0x81555b, 0xa5d290, 0x85555c, 0x9bd391, 0x86505a, 0xa5d594, 0x86515f, 0xa72e98, 0x86515d, 0xa6d09b, 0xbfab59, 0xaddd9b, 0xbeac20, 0xa9c08f, 0x974731, 0xfbe2e1, 0x5b2e08, 0x9ecefb, 0x7c3d06, 0x8fc7f9,
				0x783f05, 0x80c7ff, 0x793007, 0x80c9f0, 0x793208, 0x8fc9fd, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x83caf0, 0x7a3309, 0x82cbf1, 0x753c06, 0x80cafc, 0x72390b, 0x9cc8fd, 0x72390b };
		System.arraycopy(aFor, 0, key, 29710, aFor.length);
	}

	private static void init101(int[] key) {
		int[] aFor = { 0x8bc0f2, 0x72390b, 0x8bc0f2, 0x72390b, 0x8bc0f2, 0x72390b, 0x8bc0f2, 0x72390b, 0x8bc0f2, 0x72390b, 0x8bc0f2, 0x72390b, 0x8bc0f2, 0x72390b, 0x8bc0f2, 0x72390b, 0x8bc0f2, 0x72390b, 0x8bc0f2, 0x72390b, 0x8bc0f2, 0x72390b, 0x8bc0f2, 0x72390b, 0x8bc0f2, 0x72390b, 0x8bc0f2, 0x72390b, 0x8bc0f2, 0x72390b, 0x8bc0f2, 0x7c3707, 0x8bcef3, 0x71320a, 0x8bcef1, 0x64390b, 0xb8d6fd, 0x7350e, 0x9fe4e0, 0xe52608, 0x8f9dee, 0xe15c03, 0x959aef, 0xe35202, 0x969bec, 0xe25301, 0x9b94ef, 0xe75300, 0x9a9bf0, 0xe75300, 0x999af0, 0xe75300, 0x9899f1, 0x185203, 0x999ef0, 0x185203, 0x9b9ff1, 0x1f5102, 0x999ef0, 0x1e4e03, 0x999ef2, 0x134e00, 0x989ff3, 0x154e07, 0x859cf3, 0x164f05, 0x829bf2, 0x174f07, 0x8f9bf1, 0x164d04, 0x8d9bf2, 0x104d06, 0x8f9bf3, 0x104d07, 0xb19bf2, 0x134306, 0xb69bf3,
				0x114104, 0xb89af2, 0x134004, 0xbe9bf1, 0x104707, 0xbf9af0, 0x104705, 0xa09bf0, 0x114606, 0xa598f0, 0x137808, 0xa4a7f0, 0x137808, 0xaa9af0, 0x137808, 0xa99bf1, 0x107909, 0xa99bf1, 0x117a06, 0xa69bff, 0x107b07, 0xa2a4f1, 0x107b07, 0xa2a5f0, 0x137806, 0xbda4f2, 0x107f01, 0xbca4f4, 0x177e00, 0xbda7f5, 0x177e00, 0xb0a6f6, 0x177e00, 0xb1a9f5, 0x157e01, 0xb4a8f4, 0x157e01, 0xb5abf4, 0x2b7e00, 0xb6aaf3, 0x2d7e01, 0xb7acf2, 0x2f7f01, 0xb8adf5, 0x2d7c06, 0xb9acf4, 0x287c05, 0xb8b3f7, 0x287c05, 0xa6b2f4, 0x2a7c05, 0xa1b0f7, 0x297c06, 0xafb6e9, 0x297c06, 0xacb7e9, 0x287d07, 0xabb5e8, 0x297206, 0xa9baf6, 0xd67d19, 0xa8bbf7, 0xd57e1a, 0xa9bdf7, 0xd27f1b, 0xa8bef0, 0xd17e1a, 0xa9bff6, 0xde7f1d, 0xa8c0f7, 0xdd7e1e, 0xa9c3f6, 0xda7f11, 0xabc4f9, 0xdb7e1e, 0xb4c7f6, 0xda7f11, 0xb1c7f7,
				0xdb7012, 0xb2c5f4, 0xdb7012, 0xbcc3f6, 0xda7115, 0xbfc2f1, 0xdc7313, 0xbec3f2, 0xdc7313, 0xbddcf3, 0xdd722c, 0x82decc, 0xdd722c, 0x81def3, 0xdd722c, 0x86d9cc, 0xdc7313, 0x86d9cc, 0xde7111, 0x89d6cd, 0xdc7016, 0x8fd6ca, 0xde7210, 0x90d1c9, 0xdd7311, 0x90d1c8, 0xdb7310, 0x91d3c9, 0xd67311, 0x93d3c8, 0xd74c10, 0x96d2c7, 0xd64f11, 0xe9d3c6, 0xd74810, 0xebd3c5, 0xd04911, 0xead1c4, 0xd34610, 0xead1c4, 0xd24717, 0xe5d0c4, 0xd34616, 0xe7d2c7, 0xd54008, 0xe5d2c7, 0xca4309, 0xe4d3c6, 0xc95c08, 0xe5ccc6, 0xce430b, 0xe7cec0, 0xc1420c, 0xe4cec2, 0xc1420d, 0xe9c9c2, 0xce4012, 0xeac9dd, 0xc84013, 0xe9c8d8, 0xc94113, 0xd4c5d4, 0xca4613, 0xe9c3df, 0xca4613, 0xeac4da, 0xf74612, 0xe13bd0, 0xf14867, 0xe93cda, 0xc54165, 0x84c7da, 0xeb620b, 0x75a7e9, 0xba4e13, 0x5fbdef, 0xad4712, 0x56bbed,
				0xaf4216, 0x57b4e1, 0xaf4216, 0x57bae0, 0xa04316, 0x56b8e3, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x59baef, 0xa04316, 0x58bbee, 0xaf4c19, 0x5abae3, 0xa84914, 0x46b8e2, 0xa84914 };
		System.arraycopy(aFor, 0, key, 30010, aFor.length);
	}

	private static void init102(int[] key) {
		int[] aFor = { 0x51b0ed, 0xa84914, 0x51b0ed, 0xa84914, 0x51b0ed, 0xa84914, 0x51b0ed, 0xa84914, 0x51b0ed, 0xa84914, 0x51b0ed, 0xa84914, 0x51b0ed, 0xa84914, 0x51b0ed, 0xa84914, 0x51b0ed, 0xa84914, 0x51b0ed, 0xa84914, 0x51b0ed, 0xa84914, 0x51b0ed, 0xa84914, 0x51b0ed, 0xa84914, 0x51b0ed, 0xa84914, 0x51b0ed, 0xa84914, 0x51b0ed, 0xa64718, 0x5ebeec, 0xa54314, 0x5cbeea, 0xb64b11, 0x78a3e4, 0xc87914, 0x44b4f9, 0x307610, 0x59caf8, 0x370b15, 0x43cdf9, 0x340a15, 0x47cdf9, 0x330514, 0x4bc2e4, 0x310515, 0x4acce5, 0x370415, 0x4accfa, 0x34050a, 0x4accfa, 0x35060b, 0xb5cdf9, 0x34010a, 0xb7ccf8, 0x34010a, 0xb1cffb, 0x370009, 0xb1cffb, 0x361f0a, 0xbecef8, 0x351f0b, 0xbbcff9, 0x2a1e0d, 0xb9cdfb, 0x2a1e0d, 0xbfcaf8, 0x261f0f, 0xbdc9f9, 0x261f0f, 0xbbc9fb, 0x241f0e, 0x84cafa, 0x251c0f, 0x80c4fa,
				0x261d0c, 0x8ec7f9, 0x271c0f, 0x8bc7f8, 0x251b0e, 0x8bc7f8, 0x251b0e, 0x8ac0f8, 0x3a1c0d, 0x8ec2fa, 0x3b1d0d, 0x8dc3fa, 0x3a1c02, 0x82fdf5, 0x3b1f0d, 0x81fcf4, 0x3b1f0d, 0x82fdf5, 0x3b1f0d, 0x8cfef4, 0x3a1e0c, 0x89fefb, 0x3b210d, 0x89fffa, 0x38220c, 0x97fff9, 0x3a240a, 0x97ffff, 0x3b240a, 0x90fefc, 0x3b240a, 0x93fdfd, 0x3b240a, 0x9df3ff, 0x382b0a, 0x9cfcfc, 0x3d2a09, 0x9cfcff, 0x3c290a, 0xa1fdf9, 0x3d2e0b, 0xa6fdff, 0x3c2f0c, 0xa4fcf9, 0x332e0d, 0xa6fffe, 0x322f0c, 0xa3ffff, 0x33300d, 0xbdfefc, 0x30330c, 0xbcfdfd, 0x34310c, 0xb3fafc, 0x34310c, 0xb3fafc, 0x363113, 0xb2f8e3, 0x31300c, 0xb0f9fd, 0x30310d, 0x4ff6e2, 0x31300c, 0x4df3e1, 0x36310d, 0x4cf0e6, 0x36310d, 0x4ff1e1, 0x38310a, 0x4e8ee0, 0x38310a, 0x4d8fe3, 0x39320b, 0x4889e3, 0x39320b, 0x4988e2, 0x26310a, 0x4d89ec,
				0x26310a, 0x4d86e2, 0x273005, 0x4e85e3, 0x263106, 0x4085e3, 0x243700, 0x4786e2, 0x243700, 0x4687e1, 0x272801, 0x4785e0, 0x272801, 0x7a85e1, 0x26293e, 0x7a85df, 0x212e3f, 0x7a85df, 0x232c01, 0x7b84dc, 0x2d2300, 0x7986dc, 0x2b2307, 0x6487dd, 0x2a2404, 0x6487de, 0x292507, 0x6284dd, 0x2b1b05, 0x6cbbdf, 0x291b06, 0x6d84de, 0x2d1908, 0x6d84d0, 0x531f06, 0x6f84d3, 0x541e07, 0x6f87d1, 0x551f04, 0x6c88d0, 0x551f04, 0x6288d7, 0x541e05, 0x618bd7, 0x551f06, 0x648cd6, 0x541e19, 0x7b8fc9, 0x551f06, 0x788ec9, 0x541e07, 0x7e90cb, 0x571d00, 0x7f91ca, 0x571d00, 0x7f96ce, 0x591d01, 0x7a91d1, 0x581a1e, 0x7990d2, 0x581818, 0x7a90d2, 0x59161b, 0x7993d2, 0x661519, 0x7890d3, 0x60ef17, 0x7298ac, 0x66ea1e, 0x4d91a6, 0x1b066b, 0x99b18a, 0x376478, 0xe78381, 0xb7a7e, 0xfa8382, 0xf757a, 0xf58f86,
				0xd777e, 0xf48086, 0xe787f, 0xf48188, 0xc797e, 0xf48389, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf48188, 0xd7871, 0xf58089, 0x2777e, 0xf78184, 0x57273, 0xeb8385, 0x57273 };
		System.arraycopy(aFor, 0, key, 30310, aFor.length);
	}

	private static void init103(int[] key) {
		int[] aFor = { 0xfc8b8a, 0x57273, 0xfc8b8a, 0x57273, 0xfc8b8a, 0x57273, 0xfc8b8a, 0x57273, 0xfc8b8a, 0x57273, 0xfc8b8a, 0x57273, 0xfc8b8a, 0x57273, 0xfc8b8a, 0x57273, 0xfc8b8a, 0x57273, 0xfc8b8a, 0x57273, 0xfc8b8a, 0x57273, 0xfc8b8a, 0x57273, 0xfc8b8a, 0x57273, 0xfc8b8a, 0x57273, 0xfc8b8a, 0x57273, 0xfc8b8a, 0xb7c7f, 0xf2848c, 0xf7a75, 0xf7878a, 0x167576, 0xd79785, 0x484568, 0xca8d84, 0xba4c68, 0xd0f181, 0xbf336f, 0xc9f683, 0xbf306a, 0xccf580, 0xb9326d, 0xcefa9e, 0xb7326d, 0xcdf59c, 0xb73d73, 0xcaf583, 0xb73d73, 0xc9f483, 0xb63e72, 0x36f580, 0xb63e72, 0x37f383, 0xb63e72, 0x35f380, 0xb13d71, 0x34f283, 0xb22270, 0x35f384, 0xbd2276, 0x31f384, 0xa12170, 0x30f285, 0xa22070, 0x36f384, 0xa02672, 0x39f087, 0xa32572, 0x3ef386, 0xa32572, 0x3cf386, 0x9c2473, 0x3efc87, 0x9a2671, 0x3dfc86,
				0x952673, 0x3efc85, 0x922772, 0x3cfc8a, 0x92207c, 0x3cfc8a, 0x93217f, 0x22fc89, 0x90227e, 0x24fc88, 0x91237f, 0x26c288, 0x9e2070, 0x24c389, 0x9e2070, 0x27c288, 0x9e2070, 0x26c288, 0x90227e, 0x25fd89, 0x90227e, 0x22fd88, 0x93237d, 0x23ff88, 0x8d237c, 0x23ff8a, 0x8d237c, 0x21f88b, 0x8d237c, 0x24f88a, 0x8c227f, 0x2bfa89, 0x8e227c, 0x2af58a, 0x88227c, 0x29f489, 0x89217d, 0x17f489, 0x8b277b, 0x10f389, 0x8b277b, 0x13f488, 0x84267a, 0x11f789, 0x84267a, 0x16f78e, 0x87277d, 0x17e88f, 0x99267e, 0x15e88f, 0x9e257f, 0x14e990, 0x9c257f, 0x1bee8f, 0x9c257f, 0x19ef8e, 0x9d267e, 0x1eee91, 0x9d267e, 0x1dee8e, 0x632860, 0x1eed8d, 0x622961, 0x1feb8d, 0x652a66, 0x1feb8d, 0x662b67, 0x1e948c, 0x692a66, 0x1c948f, 0x682967, 0x1b958e, 0x692e66, 0x199481, 0x762d67, 0x189580, 0x762d67, 0x1a958e,
				0x712266, 0x1b9481, 0x722167, 0x1a9582, 0x7c2761, 0x189583, 0x7c2761, 0x1f9683, 0x7d2662, 0x1c8982, 0x7d2662, 0x228a82, 0x7d2662, 0x208b82, 0x7c275d, 0x278cbd, 0x7d2662, 0x248fbc, 0x722860, 0x278ebd, 0x742861, 0x268dba, 0x772960, 0x388dbb, 0x762e61, 0x3d8cb9, 0x772d6e, 0x308db6, 0x752d61, 0x31b2b9, 0x722c6e, 0x32b1b8, 0xd2d6d, 0x33b6bb, 0xe2c6e, 0x32b7bb, 0x92d6f, 0x30b5bd, 0x8226c, 0x30b4bf, 0x8226c, 0x3eb4be, 0xb216f, 0x3fb5be, 0xc266e, 0x3cb4a1, 0x13256f, 0x3cb4bf, 0x122470, 0x39abbd, 0x122677, 0x39adb2, 0x122675, 0x3badbf, 0x1d2171, 0x3eadbf, 0x1e2172, 0x3daab8, 0x1e2371, 0x34aaba, 0x122273, 0xca7bb, 0x15227d, 0x3a0be, 0x11db02, 0xea5bc, 0x322b7a, 0x508ab6, 0xdf3768, 0x66ec9c, 0xb10262, 0x5bf59d, 0xac0962, 0x55f49d, 0xaf0f62, 0x5af998, 0xaf0f60, 0x57f798, 0xac0d60,
				0x50f699, 0xab0c61, 0x51f49a, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x50f599, 0xa90c60, 0x51f498, 0xa6036f, 0x53f595, 0xa10662, 0x4ff794, 0xa10662 };
		System.arraycopy(aFor, 0, key, 30610, aFor.length);
	}

	private static void init104(int[] key) {
		int[] aFor = { 0x58ff9b, 0xa10662, 0x58ff9b, 0xa10662, 0x58ff9b, 0xa10662, 0x58ff9b, 0xa10662, 0x58ff9b, 0xa10662, 0x58ff9b, 0xa10662, 0x58ff9b, 0xa10662, 0x58ff9b, 0xa10662, 0x58ff9b, 0xa10662, 0x58ff9b, 0xa10662, 0x58ff9b, 0xa10662, 0x58ff9b, 0xa10662, 0x58ff9b, 0xa10662, 0x58ff9b, 0xa10662, 0x58ff9b, 0xa10662, 0x58ff9b, 0xa0086e, 0x5aff9c, 0xa60264, 0x52fe9b, 0x891067, 0x3fcc94, 0xab017f, 0xd1c594, 0xbd7a7f, 0xd6c793, 0xa6047c, 0xd0c190, 0xa60578, 0xd3c092, 0xa6077f, 0xd1cf8c, 0xa6077f, 0xdcc08e, 0xa60861, 0xdacf8e, 0xa7077e, 0xd9ce8e, 0xa6047f, 0x26cf8d, 0xa6047f, 0x27c98e, 0xa6047f, 0x24c88e, 0xa7057c, 0x22ca8e, 0xa41a7d, 0x23cb89, 0xa41b7a, 0x28cb89, 0xb8197d, 0x29ca88, 0xb8197d, 0x2acb88, 0xbf1f7d, 0x28cc88, 0xbf187b, 0x25cd8e, 0xb81b7a, 0x27cd8f, 0x871a7a, 0x25cd8c,
				0x861479, 0x20cd8f, 0x871778, 0x2fcd8d, 0x84177b, 0x2acc83, 0x85107a, 0x2acd8d, 0x85107a, 0x34cd82, 0x851074, 0x31ce83, 0x841174, 0x33f08d, 0x8b1275, 0x31f18c, 0x8b1275, 0x31f18c, 0x881374, 0x30f18c, 0x87107b, 0x32cf8c, 0x87107b, 0x33ce8d, 0x81117b, 0x31cd8e, 0x9e167a, 0x30ca8c, 0x9e167a, 0x32cd8d, 0x9e167a, 0x32cd8d, 0x9b167b, 0x3cce8d, 0x9b167b, 0x3fc18d, 0x9d167b, 0x3fc18d, 0x9e1778, 0x1c38c, 0x9c177f, 0xc48d, 0x9b107f, 0x1c28c, 0x96107e, 0x1c28a, 0x941379, 0xc38d, 0x91137e, 0x1dc8c, 0x8e127d, 0xdc8f, 0x8c127e, 0x7df8e, 0x8d1361, 0x5df90, 0x821460, 0x7de91, 0x831761, 0xdf8e, 0x831761, 0x3df91, 0x7c187e, 0x1dd93, 0x7d197f, 0xdb93, 0x7c1a78, 0x6db93, 0x7f1b79, 0x7a492, 0x701a78, 0x6a592, 0x731b7b, 0xa792, 0x721c7a, 0x2a69d, 0x721c7a, 0x1da592, 0x721c7a, 0x1fa590,
				0x731d79, 0x18aa91, 0x721c76, 0x1aa893, 0x7d1b77, 0x18a894, 0x7c1a76, 0x18a895, 0x7a1874, 0x1bb794, 0x790775, 0x19aa94, 0x460674, 0x1bab94, 0x460674, 0x1aaa95, 0x410175, 0x18a8ab, 0x400076, 0x16a7a8, 0x420075, 0x10a5ae, 0x420075, 0x13a3ae, 0x5d0074, 0x10a2ad, 0x5b0075, 0x129fad, 0x54007a, 0x119ea2, 0x520075, 0x109da3, 0x2f0176, 0x119aa0, 0x2c0075, 0x129ba3, 0x290177, 0x1099a5, 0x280e74, 0x1098a7, 0x280e74, 0x1e98a6, 0x280e74, 0x1d9ba6, 0x2e0876, 0x1e9ab9, 0x2e0876, 0x199a6, 0x2f0969, 0x399a7, 0x28146d, 0x49fa8, 0x2a146e, 0x19fa6, 0x29136c, 0xc9fa2, 0x2f136f, 0xb99a5, 0x2d116c, 0xa97a4, 0x2f116e, 0x3392a8, 0x24126a, 0x366ed2, 0x201862, 0x1993a1, 0x6b2141, 0xc8f1ac, 0xa135d, 0xd4e1a0, 0x3e165f, 0xc9eca0, 0x30165e, 0xc8efa3, 0x3c1758, 0xcbeca6, 0x3d165d, 0xc5eea5, 0x3c1653,
				0xc0eea4, 0x3d175e, 0xc7efa5, 0x3d1758, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc4eea3, 0x3d175a, 0xc5efa2, 0x321855, 0xc7eeaf, 0x351d58, 0xdbecae, 0x351d58 };
		System.arraycopy(aFor, 0, key, 30910, aFor.length);
	}

	private static void init105(int[] key) {
		int[] aFor = { 0xcce4a1, 0x351d58, 0xcce4a1, 0x351d58, 0xcce4a1, 0x351d58, 0xcce4a1, 0x351d58, 0xcce4a1, 0x351d58, 0xcce4a1, 0x351d58, 0xcce4a1, 0x351d58, 0xcce4a1, 0x351d58, 0xcce4a1, 0x351d58, 0xcce4a1, 0x351d58, 0xcce4a1, 0x351d58, 0xcce4a1, 0x351d58, 0xcce4a1, 0x351d58, 0xcfe7a2, 0x351d58, 0xcce4a1, 0x341c59, 0xcce4a1, 0x371e59, 0xcbe7ad, 0x301c54, 0xc4e1ab, 0x110d57, 0xbadaa5, 0x3c1f4d, 0x49dda1, 0x241c4e, 0x48a2a3, 0x39604c, 0x4fa4a7, 0x3a674e, 0x4fa4a9, 0x396242, 0x4ca4b3, 0x396242, 0x42aab0, 0x396340, 0x42aab0, 0x3e6041, 0x41aab0, 0x3f6340, 0xbfa8b2, 0x3d6546, 0xbca8b7, 0x3e6645, 0xbda9b6, 0x3e6645, 0xbda9b6, 0x397942, 0xbca8b7, 0x3b7943, 0xb0a8b0, 0x3c7843, 0xb1a9b7, 0x217b43, 0xb3a9b6, 0x207d42, 0xb5a9b7, 0x2d7c43, 0xb4a8b7, 0x2e7d44, 0xb3abb0, 0x2c7d44, 0x8eaab2,
				0x2d7245, 0x8eabb0, 0x2b7345, 0x83aab2, 0x28704a, 0x84abbd, 0x297745, 0x84abbd, 0x29774b, 0x86aabc, 0x36744a, 0x84aabd, 0x374a4a, 0x81aab2, 0x364b4b, 0x8fa9b3, 0x354a4a, 0x8fa9b3, 0x364b4b, 0x8fa9b3, 0x364b4b, 0x8eaabc, 0x384a4a, 0x8d95bd, 0x394b4b, 0x8896bd, 0x394b4b, 0x8995bd, 0x274949, 0x8a92bc, 0x264949, 0x8a92be, 0x264949, 0x8c90bc, 0x2a484f, 0x8c91b9, 0x29494c, 0x8d9eb8, 0x2c494b, 0x8c9cbf, 0x12494c, 0x8f9dbf, 0x13484c, 0x899abf, 0x11494c, 0x869bbe, 0x13494f, 0x8698bc, 0x12484e, 0x8398bf, 0x13574d, 0x9d99bf, 0x10544e, 0x9b99be, 0x115551, 0x9999a0, 0x1e5250, 0x9b9bbe, 0x1f5353, 0x9b9aa3, 0x18524c, 0x9a95bc, 0x1b5353, 0x9b96bd, 0xe45250, 0x9a91bc, 0xe75357, 0x9c91bb, 0xe65050, 0x9f90ba, 0xe72f53, 0x9190b9, 0xe42e50, 0x9093ba, 0xe32f53, 0x9294bb, 0xe22e5c, 0x8d97b4,
				0xe32f53, 0x8f96b4, 0xe42e52, 0x8e98b5, 0xe72d53, 0x8f99b6, 0xe82a52, 0x8e98b1, 0xe82a52, 0x8d9bb1, 0xe92b53, 0x8b9bb2, 0xea3452, 0x8b9ab0, 0xeb3751, 0x8b9ab0, 0xd5316f, 0x889b8f, 0xd5316f, 0x8f9bb0, 0xd5316f, 0x8396b3, 0xd63068, 0x8295b4, 0xd0306f, 0x8194b5, 0xcf376c, 0x8295b5, 0xc83462, 0x8294bb, 0xc53463, 0x83abb4, 0xc73462, 0x84aab5, 0xc63763, 0x86acb7, 0xbb3664, 0x85adb2, 0xb83767, 0x83adb3, 0xb93460, 0x80a3b4, 0xb83567, 0x8ea3b5, 0xbb3664, 0x8ea3b6, 0xbd3066, 0x92a1a8, 0xbd3066, 0x8da2b7, 0xa23367, 0x8fbca9, 0xa43165, 0x8bbcae, 0xa73666, 0x8cbfaf, 0xa73565, 0x8fbfac, 0xa93564, 0x8fbdad, 0xaa3b67, 0x8bb9ae, 0x943864, 0x88baa8, 0x90c769, 0xb642d6, 0x81c56e, 0xf368b9, 0x54b857, 0x9b53ae, 0x7aa059, 0x8b5ba4, 0x73a55a, 0x885ea7, 0x71a75c, 0x875ea2, 0x73a75f, 0x875ea2,
				0x71a45f, 0x885da8, 0x72a45d, 0x8e5ca8, 0x72a45f, 0x885ca2, 0x71a45f, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x885da4, 0x71a45d, 0x895ca5, 0x7eab52, 0x8b5da8, 0x79ae5f, 0x975fa9, 0x79ae5f };
		System.arraycopy(aFor, 0, key, 31210, aFor.length);
	}

	private static void init106(int[] key) {
		int[] aFor = { 0x8057a6, 0x79ae5f, 0x8057a6, 0x79ae5f, 0x8057a6, 0x79ae5f, 0x8057a6, 0x79ae5f, 0x8057a6, 0x79ae5f, 0x8057a6, 0x79ae5f, 0x8057a6, 0x79ae5f, 0x8057a6, 0x79ae5f, 0x8057a6, 0x79ae5f, 0x8057a6, 0x79ae5f, 0x8057a6, 0x79ae5f, 0x8057a6, 0x79ae5f, 0x8057a6, 0x79ae5f, 0x8057a6, 0x7aad5c, 0x8354a5, 0x7bac5d, 0x8354a5, 0x78ae5d, 0x8554a8, 0x7eaf53, 0x8f54ac, 0x40be51, 0xe26da0, 0x9fac46, 0xf113aa, 0x98ac44, 0xf412a9, 0x87d346, 0xf110ab, 0x86d242, 0xf311a5, 0x84d44e, 0xfc13bc, 0x89d54d, 0xf312bc, 0x8ad552, 0xf01dbd, 0x8cd74c, 0xf21ebc, 0x8cd74c, 0xf31dbd, 0x73d64f, 0xf31abf, 0x72d74e, 0xf019bc, 0x73d64f, 0xf019bc, 0x73d64f, 0xf706bb, 0x71d64e, 0xfb06ba, 0x70c948, 0xfc19bb, 0x72cb4e, 0xe318bb, 0x70cb4d, 0xe51fb8, 0x73ca4e, 0xeb1fba, 0x71ca4f, 0xec1cbb, 0x72cb4e, 0xd21cbb,
				0x70cb4d, 0xd312b8, 0x70cb4d, 0xd713bb, 0x7dca4c, 0xd111bb, 0x7dca4c, 0xd111bb, 0x7dca4c, 0xd316ba, 0x7ccb4d, 0xce15ba, 0x7dca42, 0xcb2aba, 0x7dca42, 0xc52bb5, 0x7fc84c, 0xc52bb5, 0x7cc94d, 0xc52bb5, 0x7cc94d, 0xc428ba, 0x73c84c, 0xc617bb, 0x72c94d, 0xc017ba, 0x71ca4c, 0xc017ba, 0x6fca4f, 0xc211ba, 0x6fca4f, 0xc311b8, 0x68cb4e, 0xc212bb, 0x6bca4f, 0xcc12b9, 0x69ca4c, 0xcd1db8, 0x6ecb4b, 0xce1ebf, 0x6ecb4b, 0xf01ebf, 0x6dca4c, 0xf619b8, 0x6ccb4b, 0xfb19b9, 0x6ccb4b, 0xf91ab8, 0x6dca4a, 0xfc1abb, 0x6cd54b, 0xe31ab9, 0x6dd44b, 0xe11aba, 0x6ad74a, 0xe11bb8, 0x69d749, 0xef1da6, 0x6ad448, 0xee1db8, 0x6dd557, 0xef12a7, 0x6dd557, 0xec13b8, 0x6cd656, 0x1312bb, 0x6dd157, 0x1613bb, 0x6cd250, 0x1512ba, 0x6dad53, 0x1b12b9, 0x6eac50, 0x1a11ba, 0x69ad53, 0x1b11ba, 0x6aaa52, 0x513ba,
				0x6aaa52, 0x710ba, 0x6ba95d, 0x11fba, 0x68aa5c, 0x11fba, 0x69ab5f, 0xe18bb, 0x68aa58, 0xe18bc, 0x6ba95f, 0x919be, 0x6ba95f, 0xa07bd, 0x6ba95f, 0xb04be, 0x54a85e, 0xa03bf, 0x57a95f, 0xd0380, 0x57a95f, 0xf0182, 0x59a65e, 0xc0083, 0x58a55f, 0xa0084, 0x58a55f, 0x80785, 0x45a55c, 0xe0486, 0x44a45f, 0x30487, 0x469a51, 0x50486, 0x479950, 0x60585, 0x469e51, 0x780587, 0x459f52, 0x7e0586, 0x449c55, 0x7d0b81, 0x449c55, 0x720a87, 0x449c55, 0x710987, 0x459d56, 0x750f99, 0x459d56, 0x750f87, 0x5a9e57, 0x740e98, 0x588055, 0x750f85, 0x588055, 0x770c9a, 0x5a8054, 0x740d9b, 0x5e8156, 0x7a069c, 0x5b8254, 0x7b009f, 0x627b59, 0x7e069d, 0x5d7923, 0x19e8e6, 0x714e2b, 0xd482c2, 0x1c5d33, 0xf9afc9, 0x95a31, 0xf1a0c8, 0xb5a32, 0xf2a3cb, 0xa5b31, 0xffa2cd, 0xa5a30, 0xfca3ce, 0x45a35, 0xfda3c2,
				0x75a37, 0xfba2c2, 0x15b35, 0xf8a2ce, 0x5b35, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf9a2ce, 0x5b37, 0xf8a3cf, 0xf5438, 0xfaa2c2, 0x85135, 0xe6a0c3, 0x85135 };
		System.arraycopy(aFor, 0, key, 31510, aFor.length);
	}

	private static void init107(int[] key) {
		int[] aFor = { 0xf1a8cc, 0x85135, 0xf1a8cc, 0x85135, 0xf1a8cc, 0x85135, 0xf1a8cc, 0x85135, 0xf1a8cc, 0x85135, 0xf1a8cc, 0x85135, 0xf1a8cc, 0x85135, 0xf1a8cc, 0x85135, 0xf1a8cc, 0x85135, 0xf1a8cc, 0x85135, 0xf1a8cc, 0x85135, 0xf1a8cc, 0x85135, 0xf1a8cc, 0x85135, 0xf1a8cc, 0xb5236, 0xf2abcf, 0xa5337, 0xf3aace, 0x95036, 0xf5abc1, 0xc513d, 0xe0a8c2, 0x274e38, 0xbf81d6, 0xcc3c32, 0xa681db, 0xce3f36, 0xa380d8, 0xd04137, 0xa682da, 0xd34130, 0xa483d9, 0xd34632, 0xa480c3, 0xd14632, 0xa983dd, 0xd14530, 0xab8ddf, 0xd0442f, 0xab8dc0, 0xd0442f, 0xad8cc0, 0xd34530, 0xac8edf, 0x2c422f, 0xae8cdd, 0x2c422f, 0xae8cdd, 0x2c422f, 0xaf8ddc, 0x2a4228, 0xad92db, 0x27422f, 0xab92dc, 0x264328, 0xb790dd, 0x25442b, 0xb191de, 0x274428, 0xbf91dc, 0x274428, 0xbd91db, 0x20472f, 0xbf91db, 0x1e492d, 0xbc90da,
				0x1f482d, 0xb99fd8, 0x11462f, 0xb89dd9, 0x11462f, 0xbd9dd8, 0x11462f, 0xbc9ad9, 0x12472e, 0xa299d8, 0x107920, 0xa498d8, 0x107920, 0xa798d7, 0x1f7a2f, 0xa599d6, 0x1c7b2e, 0xa698d7, 0x1f7a2f, 0xa698d7, 0x1e7920, 0xa899d6, 0x1d4623, 0xa899d4, 0x1a4622, 0xab9bd4, 0x1a4622, 0xb49ad4, 0x194121, 0xb59bd5, 0x194121, 0xb29bd7, 0x194121, 0xbe99d7, 0x184e22, 0xbc99d6, 0x184e22, 0xb998d7, 0x194d23, 0x8798d0, 0x1a4c22, 0x8699d1, 0x1d4d23, 0x859ed0, 0x1d4d23, 0x8b9ed1, 0x1e4c20, 0x8a9cd2, 0x1b4c23, 0x9483d1, 0x1a4d20, 0x9780d1, 0x1b4e20, 0x9780d1, 0x1c4d21, 0x9481d0, 0x124b3f, 0x9682cf, 0x124b3f, 0x9183d0, 0x13443e, 0x9183ce, 0x104521, 0x9080cf, 0xef4422, 0x9486ce, 0xee4725, 0x9787cf, 0xef3826, 0x9886cc, 0xef3826, 0x9b85ce, 0xef3826, 0x9c84cf, 0xee3f27, 0x9e85ce, 0xee3f27, 0x8186cf,
				0xee3f27, 0x8388c1, 0xef3e24, 0x8588c3, 0xec3d25, 0x8489c0, 0xe33a24, 0x8588c7, 0xe03925, 0x8489c7, 0xe72626, 0x8689c6, 0xe72626, 0x878bc7, 0xd82727, 0x868cf8, 0xdb2626, 0x868cf8, 0xdc2625, 0x858ffb, 0xdd2726, 0x8b80fa, 0xde2621, 0x8b80fc, 0xd82620, 0x8982fa, 0xc72123, 0x8c83fb, 0xc6222c, 0x8182f4, 0xc71d23, 0x8283fb, 0xc61e2c, 0x8782f9, 0xc7192d, 0xf885fa, 0xc61e2c, 0xfb84f9, 0xc71d2d, 0xfd84fe, 0xc41c2c, 0xfc8aff, 0xcb1f2d, 0xfe8afc, 0xca1e2c, 0xf98dfc, 0xcb1f33, 0xfb8dfc, 0xcb1f33, 0xe48efd, 0xc91f32, 0xee91e2, 0xc70131, 0xef8afe, 0xcb0d35, 0xec87fb, 0xcf0d34, 0xd18aff, 0xcd0e34, 0xd974f6, 0xcf004c, 0xe77df2, 0xa7f630, 0xc85fe1, 0x6e8f08, 0xb179f7, 0x5f8008, 0xa87cf7, 0x51840a, 0xa97cf0, 0x518408, 0xa97cf0, 0x5f8407, 0xa87cfd, 0x508506, 0xa97cfd, 0x508504, 0xaa7cf3,
				0x508506, 0xaa7cf3, 0x538606, 0xa47dfc, 0x538606, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xab7cff, 0x528506, 0xaa7dfe, 0x5d8a09, 0xa87cf3, 0x5a8f04, 0xb47ef2, 0x5a8f04 };
		System.arraycopy(aFor, 0, key, 31810, aFor.length);
	}

	private static void init108(int[] key) {
		int[] aFor = { 0xa376fd, 0x5a8f04, 0xa376fd, 0x5a8f04, 0xa376fd, 0x5a8f04, 0xa376fd, 0x5a8f04, 0xa376fd, 0x5a8f04, 0xa376fd, 0x5a8f04, 0xa376fd, 0x5a8f04, 0xa376fd, 0x5a8f04, 0xa376fd, 0x5a8f04, 0xa376fd, 0x5a8f04, 0xa376fd, 0x5a8f04, 0xa376fd, 0x5a8f04, 0xa376fd, 0x5a8f04, 0xa376fd, 0x5a8f04, 0xa376fd, 0x5b8e05, 0xa277fc, 0x588d06, 0xa174f1, 0x558d0d, 0xb37af2, 0x739905, 0xe255e9, 0x8ce90a, 0xea54e2, 0x8d940e, 0xe12be5, 0x93eb0b, 0xe029e6, 0x94e80d, 0xe12be4, 0x97ef0e, 0xe12afe, 0x95ef0e, 0xe32ae0, 0x9bec0d, 0xe22be3, 0x98e30c, 0xe22be2, 0x98e30c, 0xe52be3, 0x9be213, 0xe429fc, 0x64e50c, 0xe528fd, 0x67e60f, 0xe528fd, 0x67e60f, 0xe429fc, 0x61e608, 0xe636fb, 0x6ff908, 0xe436fa, 0x69e70e, 0xf935fb, 0x68e60e, 0xfb35f8, 0x6fe00d, 0xf935fb, 0x61e00f, 0xf834fb, 0x62e108, 0xff37fc,
				0x5fe009, 0xfe38ff, 0x5de008, 0xf838fd, 0x5fe00b, 0xf63bfd, 0x5fe00b, 0xf43afd, 0x58e10a, 0xf53dfc, 0x5be00b, 0xeb3ef3, 0x5ae104, 0xe93efc, 0x5ade0b, 0xec3ef3, 0x54dc0b, 0xed3ef3, 0x54dc0b, 0xee3ff2, 0x54dc0b, 0xee3ff2, 0x57dd0a, 0xe03cfd, 0x56dc0b, 0xe303fc, 0x57dd0a, 0xe600fc, 0x57dd0a, 0xf800fd, 0x56dc0b, 0xfb07fe, 0x57dd0a, 0xfc07fc, 0x57dd0a, 0xff04fd, 0x58dc0b, 0xfd04fe, 0x59d30a, 0xfa05ff, 0x5bd30a, 0xfb06fe, 0x65d30d, 0xfb06f9, 0x67d30a, 0xfc00fe, 0x64d30d, 0xf301ff, 0x66d30e, 0xf203fc, 0x61cc0d, 0xf103ff, 0x7fcd0e, 0xf200ff, 0x7fcd0e, 0xf303ff, 0x78ce0f, 0xf002fe, 0x77c90e, 0xf203ff, 0x76ca0f, 0xf502e0, 0x76ca0f, 0xf40dff, 0x76ca0f, 0xf70ce0, 0x77c90e, 0xb0ae3, 0x70c80f, 0xa09e4, 0x73c90e, 0xa09e2, 0x72b609, 0x708e0, 0x72b609, 0x60be3, 0x75b70a, 0x40ce0, 0x74b609,
				0x40ce0, 0x6bb508, 0x50def, 0x68ba09, 0x30de1, 0x69bb06, 0xee0, 0x68ba05, 0xf09e1, 0x69bb02, 0xc0ae1, 0x68ba03, 0xa0ae2, 0x6ba502, 0xa0be0, 0x6aa601, 0x350ae1, 0x6ba13e, 0x360be0, 0x6ba13e, 0x310be1, 0x68a23f, 0x3e05e3, 0x6ba338, 0x3e05e5, 0x6aa039, 0x3b04e3, 0x6ba73a, 0x2605e3, 0x6da73b, 0x2707e2, 0x60a73a, 0x2638e3, 0x62a534, 0x2038e2, 0x61a437, 0x5e38e0, 0x60a336, 0x5d39e3, 0x61a037, 0x5a3ae3, 0x60a330, 0x5934e4, 0x61a237, 0x5437e6, 0x61a237, 0x5536e6, 0x66a536, 0x5637f9, 0x66a536, 0x4934f8, 0x65a628, 0x4c34fb, 0x65a12d, 0x402dfc, 0x61ab30, 0x432cfd, 0x5da937, 0x472af2, 0x67ad3b, 0x4823f5, 0x77b63b, 0x2811e2, 0x55a53f, 0xf66fd8, 0x38872f, 0xca78d0, 0x3e822a, 0xc37ed5, 0x398628, 0xce70d3, 0x39872a, 0xce7fd0, 0x388727, 0xcf7edf, 0x358425, 0xcf7cdc, 0x35852b, 0xc97ddc,
				0x338429, 0xca7dde, 0x328729, 0xc47bd1, 0x328729, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xca7dd0, 0x338429, 0xcb7cd1, 0x3c8b26, 0xc97ddc, 0x3b8e2b, 0xd57fdd, 0x3b8e2b };
		System.arraycopy(aFor, 0, key, 32110, aFor.length);
	}

	private static void init109(int[] key) {
		int[] aFor = { 0xc277d2, 0x3b8e2b, 0xc277d2, 0x3b8e2b, 0xc277d2, 0x3b8e2b, 0xc277d2, 0x3b8e2b, 0xc277d2, 0x3b8e2b, 0xc277d2, 0x3b8e2b, 0xc277d2, 0x3b8e2b, 0xc277d2, 0x3b8e2b, 0xc277d2, 0x3b8e2b, 0xc277d2, 0x3b8e2b, 0xc277d2, 0x3b8e2b, 0xc277d2, 0x3b8e2b, 0xc277d2, 0x3b8e2b, 0xc277d2, 0x3b8e2b, 0xc376d3, 0x3b8e2b, 0xc277d2, 0x388b29, 0xc071d0, 0x2e892a, 0xf17ad4, 0x4b9a21, 0xc751cd, 0xaceb2e, 0xc955c6, 0xa1942b, 0xcd2bc0, 0xa2eb2d, 0xd329c2, 0xa0eb29, 0xd429c1, 0xa1ea28, 0xd42ec7, 0xa7ea28, 0xd02cc7, 0xa7ea2a, 0xde2dc4, 0xa7ea2a, 0xde2dc7, 0xa4e529, 0xd92dc6, 0xa7e436, 0x272ed9, 0xa6e529, 0x2429d8, 0xa6e529, 0x2729da, 0xa5e42e, 0x262adb, 0xa3e52f, 0x2435dc, 0xa3e52f, 0x2935db, 0xa2e428, 0x2f35dc, 0xbfe728, 0x2d35dd, 0xbfe62e, 0x2a32db, 0xbde628, 0x2432dc, 0xbee72f, 0x2331db,
				0xbde62e, 0x1c3ed8, 0xbee92e, 0x1b31db, 0xbce82f, 0x1432da, 0xbde92c, 0x1432da, 0xbeee2d, 0x1332d5, 0xbdef22, 0x1232d5, 0xa2ec23, 0x1032d4, 0xa2ed22, 0x1732d5, 0xa0d32c, 0x1931d4, 0xa0d32c, 0x1d30d4, 0xa0d32c, 0x1a30d5, 0xa0d32c, 0x1832db, 0xafd22d, 0x1a0dda, 0xaed32c, 0x1f0eda, 0xaed32c, 0x1e0dd4, 0xb1d023, 0x1f0cd5, 0xb2d720, 0x1e0dd4, 0xb5d720, 0x1d0dd5, 0xbad421, 0x1c03d4, 0xb9db21, 0x1d0cd5, 0xbcdb26, 0x1c0ed2, 0x82db21, 0x1d0dd4, 0x80db20, 0x1c0fd5, 0x85db21, 0x1d08d2, 0x8ada20, 0x1f08d1, 0x8bd823, 0x1b17d1, 0x94d920, 0x1914d0, 0x94d920, 0x1817d1, 0x93da21, 0x1b16d0, 0x9cdd20, 0x1916cf, 0x9cdd20, 0x1814d0, 0x9bdc3f, 0x1814d0, 0x9ad33e, 0x1814ce, 0x99d221, 0xe416cf, 0x98d522, 0xe317ce, 0x99d625, 0xe016cf, 0x98a926, 0xee16cc, 0x9ba825, 0xee16ce, 0x9aab24, 0xeb10cc,
				0x9aab24, 0xeb10ce, 0x9baa27, 0xf512c0, 0x98a526, 0xf213c1, 0x98a526, 0xf110c0, 0x99a425, 0xfe17c1, 0x98a522, 0xfd14c1, 0x99a423, 0xfa15c1, 0x98a520, 0xf90bc2, 0x99a623, 0xc60ac3, 0x98a11c, 0xc60ac3, 0x9ba01d, 0xc10ac2, 0x98a31c, 0xc00bc1, 0x97ac1d, 0xc20ac6, 0x96af1c, 0xc70bc6, 0x88a91e, 0xc50bc7, 0x89a81e, 0xc209c4, 0x88a91d, 0xcf09c5, 0x8a9713, 0xce0ac4, 0x8c9712, 0xb30bc5, 0x8d9013, 0xb00ac6, 0x8c9312, 0xb709c6, 0x8d9015, 0xb407c1, 0x8c9112, 0xba07c0, 0x8f9211, 0xba07c3, 0x8e9312, 0xbf00c2, 0x8f920d, 0xa003c3, 0x8c9113, 0xab01c2, 0x8d9310, 0xaf18dd, 0xb19d1a, 0xaf19dc, 0xb56462, 0xa819d8, 0x849e66, 0xc60aa2, 0xa1a677, 0x336393, 0x80b47c, 0x545e84, 0xbca97a, 0x485685, 0xbcac7f, 0x465581, 0xb1a37a, 0x475481, 0xbfad7a, 0x485686, 0xb0ac7f, 0x495588, 0xb2af70, 0x485687,
				0xb4ae70, 0x4e5787, 0xb4ae70, 0x4c5489, 0xbaaf7e, 0x4f5489, 0xb9af7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x415587, 0xb8ac7e, 0x405486, 0xb7a371, 0x42558b, 0xb0a67c, 0x5e578a, 0xb0a67c };
		System.arraycopy(aFor, 0, key, 32410, aFor.length);
	}

	private static void init110(int[] key) {
		int[] aFor = { 0x495f85, 0xb0a67c, 0x495f85, 0xb0a67c, 0x495f85, 0xb0a67c, 0x495f85, 0xb0a67c, 0x495f85, 0xb0a67c, 0x495f85, 0xb0a67c, 0x495f85, 0xb0a67c, 0x495f85, 0xb0a67c, 0x495f85, 0xb0a67c, 0x495f85, 0xb0a67c, 0x495f85, 0xb0a67c, 0x495f85, 0xb0a67c, 0x495f85, 0xb0a67c, 0x495f85, 0xb0a67c, 0x485e84, 0xb0a67c, 0x495f85, 0xb3a37e, 0x455f82, 0xaca878, 0x7b4783, 0xc99c6c, 0x4f5486, 0x28ee64, 0x4c5383, 0x29936f, 0x445383, 0x2b936e, 0x5a5181, 0x2b936c, 0x5f5785, 0x2b936c, 0x5e5783, 0x2d936c, 0x5a5583, 0x22926d, 0x5b5583, 0x23936e, 0x5a5483, 0x209c6d, 0x5e559d, 0x209c6d, 0xa05682, 0x219d72, 0xa35183, 0x219d72, 0xa05181, 0x219d72, 0xa25387, 0x279c73, 0xa05386, 0x278375, 0xad5381, 0x268274, 0xab5380, 0x258175, 0xb55381, 0x278174, 0xb35280, 0x268675, 0xb15286, 0x288672, 0xb55086,
				0x2b8773, 0x8b5086, 0x2b8773, 0x8e5f86, 0x298672, 0x815c87, 0x288771, 0x815c87, 0x288771, 0x845c86, 0x29807e, 0x865d89, 0x368371, 0x875e87, 0x368371, 0x835c86, 0x34bd7f, 0x8d5f87, 0x35be70, 0x885d88, 0x35be70, 0x8f5d89, 0x35be70, 0x8c5c88, 0x34bd7f, 0x825d87, 0x378270, 0x865f86, 0x378270, 0x875c88, 0x378270, 0x985f87, 0x368371, 0x9b5884, 0x308270, 0x9b5886, 0x338273, 0x945a85, 0x328d70, 0x965a84, 0x328d70, 0x935b85, 0x338e71, 0xac5884, 0x328d70, 0xae5985, 0x358a71, 0xac5e85, 0x3b8c77, 0xae5e86, 0x3a8f76, 0xaa4084, 0x3a8f76, 0xb44187, 0x398c77, 0xb44186, 0x388f77, 0xb04386, 0x378876, 0xb14486, 0x348f69, 0xb04699, 0x348f69, 0xb74786, 0x348f69, 0xb64899, 0x378e76, 0x4a4a98, 0x368975, 0x4d4b99, 0x378a72, 0x4e4a98, 0x36f571, 0x404a9b, 0x35f472, 0x404a99, 0x34f773, 0x464b9a,
				0x37f072, 0x464b98, 0x36f171, 0x594899, 0x37f07e, 0x5d4699, 0x37f07e, 0x5e4598, 0x36f17d, 0x514299, 0x37f07a, 0x524199, 0x36f17b, 0x554099, 0x36f17b, 0x545e98, 0x35f07a, 0x555d9b, 0xaf17b, 0x545aa4, 0xaf17b, 0x505ba4, 0x9f27a, 0x515aa7, 0x6fd7b, 0x535ba0, 0x7fe7a, 0x565aa0, 0x6f979, 0x485aa3, 0x5f87a, 0x4e59a0, 0x4f979, 0x4359a1, 0x5c676, 0x4058ae, 0x3c679, 0x425dae, 0x7dc179, 0x435aaf, 0x7ec07a, 0x455aae, 0x7fc37d, 0x4654a9, 0x7fc37d, 0x4854ae, 0x7ec27c, 0x4b57ae, 0x7fc37f, 0x4e50af, 0x7ec260, 0x5052ad, 0x7cc263, 0x5452ac, 0x70df62, 0x5057a5, 0x73d066, 0x5a57a2, 0x74d01d, 0x4b40d8, 0x13e114, 0x6752c2, 0xfc9f24, 0x3e7ed7, 0xde8c2b, 0x2673d4, 0xdd8c2b, 0x2872d6, 0xdd892f, 0x2a7ed8, 0xd28620, 0x2a7fdb, 0xdd8427, 0x2a7fd9, 0xdc8522, 0x257cd5, 0xdf8520, 0x237dd5, 0xd98422,
				0x237cdb, 0xda8522, 0x227cd9, 0xd48620, 0x227cd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x237fd9, 0xda8620, 0x227ed8, 0xd5892f, 0x207fd5, 0xd28c22, 0x3c7dd4, 0xd28c22 };
		System.arraycopy(aFor, 0, key, 32710, aFor.length);
	}

	private static void init111(int[] key) {
		int[] aFor = { 0x2b75db, 0xd28c22, 0x2b75db, 0xd28c22, 0x2b75db, 0xd28c22, 0x2b75db, 0xd28c22, 0x2b75db, 0xd28c22, 0x2b75db, 0xd28c22, 0x2b75db, 0xd28c22, 0x2b75db, 0xd28c22, 0x2b75db, 0xd28c22, 0x2b75db, 0xd28c22, 0x2b75db, 0xd28c22, 0x2b75db, 0xd28c22, 0x2b75db, 0xd28c22, 0x2b75db, 0xd28c22, 0x2a74da, 0xd28c22, 0x2b75db, 0xd38926, 0x2072db, 0xc28623, 0xd6cd6, 0xa6b93d, 0x267dda, 0x42c438, 0x2379de, 0x47c635, 0x2a06d9, 0x45c634, 0x2a04da, 0x5ac737, 0x2e03de, 0x5ac737, 0x2e04db, 0x5dc034, 0x2b05da, 0x53c22a, 0x2a05c4, 0x53c22a, 0x2a05c7, 0x51cc28, 0x2f05d8, 0x52cd37, 0x2d04d9, 0xadce36, 0x2c05c4, 0xadce36, 0x2c05c4, 0xaec937, 0x2d04c3, 0xa9ca30, 0x2f04c4, 0xa9cb36, 0x2004c5, 0xaad431, 0x2604c2, 0xabd536, 0x3b07c2, 0xa9d537, 0x3a07c4, 0xaed430, 0x3900c3, 0xa0d437, 0x3c01c4,
				0xa2d631, 0x3c01c4, 0x9cd631, 0x3801c5, 0x9dd936, 0x3a00c2, 0x92da37, 0x3a00c2, 0x93db34, 0x3907c3, 0x92da3b, 0x3f06cd, 0x90db3a, 0x2106cc, 0x90db3a, 0x2405cc, 0x92e534, 0x2a05cd, 0x92e43a, 0x2e06cd, 0x92e43a, 0x2e06cd, 0x92e43a, 0x2b06c2, 0x93e735, 0x2507cd, 0x93e735, 0x2139c2, 0x93e735, 0x233bc0, 0x93e735, 0x3c3ac2, 0x93e735, 0x3d3bc3, 0x91e036, 0x3a3ac0, 0x92e035, 0x3539c1, 0x93e132, 0x3639c7, 0x92ee33, 0x3338c6, 0x93ed32, 0xc3bc7, 0x92ee33, 0xe3bc0, 0x95ef32, 0xc3bc6, 0x94e835, 0x33ac7, 0x96e836, 0x439c2, 0x95e931, 0x526c3, 0x8be832, 0x526c0, 0x89e831, 0x25c1, 0x88e92e, 0xf22de, 0x88e92e, 0xd23df, 0x89ea2f, 0xd23df, 0x8eeb30, 0xc2cde, 0x8dea31, 0xf22edf, 0x8dea31, 0xf628dd, 0x8ce936, 0xf628dd, 0x8fe837, 0xf828dc, 0x8e9736, 0xfb29dd, 0x8f9437, 0xfd28de, 0x8c9336,
				0xfd28dc, 0x8d9235, 0xe22bdd, 0x8c933a, 0xe72bdc, 0x8d9c39, 0xe429df, 0x8c9d3a, 0xe429df, 0x839a3b, 0xe62bd8, 0x829b3a, 0xe62bd8, 0x829b3a, 0xe034d9, 0x819a3b, 0xe137da, 0xbe9b3a, 0xe137da, 0xbf9c05, 0xe236db, 0xbe9f06, 0xe637db, 0xbe9f06, 0xe838da, 0xbe9f06, 0xed39da, 0xbf9c01, 0xf038da, 0xbe9b00, 0xf239db, 0xb99801, 0xf139d8, 0xb69900, 0xf307d8, 0xb79800, 0xf505d6, 0xca9903, 0xf402d5, 0xc99800, 0xf503d5, 0xce9901, 0xf401d4, 0xcd9600, 0xfa01d3, 0xcc9701, 0xf902d3, 0xcd9602, 0xfe05d2, 0xcc971d, 0xe118d1, 0xca951d, 0xe913d4, 0xc99010, 0xeb15d0, 0xc49811, 0x810dd7, 0xdeae07, 0xa319d8, 0x39d131, 0x8b07df, 0x46e02b, 0xa710de, 0x54e927, 0xab17d8, 0x56ec24, 0xa114de, 0x54ed26, 0xac1ad4, 0x56e320, 0xa11fd8, 0x54e423, 0xa11ede, 0x54e423, 0xac1eda, 0x54e62c, 0xae1fd9, 0x54e62e,
				0xac1cd7, 0x54e52c, 0xa21fd1, 0x5ae62c, 0xa31ed1, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa01fd3, 0x59e62a, 0xa11ed2, 0x58e72b, 0xa11ed2, 0x58e72b, 0xa01fd3, 0x57e824, 0xa21ede, 0x50ed29, 0xbe1cdf, 0x50ed29 };
		System.arraycopy(aFor, 0, key, 33010, aFor.length);
	}

	private static void init112(int[] key) {
		int[] aFor = { 0xa914d0, 0x50ed29, 0xa914d0, 0x50ed29, 0xa914d0, 0x50ed29, 0xa914d0, 0x50ed29, 0xa914d0, 0x50ed29, 0xa914d0, 0x50ed29, 0xa914d0, 0x50ed29, 0xa914d0, 0x50ed29, 0xa914d0, 0x50ed29, 0xa914d0, 0x50ed29, 0xa914d0, 0x50ed29, 0xa914d0, 0x50ed29, 0xa914d0, 0x50ed29, 0xa914d0, 0x50ed29, 0xa815d1, 0x50ed29, 0xa914d0, 0x50e92e, 0xa112d3, 0x7fe324, 0xb706d7, 0x15d43e, 0x6f17d8, 0xeae39, 0x6d12d1, 0xbad3a, 0x666dd6, 0x8d23c, 0x6610d2, 0x16d33f, 0x6511d6, 0x16d33f, 0x6511d4, 0x17d23a, 0x6216d7, 0x15d038, 0x6c17d6, 0x15d038, 0x6f18d6, 0x14d139, 0x6919d6, 0x15de38, 0x6816d7, 0x17df27, 0x9715d6, 0x16de24, 0x9715d6, 0x16de24, 0x9412d7, 0x17df23, 0x9311d0, 0x15de22, 0x920ed1, 0x18de25, 0x930fd0, 0x1ede24, 0x900cd1, 0x1df24, 0x930dd1, 0x7de25, 0x900dd0, 0x8d824, 0x920dd1, 0xfdb25,
				0x910cd0, 0xfdb25, 0xae0cd6, 0xadb22, 0xac02d4, 0xbd821, 0xac02d6, 0x4d823, 0xad03d5, 0x7df22, 0xaa03da, 0x4de2d, 0xab03da, 0x1bdf2f, 0xaf01d8, 0x19e120, 0xa101d9, 0x19e120, 0xa003d6, 0x1be220, 0xa003d6, 0x1ce121, 0xa602d8, 0x1fe020, 0xa700d9, 0x10e120, 0xa400d8, 0x16de2f, 0xa602da, 0x9d92e, 0xa604d9, 0x9d92e, 0xa705d8, 0xade2d, 0xa104db, 0x9de2e, 0xae07da, 0x8de2e, 0xad06db, 0xfde2f, 0xae08da, 0xedf2f, 0x900adb, 0xddc2f, 0x9109dc, 0xadd2e, 0x9309da, 0xbda29, 0x9c08db, 0xad928, 0x9f08db, 0xdd92f, 0x9c09dc, 0xcc62e, 0x8309dd, 0xdc72f, 0x8109de, 0x9c531, 0x8109c0, 0x6c230, 0x8308c1, 0x7c131, 0x8308c1, 0xc02e, 0x8106c3, 0xc02c, 0x8005c3, 0xffc12d, 0x8302c0, 0xf8c02c, 0x8201c7, 0xfbc12d, 0x8c01c6, 0xfbc12d, 0x8e7fc6, 0xfdc22c, 0x8f7ec5, 0xfdc22c, 0x8c79c6, 0xfdc22c, 0x927bc4,
				0xfcc323, 0x907ac4, 0xfbc222, 0x9174c5, 0xf8c123, 0x9075c6, 0xf7c622, 0x9277c1, 0xf6c723, 0x9376c0, 0xf0c722, 0x9268c1, 0xf3c623, 0x936bc2, 0xcec622, 0x916ac2, 0xcfc11d, 0x926bc3, 0xcec21c, 0x976bc2, 0xcec21c, 0x976bc2, 0xc0c31f, 0x9664c3, 0xc2c31e, 0x9367c4, 0xddc41d, 0x9066c4, 0xdbc41c, 0x9165cb, 0xd6c513, 0x905ac4, 0xd5c41c, 0x9759ca, 0xd7c412, 0xe858c5, 0xd6c313, 0xeb59c6, 0xd7c213, 0xec5bc5, 0xd5c210, 0xed5ac4, 0xd9cd16, 0xec58c4, 0xd8cc15, 0xeb5fc5, 0xdace0b, 0xf440c0, 0xd8ca07, 0xe843c2, 0xddc901, 0x9f5dc5, 0xc4f908, 0xbf4ed3, 0x20803f, 0xe264c0, 0x3b963f, 0xd36cc0, 0x26933f, 0xdf6ec1, 0x21933a, 0xde69cd, 0x259e3b, 0xdd66c1, 0x249d3b, 0xdc6ac9, 0x26903b, 0xde6acc, 0x2a9235, 0xd96ace, 0x2c9332, 0xd46ac9, 0x2c9231, 0xd66bc6, 0x2f9231, 0xd768c8, 0x219233, 0xd66acf,
				0x219233, 0xd865cf, 0x219235, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd86bce, 0x209336, 0xd86bce, 0x219237, 0xd86bce, 0x219237, 0xd96acf, 0x2e9d38, 0xdb6bc2, 0x299835, 0xc769c3, 0x299835 };
		System.arraycopy(aFor, 0, key, 33310, aFor.length);
	}

	private static void init113(int[] key) {
		int[] aFor = { 0xd160cf, 0x299835, 0xd160cf, 0x299835, 0xd160cf, 0x299835, 0xd160cf, 0x299835, 0xd160cf, 0x299835, 0xd160cf, 0x299835, 0xd160cf, 0x299835, 0xd160cf, 0x299835, 0xd160cf, 0x299835, 0xd160cf, 0x299835, 0xd160cf, 0x299835, 0xd160cf, 0x299835, 0xde6fcc, 0x269736, 0xd160cf, 0x269736, 0xde6fcc, 0x289934, 0xdf6ecd, 0x259032, 0xca68cf, 0x138539, 0xa95ac8, 0x3f9421, 0x4956c7, 0x16e026, 0x7658c0, 0x11e52c, 0x7f5ac0, 0x109a2b, 0x7d58c0, 0x109a2b, 0x6058c1, 0x139a2a, 0x6759c4, 0x139a2a, 0x665ec7, 0x139a2c, 0x655fc0, 0x12992d, 0x6b5ec3, 0x11962c, 0x6b5ec3, 0x109733, 0x6c5dc2, 0x129432, 0x6c5dc2, 0x139733, 0x935cc1, 0x129032, 0x935cc1, 0x119135, 0x925ec6, 0x179132, 0x9141c7, 0x199033, 0x9141c7, 0x1a9034, 0x9741c0, 0x79334, 0x9541c1, 0x49333, 0x9741c0, 0xf9434, 0x9642c1, 0xf9635,
				0x9543c0, 0xb9435, 0x9442c0, 0x359435, 0x964cc2, 0x359537, 0x914ccf, 0x379539, 0x9e4fc1, 0x349336, 0x9848c1, 0x359437, 0x9a49c0, 0x359435, 0x8449c3, 0x369734, 0x8348cc, 0x34a935, 0x8248c1, 0x3baa35, 0x8149c2, 0x3baa35, 0x8748c2, 0x3dab35, 0x8449cd, 0x33a83a, 0x8749cc, 0x34a93b, 0x8477ce, 0x34a93b, 0x8576cc, 0x35a83a, 0x9a73ce, 0x37a83b, 0x9a74c3, 0x33af35, 0x9576c1, 0x33af35, 0x9576c3, 0x36af36, 0x9777c0, 0x37ae36, 0xa979c3, 0x36a135, 0xa976cd, 0x33a338, 0xa971cd, 0x32a23b, 0xa870ce, 0x3ea13d, 0xab70ce, 0x39a13c, 0xa871cd, 0x39a13c, 0xa971cf, 0x26be3d, 0xab71cf, 0x27bf3e, 0xae72cc, 0x26be3d, 0xa075cf, 0x25bf3e, 0xa176cc, 0x25bf3e, 0xa476cf, 0x24be3f, 0x5b78cf, 0x24be3f, 0x5a7bd0, 0x26b83d, 0x5c7bd3, 0x25b93e, 0x5c7bd3, 0x25b93e, 0x5006d2, 0x25b93e, 0x5107d3, 0x20b93f,
				0x5104d1, 0x21b83c, 0x4e03d0, 0x21b83c, 0x4d01db, 0x26b93d, 0x4c0fda, 0x25ba3c, 0x4d0cda, 0x2ab93f, 0x4c0dda, 0x29be3e, 0x4c0dda, 0x2fbe3e, 0x4d0cdb, 0x2cbd3f, 0x4c0ddc, 0x12bd3e, 0x4c13df, 0x11be3f, 0x4a15df, 0x10bf00, 0x4916de, 0x11be03, 0x4619d9, 0x11be03, 0x4718da, 0x13bc03, 0x4718da, 0x14bc03, 0x451eda, 0xbbf0d, 0x4120d8, 0xb810f, 0x4323d8, 0x48300, 0x421cdb, 0x78300, 0x431dda, 0x7c810d, 0x421adb, 0x7e810e, 0x4419db, 0x718c0a, 0x401fda, 0x6d8e17, 0x4702dc, 0x608b1a, 0x4803df, 0x638818, 0x5019d6, 0x108e1b, 0x4612d6, 0x35bc0e, 0xba79e9, 0x12af19, 0xd24fec, 0x6a415, 0xe050e8, 0x10a715, 0xe65cea, 0x10a611, 0xe85eeb, 0x1fa91c, 0xe75feb, 0x1fa91c, 0xe85ee5, 0x1fa912, 0xe751e4, 0x1fa912, 0xe751ea, 0x10a910, 0xe751ea, 0x10a910, 0xe851ea, 0x10a910, 0xe851e8, 0x10a910,
				0xe851ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe751ea, 0x1fa910, 0xe85ee7, 0x1fa910, 0xe751e8, 0x1fa910, 0xe751e8, 0x1fa910, 0xe751e8, 0x1fa910, 0xea5fea, 0x18ac1d, 0xf65deb, 0x18ac1d };
		System.arraycopy(aFor, 0, key, 33610, aFor.length);
	}

	private static void init114(int[] key) {
		int[] aFor = { 0xef5be4, 0x18ac1d, 0xef5be4, 0x18ac1d, 0xef5be4, 0x18ac1d, 0xef5be4, 0x18ac1d, 0xef5be4, 0x18ac1d, 0xef5be4, 0x18ac1d, 0xef5be4, 0x18ac1d, 0xef5be4, 0x18ac1d, 0xef5be4, 0x18ac1d, 0xef5be4, 0x18ac1d, 0xef5be4, 0x18ac1d, 0xef5be4, 0x18ac1d, 0xef5be4, 0x17a31e, 0xe054e7, 0x17a31e, 0xef5be4, 0x19ad1c, 0xee5ae5, 0x17a71a, 0xf950e6, 0x2fbc11, 0x9762e2, 0x5af09, 0x766eee, 0x2bd80c, 0x4a6fea, 0x22d301, 0x4c6cef, 0x22d305, 0x4e12ef, 0x23d006, 0x5311ea, 0x20d307, 0x5410e9, 0x20d305, 0x5410e9, 0x21d402, 0x5711ee, 0x20d703, 0x5910ed, 0x20d703, 0x5a1fec, 0x20d703, 0x5b1ef3, 0x27d402, 0x581ef3, 0x27d402, 0x581ef3, 0xd8d501, 0x5919f2, 0xdbd406, 0x581bf5, 0xdbd406, 0x5e1bf2, 0xd8cb07, 0x501af3, 0xd9c806, 0x551af2, 0xd8cb06, 0x4918f3, 0xdbca06, 0x4818f5, 0xddcc00, 0x4519f4,
				0xddcc00, 0x4719f5, 0xdccf03, 0x4218f6, 0xe2cf00, 0x4016f7, 0xe2cf00, 0x4117f7, 0xe5ce0f, 0x4214f8, 0xe8cf01, 0x4414f6, 0xe9c80e, 0x4615f9, 0xe9c80e, 0x5815f8, 0xe9c80e, 0x5c17f6, 0xeaf70e, 0x5c17f8, 0xebf50d, 0x5116fa, 0xebf50d, 0x5717fa, 0xebf50d, 0x5217f5, 0xeaf602, 0x5d17f5, 0xeef700, 0x5c28f6, 0xecf603, 0x5d2bf5, 0xecf603, 0x5c2af6, 0xf2f005, 0x5d2df2, 0xf1f607, 0x582df1, 0xf1f607, 0x562cf2, 0xf3f401, 0x512cf5, 0xf1f406, 0x6e22f2, 0xcef507, 0x5022f2, 0xcbf600, 0x5124f3, 0xcaf707, 0x5025f2, 0xc8f501, 0x5d27f0, 0xc9f600, 0x5d27f0, 0xccf701, 0x5d27f0, 0xcdf703, 0x4339f2, 0xcff703, 0x443af3, 0xccf602, 0x4b3df2, 0xcdf703, 0x483ef3, 0xcbf61c, 0x483ef3, 0xcaf903, 0x483ef3, 0x37f91c, 0x493ff2, 0x34fa1f, 0x4839f2, 0x32fa1e, 0x483bf5, 0x31f918, 0x483bf5, 0x3ff919, 0x4939f4,
				0x3c8618, 0x4838f5, 0x398619, 0x4b3af2, 0x248618, 0x4b3ff0, 0x278617, 0x4a31f1, 0x208614, 0x4a30f3, 0x228615, 0x4a32f0, 0x2c8614, 0x4a32f1, 0x298115, 0x4d33f6, 0x2c8214, 0x4c32f7, 0x128217, 0x4c2cf6, 0x118116, 0x4d2df7, 0x168617, 0x4a2fc8, 0x118714, 0x4b20cf, 0x118714, 0x4821ce, 0x1e8717, 0x4b22cd, 0x1f8717, 0x4d24cd, 0x28615, 0x4e27cd, 0x58515, 0x4d27c2, 0x88715, 0x4b1acc, 0x88717, 0x371bc0, 0xa8115, 0x3118c3, 0xb8016, 0x3c17c5, 0xf8114, 0x3d14c4, 0xf860a, 0x3e16c0, 0xa9908, 0x3309ce, 0x719c07, 0x3c01d7, 0x62a318, 0xe418c5, 0x42c82c, 0x8b21d3, 0x6bdb2c, 0x8424d3, 0x7cdb2c, 0x8026d3, 0x7cdd2a, 0x8624dd, 0x7cdc24, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424d0, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327,
				0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424de, 0x73d327, 0x8424d0, 0x7cdc28, 0x8424d0, 0x7cdc28, 0x8424d0, 0x7cdc28, 0x8424d0, 0x73d327, 0x8625dd, 0x74d62a, 0x9a27dc, 0x74d62a };
		System.arraycopy(aFor, 0, key, 33910, aFor.length);
	}

	private static void init115(int[] key) {
		int[] aFor = { 0x8321dd, 0x74d62a, 0x8321dd, 0x74d62a, 0x8321dd, 0x74d62a, 0x8321dd, 0x74d62a, 0x8321dd, 0x74d62a, 0x8321dd, 0x74d62a, 0x8321dd, 0x74d62a, 0x8321dd, 0x74d62a, 0x8321dd, 0x74d62a, 0x8321dd, 0x74d62a, 0x8321dd, 0x74d62a, 0x8321dd, 0x74d62a, 0x8321dd, 0x7bd925, 0x8c2ed2, 0x7bd925, 0x8321dd, 0x75d72b, 0x8220dc, 0x7bdd22, 0x962bd9, 0x43c02f, 0xf41ddd, 0x65d137, 0x1711d1, 0x4ba430, 0x2b12d5, 0x43ae3e, 0x2f10d3, 0x43af3a, 0x2f6ed0, 0x42ac39, 0x2d6ed5, 0x5cac38, 0x286fd6, 0x5cac3a, 0x286fd6, 0x5dab3d, 0x286fd6, 0x5eaa3a, 0x296cd7, 0x51ab39, 0x2b63d6, 0x51ab39, 0x2a62c9, 0x56a838, 0x2962c9, 0x56a838, 0x2962c9, 0x56a838, 0xd764cb, 0x55a93f, 0xd767cd, 0x54a83e, 0xd167ca, 0x57b73f, 0xd067cc, 0x58b638, 0xd367cb, 0x5eb63f, 0xce64cb, 0x5cb63e, 0xc865ca, 0x5cb63e, 0xcb62cd,
				0x53b739, 0xca61cc, 0x50b439, 0xce63cc, 0x6eb43a, 0xcf6ccc, 0x6db53b, 0xce6dcc, 0x6ab434, 0xcd6ec3, 0x64b43b, 0xcf6ecd, 0x63b53a, 0xcd69cc, 0x62b43b, 0xd268ce, 0x63b538, 0xd06ac0, 0x648a39, 0xd06bc1, 0x678a36, 0xde68ce, 0x648b37, 0xd869ce, 0x648b37, 0xd869ce, 0x618b36, 0xd96ac1, 0x6f8a37, 0xdb54c1, 0x6a8a34, 0xd957c1, 0x6a8a34, 0xd856c1, 0x698d35, 0xc656c1, 0x6b8f33, 0xc056c0, 0x6c8c34, 0xc756c0, 0x6e8e32, 0xcb59c2, 0x6f8f2d, 0xcc59dc, 0x688e2e, 0xc959dd, 0x578f2c, 0xca5bde, 0x578f2c, 0xcb5cde, 0x528e2e, 0xc85ddf, 0x5f8f2f, 0xc95ec0, 0x5c8e30, 0xc95ec0, 0x5d8e32, 0xcf40c2, 0x408e33, 0xce43c3, 0x428f33, 0xc944dc, 0x408e2c, 0xc847c3, 0x4d8e2d, 0xc847c3, 0x4c8f2c, 0xc847c3, 0x4a802d, 0xcb46c0, 0x4b832c, 0x3540c0, 0x4e832b, 0x3242c1, 0x48832a, 0x303cc3, 0x47fc2a, 0x3242c3,
				0x47fc2a, 0x3341c0, 0x41fd29, 0x3346c1, 0x43fc26, 0x3246c1, 0x5dff27, 0x3348c3, 0x5eff27, 0x3249c2, 0x58fe27, 0x324ac4, 0x55fe26, 0x334cc5, 0x57fe27, 0x334ec6, 0x50ff27, 0x324fc6, 0x6dff19, 0xd51c6, 0x52fc18, 0xc50c5, 0x51fa1b, 0xd52c7, 0x56fa1b, 0xc5dc0, 0x56fa1b, 0x15dc7, 0x57fb1c, 0x45fc7, 0x55fb1d, 0x1b58c7, 0x50fa1f, 0x185bc6, 0x5efa1e, 0x1a65c8, 0x5af81e, 0x6465c9, 0x58fe1c, 0x6167c9, 0x59ff1d, 0x6c68c9, 0x58fe1a, 0x6c68c9, 0x59ff1d, 0x6265c9, 0x23ff1b, 0x6e61c8, 0x32c71f, 0x5f69c7, 0x20d018, 0xb015ff, 0x10d916, 0xa60ffd, 0x6ceb0e, 0x8c1ff1, 0x60e40e, 0x931ff0, 0x6ae40a, 0x911ef2, 0x6ae40a, 0x931cfc, 0x6bea0b, 0x9c1df2, 0x6aea0b, 0x9d1df2, 0x6aea0b, 0x921cfc, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a,
				0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x9c13fd, 0x6be40a, 0x931cf2, 0x6be40a, 0x931cf2, 0x6be40a, 0x931cf2, 0x6be40a, 0x931cf2, 0x64eb05, 0x911dff, 0x63ee08, 0x8d1ffe, 0x63ee08 };
		System.arraycopy(aFor, 0, key, 34210, aFor.length);
	}

	private static void init116(int[] key) {
		int[] aFor = { 0x9b16f0, 0x63ee08, 0x9b16f0, 0x63ee08, 0x9b16f0, 0x63ee08, 0x9b16f0, 0x63ee08, 0x9b16f0, 0x63ee08, 0x9b16f0, 0x63ee08, 0x9b16f0, 0x63ee08, 0x9b16f0, 0x63ee08, 0x9b16f0, 0x63ee08, 0x9b16f0, 0x63ee08, 0x9b16f0, 0x63ee08, 0x9b16f0, 0x63ee08, 0x9419ff, 0x6ce107, 0x9b16f0, 0x6ce107, 0x9419ff, 0x62ef09, 0x9518fe, 0x6ce500, 0x8113fb, 0x55f90e, 0xe224fc, 0x72ef15, 0x22ff0, 0x599b10, 0x392df5, 0x51911e, 0x3a2cf2, 0x519218, 0x3a52f1, 0x569319, 0x3852f2, 0x48931e, 0x3b51f3, 0x4f921f, 0x3b51f3, 0x4f9219, 0x3a56f2, 0x4c931e, 0x3b55f3, 0x43921d, 0x3a55f3, 0x43921d, 0x395af2, 0x429302, 0x3d59f3, 0x429302, 0x3c5af2, 0x429302, 0xc258f0, 0x409504, 0xc25bf6, 0x409504, 0xc45bf7, 0x419403, 0xc644f0, 0x4e9504, 0xc544f7, 0x4e9504, 0xc347f7, 0x529402, 0xc140f6, 0x529205, 0xc440f1,
				0x5d9604, 0xc440f1, 0x5d9405, 0xc042f1, 0x5f9404, 0xfe4cf2, 0x5f9404, 0xfd43f2, 0x5e9b05, 0xf842f3, 0x5f9804, 0xf643f2, 0x5a9805, 0xf444f3, 0x5a9805, 0xea44f0, 0x5a9805, 0xe846f2, 0x5b990a, 0xef79f3, 0x5a9b0a, 0xe279f0, 0x5b9b08, 0xe779f1, 0x5b9b08, 0xe779f1, 0x5c9809, 0xe779f1, 0x509907, 0xe546f0, 0x519806, 0xe546f0, 0x569b05, 0xe447f0, 0x569b05, 0xf841f0, 0x559804, 0xfe41f7, 0x529b03, 0xfe41f7, 0x549804, 0xfd40f6, 0x5a9904, 0xfe4ff5, 0x5d9904, 0xfc4ef7, 0x629806, 0xff4cf4, 0x639f05, 0xf84bf4, 0x619904, 0xf84bf4, 0x6e9a1b, 0xfb4aeb, 0x6f8504, 0xfb4af5, 0x688504, 0xfa4bf6, 0x758507, 0xf849e8, 0x748518, 0xfe4ff6, 0x768619, 0xfe4ff6, 0x7b8618, 0xff4ef5, 0x7b861a, 0xf841f4, 0x7a861a, 0xfa43f6, 0x87861d, 0xfc45f6, 0x86871c, 0xff46f5, 0x86861f, 0xff46f5, 0x87871f, 0xf047f6,
				0x86f81c, 0xf047f6, 0x85871c, 0xf139f7, 0x82841d, 0xf23efa, 0x9c861d, 0xf131fb, 0x9d871e, 0xf131fb, 0x98871f, 0xf033fa, 0x97801e, 0xf132fd, 0x94811e, 0xf033fd, 0x93821f, 0xf033fd, 0x90831c, 0xf12cfc, 0x918223, 0xce2ec3, 0x90851c, 0xcd2fc2, 0x91861f, 0xcb2cc0, 0x92851e, 0xc52dc1, 0x938a1f, 0xc02fc2, 0x908a1c, 0xde2ec1, 0x948d1a, 0xdd2fc6, 0x9b8e1c, 0xde2ec5, 0x9fb012, 0xa22cc6, 0x98b517, 0xaf23d9, 0x99b614, 0xad27d8, 0x9fa810, 0xa83adb, 0x97ac17, 0xd80cc2, 0x84aa15, 0xf41ac9, 0x73a72a, 0xee6dc3, 0x5dba32, 0x985bc4, 0x49b33c, 0x9642c7, 0x7fb43b, 0x8d48c5, 0x7bb439, 0x824dce, 0x78b43b, 0x854dcd, 0x78b435, 0x8042c2, 0x77b53b, 0x8142c2, 0x77b53b, 0x8042c2, 0x77b535, 0x8e4dc3, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd,
				0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x77b535, 0x8f4dcd, 0x78ba3a, 0x8d4cc0, 0x7fbf37, 0x914ec1, 0x7fbf37 };
		System.arraycopy(aFor, 0, key, 34510, aFor.length);
	}

	private static void init117(int[] key) {
		int[] aFor = { 0x8747cf, 0x7fbf37, 0x8747cf, 0x7fbf37, 0x8747cf, 0x7fbf37, 0x8747cf, 0x7fbf37, 0x8747cf, 0x7fbf37, 0x8747cf, 0x7fbf37, 0x8747cf, 0x7fbf37, 0x8747cf, 0x7fbf37, 0x8747cf, 0x7fbf37, 0x8747cf, 0x7fbf37, 0x8747cf, 0x7fbf37, 0x8747cf, 0x7fbf37, 0x8848c0, 0x70b038, 0x8848c0, 0x70b038, 0x8848c0, 0x7ebe36, 0x8949c1, 0x70b43f, 0x9c43c4, 0x48af32, 0xfc72c3, 0x73b82b, 0x378ce, 0x58cc2e, 0x779ca, 0x6fc521, 0x478cd, 0x6fc627, 0x579cf, 0x6eb926, 0x379cc, 0x73b820, 0x27acd, 0x73b926, 0x7bcd, 0x74b827, 0x17ccc, 0x74b827, 0x27dcb, 0x75bb26, 0xc7cc8, 0x75bb26, 0xc7cc8, 0x77b538, 0xa7eca, 0x77b538, 0x97cc8, 0x77b538, 0xf77eca, 0x75b33e, 0xf47ecf, 0x76b03d, 0xf57fce, 0x70b03a, 0xf67fc8, 0x71af3b, 0xfb7fc9, 0x70ae3a, 0xfc7fc8, 0x6cad3c, 0xfe7fc9, 0x6fad3b, 0xfb7ecf, 0x6dab39, 0xf47dcc,
				0x6da938, 0xf07fcc, 0x6ea839, 0xf170cf, 0x51a938, 0xf071ce, 0x52a638, 0xf47fce, 0x53a539, 0xfb7fcc, 0x52a43a, 0xfe7fcf, 0x53a339, 0xfd7fcf, 0x52a238, 0xe37fce, 0x50a036, 0xe37fce, 0x569e34, 0xe17fce, 0x599f37, 0xe27fcd, 0x5e9e36, 0xe37fcf, 0x5f9d36, 0xe37fcf, 0x5b9e38, 0xee41cf, 0x5a9f39, 0xee41ce, 0x5a9f39, 0xee43cf, 0x5c9838, 0xec45c2, 0x409e3b, 0xeb44c3, 0x419d34, 0xeb44c3, 0x4c9c35, 0xea4bc0, 0x4c9c35, 0xef4ac6, 0x4e9d35, 0xd14bc1, 0x4c9d32, 0xd648c1, 0x4f9c33, 0xd848c2, 0x4e9b30, 0xd849c4, 0x4d9837, 0xde57c6, 0x4f8737, 0xde57c4, 0x519836, 0xde57c5, 0x539837, 0xd855c7, 0x519835, 0xd653c5, 0x509837, 0xd552c6, 0x519b36, 0xd253d9, 0x539a28, 0xd352d8, 0x539a28, 0x2c5dc7, 0x509b2a, 0x2b5fc7, 0x529d2c, 0x2a5cc6, 0x5d9e2a, 0x2921c3, 0x5a9f2b, 0x2822cc, 0x5a9e25, 0x2b25cd,
				0x449925, 0x2a22cc, 0x479824, 0x2922cf, 0x459a26, 0x2e2dce, 0x479a29, 0x2e2dce, 0x469b28, 0x212ece, 0x449d2a, 0x262dcb, 0x79822b, 0x272cca, 0x79822b, 0x242fcb, 0x78812b, 0x242df4, 0x7f862a, 0x252cf5, 0x7c852b, 0x2b2df4, 0x7d8a2a, 0x282df5, 0x7c8b2b, 0x2d2df4, 0x7d882a, 0x332cf5, 0x7e8f2b, 0x372df7, 0x7f8c2c, 0x382cf6, 0x7eb32f, 0x382cf8, 0x7f8c20, 0x3c12f5, 0x7f8c26, 0x392cf2, 0x728d26, 0x3d2cf5, 0x6a8f21, 0x923f8, 0x799025, 0x729c4, 0x8be827, 0x2b24ce, 0x9cfe3e, 0x5119c6, 0x8ee83b, 0x6211c4, 0x96ef3b, 0x6013c7, 0x9bee3d, 0x6015c4, 0x9aec31, 0x601bc3, 0x9aec31, 0x6319c3, 0x95ec30, 0x631ac8, 0x96ec32, 0x601bc9, 0x96ec32, 0x611bcb, 0x98ec33, 0x631bc5, 0x98ec33, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb,
				0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x99e333, 0x611bcb, 0x96ec3c, 0x631ac6, 0x91e931, 0x7f18c7, 0x91e931 };
		System.arraycopy(aFor, 0, key, 34810, aFor.length);
	}

	private static void init118(int[] key) {
		int[] aFor = { 0x6911c9, 0x91e931, 0x6911c9, 0x91e931, 0x6911c9, 0x91e931, 0x6911c9, 0x91e931, 0x6911c9, 0x91e931, 0x6911c9, 0x91e931, 0x6911c9, 0x91e931, 0x6911c9, 0x91e931, 0x6911c9, 0x91e931, 0x6911c9, 0x91e931, 0x6911c9, 0x91e931, 0x6911c9, 0x91e931, 0x6911c9, 0x91e931, 0x6911c9, 0x91e931, 0x6911c9, 0x9fe73f, 0x6810c8, 0x91ed36, 0x7c15ca, 0xa8f93c, 0x1c24cd, 0x92ef25, 0xfd50c1, 0xa5e31e, 0xfb55fa, 0x93e911, 0xf955fa, 0x92eb10, 0xf854f8, 0x939411, 0xfe54fb, 0x919410, 0xe155fc, 0x909711, 0xe355fa, 0x909713, 0xe454f9, 0x919012, 0xe755fe, 0x909313, 0xe855fe, 0x909313, 0xe954fd, 0x929d0d, 0xee57fc, 0x929d0d, 0xec54fd, 0x929d0d, 0xed57fc, 0x6c9b0f, 0xec57ff, 0x6d9a0e, 0xef54fc, 0x6c9b0f, 0xe954fd, 0x6f9b0f, 0xe654fc, 0x6c840e, 0xe74bfc, 0x6a990f, 0xfa4bfb, 0x6b9a0f, 0xff49fb,
				0x699c0d, 0xf049fa, 0x689c0e, 0xf249fb, 0x6f9f0f, 0xf047f9, 0x6f9f0f, 0xcf48fa, 0x6e900c, 0xcd48fb, 0x6b910d, 0xc348fa, 0x6a930c, 0xc648fb, 0x6a930e, 0xc748fb, 0x69940d, 0xd849fb, 0x6a970c, 0xd948f6, 0x6da80d, 0xdb48f4, 0x6da80d, 0xd777f4, 0x6b960f, 0xd677f6, 0x6a950f, 0xd677f6, 0x6f950e, 0xd975f6, 0x6caa01, 0xd975f9, 0x6dab0e, 0xd977f8, 0x6aab00, 0xc476fb, 0x6dac01, 0xca74f9, 0x6ca30e, 0xc975f8, 0x6ca10a, 0xc873f9, 0x6aa008, 0xca73fa, 0x54a008, 0xc972f9, 0x53a108, 0xca73f8, 0x5ca217, 0xc970f8, 0x5da108, 0xc96ef9, 0x5ba316, 0xcb6ff8, 0x44a415, 0xc968fa, 0x44a415, 0xc86efa, 0x42a414, 0xca6ef9, 0x4da715, 0xc96ff8, 0x4aa814, 0xc86ef9, 0x48ab15, 0xc86ef9, 0xb7aa12, 0xcc69f9, 0xb7aa12, 0xcd68f8, 0xb4a911, 0xcc16f8, 0xb9a81f, 0xcc14f9, 0xbfa81c, 0xcb15f4, 0xb9a813, 0xcb13f5,
				0xbba810, 0xcb11f6, 0xa5a913, 0xc81ef7, 0xa4a814, 0xcd1bf6, 0xaba915, 0xcc18f7, 0xa8a816, 0xcb07f6, 0xa9b716, 0xc81ac9, 0x97b717, 0xf61ac8, 0x96b417, 0xc919c9, 0x95b514, 0xcb1ecb, 0x90b515, 0xcc1cc8, 0x95b514, 0xc212ce, 0x94b415, 0xc010cc, 0x93b417, 0xc010cc, 0x92b316, 0xc211cc, 0x8db015, 0xc310cd, 0x8e8f1a, 0xc311cf, 0x8e8f1a, 0xc011c9, 0x8f8e1d, 0xdc2ec9, 0x888a1e, 0xdf2dc6, 0x83871c, 0xe729c7, 0x8b981c, 0xfe2dc7, 0x7a9118, 0xee56fe, 0x4a8615, 0xfb50e5, 0x408a0b, 0x876bfb, 0x528c08, 0xb362fe, 0x589709, 0xab60f1, 0x5c9907, 0xa167fe, 0x5c9b06, 0xa062f2, 0x599403, 0xa062f2, 0x5a9500, 0xa36df6, 0x5b9b01, 0xad6cf8, 0x599403, 0xad63ff, 0x599b04, 0xa163fe, 0x589406, 0xa363f0, 0x589404, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc,
				0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x599b04, 0xa163fc, 0x56940b, 0xa362f1, 0x519106, 0xbf60f0, 0x519106 };
		System.arraycopy(aFor, 0, key, 35110, aFor.length);
	}

	private static void init119(int[] key) {
		int[] aFor = { 0xa969fe, 0x519106, 0xa969fe, 0x519106, 0xa969fe, 0x519106, 0xa969fe, 0x519106, 0xa969fe, 0x519106, 0xa969fe, 0x519106, 0xa969fe, 0x519106, 0xa969fe, 0x519106, 0xa969fe, 0x519106, 0xa969fe, 0x519106, 0xa969fe, 0x519106, 0xa969fe, 0x519106, 0xa969fe, 0x519106, 0xa969fe, 0x519106, 0xa969fe, 0x5f9f08, 0xa868ff, 0x519501, 0xbc6dfd, 0x68810b, 0xdc5cfa, 0x51961d, 0x3f28fe, 0x679b21, 0x3a2ec2, 0x5f9528, 0x3529c3, 0x5f942a, 0x3754c2, 0x5f942a, 0x332bc3, 0x5d9429, 0x3254c2, 0x42952e, 0x3157c5, 0x42952e, 0x3656c2, 0x43922f, 0x3557c1, 0x43922f, 0x3454c2, 0x43922f, 0x395ac0, 0x43922f, 0x385bdf, 0x43922f, 0x3f58df, 0x43922f, 0x3c58de, 0xbc932c, 0x3c58de, 0xbd942d, 0x3f5adf, 0xbc952c, 0x385bdf, 0xbd942d, 0x3a44de, 0xb2952c, 0x3944df, 0xb5942c, 0x3a45df, 0xab962a, 0x3845dc,
				0xab9128, 0x3e45dd, 0xa69029, 0x3c45dc, 0xa7932a, 0x3944df, 0xa69c29, 0x64bdf, 0xa69c2a, 0x44bdc, 0xa79229, 0x48de, 0xa99328, 0x548df, 0xa99328, 0x448dd, 0xaa942b, 0x549dc, 0xb49625, 0x648d2, 0xb5972a, 0x377d3, 0xb5972a, 0xc49d2, 0xb7a928, 0xb4bd1, 0xb7a928, 0xb4bd1, 0xb2a929, 0x548d0, 0xb3a828, 0x677d0, 0xb2a927, 0x174d1, 0xb0a929, 0x1d75d1, 0xb4af29, 0x1e76de, 0xb4af29, 0x1e76de, 0xb4a12a, 0x1d77df, 0xb4a12c, 0x1175de, 0xb2a12c, 0x1072dd, 0x8ea12f, 0x1373de, 0x88a12e, 0x1173c1, 0x88a131, 0x1171de, 0x86bc31, 0x1371df, 0x87bd32, 0x1371dd, 0x81bc32, 0x1070dc, 0x9fbb31, 0x1370df, 0x98ba32, 0x1272df, 0x9aba33, 0x1272df, 0x95b534, 0x1072de, 0x94b437, 0x1770dd, 0x94b437, 0x1677de, 0x97b536, 0x1774df, 0x6ab537, 0x170bd1, 0x6cb437, 0x1509d3, 0x62b530, 0x150fd4, 0x60b537,
				0x150dd5, 0x61b437, 0x1303d7, 0x61b436, 0x1302d5, 0x7db734, 0x1204d4, 0x7eb70b, 0x1204d4, 0x78b70a, 0x1107d4, 0x76b709, 0x101ad2, 0x75b409, 0x1119d3, 0x73b50a, 0x111fd0, 0x71b509, 0x111dd1, 0x4fb506, 0x1313d3, 0x48b605, 0x1212d0, 0x45b105, 0x1212d0, 0x45b105, 0x1d10d1, 0x4ab002, 0x1210d0, 0x48b001, 0x1511d1, 0x4ab31e, 0x2811d0, 0x4db51f, 0x261ccd, 0x56b21a, 0x2107c6, 0xa0bc26, 0x2e7fc5, 0xb0b42d, 0x1e67c0, 0xdc8635, 0xb68cb, 0xef9e34, 0x63cb, 0xf49c34, 0x162cb, 0xf79c34, 0xf62ca, 0xf79c36, 0xf60cd, 0xf99b3a, 0xd6dcf, 0xf89a39, 0xf6dcc, 0xf89a39, 0x62cf, 0xf89a39, 0xf6dc0, 0xfa9b38, 0xe63c3, 0xfa943f, 0xf6cc2, 0xfa953e, 0x26dc4, 0xfb9a3c, 0x6dca, 0xfb9a3e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e,
				0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xfa953e, 0x26dc6, 0xf59a31, 0x6ccb, 0xf29f3c, 0x1c6eca, 0xf29f3c };
		System.arraycopy(aFor, 0, key, 35410, aFor.length);
	}

	private static void init120(int[] key) {
		int[] aFor = { 0xa67c4, 0xf29f3c, 0xa67c4, 0xf29f3c, 0xa67c4, 0xf29f3c, 0xa67c4, 0xf29f3c, 0xa67c4, 0xf29f3c, 0xa67c4, 0xf29f3c, 0xa67c4, 0xf29f3c, 0xa67c4, 0xf29f3c, 0xa67c4, 0xf29f3c, 0xa67c4, 0xf29f3c, 0xa67c4, 0xf29f3c, 0xa67c4, 0xf29f3c, 0xa67c4, 0xf39e3d, 0xb66c5, 0xf39e3d, 0xb66c5, 0xfd9033, 0xa67c4, 0xf39a3a, 0x1d63c7, 0xc98f31, 0x7d52c0, 0xf09827, 0x9e26c4, 0xc9941a, 0x9421ff, 0xf09b16, 0x9a27fd, 0xf09a14, 0x985afc, 0xf09a14, 0x9c25fd, 0xf29a17, 0x9d5afc, 0xf29a17, 0x8158fc, 0xf29a17, 0x8659fb, 0xf39d16, 0x8659fb, 0xf09c15, 0x8659f9, 0xf19f14, 0x8b57fb, 0xf19f14, 0x8b57fb, 0xf09e0b, 0x8c54fb, 0xf09e0b, 0x8f54fa, 0xf9f08, 0x8f54fa, 0xe9809, 0x8c56fb, 0xe9809, 0x8a56fa, 0xf990e, 0x8849fd, 0x9809, 0x8c4afd, 0x69a0f, 0x8a4afc, 0x1b9909, 0x884aff, 0x1a980a, 0x8e4bfe, 0x189e08,
				0x8148fd, 0x1a9e0b, 0x8449fe, 0x1a9e0b, 0x8548fe, 0x259f08, 0x8748fe, 0x249009, 0x8249ff, 0x259308, 0x8c48fe, 0x209309, 0x8d48fc, 0x23940a, 0x8c49fd, 0x3c9705, 0x8e49f2, 0x3d960a, 0x8849f2, 0x3d960a, 0x8a49f2, 0x31a908, 0x8d4bf1, 0x37a808, 0x8d4bf1, 0x34a909, 0x8348f0, 0x34a909, 0x8249f1, 0x379606, 0x844bf0, 0x379606, 0x864bf0, 0x379606, 0x844bf0, 0x329507, 0x8a75fe, 0x30aa07, 0x8974ff, 0x30aa07, 0x8a75fe, 0x33ab06, 0x8575f1, 0x30aa06, 0x8274f1, 0x32aa07, 0x9d77f2, 0x32aa07, 0x9d77f0, 0x33ab06, 0x9f71f2, 0x34ab06, 0x9f71f0, 0x35a805, 0x9f71f0, 0x38a804, 0x9e71f2, 0x3ba907, 0x9f7ef1, 0x3ea804, 0x9e7df0, 0xa803, 0x9d7cf1, 0xa803, 0x9d7cf0, 0xa803, 0x9d7cf0, 0x1af02, 0x9a7df3, 0xad01, 0x9863f1, 0xad01, 0x9663ee, 0xad01, 0x9560ef, 0x1ac02, 0x9560ed, 0x1ac00, 0x9267ee, 0xad03,
				0x9166f3, 0x1eaf1d, 0x9067f0, 0x1da01c, 0x9168f0, 0x1aaf1b, 0x936af1, 0x1bae18, 0x926bf2, 0x1bae18, 0x936af1, 0x16a919, 0x926bfe, 0x11aa18, 0x936aff, 0x12d519, 0x9015fe, 0x11aa18, 0x9114fd, 0xefa91b, 0x9014fd, 0xefa91b, 0x9115fe, 0xeeaf1c, 0x6d12ff, 0xeaad1b, 0x666cf8, 0xf7af1c, 0x616aff, 0xf8ac1c, 0x5860f5, 0xf0b118, 0x5c65f6, 0xefbc06, 0x5062f5, 0x978307, 0x4466f4, 0xa58803, 0x4b7df8, 0xbd8705, 0x447cff, 0xb88003, 0x447cf9, 0xbf8700, 0x457bf9, 0xbd8600, 0x4b7df7, 0xbf8402, 0x4a7df8, 0xbf8402, 0x4b7cfb, 0xbe8b0d, 0x4b7cfb, 0xbd8b02, 0x4a73f8, 0xb28a05, 0x4773f9, 0xb28a05, 0x4772f8, 0xb08a04, 0x4872fe, 0xb18506, 0x4a72f0, 0xb18506, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06,
				0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xb08a06, 0x4872fe, 0xbf8509, 0x4a73f3, 0xb88004, 0x5671f2, 0xb88004 };
		System.arraycopy(aFor, 0, key, 35710, aFor.length);
	}

	private static void init121(int[] key) {
		int[] aFor = { 0x4078fc, 0xb88004, 0x4078fc, 0xb88004, 0x4078fc, 0xb88004, 0x4078fc, 0xb88004, 0x4078fc, 0xb88004, 0x4078fc, 0xb88004, 0x4078fc, 0xb88004, 0x4078fc, 0xb88004, 0x4078fc, 0xb88004, 0x4078fc, 0xb88004, 0x4078fc, 0xb88004, 0x4078fc, 0xb88004, 0x4078fc, 0xb88004, 0x4078fc, 0xb88004, 0x4078fc, 0xb68e0a, 0x4179fd, 0xb88403, 0x557cff, 0x86970a, 0x324afb, 0xbc8113, 0xd13df0, 0x868f2e, 0xdb3acb, 0xbf8020, 0xd63bca, 0xbc8623, 0xd446cb, 0xbd8722, 0xd047c8, 0xbf8723, 0xcf46cf, 0xbf8723, 0xd047c8, 0xa08624, 0xd145cf, 0xa38123, 0xd742cf, 0xa28622, 0xd742cf, 0xa18721, 0xdb4fce, 0xa18721, 0xda4ed1, 0xa68420, 0xda4ed0, 0xa68420, 0xda4ed0, 0xa78521, 0xd84fd0, 0x598323, 0xdb4ed7, 0x598323, 0xdb4dd1, 0x588222, 0xde52d1, 0x588222, 0xdf52d1, 0x558223, 0xd853d7, 0x558223, 0xda53d0,
				0x4a8124, 0xd853d1, 0x4c8025, 0xd455d1, 0x4c8025, 0xd655d0, 0x4d8326, 0xd25bd0, 0x728227, 0xd35ad1, 0x708226, 0xd55ad3, 0x708226, 0xd858d3, 0x718325, 0xdd58d2, 0x73852b, 0xdc5bd3, 0x6c852b, 0xdc59de, 0x6d872b, 0xd858dc, 0x6eb824, 0xd967dc, 0x618725, 0xd866df, 0x628424, 0xd866df, 0x618524, 0xd967dc, 0x6e862b, 0xd966dd, 0x6cb829, 0xdf63dd, 0x6cba33, 0xdb60de, 0x65bf30, 0xa15bc3, 0x69be36, 0xa258c1, 0x6db139, 0xa258c1, 0x72bf36, 0xbd59c0, 0x72bf36, 0xbf58c0, 0x74bf35, 0xbf59c2, 0x76bf34, 0xbf59c2, 0x76bf34, 0xb15bc0, 0x76bf34, 0xb15bc0, 0x74be34, 0xb15ac2, 0x75bf34, 0xb65bc1, 0x75bf34, 0xcb5ec0, 0x75bf34, 0xcb5ec0, 0x77bf33, 0xcc5fc1, 0x76be33, 0xcc5fc1, 0x75bf30, 0xce5fc3, 0x748031, 0xce5fc3, 0x778132, 0xce5fc3, 0x768331, 0xc158c0, 0x768331, 0xc059c1, 0x768331, 0xc358c1,
				0x768331, 0xc259c0, 0x76832f, 0xc259de, 0x76832f, 0xc759df, 0x76802d, 0xc658dc, 0x76802d, 0xd957dd, 0x76802d, 0xd856c2, 0x76802d, 0xdb55c3, 0x70802e, 0xdb55c3, 0x70802e, 0xda54c3, 0x70802e, 0xd953c2, 0x70802e, 0xd852c4, 0x70802e, 0xd852c4, 0x7d832e, 0xda52c4, 0x7d832e, 0xdb53c7, 0x7c9c2f, 0xd74dc7, 0x67992d, 0xde43c0, 0x1c9c31, 0xd47ec0, 0x1a9b33, 0xc873c5, 0x1e9a32, 0xc577cb, 0x189933, 0xfa76c4, 0x12873c, 0xfd73c4, 0x8853c, 0xf172c4, 0xb8b33, 0xf071cb, 0xb8b33, 0xf071cb, 0x9883c, 0xf172cb, 0x68b3d, 0xf172c9, 0x4883f, 0xf770c4, 0x58a39, 0xf173c5, 0x48a3f, 0xf372c5, 0x48a3f, 0xfc72c5, 0x48a3f, 0xf372c5, 0x48a3f, 0xf372c3, 0xb8a39, 0xf372c3, 0xb8a3b, 0xf27dc3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3,
				0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xf372c3, 0xb8a3b, 0xfe7cc1, 0xc8f36, 0xe27ec0, 0xc8f36 };
		System.arraycopy(aFor, 0, key, 36010, aFor.length);
	}

	private static void init122(int[] key) {
		int[] aFor = { 0xf477ce, 0xc8f36, 0xf477ce, 0xc8f36, 0xf477ce, 0xc8f36, 0xf477ce, 0xc8f36, 0xf477ce, 0xc8f36, 0xf477ce, 0xc8f36, 0xf477ce, 0xc8f36, 0xf477ce, 0xc8f36, 0xf477ce, 0xc8f36, 0xf477ce, 0xc8f36, 0xf477ce, 0xc8f36, 0xf477ce, 0xc8f36, 0xf477ce, 0xc8f36, 0xf477ce, 0xc8f36, 0xf477ce, 0x28138, 0xf576cf, 0xc8b31, 0xe173cd, 0x329838, 0x8645c9, 0x88e21, 0x6532c2, 0x32801d, 0x6f35f8, 0xc8c12, 0x6537f8, 0xf8a11, 0x674af9, 0xe8b10, 0x634bfa, 0xdf410, 0x6234fb, 0x12f517, 0x7d35fc, 0xdf410, 0x7c37fb, 0xdf410, 0x7937fc, 0xdf410, 0x7830fd, 0xef513, 0x7732fd, 0xdfa12, 0x7732fd, 0xcfb0d, 0x7732e2, 0xbf812, 0x7732e2, 0xaf913, 0x7533e2, 0xf4ff11, 0x7632e5, 0xf7fe16, 0x7530e4, 0xf6ff17, 0x7330e5, 0xf5e016, 0x7230e5, 0xfae111, 0x7130e2, 0xfde011, 0x7231e5, 0xe2e311, 0x7031e4, 0xe3e212,
				0x7431e7, 0xece413, 0x7631e6, 0xede710, 0x7330e5, 0xece813, 0x4d30e4, 0xefe913, 0x4c31e4, 0xe9e911, 0x4130e6, 0xe8eb10, 0x4430e7, 0xe9ec1f, 0x4731e8, 0xe9ec1f, 0x5931eb, 0xe8ef1e, 0x5c31e8, 0xe9ee1f, 0x5e31e7, 0xe6d11e, 0x5f30e4, 0xe6d11e, 0x5f32e5, 0xe6d11c, 0x5e33e4, 0xe9d310, 0x5e0ee2, 0xe6d210, 0x5c0ce4, 0xe3ec15, 0x250df9, 0xeaeb17, 0x3d00e3, 0xe7ed17, 0x3b00e2, 0xdbee15, 0x3a01ed, 0xdbef1b, 0x381fe2, 0xdaf015, 0x381fed, 0xdaf015, 0x3a1ee2, 0xdaf015, 0x41fe2, 0xdaf015, 0x71ee3, 0xdbf317, 0x71ee2, 0xdbf317, 0x1de2, 0xdbf317, 0x1de2, 0xdaf317, 0x603ee, 0xdaf317, 0x11cef, 0xd8ec17, 0x3e0, 0xd7f317, 0xf1ce0, 0xd8f216, 0xf1fee, 0xd6f216, 0xf1fee, 0xd6f216, 0xf1fee, 0xd7f319, 0xf18e0, 0xd9f419, 0xe1ee1, 0xdbf519, 0xe1ee1, 0xdbf519, 0xf1fee, 0xdbf519, 0xf1fee, 0xdcf419,
				0xf1fee, 0xdcf419, 0xe1dee, 0xdcf718, 0xd1fee, 0xdcf61b, 0xd1eed, 0xdcf718, 0xc10ed, 0xdcf819, 0x1210ec, 0xdcf819, 0x111fed, 0xdcf819, 0x111fed, 0xdcf819, 0x131fea, 0xdcf819, 0x121eeb, 0xdef919, 0x121fea, 0xd9fa18, 0x141eea, 0xd9fb1b, 0xa12ed, 0xd3ff15, 0x330eec, 0xd5fb10, 0x3803ee, 0xc9f911, 0x3c05ee, 0xcbfa11, 0x3c06ee, 0xcbfb13, 0x3100ee, 0xcdfc12, 0x3000e8, 0xcffb12, 0x3000e8, 0xcffb12, 0x340cea, 0xcdfb12, 0x340cea, 0xccf412, 0x3b03e5, 0xccf410, 0x3b03e5, 0xcdfb12, 0x3e03e9, 0xcafa15, 0x3f03ef, 0xcafa15, 0x3202ed, 0xcafa15, 0x330ded, 0xcafa15, 0x330ded, 0xcafa15, 0x330ded, 0xcbf517, 0x330ded, 0xcbf517, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded,
				0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x330ded, 0xcbf515, 0x3e03ef, 0xccf018, 0x2201ee, 0xccf018 };
		System.arraycopy(aFor, 0, key, 36310, aFor.length);
	}

	private static void init123(int[] key) {
		int[] aFor = { 0x3408e0, 0xccf018, 0x3408e0, 0xccf018, 0x3408e0, 0xccf018, 0x3408e0, 0xccf018, 0x3408e0, 0xccf018, 0x3408e0, 0xccf018, 0x3408e0, 0xccf018, 0x3408e0, 0xccf018, 0x3408e0, 0xccf018, 0x3408e0, 0xccf018, 0x3408e0, 0xccf018, 0x3408e0, 0xccf018, 0x3408e0, 0xccf018, 0x3408e0, 0xccf018, 0x3408e0, 0xc2fe16, 0x3509e1, 0xccf41f, 0x210ce3, 0xf2e714, 0x463ae7, 0xc8f10d, 0xa54dee, 0xf3fc30, 0xae49d5, 0xcdf03f, 0xa54cd4, 0xccf13d, 0xa431d5, 0xccf13d, 0xa74ed6, 0xca8e3a, 0xa54ed7, 0xd58f39, 0xbb30d3, 0xd4f038, 0xa431d4, 0xd5f339, 0xa130d5, 0xd5f339, 0xa037d4, 0xd6f23a, 0xa134d7, 0xd9f339, 0xa034d7, 0xdafc38, 0xa135d7, 0xdafc38, 0xa636c8, 0xdafc38, 0xa536c9, 0x25fd3b, 0xa431c8, 0x25fd3b, 0xa430ca, 0x27ff39, 0xa32fcd, 0x27ff39, 0xa12fca, 0x26ff39, 0xaf30ca, 0x23e039, 0xac31cd,
				0x3de23b, 0xaf30cd, 0x3ce33b, 0xaa31cf, 0x32e539, 0xab33cc, 0x31e43a, 0xaa32cc, 0x36e539, 0xa93dcf, 0xbe438, 0xa83ccf, 0xbe53a, 0xad3ccc, 0xae63b, 0xa03acc, 0xbe734, 0xa63bcc, 0x8e63b, 0xb83bcf, 0x9e53c, 0xba38c9, 0xee63f, 0xbb39c8, 0xdd930, 0xba38c9, 0x2da33, 0xbb39ca, 0x3db32, 0xbb3ac7, 0x1da34, 0xba04c5, 0x4db37, 0xc33fc1, 0x13d536, 0xcf38c2, 0x28ca36, 0xc43dcf, 0x2ac536, 0xc532cf, 0x37c535, 0xc532cf, 0x31ca36, 0xc33ccf, 0x37c938, 0xc33cc1, 0x37c938, 0xc63cc0, 0x37c938, 0xc63cc0, 0x37c938, 0xc53ec2, 0x37c63a, 0xc531c0, 0x37c63a, 0xc531c0, 0x37c63a, 0xc531c0, 0x35c93a, 0xdb3fc2, 0x35c93a, 0xdb3fc2, 0x37c935, 0xdb3fcd, 0x30c935, 0xdc3fcd, 0x30c935, 0xdc3dc2, 0x30c935, 0xdd3ccd, 0x30c935, 0xdd3ccd, 0x30c935, 0xdd3ccd, 0x31ca35, 0xdd3ec2, 0x36cb35, 0xdd3ec2, 0x36cb35,
				0xdd3ec2, 0x36cb35, 0xdd3ec2, 0x36cb35, 0xda3dcd, 0x30c83a, 0xda3dc3, 0x30c834, 0xda3dcd, 0x30c83a, 0xd93cc2, 0x30c834, 0xda3dcd, 0x30c83a, 0xda3dc3, 0x30c83a, 0xda3dc3, 0x33c93b, 0xda3dc3, 0x33c935, 0xd83cc3, 0x33c935, 0xd83cc2, 0x32c834, 0xdb3ccc, 0x32c834, 0xdb3ccc, 0x32c834, 0xd93ccd, 0x34cb34, 0xc433cf, 0x30ca33, 0xc630ce, 0x3fca32, 0xc431cf, 0x3fca34, 0xc437c8, 0x3fca32, 0xc536cb, 0x3fcc33, 0xc635c4, 0x3fcd32, 0xc63aca, 0x31cd33, 0xc63bc8, 0x31cd33, 0xc63bc8, 0x31cd33, 0xc63aca, 0x3ecc33, 0xc63ac4, 0x3ecc33, 0xc935cb, 0x3ecc33, 0xc634c5, 0x3ecc33, 0xc53bc7, 0x3ecc33, 0xc23bc7, 0x3ecc33, 0xc53bc7, 0x3ecc33, 0xc53bc5, 0x3ccc3d, 0xc434c7, 0x33cc3d, 0xc434c7, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d,
				0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xcb34c5, 0x33cc3d, 0xc63ac7, 0x34c930, 0xda38c6, 0x34c930 };
		System.arraycopy(aFor, 0, key, 36610, aFor.length);
	}

	private static void init124(int[] key) {
		int[] aFor = { 0xcc31c8, 0x34c930, 0xcc31c8, 0x34c930, 0xcc31c8, 0x34c930, 0xcc31c8, 0x34c930, 0xcc31c8, 0x34c930, 0xcc31c8, 0x34c930, 0xcc31c8, 0x34c930, 0xcc31c8, 0x34c930, 0xcc31c8, 0x34c930, 0xcc31c8, 0x34c930, 0xcc31c8, 0x34c930, 0xcc31c8, 0x34c930, 0xcc31c8, 0x34c930, 0xcc31c8, 0x34c930, 0xcc31c8, 0x3ac73e, 0xcd30c9, 0x34cd37, 0xd935c9, 0xade3e, 0xbe03cd, 0x33c924, 0x5874c7, 0xec519, 0x5271fd, 0x30c914, 0x5772fe, 0x3fce16, 0x5870ff, 0x3fcf18, 0x5571f2, 0x39ce19, 0x5771f5, 0x39ce19, 0x5771f3, 0x38b118, 0x4870f4, 0x39b219, 0x4a70f2, 0x3eb31e, 0x4b77f3, 0x3eb31e, 0x4876f2, 0x3fb01f, 0x4677f1, 0x3fb01f, 0x4578f1, 0x3fb01f, 0x4479f0, 0x3fb01f, 0x4179ef, 0xc1b21d, 0x407eee, 0xc0b51c, 0x4178ed, 0xc3b61f, 0x4079ec, 0xc4a918, 0x4279eb, 0xc7b619, 0x4179eb, 0xcba91f, 0x4678eb,
				0xd6aa1e, 0x4478e8, 0xd5a91c, 0x467be9, 0xd1a81c, 0x487ee9, 0xd2a91f, 0x487cea, 0xd3aa1c, 0x4d7de9, 0xeda41e, 0x4c7ce8, 0xefa41f, 0x497de9, 0xeea71e, 0x477ce8, 0xeda01f, 0x407ce7, 0xeda011, 0x427de5, 0xf2a011, 0x437ee4, 0xf2a312, 0x467de5, 0xf09d1c, 0x477ce6, 0xff9e1c, 0x477ce4, 0xf09c10, 0x4a43e2, 0x8aa210, 0x4c41e3, 0x81a617, 0x5948ec, 0xbabc12, 0x5545e9, 0xa0be12, 0x5743e9, 0xafbf12, 0x5644e8, 0xafbf12, 0x5545ea, 0xafbf12, 0x5243e8, 0xafbf12, 0x5044e8, 0xafbf12, 0x5244ee, 0xafbf12, 0x5244ee, 0xafbf12, 0x5446e8, 0xaebc10, 0x5446e8, 0xaebc10, 0x5446e8, 0xaebc10, 0x5446e8, 0xaebc10, 0x5240ea, 0xa9bd10, 0x5541ea, 0xaebc10, 0x5541ec, 0xacbc10, 0x5741ec, 0xacbc10, 0x5747eb, 0xacbc10, 0x5040ec, 0xacbc10, 0x5141ed, 0xacbc10, 0x5141ed, 0xadbf10, 0x5042ed, 0xacbc10, 0x5040ec,
				0xabbd10, 0x5741ec, 0xacbc10, 0x5040ec, 0xabbd10, 0x5743ed, 0xadbd10, 0x5143ed, 0xabbd10, 0x5743ed, 0xadbd10, 0x5143ed, 0xabbd10, 0x5743ed, 0xadbd10, 0x5143ed, 0xabbd10, 0x5743ed, 0xadbd10, 0x5143ed, 0xadbd16, 0x5342ec, 0xadbd16, 0x5040ed, 0xacbe16, 0x5040eb, 0xaabe16, 0x5643e9, 0xacbd16, 0x5643e9, 0xacbd16, 0x5043eb, 0xabbe17, 0x5045ec, 0xabbc16, 0x5045ec, 0xabbc16, 0x5d44e1, 0xabbc14, 0x5d44e1, 0xaab314, 0x5d44e1, 0xaab316, 0x5c45e0, 0xaab318, 0x5c44e3, 0xaab31f, 0x5c44e3, 0xaab31f, 0x5244e3, 0xabb31f, 0x5045e5, 0xa9b21d, 0x504aeb, 0xa9b21f, 0x504aeb, 0xabbd1f, 0x5045ec, 0xacb21f, 0x5045ec, 0xacb21f, 0x5045ec, 0xacb218, 0x5745ee, 0xaebd18, 0x5645e0, 0xa1bd1a, 0x5444e6, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4,
				0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x5945e4, 0xa1bd1c, 0x544be6, 0xa6b811, 0x4849e7, 0xa6b811 };
		System.arraycopy(aFor, 0, key, 36910, aFor.length);
	}

	private static void init125(int[] key) {
		int[] aFor = { 0x5e40e9, 0xa6b811, 0x5e40e9, 0xa6b811, 0x5e40e9, 0xa6b811, 0x5e40e9, 0xa6b811, 0x5e40e9, 0xa6b811, 0x5e40e9, 0xa6b811, 0x5e40e9, 0xa6b811, 0x5e40e9, 0xa6b811, 0x5e40e9, 0xa6b811, 0x5e40e9, 0xa6b811, 0x5e40e9, 0xa6b811, 0x5e40e9, 0xa6b811, 0x5e40e9, 0xa6b811, 0x5e40e9, 0xa6b811, 0x5e40e9, 0xa8b61f, 0x5f41e8, 0xa6bc16, 0x4d44e8, 0x9ca81f, 0x2f75ec, 0xa2bf05, 0xc803e7, 0x9db33a, 0xc107de, 0xa3bf37, 0xc505de, 0xa2be39, 0xc403d1, 0xa2bd37, 0xcb00de, 0xa1bd37, 0xca03dd, 0xa6bc36, 0xcb02df, 0xa5bd35, 0xca7dde, 0xbabc32, 0xcb7edf, 0xbabc32, 0xce7fde, 0xbbbb33, 0xcd7edf, 0xbab832, 0xc37fdc, 0xbab832, 0xc37fdf, 0xbab832, 0xc070dc, 0xbab832, 0xc171dd, 0xbcba2c, 0xc276de, 0xbcba2c, 0xc276de, 0xbdbb2d, 0x3e74de, 0xbdbb2d, 0x3874d9, 0xbdbb2d, 0x3b74df, 0xb2bb2c, 0x3e6bd9,
				0xb3ba2f, 0x3c6bdb, 0xacbb28, 0x3f69dd, 0xaabd28, 0x3368df, 0xaabd28, 0x3068dd, 0xaabd28, 0x346add, 0xabb22b, 0xa6add, 0xabb22b, 0x86bde, 0xacb128, 0xb6bdf, 0xa3b027, 0x96cd0, 0xa5b725, 0xb6bd1, 0xa4b624, 0xb6bd1, 0xbbb529, 0x96bd0, 0xbab42a, 0xe54d1, 0xb9b52b, 0xe55dd, 0xb78b2c, 0x954dc, 0xc0b12f, 0x155ad9, 0xf5ab20, 0x1f5cdf, 0xeda720, 0x185ddd, 0xefa621, 0x185ddd, 0xefa527, 0x185cdf, 0xefa527, 0x175ddf, 0xefa527, 0x1852d0, 0xefa527, 0x1753d0, 0xefa527, 0x1753d0, 0xefa527, 0x1550de, 0xeda629, 0x1451d1, 0xeda629, 0x1451d1, 0xeda629, 0x1451d1, 0xeda629, 0x1451d1, 0xeda629, 0x1550de, 0xe2a729, 0x1a51de, 0xeda629, 0x155ed1, 0xe2a729, 0x1a5fd1, 0xe2a729, 0x1550de, 0xeca726, 0x1550de, 0xeca726, 0x1550de, 0xeca726, 0x1550de, 0xeda826, 0x1450d0, 0xeca826, 0x1550d0, 0xeda826,
				0x1450d0, 0xeca826, 0x1550d0, 0xeda826, 0x1550d0, 0xe2a926, 0x1a51d0, 0xeda826, 0x1550d0, 0xe2a926, 0x1b50d1, 0xe3aa26, 0x1a53d1, 0xe2a926, 0x1b50d1, 0xe3aa26, 0x1a53d1, 0xe2a926, 0x1b50d1, 0xe2a926, 0x1b53d3, 0xe1aa26, 0x1852d2, 0xe0ab26, 0x1853d0, 0xefaa26, 0x1752de, 0xe0ab26, 0x1851df, 0xe0ab26, 0x1852dd, 0xefaa27, 0x185dde, 0xeeab26, 0x185dde, 0xeea824, 0x1a50df, 0xe9a824, 0x1c51de, 0xeba924, 0x1c50dc, 0xe4aa25, 0x1d53dc, 0xe4aa25, 0x1c52df, 0xe4a523, 0x135ddf, 0xe4a523, 0x1c52df, 0xe5aa22, 0x1f52df, 0xe5aa26, 0x1e5dd0, 0xe5aa24, 0x1e5dd0, 0xe5aa24, 0x1e5dd0, 0xe5aa24, 0x1e5dd0, 0xe5aa24, 0x1e5dd0, 0xe5aa24, 0x1e5dd2, 0xe7a524, 0x1f5ddc, 0xe8a424, 0x1d5dde, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424,
				0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x105cdc, 0xe8a424, 0x1d52de, 0xefa129, 0x150df, 0xefa129 };
		System.arraycopy(aFor, 0, key, 37210, aFor.length);
	}

	private static void init126(int[] key) {
		int[] aFor = { 0x1759d1, 0xefa129, 0x1759d1, 0xefa129, 0x1759d1, 0xefa129, 0x1759d1, 0xefa129, 0x1759d1, 0xefa129, 0x1759d1, 0xefa129, 0x1759d1, 0xefa129, 0x1759d1, 0xefa129, 0x1759d1, 0xefa129, 0x1759d1, 0xefa129, 0x1759d1, 0xefa129, 0x1759d1, 0xefa129, 0x1759d1, 0xefa129, 0x1759d1, 0xefa129, 0x1759d1, 0xe1af27, 0x1658d0, 0xefa52e, 0x45dd0, 0xd5b127, 0x676dd5, 0xeca73c, 0x861bde, 0xd2aa03, 0x8919e0, 0xe8ae08, 0x8e14e1, 0xe8ae09, 0x8d12ee, 0xebac08, 0x8310e0, 0xe9ad09, 0x8213e3, 0xe9ad09, 0x8413e0, 0xeaac0a, 0x856ce1, 0xf5ad0d, 0x856ce1, 0xf4ae0c, 0x806de0, 0xf5a90d, 0x836ce1, 0xf4aa0c, 0x8c6ce1, 0xf5ab0f, 0x8c6ce2, 0xf5ab0f, 0x8c6ce2, 0xf6a40c, 0x8d6de3, 0xf1a713, 0x8c6ce2, 0xf1a713, 0x8c6ce2, 0xf3a111, 0x716fe3, 0xf2a010, 0x776fe4, 0xf2a010, 0x746fe2, 0xf3bf11, 0x7870e5,
				0xf4a010, 0x7b71e4, 0xf4a010, 0x6671e4, 0xf2a210, 0x6a76e6, 0xf2a210, 0x6b76e4, 0xf1a311, 0x6c75e5, 0xf2a210, 0x5275e5, 0xf3ad13, 0x5074e6, 0xf4ae10, 0x5374e7, 0xfbaf1f, 0x5173e8, 0xfbaf1f, 0x5673e9, 0xf8af1f, 0x5673e9, 0xf9af10, 0x4871eb, 0xfaae17, 0x4971eb, 0xff9112, 0x464ee4, 0xfa9117, 0x3f73e5, 0xec9a13, 0xf68ea, 0xff9114, 0x86aea, 0xf29117, 0xb68ec, 0xf39016, 0x566ee, 0xf09016, 0x566ee, 0xf39e19, 0x469ee, 0xf39e19, 0xb66e1, 0xf39e19, 0xb66e1, 0xf29119, 0xb66e1, 0xf2911b, 0xb66e1, 0xf2911b, 0xa67e2, 0xf29115, 0xa67e2, 0xf29115, 0xa67e2, 0xf29115, 0xa67e2, 0xf29115, 0xa67e2, 0xf29115, 0xa67e2, 0xf29115, 0x566e2, 0xf29115, 0x566e2, 0xf29115, 0xa67e2, 0xf29115, 0xb66ed, 0xf29115, 0xb66ed, 0xf29115, 0xa67e2, 0xf29115, 0xb69e3, 0xf29115, 0xb69e3, 0xf29115, 0xb69e3,
				0xf29115, 0xb69e3, 0xf29115, 0x566e0, 0xf29115, 0x566e0, 0xf29115, 0x566e0, 0xf29115, 0xa69e3, 0xf29115, 0x566e0, 0xf29115, 0x566e0, 0xf29115, 0x566e0, 0xf29115, 0x566e0, 0xf29115, 0x566e0, 0xf29115, 0x566e0, 0xf29115, 0x566e0, 0xf29115, 0x566e2, 0xf29115, 0x566e2, 0xf29115, 0x566e2, 0xf2911b, 0x467e3, 0xf3921b, 0x467e1, 0xf2921b, 0x764e0, 0xf4921b, 0x164e1, 0xf79318, 0x64ef, 0xf89c17, 0x64e1, 0xf89c17, 0x64ef, 0xf79c15, 0x64ef, 0xf79c15, 0xf64ef, 0xf69d14, 0xc65ef, 0xf69d16, 0xd6ae0, 0xf69d14, 0xf65e2, 0xf69d14, 0xf65e2, 0xf69d14, 0xf6aec, 0xf6921a, 0xf6aec, 0xf6921a, 0xf6aec, 0xf6921a, 0xf65e2, 0xf79d1a, 0x64e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a,
				0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0xf65e2, 0xf79d1a, 0x26be0, 0xf09817, 0x1e69e1, 0xf09817 };
		System.arraycopy(aFor, 0, key, 37510, aFor.length);
	}

	private static void init127(int[] key) {
		int[] aFor = { 0x860ef, 0xf09817, 0x860ef, 0xf09817, 0x860ef, 0xf09817, 0x860ef, 0xf09817, 0x860ef, 0xf09817, 0x860ef, 0xf09817, 0x860ef, 0xf09817, 0x860ef, 0xf09817, 0x860ef, 0xf09817, 0x860ef, 0xf09817, 0x860ef, 0xf09817, 0x860ef, 0xf09817, 0x860ef, 0xf09817, 0x860ef, 0xf09817, 0x860ef, 0xfe9619, 0x961ee, 0xf09c10, 0x1b64ee, 0xcb8f18, 0x7953ea, 0xf29903, 0x9b22e2, 0xcf933f, 0x9420dc, 0xf59734, 0x932ddd, 0xf49634, 0x902bd3, 0xf5953b, 0x9d29d3, 0xf7943a, 0x9c2ad0, 0xf7943a, 0x9a2ad1, 0xf7943a, 0x9854d1, 0xf7943a, 0x8755d6, 0xf6973b, 0x8254d7, 0xf6973b, 0x8353d6, 0xf59638, 0x8250d5, 0xf59638, 0x8c51d5, 0xf59638, 0x8c51d5, 0xf6993b, 0x8c51d4, 0xf09b25, 0x8d50d4, 0xf09b25, 0x8d50d4, 0xf29d27, 0x7253d5, 0xf29d27, 0x7053d5, 0xf49d26, 0x7252d4, 0xf49d26, 0x7e53d5, 0xf59c21, 0x7b53d4,
				0xf48220, 0x6653d4, 0xf58127, 0x6055d2, 0xf58127, 0x6d54d3, 0xf48226, 0x6f54d2, 0xf28226, 0x6d54d2, 0xcd8327, 0x6f54d1, 0xcc8c26, 0x6a55d0, 0xc28e28, 0x6b55de, 0xc18929, 0x6b55de, 0xc78e29, 0x6a52d1, 0xc48f2a, 0x7551d7, 0xc78e2b, 0x7451d7, 0xc28c2d, 0x7852db, 0xbab12d, 0x7459da, 0xa8b722, 0x4442d8, 0xbcbb23, 0x4241da, 0xbfb62d, 0x4440d7, 0xbdb72b, 0x4541d0, 0xb2b629, 0x4541d0, 0xbdb92a, 0x4a41d0, 0xbdb92a, 0x4b4ed3, 0xbdb92a, 0x484fd2, 0xbeb92a, 0x484fd2, 0xbeba28, 0x484fd2, 0xbeb92a, 0x494ed3, 0xbeb92a, 0x494ed3, 0xbeb92a, 0x494ed3, 0xbeb92a, 0x494ed3, 0xbeb92a, 0x494ed3, 0xbeb92a, 0x494ed3, 0xbeb92a, 0x464fd3, 0xbeb92a, 0x464fd3, 0xbeb92a, 0x494ed3, 0xbeb92a, 0x494ed3, 0xbeb92a, 0x494ed3, 0xbeb92a, 0x494edd, 0xbfb82b, 0x484fdc, 0xbfb82b, 0x484fdc, 0xbfb82b, 0x484fdc,
				0xbfb82b, 0x484fdc, 0xbfb82b, 0x484fdc, 0xbfb82b, 0x484fdc, 0xbfb82b, 0x484fdc, 0xbfb82b, 0x484fdc, 0xbfb82b, 0x484fdc, 0xbfb82b, 0x484fdc, 0xbfb82b, 0x484fdc, 0xbfb82b, 0x484fdc, 0xbfb82b, 0x494fd2, 0xbfb82b, 0x4940dc, 0xbfb62a, 0x4841dd, 0xbfb62a, 0x4741df, 0xbfb62a, 0x464edc, 0xbfb62a, 0x4741df, 0xbfb728, 0x4741df, 0xbdb728, 0x4742d1, 0xbdb728, 0x4443d2, 0xbcb529, 0x4640d0, 0xbcb627, 0x4741df, 0xbcb629, 0x454edf, 0xbcb728, 0x444fd0, 0xb3b628, 0x444fd0, 0xb1b628, 0x464fd0, 0xbeb728, 0x4740d0, 0xbeb728, 0x464fde, 0xbeb726, 0x494fdc, 0xbeb726, 0x4b4eda, 0xbeb726, 0x4b4fdb, 0xbeb627, 0x494edd, 0xbeb627, 0x464edf, 0xbfb927, 0x4641d1, 0xbfb927, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1,
				0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4741d1, 0xbfb929, 0x4a4fd3, 0xb8bc24, 0x564dd2, 0xb8bc24 };
		System.arraycopy(aFor, 0, key, 37810, aFor.length);
	}

	private static void init128(int[] key) {
		int[] aFor = { 0x4044dc, 0xb8bc24, 0x4044dc, 0xb8bc24, 0x4044dc, 0xb8bc24, 0x4044dc, 0xb8bc24, 0x4044dc, 0xb8bc24, 0x4044dc, 0xb8bc24, 0x4044dc, 0xb8bc24, 0x4044dc, 0xb8bc24, 0x4044dc, 0xb8bc24, 0x4044dc, 0xb8bc24, 0x4044dc, 0xb8bc24, 0x4044dc, 0xb8bc24, 0x4044dc, 0xb8bc24, 0x4044dc, 0xb8bc24, 0x4044dc, 0xb6b22a, 0x4145dd, 0xb8b822, 0x5340dc, 0x83ab2a, 0x3177d8, 0xbabd31, 0xd206d2, 0x81b60e, 0xd905ec, 0x86b20b, 0xe008e2, 0x87b30b, 0xe20de3, 0x87b30b, 0xee0ee2, 0x84b30b, 0xef0de1, 0x84b30b, 0xe80ee1, 0x85b00a, 0xeb0fe0, 0x84cf0b, 0xf40ee7, 0x85cc0a, 0xf10fe6, 0x85cc0a, 0xf008e7, 0x86cd09, 0xf10be4, 0x86cd09, 0xff0ae7, 0x86cd0a, 0xfc05e4, 0x86cd0a, 0xfc05e4, 0x80cf14, 0xfd04e5, 0x80cf14, 0xfd04e5, 0x83c817, 0x306e5, 0x83c817, 0x205e6, 0x80cb14, 0x504e0, 0x83cb12, 0xa04e1, 0x81cb15,
				0xd1be0, 0x9dc915, 0xf1be0, 0x9cc913, 0x81ae7, 0x9dce12, 0x51ae4, 0x9ccc11, 0x619e4, 0x9dcf10, 0x318e5, 0x9cce11, 0x3d18e4, 0x9ec013, 0x3819e5, 0x90c21d, 0x3919eb, 0x93c51c, 0x3919eb, 0x95c21c, 0x381ee6, 0x96c31d, 0x261ce0, 0x94c31e, 0x261de5, 0x93c012, 0x2f1fe7, 0xe5fa11, 0x3c17e9, 0xd8e610, 0x3712e8, 0xceeb11, 0x3313e4, 0xcfe716, 0x3411ec, 0xcde610, 0x3411ec, 0xcee911, 0x3611eb, 0xcee911, 0x3911eb, 0xcee911, 0x3610ea, 0xcee911, 0x3610ea, 0xc1e810, 0x391fec, 0xc1e810, 0x391fec, 0xc1e810, 0x3910ea, 0xc1e810, 0x3910ea, 0xc1e810, 0x3910ea, 0xc1e810, 0x3910ea, 0xc1e810, 0x3910ea, 0xc1e810, 0x3910ea, 0xc1e810, 0x381fea, 0xc1e810, 0x381fea, 0xc1e810, 0x3910ea, 0xc1e810, 0x3910ea, 0xc1e810, 0x3910ea, 0xc1e810, 0x3910e8, 0xc1e810, 0x3910e8, 0xc1e810, 0x3910e8, 0xc1e810, 0x3910e8,
				0xc1e810, 0x3910e8, 0xc1e810, 0x3811e9, 0xc1e810, 0x3910e8, 0xc1e810, 0x3910e8, 0xc1e810, 0x3811e9, 0xc1e810, 0x3811e9, 0xc1e810, 0x3811e9, 0xc1e810, 0x3910e8, 0xc1e810, 0x3910e8, 0xc1e812, 0x3610e8, 0xc1e814, 0x3610ee, 0xc1e814, 0x3910ec, 0xc1e814, 0x3b10ed, 0xc1e91a, 0x391fed, 0xc1e818, 0x391eef, 0xc0e917, 0x3b1eef, 0xc0e917, 0x3b1eef, 0xc0e815, 0x3c1fee, 0xc0e815, 0x3b1eef, 0xc0e917, 0x3b1eef, 0xc0e919, 0x391ee1, 0xc1e619, 0x391ee1, 0xcee719, 0x391ee1, 0xcee719, 0x391ee1, 0xc1e617, 0x391eef, 0xc1e617, 0x391eef, 0xcee615, 0x391eef, 0xcce713, 0x391fee, 0xcce713, 0x391fee, 0xcce713, 0x391eef, 0xcee615, 0x361eef, 0xcee617, 0x3711ef, 0xcee919, 0x371ee1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1,
				0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3611e1, 0xcee919, 0x3b1fe3, 0xc9ec14, 0x271de2, 0xc9ec14 };
		System.arraycopy(aFor, 0, key, 38110, aFor.length);
	}

	private static void init129(int[] key) {
		int[] aFor = { 0x3114ee, 0xc9ec14, 0x3114ee, 0xc9ec14, 0x3114ee, 0xc9ec14, 0x3114ee, 0xc9ec14, 0x3114ee, 0xc9ec14, 0x3114ee, 0xc9ec14, 0x3114ee, 0xc9ec14, 0x3114ee, 0xc9ec14, 0x3114ec, 0xc9ec14, 0x3114ec, 0xc9ec14, 0x3114ee, 0xc9ec14, 0x3114ee, 0xc9ec14, 0x3114ee, 0xc6e317, 0x3e1bed, 0xc6e317, 0x3114e0, 0xc7e216, 0x3f1aee, 0xc6e711, 0x281eee, 0xfbf416, 0x4928e2, 0xc3e10a, 0xa45be8, 0xf6f433, 0xa147d1, 0xfef036, 0x9b49de, 0xfcf237, 0x9a4fdf, 0xfef439, 0x964ed0, 0xfdf23b, 0x964fd7, 0xfcf33c, 0x974dd6, 0xfbf23d, 0x9632d1, 0xf8f33c, 0x9731d0, 0xe7f23d, 0x9531d3, 0xe7f23d, 0x9437d0, 0xe0f13e, 0x9737d1, 0xe0f13c, 0x9737d1, 0xeff03f, 0x9538d0, 0xeef13f, 0x9339d0, 0xedf020, 0x913ad0, 0xedf020, 0x903bd1, 0xeef723, 0x913ad0, 0x10f525, 0x9139d6, 0x10f427, 0x943ad4, 0x12f420, 0x9524d3,
				0x1ceb20, 0x963bd4, 0x1dea27, 0x8d38d3, 0x1fea26, 0x8c39d0, 0x18ec25, 0x8d38d0, 0x1bed24, 0x823bd1, 0x19ed25, 0x8538d6, 0x1bed22, 0xba3bd7, 0x18ec21, 0xbd34d4, 0x1bed22, 0xbc37d5, 0x15ec23, 0xbe36d7, 0x12ec23, 0xbf36d4, 0x12ea2e, 0xbe37d5, 0x13e82f, 0xa336d7, 0x10ea25, 0xd235d4, 0x1d320, 0xe522d9, 0xbd722, 0xff2fd9, 0x5d525, 0xf92ddc, 0x3db2b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b,
				0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d429, 0xfa2cd3, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfb23d1, 0x2d42b, 0xfb23d1, 0x2d42b, 0xfb23d1, 0x2d42b, 0xfb23d1, 0x2d42b, 0xfb23d1, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0xdd42b, 0xfa2cd7, 0xdd42b, 0xfa2cd7, 0xdd42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d42b, 0xfa2cd1, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429,
				0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd3, 0x2d429, 0xfa2cd1, 0x2d429, 0xfa2cd1, 0x2d429, 0xfa2cd1, 0x3d528, 0xfb2dd0, 0xcda27, 0xf92cdd, 0xbdf2a, 0xe52edc, 0xbdf2a };
		System.arraycopy(aFor, 0, key, 38410, aFor.length);
	}

	private static void init130(int[] key) {
		int[] aFor = { 0xf327d0, 0xbdf2a, 0xf327d0, 0xbdf2a, 0xf327d0, 0xbdf2a, 0xf327d0, 0xbdf2a, 0xf327d0, 0xbdf2a, 0xf327d0, 0xbdf2a, 0xf327d0, 0xbdf2a, 0xf327d0, 0xbdf2a, 0xf327d2, 0xbdf2a, 0xf327d2, 0xbdf2a, 0xf327d0, 0xbdf2a, 0xf327d0, 0xbdf2a, 0xf327d0, 0xbdf2a, 0xf327d0, 0xade2b, 0xfd29dc, 0xbdf2a, 0xf226d3, 0x8d82c, 0xe520d2, 0x36ca2a, 0x8416de, 0xedf34, 0x6965d6, 0x39ca0b, 0x6f78e8, 0x32c00f, 0x5779e7, 0x30c20e, 0x557ee9, 0x31c50f, 0x597fe6, 0x32c30d, 0x597ee1, 0x33c20a, 0x587ce0, 0x34c30b, 0x5903e7, 0x34c30b, 0x5a02e0, 0x35c00c, 0x4402e1, 0x35c00c, 0x4704e0, 0x34c10d, 0x4204e3, 0x34c10d, 0x4204e1, 0x35c20c, 0x4c05e2, 0x36cd0d, 0x4a0ae3, 0x37c30e, 0x4c0ae1, 0x37c30e, 0x4b09fe, 0x36c20f, 0x480efd, 0xc8c009, 0x4a0dfd, 0xc8c009, 0x4c0efa, 0xc9c10e, 0x4f0efc, 0xc8de0f, 0x400ffb,
				0xcbde0e, 0x460ffa, 0xd6dd0e, 0x440ffb, 0xd7dc0d, 0x4208f8, 0xd7dc0d, 0x4e0af8, 0xd4dd0e, 0x490bfa, 0xd7dc0f, 0x770bfa, 0xd5dc0c, 0x7004f9, 0xd6dd0f, 0x7107f8, 0xd9dd0d, 0x7207f9, 0xdedd0d, 0x7307fa, 0xdedb00, 0x7505fb, 0xdedb02, 0x7005f7, 0xc6d906, 0x39e9, 0xd8d01a, 0x3223e0, 0xc1d41a, 0x3723e3, 0xceda18, 0x3422e3, 0xccd41a, 0x342ce0, 0xccd41a, 0x342ce0, 0xccd41a, 0x342ce0, 0xcdd51b, 0x342ce0, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1,
				0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1,
				0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de1, 0xcdd51b, 0x352de3, 0xccd41a, 0x342ce2, 0xccd41a, 0x342ce2, 0xcdd51b, 0x352de3, 0xc2da14, 0x372cee, 0xc5df19, 0x2b2eef, 0xc5df19 };
		System.arraycopy(aFor, 0, key, 38710, aFor.length);
	}

	private static void init131(int[] key) {
		int[] aFor = { 0x3228e0, 0xc5df19, 0x3228e0, 0xc5df19, 0x3228e0, 0xc5df19, 0x3228e0, 0xc5df19, 0x3228e0, 0xc5df19, 0x3228e0, 0xc5df19, 0x3228e0, 0xc5df19, 0x3228e0, 0xc5df19, 0x3228ee, 0xc5df19, 0x3228ee, 0xc5df19, 0x3228ee, 0xc5df19, 0x3228e0, 0xc5df19, 0x3228e0, 0xc5df19, 0x3228ee, 0xcad016, 0x3c26e0, 0xcad016, 0x3228ee, 0xcbd511, 0x262def, 0xf4c719, 0x461bed, 0xcfd304, 0xa96ae5, 0xe6c439, 0xb076da, 0xedc133, 0x8979d4, 0xefc33c, 0x8a7fdb, 0xeec43d, 0x887ed5, 0xe1c53f, 0x8a78d3, 0xe0c438, 0x8b7ad2, 0xe0c438, 0x8c7bd3, 0xe1bb3f, 0x8c7bd5, 0xe2ba3e, 0x8d7ad5, 0xfdbb39, 0x8c78d2, 0xfebc3e, 0x8b78d3, 0xfebc3e, 0x8b78d5, 0xfdbd39, 0x8a7bd4, 0xf2bc3a, 0x8b7bd7, 0xf1b339, 0x8b7bd7, 0xf0b238, 0x8b7bd7, 0xf7b127, 0x8a7ad6, 0xf4b624, 0x767bd0, 0xf4b624, 0x7078d7, 0xf4b624, 0x7278d0,
				0xf5b725, 0x7d66d1, 0xf6b724, 0x7a67d7, 0xf5b623, 0x6465d6, 0xf5b623, 0x6662d7, 0xf3b622, 0x6b63d6, 0xf2b523, 0x6f63d7, 0xf1b422, 0x5163d7, 0xf0bb21, 0x5263d5, 0xf1ba20, 0x5763d6, 0xffb923, 0x5560d0, 0xfeba24, 0x5261d3, 0xf9bd29, 0x5360d3, 0xfabc24, 0x5561d0, 0xedbf21, 0x265dd3, 0xf8b124, 0x1747da, 0xe1bd27, 0x1645dd, 0xe1b22a, 0x1845d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0,
				0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0,
				0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744d0, 0xe0b329, 0x1744de, 0xe0b329, 0x1744de, 0xe0b329, 0x1744de, 0xefbc26, 0x184bd1, 0xeebd27, 0x1b4bdd, 0xe9b82a, 0x749dc, 0xe9b82a };
		System.arraycopy(aFor, 0, key, 39010, aFor.length);
	}

	private static void init132(int[] key) {
		int[] aFor = { 0x1f4ed2, 0xe9b82a, 0x1f4ed2, 0xe9b82a, 0x1f4ed2, 0xe9b82a, 0x1f4ed2, 0xe9b82a, 0x1f4ed2, 0xe9b82a, 0x1f4ed2, 0xe9b82a, 0x1f4ed2, 0xe9b82a, 0x1f4ed2, 0xe9b82a, 0x1f4edc, 0xe9b82a, 0x1f4edc, 0xe9b82a, 0x1f4edc, 0xe9b82a, 0x1f4ed2, 0xe9b82a, 0x1f4ed2, 0xe9b82a, 0x1f4edc, 0xe8b92b, 0x1e4fdd, 0xebba28, 0x1c4ddf, 0xe4b122, 0x949dc, 0xdba32a, 0x6a78d9, 0xe3b030, 0x8509d1, 0xcaa70d, 0x9c15ee, 0xc0a306, 0xa41be1, 0xc1a206, 0xa519e0, 0xc6a305, 0xa019ed, 0xc9a207, 0xa31eec, 0xc9a207, 0xa31fee, 0xc8a104, 0xa41eef, 0xc8a104, 0xa561ee, 0xc8a104, 0xa761ef, 0xd7a003, 0xa663e8, 0xd4a704, 0xa163e9, 0xd4a704, 0xa163ef, 0xd7a603, 0xa060ee, 0xd8a700, 0xa160ed, 0xdba803, 0xa160ed, 0xdaa902, 0xa160ed, 0xddaa1d, 0xa061ec, 0xdead1e, 0x5f61ed, 0xddac19, 0x5e61eb, 0xddac19, 0x5960eb,
				0xdfae1f, 0x587eec, 0xd2ae18, 0x5e7eeb, 0xd1af1f, 0x417deb, 0xd0ae1e, 0x427ceb, 0xd1a81f, 0x447cea, 0xddaa1f, 0x477fea, 0xdaa91e, 0x457feb, 0xe5a81e, 0x477fe8, 0xe4a61d, 0x427feb, 0xe4a61f, 0x437feb, 0xe9a618, 0x457de1, 0xeea11b, 0x477de2, 0xeea614, 0x417be0, 0xfd9a14, 0x327ee1, 0xd0901b, 0x2367e4, 0xd49c1a, 0x2364e0, 0xd59c17, 0x226bee, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef,
				0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef,
				0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6bef, 0xda9d17, 0x2c6be1, 0xdb9c16, 0x2c6be1, 0xda9d17, 0x2c6be1, 0xdb9c16, 0x2c6be1, 0xd99e14, 0x2c68ee, 0xde9b19, 0x306aef, 0xde9b19 };
		System.arraycopy(aFor, 0, key, 39310, aFor.length);
	}

	private static void init133(int[] key) {
		int[] aFor = { 0x296cee, 0xde9b19, 0x296cee, 0xde9b19, 0x296cee, 0xde9b19, 0x296cee, 0xde9b19, 0x296cee, 0xde9b19, 0x296cee, 0xde9b19, 0x296cee, 0xde9b19, 0x296cee, 0xde9b19, 0x296cee, 0xde9b19, 0x296cee, 0xde9b19, 0x296cee, 0xde9b19, 0x296ce0, 0xde9b19, 0x296ce0, 0xdf9a18, 0x286def, 0xdf9a18, 0x296cee, 0xdf9a18, 0x2762e0, 0xde9f1e, 0x3367e0, 0xe18d16, 0x5056e7, 0xd99e00, 0xbc26e0, 0xf3883c, 0xa639de, 0xfa8f36, 0x9e38df, 0xfb8138, 0x983bdd, 0xfb8138, 0x9d3bd0, 0xf58139, 0x9d3dd3, 0xf58139, 0x9f3cd0, 0xf58139, 0x9e3fd3, 0xf28038, 0x9f40d2, 0xf28038, 0x9d40d3, 0xed813f, 0x9c42d4, 0xee8638, 0x9b42d5, 0xed873b, 0x9843d0, 0xee863c, 0x9940d1, 0xe1873f, 0x9840d2, 0xe2883c, 0x9941d3, 0xe58b23, 0x9941d3, 0xe48a22, 0x9941d3, 0xe78d21, 0x6746d3, 0xe68a20, 0x6446d1, 0xe68a20, 0x6547d2,
				0xe18921, 0x6646d4, 0xec9620, 0x6046d3, 0xed9727, 0x7d45d2, 0xec9627, 0x7e44d2, 0xec9721, 0x7943d4, 0xe19620, 0x7842d4, 0xe29727, 0x7f41d3, 0xe09727, 0x4141d2, 0xe39624, 0x404fd1, 0xe69625, 0x414fd1, 0xe69623, 0x4d4cdb, 0xe69021, 0x4e4bd9, 0xe9922d, 0x594fd9, 0xe6ad2c, 0x324ada, 0xd7a523, 0x245ddd, 0xdda723, 0x2a5fd9, 0xdfa82f, 0x295ed9, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8,
				0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8,
				0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xdfa82f, 0x285fd8, 0xd0a720, 0x2750d7, 0xd1a621, 0x2450db, 0xd6a32c, 0x3852da, 0xd6a32c };
		System.arraycopy(aFor, 0, key, 39610, aFor.length);
	}

	private static void init134(int[] key) {
		int[] aFor = { 0x2055da, 0xd6a32c, 0x2055da, 0xd6a32c, 0x2055da, 0xd6a32c, 0x2055da, 0xd6a32c, 0x2055da, 0xd6a32c, 0x2055da, 0xd6a32c, 0x2055da, 0xd6a32c, 0x2055da, 0xd6a32c, 0x2055da, 0xd6a32c, 0x2055da, 0xd6a32c, 0x2055da, 0xd6a32c, 0x2055d4, 0xd6a32c, 0x2055d4, 0xd6a32c, 0x2055da, 0xd7a22d, 0x2154db, 0xd4a12e, 0x2c59d6, 0xd5a428, 0x3953d5, 0xe8ba20, 0x5961d1, 0xd1a637, 0xb41ed7, 0xfab30c, 0xaf02ee, 0xf4b709, 0x9701e1, 0xf3b906, 0x9003e1, 0xf2b804, 0x9701e3, 0xf0b80b, 0x9703e2, 0xffbf08, 0x9603e0, 0xfcbe09, 0x9700e3, 0xfbbf08, 0x9700e1, 0xfac00b, 0x9500e0, 0xe5c10c, 0x9402e7, 0xe6c60b, 0x9302e6, 0xe6c60b, 0x9302e0, 0xe5c70c, 0x9201e1, 0xeac60f, 0x9301e2, 0xe9c90c, 0x9200e3, 0xeeca13, 0x9200e3, 0xefcb12, 0x9200e3, 0xefcb12, 0x6f00e0, 0xefcb12, 0x6d07e3, 0xeeca11, 0x6d07e3,
				0xe8c817, 0x6f07e2, 0xe7d616, 0x6c07e3, 0xe1d617, 0x7104e2, 0xe1d617, 0x7007e3, 0xe2d516, 0x7606e2, 0xe3d217, 0x7406e4, 0xedd210, 0x7004e4, 0xeed311, 0x4e04e4, 0xecd312, 0x4f0ae7, 0xebd011, 0x4d09e5, 0xebd116, 0x4308e1, 0xe8d41b, 0x4f0eec, 0xe7d91d, 0x5505e9, 0x97e61f, 0x4f0fe6, 0xa7ff1d, 0x5308e3, 0xaaf21f, 0x5d0be7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7,
				0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7,
				0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa8fc11, 0x5e0ae7, 0xa9fd10, 0x5e0ae7, 0xa8fc11, 0x5f0be6, 0xa8fc11, 0x5f0be6, 0xaafe13, 0x5f08e9, 0xadfb1e, 0x430ae8, 0xadfb1e };
		System.arraycopy(aFor, 0, key, 39910, aFor.length);
	}

	private static void init135(int[] key) {
		int[] aFor = { 0x5b0de8, 0xadfb1e, 0x5b0de8, 0xadfb1e, 0x5b0de8, 0xadfb1e, 0x5b0de8, 0xadfb1e, 0x5b0de8, 0xadfb1e, 0x5b0de8, 0xadfb1e, 0x5b0de8, 0xadfb1e, 0x5b0de8, 0xadfb1e, 0x5b0de8, 0xadfb1e, 0x5b0de8, 0xadfb1e, 0x5b0de8, 0xadfb1e, 0x5b0de6, 0xadfb1e, 0x5b0de6, 0xaef811, 0x580ee7, 0xaff910, 0x590fe6, 0xacfa13, 0x5402eb, 0xadff15, 0x4108e8, 0x90e11d, 0x203bed, 0xa8fc0b, 0xcd44eb, 0x83e930, 0xd759d1, 0x8cec36, 0xed5bde, 0x8cec38, 0xed56de, 0x8fed39, 0xea54de, 0x8cee36, 0xeb55df, 0x83e935, 0xeb55dd, 0x82e834, 0xe856de, 0x82e834, 0xee57df, 0x82e834, 0xef28de, 0x81e935, 0xf02bd8, 0x82e836, 0xf02cda, 0x83e937, 0xf62dda, 0x83e937, 0xf52cdb, 0x82ea36, 0xf52dda, 0x8de537, 0xf42cd9, 0x8ee636, 0xf22cc6, 0x8ee636, 0xf22cc6, 0x8ee636, 0xe2dc4, 0x8ee636, 0xf2ac5, 0x8de731, 0xe2ac3, 0x8ae430,
				0xf2bc4, 0x88fb37, 0x22bc3, 0x89fa30, 0x42bc4, 0x8af931, 0x1a2bc5, 0x8af931, 0x182ac2, 0x8dfe37, 0x1a2ac4, 0x83fe30, 0x1f2bc3, 0x81fc36, 0x1e2ac2, 0xbefd37, 0x1f25c1, 0xbcfc34, 0x1826c0, 0xbdfe33, 0x1a26c5, 0xb0fd3c, 0x1727cb, 0xbff03a, 0xb2ccf, 0xcec837, 0x1424cd, 0xfdd636, 0xa2ecb, 0xf0d437, 0x72dcf, 0xf3db3c, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9,
				0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9,
				0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf0d83f, 0x62ec9, 0xf1d93e, 0x72fc8, 0xf2da3d, 0x72cc7, 0xf5df30, 0x1b2ec6, 0xf5df30 };
		System.arraycopy(aFor, 0, key, 40210, aFor.length);
	}

	private static void init136(int[] key) {
		int[] aFor = { 0x228c7, 0xf5df30, 0x228c7, 0xf5df30, 0x228c7, 0xf5df30, 0x228c7, 0xf5df30, 0x228c7, 0xf5df30, 0x228c7, 0xf5df30, 0x228c7, 0xf5df30, 0x228c7, 0xf5df30, 0x228c7, 0xf5df30, 0x228c7, 0xf5df30, 0x228c7, 0xf5df30, 0x228c9, 0xf5df30, 0x228c9, 0xf4de31, 0x329c6, 0xf4de31, 0x329c6, 0xf5df30, 0xc26c9, 0xf6d836, 0x1a2fcd, 0xcbc638, 0x7b1cc8, 0xf3db2e, 0x9663ce, 0xd8ce15, 0x8c7ef4, 0xd7cb13, 0xb67cfb, 0xd7cb1d, 0xb671fb, 0xd7cb1d, 0xb471fa, 0xd1c81d, 0xb673f4, 0xdecf1e, 0xb673f6, 0xdfce1f, 0xb673f6, 0xdccd1c, 0xb773f6, 0xdccd1c, 0xb072f5, 0xddb21f, 0xad73f3, 0xdcb11e, 0xae75f2, 0xdcb11e, 0xa872f2, 0xdcb11e, 0xa975f5, 0xdfb019, 0xa975f5, 0xdeb219, 0xa77bf7, 0xddb118, 0xa678f7, 0xddb118, 0xa678f7, 0xddb118, 0xa27be9, 0x22b01b, 0xa37ce8, 0x22b01b, 0xa17de9, 0x22b01b, 0xa67ee8,
				0x23b11c, 0xa461ef, 0x2eb11d, 0xa261ee, 0x2fb01a, 0xa061ee, 0x30b31a, 0xa261ef, 0x31b51b, 0xa461ee, 0x3cb41a, 0xa661ef, 0x3bb71b, 0xa461ee, 0x4b61b, 0xa56eed, 0x4b61b, 0xa06ced, 0x2b41f, 0xa46de9, 0xeb610, 0xa96ce7, 0x1bb16, 0xb566e5, 0x728213, 0xaf6fef, 0x449d13, 0xbc64ed, 0x469e17, 0xb169e2, 0x459f11, 0xb06ae4, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5,
				0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5,
				0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x469c12, 0xb16be5, 0x49931d, 0xbe64ea, 0x48921c, 0xbd64e6, 0x4f9711, 0xa166e7, 0x4f9711 };
		System.arraycopy(aFor, 0, key, 40510, aFor.length);
	}

	private static void init137(int[] key) {
		int[] aFor = { 0xb860e6, 0x4f9711, 0xb860e6, 0x4f9711, 0xb860e6, 0x4f9711, 0xb860e6, 0x4f9711, 0xb860e6, 0x4f9711, 0xb860e6, 0x4f9711, 0xb860e6, 0x4f9711, 0xb860e6, 0x4f9711, 0xb860e4, 0x4f9711, 0xb860e6, 0x4f9711, 0xb860e6, 0x4f9711, 0xb860e6, 0x4f9711, 0xb860e6, 0x4e9610, 0xb961e7, 0x4e9610, 0xb860e6, 0x4e9610, 0xb66ee6, 0x4f9318, 0xa465e2, 0x758c11, 0xc556e1, 0x4d9107, 0x2926d8, 0x648a02, 0x3725e2, 0x6d9104, 0xc26ec, 0x6c9009, 0xc29ec, 0x6d930a, 0xe29ed, 0x6b900a, 0x82aed, 0x6d9604, 0xb2cec, 0x6c9705, 0x42bed, 0x6e9507, 0x22aec, 0x6e9507, 0x22aee, 0x6e9507, 0x2aed, 0x6fea06, 0x1f28ec, 0x6eeb07, 0x1d29ec, 0x69ea00, 0x1c2eed, 0x6be800, 0x1d2dec, 0x65ea02, 0x1d2dec, 0x6aeb01, 0x122ded, 0x6ee71d, 0x132cec, 0x6fe61c, 0x112fec, 0x6ee51d, 0xee2eef, 0x6ee51d, 0xef29ee, 0x6de41a,
				0xe92aef, 0x6de41c, 0xeb2bee, 0x6cfb1d, 0xe534ee, 0x6fe41c, 0xe334ef, 0x6ee61c, 0xfe34e8, 0x6fe61a, 0xfb35ee, 0x6de61c, 0xf535ef, 0x6ce11d, 0xf137e9, 0x6fe01c, 0xf038e9, 0x6fe01c, 0xcd3ae9, 0x6ee31c, 0xc83ae4, 0x6fe01d, 0xc939eb, 0x6eef1b, 0xda32e8, 0x10d511, 0xcd38ed, 0x26ca17, 0xde33ea, 0x25c811, 0xdd30e7, 0x28c713, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612,
				0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612,
				0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x29c612, 0xde31e5, 0x2bc410, 0xde32ea, 0x2cc11d, 0xc230eb, 0x2cc11d };
		System.arraycopy(aFor, 0, key, 40810, aFor.length);
	}

	private static void init138(int[] key) {
		int[] aFor = { 0xdb36ea, 0x2cc11d, 0xdb36ea, 0x2cc11d, 0xdb36ea, 0x2cc11d, 0xdb36ea, 0x2cc11d, 0xdb36ea, 0x2cc11d, 0xdb36ea, 0x2cc11d, 0xdb36ea, 0x2cc11d, 0xdb36ea, 0x2cc11d, 0xdb36e8, 0x2cc11d, 0xdb36ea, 0x2cc11d, 0xdb36ea, 0x2cc11d, 0xdb36ea, 0x2cc11d, 0xdb36ea, 0x2dc01c, 0xda37eb, 0x2dc01c, 0xdb36ea, 0x2dc01c, 0xd538ea, 0x2cc516, 0xc733ec, 0x16da1f, 0xa600ef, 0x2ec709, 0x4a70d6, 0x6db0f, 0x5574ef, 0xfc007, 0x6f76ee, 0xfc009, 0x5077ec, 0xfcd0a, 0x6c77ed, 0x9ce0a, 0x6d75e2, 0x8c90b, 0x6e73e3, 0x9c80a, 0x6174e2, 0x8c90b, 0x6377e1, 0xfc80a, 0x6377e3, 0xfc80a, 0x6177e0, 0xeb70b, 0x7e75e1, 0xfb60a, 0x7c74e1, 0x8b70d, 0x7d73e0, 0xbb60e, 0x7d73e2, 0x5b40c, 0x7d73e2, 0xab50f, 0x7372e2, 0x8bb0d, 0x7471fd, 0x8bb0d, 0x7672fd, 0x8bb0d, 0x7771fc, 0xf7ba0e, 0x7676fd, 0xf4bb09, 0x7776fd,
				0xf4bb09, 0x7275fd, 0xf5a50e, 0x7f75fa, 0xf5a50e, 0x7975fd, 0xf5a50e, 0x7a74fd, 0xeaa609, 0x7972fd, 0xeda109, 0x7a75fa, 0xe3a10e, 0x7e77fa, 0xe0a00f, 0x7f78fa, 0xe0a00f, 0x4178f9, 0xe3a20c, 0x467afb, 0xe0a303, 0x457bf6, 0xe2ad06, 0x5171f4, 0x98970c, 0x457af6, 0xae880c, 0x5770f1, 0xac8b0a, 0x5473fc, 0xa18408, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe,
				0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe,
				0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa08509, 0x5772fe, 0xa2870b, 0x5771f1, 0xa58206, 0x4b73f0, 0xa58206 };
		System.arraycopy(aFor, 0, key, 41110, aFor.length);
	}

	private static void init139(int[] key) {
		int[] aFor = { 0x5275f1, 0xa58206, 0x5275f1, 0xa58206, 0x5275f1, 0xa58206, 0x5275f1, 0xa58206, 0x5275f1, 0xa58206, 0x5275f1, 0xa58206, 0x5275f1, 0xa58206, 0x5275f1, 0xa58206, 0x5275f3, 0xa58206, 0x5275f1, 0xa58206, 0x5275f1, 0xa58206, 0x5275f1, 0xa58206, 0x5275f1, 0xa48307, 0x5374f0, 0xa48307, 0x5275f1, 0xa48307, 0x5c7bf1, 0xa5860d, 0x4971f6, 0x989805, 0x2842f5, 0xa08513, 0xc33dcc, 0x889115, 0xd93ef7, 0x818a10, 0xe13cf9, 0xbe891f, 0xe331fa, 0xbd881c, 0xdf30fb, 0xbc8913, 0xd832fb, 0xbd8e12, 0xdb34fa, 0xbc8f13, 0xd433f9, 0xbd8e12, 0xd730f8, 0xbd8e12, 0xd131f9, 0xbd8e12, 0xd04ef8, 0xbe8f13, 0xce4eff, 0xbf8c12, 0xce4ff9, 0xbf8c12, 0xcd48fe, 0xbe8d13, 0xcd48f8, 0xb88f15, 0xc048fb, 0xb78e16, 0xcf49f8, 0xb58008, 0xc94af8, 0xb28317, 0xcf4bf8, 0xb18208, 0xce48f9, 0x4e830b, 0xcf4ff8,
				0x4d820c, 0xcf4ff8, 0x4d820c, 0xc94cff, 0x4c830b, 0xc452ff, 0x4c830b, 0xc653f9, 0x4a830a, 0xc552f9, 0x55800d, 0xc654f9, 0x52870d, 0xc553fe, 0x5d860a, 0xc753f9, 0x5b840c, 0xc45cfa, 0x5b840f, 0xfb53fa, 0x5a8b0c, 0xff5cf4, 0x59850c, 0xfc5df9, 0x5a8816, 0xe854e4, 0x2eb113, 0xf35ce9, 0x18ae13, 0xe156ee, 0x1aad15, 0xe255e3, 0x17a217, 0xe154e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1,
				0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1,
				0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x19a216, 0xee55e1, 0x1ba014, 0xee56ee, 0x1ca519, 0xf254ef, 0x1ca519 };
		System.arraycopy(aFor, 0, key, 41410, aFor.length);
	}

	private static void init140(int[] key) {
		int[] aFor = { 0xeb52ee, 0x1ca519, 0xeb52ee, 0x1ca519, 0xeb52ee, 0x1ca519, 0xeb52ee, 0x1ca519, 0xeb52ee, 0x1ca519, 0xeb52ee, 0x1ca519, 0xeb52ee, 0x1ca519, 0xeb52ee, 0x1ca519, 0xeb52ec, 0x1ca519, 0xeb52ee, 0x1ca519, 0xeb52ee, 0x1ca519, 0xeb52ee, 0x1ca519, 0xeb52ee, 0x1da418, 0xea53ef, 0x1da418, 0xeb52ee, 0x1da418, 0xe55cee, 0x1ca112, 0xf056e9, 0x21bf1a, 0x9064eb, 0x18a30d, 0x7b1bd2, 0x30b70b, 0x6019ea, 0x38ad0d, 0x6718e5, 0x38ad03, 0x641ae7, 0x3aa301, 0x5b1ae6, 0x38a30e, 0x5c18e6, 0x38a30e, 0x5e19e6, 0x38a30e, 0x5f18e7, 0x37a40d, 0x5e19e4, 0x34a70e, 0x5f19e4, 0x33a60f, 0x5f19e6, 0x31d80d, 0x4119e1, 0x30db0c, 0x4118e7, 0x30db0c, 0x4118e7, 0x33dc0b, 0x4019e0, 0x34df0c, 0x4319e1, 0x34df0c, 0x4c18e2, 0x36d112, 0x4d18fd, 0x37d013, 0x4a18fc, 0x34d10c, 0x4b1bfd, 0xcbd00f, 0x4a1cfc,
				0xcbd00f, 0x4a1cfc, 0xcbd00f, 0x481dfd, 0xcdd209, 0x4503fd, 0xcdd209, 0x441dfa, 0xcecd08, 0x421dfb, 0xd2cf0f, 0x401dfa, 0xd3c90e, 0x461dfb, 0xdec80f, 0x441dfa, 0xdfcb0e, 0x411cfb, 0xdec40d, 0x7e13f8, 0xdec40d, 0x7c13fa, 0xd9c402, 0x7d13f4, 0xd9c51b, 0x681eea, 0xaefb1d, 0x7316e7, 0x98e41d, 0x601de0, 0x9ae71a, 0x621fec, 0x94e918, 0x631cee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee,
				0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee,
				0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x9bea19, 0x6c1dee, 0x99e81b, 0x6c1ee1, 0x9eed16, 0x701ce0, 0x9eed16 };
		System.arraycopy(aFor, 0, key, 41710, aFor.length);
	}

	private static void init141(int[] key) {
		int[] aFor = { 0x691ae1, 0x9eed16, 0x691ae1, 0x9eed16, 0x691ae1, 0x9eed16, 0x691ae1, 0x9eed16, 0x691ae1, 0x9eed16, 0x691ae1, 0x9eed16, 0x691ae1, 0x9eed16, 0x691ae1, 0x9eed16, 0x691ae3, 0x9eed16, 0x691ae1, 0x9eed16, 0x691ae1, 0x9eed16, 0x691ae1, 0x9eed16, 0x691ae1, 0x9fec17, 0x681be0, 0x9fec17, 0x691ae1, 0x9fec17, 0x6714e1, 0x9ee91d, 0x731fe6, 0xa0f612, 0x112de3, 0x99ea05, 0xfb5ddb, 0xb0f102, 0xe05fe3, 0xb7ec05, 0xe958e2, 0xb7ec07, 0xeb5be3, 0xb6e306, 0xd65be0, 0xb4e307, 0xd658e0, 0xb2e308, 0xd459e0, 0xb2e308, 0xd558e1, 0xbde40b, 0xd459e2, 0xbde40b, 0xd65ae1, 0xbde40b, 0xd15be2, 0xbc9b08, 0xcc5ae4, 0xbc9b08, 0xcc59e2, 0xbc9b08, 0xcd58e3, 0xbf9c0f, 0xcd58e3, 0xbe9d0e, 0xca5be2, 0xbf9c0f, 0xc75be1, 0xbe930e, 0xc45be0, 0xbe930e, 0xc35be1, 0xbe930e, 0xc05afe, 0xbf900f, 0x3f5bfd,
				0xbe970e, 0x3f5bfd, 0xbe970e, 0x3d5afc, 0xb89508, 0x3e45fd, 0xb99409, 0x3e44fa, 0xb78b0b, 0x3b5bf8, 0xab890c, 0x395bf9, 0xab880a, 0x3f5bfe, 0xaa8f0d, 0x325af9, 0xa88d0f, 0x335bfb, 0xad8c0e, 0xd5bf8, 0xad8c0e, 0xf5bf7, 0xac830f, 0xe54f9, 0xaa8208, 0x1b59f9, 0xdebf0e, 0x552f7, 0xefa10d, 0x1758f0, 0xeda20a, 0x155afc, 0xe3ac08, 0x1459fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe,
				0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe,
				0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xecaf09, 0x1b58fe, 0xeead0b, 0x1b5bf1, 0xe9a806, 0x759f0, 0xe9a806 };
		System.arraycopy(aFor, 0, key, 42010, aFor.length);
	}

	private static void init142(int[] key) {
		int[] aFor = { 0x1e5ff1, 0xe9a806, 0x1e5ff1, 0xe9a806, 0x1e5ff1, 0xe9a806, 0x1e5ff1, 0xe9a806, 0x1e5ff1, 0xe9a806, 0x1e5ff1, 0xe9a806, 0x1e5ff1, 0xe9a806, 0x1e5ff1, 0xe9a806, 0x1e5ff3, 0xe9a806, 0x1e5ff1, 0xe9a806, 0x1e5ff1, 0xe9a806, 0x1e5ff1, 0xe9a806, 0x1e5ff1, 0xe8a907, 0x1f5ef0, 0xe8a907, 0x1e5ff1, 0xe8a907, 0x1051f1, 0xe9ac0d, 0x754f7, 0xd4bd03, 0x6566f2, 0xeda114, 0x8f16ca, 0xc5bd12, 0x8a10f2, 0xdda314, 0x8317f3, 0xdda316, 0x8114f2, 0xdda316, 0x8214f3, 0xe0ac14, 0x8217f3, 0xe0ac14, 0x8316f3, 0xe5ac1b, 0x8316f3, 0xe4ad1a, 0x8c11f2, 0xe5ac1b, 0x8e12f1, 0xe5ac1b, 0x8e12f3, 0xe3d219, 0x8c12f2, 0xfcd31e, 0x8c11f4, 0xfcd31e, 0x8d10f5, 0xffd419, 0x8d10f5, 0xfed518, 0x8a13f4, 0xffd419, 0x8713f7, 0xffd419, 0x851cf7, 0xffd419, 0x8313f7, 0xfedb18, 0x8012e8, 0xfedb18, 0x8111e9,
				0x1da1b, 0x8016e8, 0x1da1b, 0x8217e9, 0x6d91a, 0x8316ee, 0x5c61b, 0x8216e8, 0x5c61b, 0x8916e8, 0x4c71c, 0x9415e8, 0x5c41c, 0x9616ef, 0x2c51b, 0x9a10ef, 0x3c61a, 0x9810ee, 0x3c61a, 0x9d11ef, 0x3dc619, 0x9c10e1, 0x3fc819, 0x9d1fee, 0x3ec91f, 0x9115ee, 0x52f219, 0x881ce0, 0x62ef1a, 0x9716e6, 0x6dec1c, 0x9514ea, 0x63e21e, 0x9417e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f,
				0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f,
				0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ce11f, 0x9b16e8, 0x6ee31d, 0x9b15e7, 0x69e610, 0x8717e6, 0x69e610 };
		System.arraycopy(aFor, 0, key, 42310, aFor.length);
	}

	private static void init143(int[] key) {
		int[] aFor = { 0x9e11e7, 0x69e610, 0x9e11e7, 0x69e610, 0x9e11e7, 0x69e610, 0x9e11e7, 0x69e610, 0x9e11e7, 0x69e610, 0x9e11e7, 0x69e610, 0x9e11e7, 0x69e610, 0x9e11e7, 0x69e610, 0x9e11e5, 0x69e610, 0x9e11e5, 0x69e610, 0x9e11e7, 0x69e610, 0x9e11e7, 0x69e610, 0x9e11e7, 0x68e711, 0x9f10e6, 0x68e711, 0x9e11e5, 0x68e711, 0x901fe7, 0x69e21b, 0x871ae1, 0x54f315, 0xe528e4, 0x6def02, 0xf58dc, 0x45f304, 0xa5ee4, 0x5cec01, 0x58e7, 0x5eee01, 0x259e5, 0x5eee01, 0x159e4, 0x63e103, 0x25be5, 0x63e103, 0x5be4, 0x63e103, 0x55beb, 0x62e002, 0x55be5, 0x6de70d, 0x75ae4, 0x6ce40e, 0x75ae6, 0x6be50f, 0x55ae5, 0x6a9a0e, 0x55ae5, 0x759b09, 0x458e2, 0x769c0e, 0x458e2, 0x769c0e, 0x559e3, 0x719f0d, 0x659e0, 0x7e9e0e, 0x759e3, 0x7d910d, 0x59e2, 0x7d910d, 0x59e2, 0x7e9012, 0x15ae3, 0x819111, 0x5de5, 0x819116,
				0x35fe4, 0x809017, 0x55fe3, 0x809017, 0x740e4, 0x809017, 0xb5fe5, 0x878f16, 0x85ee5, 0x998f11, 0xa5de2, 0x9e8e16, 0x95ae5, 0x918f11, 0x859e4, 0x928c11, 0xc5ae6, 0x938f11, 0x3259e9, 0x908e1e, 0x3059e8, 0x928c18, 0x3c57e8, 0xfeb11e, 0x245fe7, 0xcdab1d, 0x3852e1, 0xc2a81b, 0x3a50ed, 0xcca619, 0x3b53ef, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1,
				0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1,
				0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc3a516, 0x3452e1, 0xc1a714, 0x3451ee, 0xc6a219, 0x2853ef, 0xc6a219 };
		System.arraycopy(aFor, 0, key, 42610, aFor.length);
	}

	private static void init144(int[] key) {
		int[] aFor = { 0x3155ee, 0xc6a219, 0x3155ee, 0xc6a219, 0x3155ee, 0xc6a219, 0x3155ee, 0xc6a219, 0x3155ee, 0xc6a219, 0x3155ee, 0xc6a219, 0x3155ee, 0xc6a219, 0x3155ee, 0xc6a219, 0x3155ec, 0xc6a219, 0x3155ec, 0xc6a219, 0x3155ee, 0xc6a219, 0x3155ee, 0xc6a219, 0x3155ee, 0xc7a318, 0x3054ef, 0xc7a318, 0x3155ec, 0xc7a318, 0x3f5bee, 0xc6a612, 0x285ee8, 0xfbb41a, 0x4a6feb, 0xc2a803, 0xa01fe3, 0xeab43b, 0xa519db, 0xf3ab3e, 0xaf1fd8, 0xf1a93e, 0xad1ed8, 0xf1a93c, 0xaf1fd8, 0xcea83e, 0xaf12d8, 0xcfab3d, 0xac11da, 0xcfab3d, 0xa911d5, 0xcfab3d, 0xa810d4, 0xc0ac3c, 0xaa11d5, 0xc1af3f, 0xaa11d5, 0xc6ae3c, 0xa811d6, 0xc7d13d, 0xa811d6, 0xd8d03a, 0xa913d1, 0xdad63c, 0xa812d0, 0xdad63c, 0xa913d1, 0xddd53f, 0xaa13d2, 0xddd53f, 0xa412d1, 0xdeda3f, 0xa312d0, 0xdeda3f, 0xa312d0, 0xdeda3f, 0xa013cf,
				0xdfd93e, 0x5f12cd, 0xdede3e, 0x5c13ca, 0xdedd38, 0x5a13cb, 0xdfdc3f, 0x590cca, 0xd1dd3e, 0x5b0dca, 0xd7dd39, 0x5a0ccd, 0xd5dd3e, 0x440cca, 0xd7de39, 0x430dcd, 0xd4d93e, 0x4c0cca, 0xd6d93f, 0x4b0cc9, 0xd5d83f, 0x4a0dc8, 0xeada3e, 0x4a0dc8, 0xd5d839, 0x7803cb, 0xbae53d, 0x600bc4, 0x89ff3e, 0x7c06c4, 0x86fc3e, 0x7e04c6, 0x88f230, 0x7f07c6, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8,
				0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006ca, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6, 0x87f131, 0x7006c6,
				0x86fe31, 0x7109c6, 0x87f131, 0x7006c6, 0x86fe31, 0x7109c6, 0x87f131, 0x7006c8, 0x87f131, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x87f13f, 0x7006c8, 0x85f33d, 0x7005c7, 0x82f630, 0x6c07c6, 0x82f630 };
		System.arraycopy(aFor, 0, key, 42910, aFor.length);
	}

	private static void init145(int[] key) {
		int[] aFor = { 0x7400c6, 0x82f630, 0x7400c6, 0x82f630, 0x7400c6, 0x82f630, 0x7400c6, 0x82f630, 0x7400c6, 0x82f630, 0x7400c6, 0x82f630, 0x7400c6, 0x82f630, 0x7400c6, 0x82f630, 0x7400c6, 0x82f630, 0x7400c6, 0x82f630, 0x7400c6, 0x82f630, 0x7400c8, 0x82f630, 0x7a0eca, 0x8df933, 0x7a0ec4, 0x82f63c, 0x7400ca, 0x82f63c, 0x7a0ec4, 0x83f33a, 0x6c0ac0, 0xbfe032, 0xf3ac2, 0x87fd28, 0xe74aca, 0xafe013, 0xe24dcc, 0xb6fe2f, 0xef4acc, 0xb4fc2f, 0xee4aca, 0xb4fc2f, 0xea4ac9, 0x8bfd2f, 0xeb44ca, 0xb4fc2e, 0xd644c9, 0xb4fc2e, 0xd745c6, 0xb3fe2e, 0xd642c7, 0xb3fe2e, 0xdb42c4, 0xb2ff2d, 0xd841c7, 0xb3fe2c, 0xde3ec0, 0xb3fe2c, 0xde3ec6, 0xb3fe2c, 0xc33fc0, 0xb2fd2d, 0xc138c0, 0xb2fd2d, 0xc739c0, 0xb1fc2e, 0xc63ac1, 0xbefd2f, 0xc735c0, 0xbefd2f, 0xc73ac1, 0xbefd2f, 0xc23ac0, 0xbff230, 0xc13bc0,
				0xbef131, 0x3e3ac3, 0xbef131, 0x3f3dc2, 0xbdf036, 0x3e3ec3, 0xbdf130, 0x3921c4, 0xbff131, 0x3820c7, 0xb0f133, 0x3c23c7, 0xb1f134, 0x2123c0, 0xb2f734, 0x2723c1, 0xb1f637, 0x2820c2, 0xb1f637, 0x2b23c2, 0xb7f737, 0x2920c2, 0x89f935, 0x172ec0, 0x89fd32, 0x2527c0, 0xe7c238, 0x3e2fc0, 0xd4dc38, 0x2c25c3, 0xd0df38, 0x2827c0, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3, 0xddd235, 0x2b24c3,
				0xddd235, 0x2a25c2, 0xddd235, 0x2a25c2, 0xddd237, 0x2525c4, 0xddd237, 0x2525c2, 0xddd335, 0x2a24cc, 0xddd335, 0x2b24ce, 0xddd337, 0x2a24c0, 0xddd337, 0x2524c2, 0xddd337, 0x2a24c0, 0xddd337, 0x2b24ce, 0xddd337, 0x2a24ce, 0xddd337, 0x2a24ce, 0xddd337, 0x2a24c0, 0xddd337, 0x2a24c0, 0xddd337, 0x2a24c0, 0xddd337, 0x2b2bc0, 0xddd337, 0x2b2bc0, 0xddd337, 0x2b2bc0, 0xdcdc37, 0x2b2bc2, 0xd3dc37, 0x242bc2, 0xd3dc37, 0x242bc2, 0xd2dd36, 0x242bc2, 0xd2dd36, 0x252ac3, 0xd2dd36, 0x252ac3, 0xd2dd36, 0x2a2ac3, 0xd2dd36, 0x2a2ac3, 0xdddd36, 0x2a2ac1, 0xdcd236, 0x2a2ac1, 0xdcd236, 0x2a2ac1, 0xdcd236, 0x2a2ac1, 0xdcd236, 0x2a2ac1, 0xdcd236, 0x2a2ac1, 0xdcd236, 0x2a2ac1, 0xdcd236, 0x2a2ac1, 0xdcd236, 0x2a2ac1, 0xdcd236, 0x2a2ac1, 0xdcd236, 0x2a2ac1, 0xdcd236, 0x2a2ac1, 0xdcd236, 0x2a25cf,
				0xdedd36, 0x282acf, 0xdcd236, 0x2a25cf, 0xdedd36, 0x282acf, 0xdcd236, 0x2a25cd, 0xdcd236, 0x2a25cd, 0xdcd234, 0x2a25cd, 0xdcd234, 0x2b25c3, 0xdcd234, 0x2b25c3, 0xdcd234, 0x2b25c3, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2a24c2, 0xdcd234, 0x2b25c3, 0xdcd234, 0x2b25c3, 0xdcd234, 0x2b25c3, 0xddd335, 0x2b25c3, 0xddd335, 0x2825cf, 0xdad638, 0x3427ce, 0xdad638 };
		System.arraycopy(aFor, 0, key, 43210, aFor.length);
	}

	private static void init146(int[] key) {
		int[] aFor = { 0x2d21cf, 0xdad638, 0x2d21cf, 0xdad638, 0x2d21cf, 0xdad638, 0x2d21cf, 0xdad638, 0x2d21cf, 0xdad638, 0x2d21cf, 0xdad638, 0x2d21cf, 0xdad638, 0x2d21cf, 0xdad638, 0x2d21cf, 0xdad638, 0x2d21cf, 0xdad638, 0x2d21cf, 0xdad638, 0x2d21c1, 0xdad638, 0x222ec2, 0xd5d93b, 0x222ecc, 0xdad634, 0x2c20c2, 0xdad634, 0x222ecc, 0xdbd332, 0x352bcb, 0xe7c23a, 0x5718c8, 0xd0de21, 0xb069c5, 0xf8c31e, 0xb46fc0, 0xe0dc23, 0xb968c2, 0xe3dd20, 0xb96bc5, 0xe3dd20, 0xbd6bc6, 0xdddd21, 0xbd65c7, 0xe2dd23, 0x8065c4, 0xe2dd23, 0x8065c4, 0xe4df2d, 0x8163c4, 0xe4df2d, 0x8c63c7, 0xe5de2c, 0x8c63c5, 0xe6dd2f, 0x8a62c4, 0xe6dd2f, 0x8a62c6, 0xe7a22c, 0x8862c7, 0xf8a32b, 0x8a67c7, 0xf8a32b, 0x8d67c6, 0xf8a32b, 0x8e66c5, 0xf9a02a, 0x8167c4, 0xf8af2b, 0x8168c5, 0xf8af2b, 0x8468c4, 0xf9a034, 0x8769c4,
				0xf8a335, 0x8769c4, 0x7a236, 0x866ec5, 0x4a331, 0x876dc4, 0x4a331, 0x8073c5, 0x4a331, 0x8273c4, 0x5a232, 0x8c70c7, 0x7a134, 0x8972c0, 0x18a135, 0x8b75c1, 0x1da037, 0x8476c2, 0x1da037, 0x8775c2, 0x1da037, 0x8076c3, 0x1fae35, 0x8478c3, 0x18ab32, 0xb471c6, 0x76943e, 0xac78c6, 0x468a33, 0xbe73c8, 0x428831, 0xba70cb, 0x4f853c, 0xba70c9, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863f,
				0xbb71c8, 0x4c863f, 0xbb71c8, 0x4c863d, 0xb471ce, 0x4c863d, 0xb471c8, 0x4c873f, 0xbb70c6, 0x4c873f, 0xbb71c4, 0x4c863d, 0xbb71ca, 0x4c863d, 0xb471c8, 0x4c863d, 0xbb71ca, 0x4c863d, 0xba71c4, 0x4c863d, 0xba71c4, 0x4c863d, 0xbb71c4, 0x4d863d, 0xba71ca, 0x4c893d, 0xbb7eca, 0x4d863d, 0xba71ca, 0x4c893d, 0xba71ca, 0x4c893d, 0xba71ca, 0x4c893d, 0xba71ca, 0x4c893d, 0xbb7eca, 0x4c893d, 0xbb7eca, 0x4d863d, 0xba71ca, 0x4c893d, 0xbb7eca, 0x4d863d, 0xba71ca, 0x4c893f, 0xbb7ec8, 0x4c893d, 0xbb7eca, 0x4c893f, 0xb47fc8, 0x43883f, 0xb570c8, 0x43883f, 0xb57fc6, 0x438731, 0xb570c8, 0x43883f, 0xb57fc6, 0x438731, 0xb570c8, 0x43883f, 0xb57fc6, 0x438731, 0xb570c8, 0x43883f, 0xb57fc6, 0x438731, 0xb470c6, 0x438731, 0xb470c6, 0x438731, 0xb470c6, 0x438731, 0xb470c6, 0x428831, 0xb47fc8, 0x428831,
				0xb47fc8, 0x428831, 0xb47fc8, 0x428831, 0xb47fc8, 0x428831, 0xb47fca, 0x428831, 0xb57fc8, 0x428831, 0xb57fc8, 0x42883f, 0xb57fc8, 0x42883f, 0xb57fc8, 0x42883f, 0xb57fc8, 0x42883f, 0xb57fc8, 0x438831, 0xb57fc8, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb47fc6, 0x438831, 0xb57ec7, 0x438831, 0xb67ecb, 0x448d3c, 0xaa7cca, 0x448d3c };
		System.arraycopy(aFor, 0, key, 43510, aFor.length);
	}

	private static void init147(int[] key) {
		int[] aFor = { 0xb37acb, 0x448d3c, 0xb37acb, 0x448d3c, 0xb37acb, 0x448d3c, 0xb37acb, 0x448d3c, 0xb37acb, 0x448d3c, 0xb37acb, 0x448d3c, 0xb37acb, 0x448d3c, 0xb37acb, 0x448d3c, 0xb37acb, 0x448d3c, 0xb37acb, 0x448d3c, 0xb37acb, 0x448d3c, 0xb37acb, 0x448d3c, 0xb37acb, 0x448d3c, 0xb37acb, 0x448d3c, 0xb27bca, 0x478e3f, 0xbf76c7, 0x468b39, 0xa873c0, 0x7a9a31, 0xca40c3, 0x4d862a, 0x1230c9, 0x559913, 0x1935cd, 0x4a872f, 0x1333cc, 0x49862e, 0x1330cb, 0x49862e, 0x1730c6, 0x778621, 0x2831c4, 0x778920, 0x1531c7, 0x748621, 0x163ec6, 0x72842f, 0x1738c6, 0x72842f, 0x153fc6, 0x7c822d, 0x153fc4, 0x7f812e, 0x143fc4, 0x78802f, 0x143fc6, 0x78802f, 0x1641c4, 0x798328, 0x840c3, 0x7a842f, 0x840c3, 0x7b852e, 0xd40c0, 0x7a862f, 0xd40c2, 0x75872c, 0xc40c2, 0x75872c, 0xf4fc3, 0x748633, 0xa4fc3, 0x758532,
				0xa4fc3, 0x8a8431, 0xb48c2, 0x8a8431, 0x849c5, 0x8b8730, 0x848c3, 0x8c9837, 0xa48c2, 0x8c9837, 0x449c3, 0x8e9931, 0x248c3, 0x929a37, 0x14ec3, 0x949a36, 0xc4fc2, 0x949a36, 0xe4fc3, 0x949a36, 0x94cc2, 0x979b37, 0xd4ec2, 0x969c32, 0x3c45c1, 0xfda339, 0x244ec1, 0xcdbd34, 0x3a45ce, 0xc1bf36, 0x3947cc, 0xccb23b, 0x3947ce, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf, 0xcfb138, 0x3846cf,
				0xcfb138, 0x3846cf, 0xcfb13a, 0x3849c9, 0xc0be3a, 0x3849cf, 0xc0bf38, 0x3849cf, 0xc0bf38, 0x3849c1, 0xcfbe36, 0x3849c1, 0xcfbe34, 0x3749c1, 0xcfbe34, 0x3849c1, 0xcfbe36, 0x3849c1, 0xceb136, 0x3849c1, 0xccb136, 0x3a49c1, 0xceb136, 0x3849c1, 0xccb136, 0x3a49c1, 0xceb136, 0x3849c1, 0xccb136, 0x3849c1, 0xccb136, 0x3848c3, 0xccb136, 0x3848c3, 0xceb034, 0x3847cd, 0xceb034, 0x3847cd, 0xccbf34, 0x3a48cd, 0xceb034, 0x3847cd, 0xccbf34, 0x3a48cd, 0xceb03a, 0x3847c3, 0xcebf34, 0x3848cd, 0xceb03a, 0x3947c3, 0xcfb03a, 0x3947c3, 0xcfb03a, 0x3947c1, 0xcfb038, 0x3947c3, 0xcfb03a, 0x3846c1, 0xcfb138, 0x3847c3, 0xcfb03a, 0x3846c1, 0xcfb138, 0x3847c3, 0xcfb03a, 0x3846c1, 0xcfb138, 0x3747cf, 0xcfb03a, 0x3747cf, 0xcfb03a, 0x3747cf, 0xcfb03a, 0x3746cd, 0xc0b13a, 0x3746cd, 0xc0b13a, 0x3746cd,
				0xc0b13a, 0x3746cd, 0xc0b13a, 0x3746cd, 0xc0b13a, 0x3847cd, 0xc0b13a, 0x3847cd, 0xc0b038, 0x3847cd, 0xc0b038, 0x3847cd, 0xc0b038, 0x3847cd, 0xcfb03a, 0x3847cd, 0xceb034, 0x3847cd, 0xccbf36, 0x3847cd, 0xccbf36, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3a48cf, 0xcdbf38, 0x3b49ce, 0xcdbf38, 0x3849c2, 0xcaba35, 0x244bc3, 0xcaba35 };
		System.arraycopy(aFor, 0, key, 43810, aFor.length);
	}

	private static void init148(int[] key) {
		int[] aFor = { 0x3c4cc3, 0xcaba35, 0x3c4cc3, 0xcaba35, 0x3c4cc3, 0xcaba35, 0x3c4cc3, 0xcaba35, 0x3c4cc3, 0xcaba35, 0x3c4cc3, 0xcaba35, 0x3c4cc3, 0xcaba35, 0x3c4cc3, 0xcaba35, 0x3c4cc3, 0xcaba35, 0x3c4cc3, 0xcaba35, 0x3c4cc3, 0xcaba35, 0x3c4cc3, 0xcaba35, 0x3c4cc3, 0xcaba35, 0x3c4cc3, 0xcbbb34, 0x3d4dc2, 0xc8b837, 0x3f4fc0, 0xc6b23e, 0x284ac7, 0xfaa336, 0x557ac7, 0xd3bf2f, 0x8d0acd, 0xcba214, 0x8009c9, 0xd2b828, 0x8a0bca, 0xd3bf2b, 0x8a0acf, 0xd3bf2b, 0x8e0acc, 0xd1bf2a, 0x8e08cf, 0xd0bf2c, 0xb108ca, 0xd0bf2c, 0xb207cb, 0xd1be23, 0xb505cb, 0xd1be23, 0xb605ca, 0xdeb920, 0xb605c8, 0xdfb821, 0xb406cb, 0xdfb821, 0xb406c9, 0xd8b920, 0xb579ca, 0xdabb26, 0xaa79cc, 0xdbba27, 0xaa79cc, 0xd8bd20, 0xad79cd, 0xdbbc23, 0xad79cf, 0xdabf22, 0xa378cc, 0xdabf22, 0xa077cd, 0xdbbe3d, 0xa577cd,
				0xdbbe3d, 0xa474cc, 0xdbbe3d, 0x5b75cf, 0xdab93c, 0x5874c8, 0xdab93c, 0x5877ce, 0xdbb83d, 0x5e77c9, 0xd8a73c, 0x5f77cf, 0xd6b83c, 0x5a68cf, 0xd5b93c, 0x4468c8, 0xd7bc3c, 0x4268c9, 0xd5bc3a, 0x4c68ce, 0xd5bc3a, 0x4969c9, 0xd5be3c, 0x4f6bc9, 0xd4b939, 0x7e60ca, 0xbe8532, 0x6768ca, 0x8e9b3f, 0x7963c5, 0x82993d, 0x756ec4, 0x809b33, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x756ec6,
				0x839830, 0x756ec6, 0x839830, 0x756ec6, 0x839830, 0x766fc4, 0x839830, 0x756ec4, 0x839832, 0x756ec4, 0x829b32, 0x756ec4, 0x839832, 0x756ec4, 0x839830, 0x756ec6, 0x839832, 0x756ec4, 0x839832, 0x756ec4, 0x839832, 0x766fc4, 0x839832, 0x766fc4, 0x839832, 0x766fc4, 0x839832, 0x766fc4, 0x839832, 0x766fc4, 0x839832, 0x766fc4, 0x839832, 0x766fc4, 0x839830, 0x766fc6, 0x839830, 0x766ec8, 0x839830, 0x766ec8, 0x839830, 0x766ec8, 0x839830, 0x766ec8, 0x839830, 0x766ec8, 0x83993e, 0x766fc6, 0x839830, 0x756ec8, 0x83983e, 0x756ec6, 0x83983e, 0x766ec6, 0x83983e, 0x766ec6, 0x83983e, 0x766ec6, 0x83983e, 0x756ec6, 0x83983e, 0x756ec6, 0x83983e, 0x756ec6, 0x83983e, 0x756ec6, 0x83983e, 0x756ec6, 0x839830, 0x746dc6, 0x839b32, 0x746dc6, 0x839b32, 0x746dc6, 0x839b32, 0x746ec4, 0x839b32, 0x746ec4,
				0x839b32, 0x746ec4, 0x839b32, 0x746ec4, 0x839b32, 0x746ec4, 0x839b32, 0x7a6ec6, 0x839b32, 0x7a6ec6, 0x8d9832, 0x7a6ec6, 0x8d9832, 0x756fc7, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x786eca, 0x8d9832, 0x786eca, 0x8d9832, 0x786eca, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7a6fc5, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x7b6ec4, 0x8d9832, 0x786ec8, 0x8a9d3f, 0x646cc9, 0x8a9d3f };
		System.arraycopy(aFor, 0, key, 44110, aFor.length);
	}

	private static void init149(int[] key) {
		int[] aFor = { 0x7c6bc9, 0x8a9d3f, 0x7c6bc9, 0x8a9d3f, 0x7c6bc9, 0x8a9d3f, 0x7c6bc9, 0x8a9d3f, 0x7c6bc9, 0x8a9d3f, 0x7c6bc9, 0x8a9d3f, 0x7c6bc9, 0x8a9d3f, 0x7c6bc9, 0x8a9d3f, 0x7c6bc9, 0x8a9d3f, 0x7c6bc9, 0x8a9d3f, 0x7c6bc9, 0x8a9d3f, 0x7c6bc9, 0x8a9d3f, 0x7c6bc9, 0x899e3c, 0x7c6bc9, 0x8a9d3f, 0x7f68ca, 0x8b9c3e, 0x7c6bc9, 0x849734, 0x6960cc, 0xbb893d, 0x1450cc, 0x919524, 0xcf20c6, 0x89881f, 0xc022c2, 0x909220, 0xc720c1, 0x9e9420, 0xc620c3, 0x9f9527, 0xc521c1, 0x9b9727, 0xc521c3, 0x9b9620, 0xfa21c6, 0x9a9723, 0xfb20c5, 0x98992d, 0xfc22c5, 0x98992d, 0xfe23c5, 0x969f2f, 0xfe23c7, 0x979e2e, 0xfc20c4, 0x979e2e, 0xfc20c6, 0x909f2f, 0xfe5ec4, 0x919c28, 0xe15ec2, 0x919c28, 0xe15ec2, 0x909d29, 0xe45ec5, 0x919a28, 0xe75fc6, 0x919a28, 0xe95cc5, 0x909b2b, 0xe95cc5, 0x93942a, 0xee5cc5,
				0x909535, 0xef5fc4, 0x909535, 0xef5fc4, 0x6f9436, 0xee58c5, 0x6c9531, 0xee58c5, 0x6c9531, 0xe85bc2, 0x6d9436, 0xea44c5, 0x638b36, 0xe844c4, 0x669436, 0xf644c5, 0x679637, 0xf444c4, 0x609730, 0xf744c5, 0x609036, 0xfa45c5, 0x669230, 0xfc47c5, 0x669435, 0xcf4cc7, 0x70a830, 0xa945c8, 0x40b63d, 0xb74ec7, 0x4cb43f, 0xbb43c6, 0x4eb631, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4,
				0x4db532, 0xbb43c4, 0x4db532, 0xbb43c4, 0x4eb432, 0xbc42c5, 0x4eb432, 0xba41c5, 0x4eb730, 0xba41c5, 0x4fb430, 0xba41c5, 0x4fb430, 0xba41c5, 0x4eb730, 0xba42c7, 0x4eb432, 0xba41c5, 0x4eb730, 0xbb42c5, 0x4eb730, 0xbb42c7, 0x4eb730, 0xbb42c7, 0x4eb730, 0xbb42c7, 0x4eb730, 0xbb42c7, 0x4eb730, 0xb843c7, 0x4eb730, 0xb843c7, 0x4eb730, 0xb843c7, 0x4eb732, 0xb843c5, 0x4eb730, 0xb843c7, 0x4db632, 0xb843c7, 0x4db632, 0xb843c7, 0x4db632, 0xb843c7, 0x4db632, 0xb843c7, 0x4db634, 0xb843c1, 0x4db632, 0xbb42c7, 0x4db734, 0xbb43c1, 0x4db734, 0xb842c1, 0x4db734, 0xb842c1, 0x4db734, 0xb842c1, 0x4db734, 0xb842c1, 0x4db734, 0xb842c1, 0x4db734, 0xb842c7, 0x4db734, 0xb842c7, 0x4db734, 0xb842c7, 0x4db734, 0xb842c7, 0x4db734, 0xb842c7, 0x4db734, 0xb842c7, 0x4db734, 0xb842c7, 0x4db734, 0xbb41c0,
				0x4db734, 0xb842c7, 0x4db734, 0xb842c7, 0x4db734, 0xb842c7, 0x4db734, 0xbb42c7, 0x4db734, 0xbb43c1, 0x4eb634, 0xba43c3, 0x4eb634, 0xbd41ce, 0x4eb634, 0xbd41ce, 0x4eb634, 0xbb40cc, 0x4eb634, 0xb943c2, 0x4eb536, 0xb943c2, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xb843c0, 0x4eb536, 0xbb40c3, 0x4eb536, 0xbb43cc, 0x49b03b, 0xa741cd, 0x49b03b };
		System.arraycopy(aFor, 0, key, 44410, aFor.length);
	}

	private static void init150(int[] key) {
		int[] aFor = { 0xbc45ce, 0x49b03b, 0xbc45ce, 0x49b03b, 0xbc45ce, 0x49b03b, 0xbc45ce, 0x49b03b, 0xbc45ce, 0x49b03b, 0xbc45ce, 0x49b03b, 0xbc45ce, 0x49b03b, 0xbc45ce, 0x49b03b, 0xbc45ce, 0x49b03b, 0xbc45ce, 0x49b03b, 0xbc45ce, 0x49b03b, 0xbc45ce, 0x49b03b, 0xbc45ce, 0x49b03b, 0xbc45ce, 0x4ab338, 0xbf46cd, 0x4bb239, 0xbc45ce, 0x44b933, 0xaa41ca, 0x7bab3b, 0xd671ca, 0x53b422, 0xd01c0, 0x48a618, 0x10cc5, 0x51bc27, 0x60ec6, 0x5ebd26, 0x609c5, 0x5ebd26, 0x409c0, 0x5abf26, 0x409c2, 0x5abe21, 0x3a08c4, 0x5abe21, 0x3a08c4, 0x58b023, 0x3b0ac4, 0x58b023, 0x3e0acb, 0x59b122, 0x310dca, 0x58b023, 0x330ec9, 0x58b023, 0x330ecb, 0x5fb122, 0x3271c8, 0x5db324, 0x3272cd, 0x42b027, 0x3272cd, 0x43b126, 0x3772ca, 0x42b627, 0x3772ca, 0x41b724, 0x3971c9, 0x41b724, 0x3870ca, 0x42b825, 0x3e7fcb, 0x43b724,
				0x3d7ed4, 0x43b724, 0x3d7ed4, 0xbdb526, 0x3c79d5, 0xbdb526, 0x3c79d5, 0xbdb526, 0x3e78d4, 0xbbb720, 0x3d78d2, 0xbaa821, 0x3078d3, 0xbca820, 0x3379d3, 0xa2a827, 0x3079d5, 0xa3ab26, 0x3579d2, 0xa2aa27, 0x3b7ed3, 0xa0a827, 0x397ed2, 0xa0ac22, 0x87bd1, 0xb69827, 0x6e74d0, 0x868624, 0x717ede, 0x8a8426, 0x7d73df, 0x898729, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628, 0x7d73dd, 0x888628,
				0x7d73dd, 0x888628, 0x7d73dd, 0x898528, 0x7870d0, 0x8a8629, 0x7870de, 0x8b8728, 0x7e70de, 0x88862a, 0x7e70de, 0x888628, 0x7e70de, 0x8b8626, 0x7e70de, 0x8d8726, 0x7871de, 0x8e8728, 0x7871dc, 0x8f8728, 0x7872d0, 0x8f8728, 0x7872d0, 0x8f8728, 0x7872d0, 0x8f8728, 0x7872d0, 0x8f8726, 0x7673de, 0x8f8628, 0x7672d0, 0x8f8726, 0x7673de, 0x8f8628, 0x7672d0, 0x8f8726, 0x7872d0, 0x8f8726, 0x7871d2, 0x8f8726, 0x7871d2, 0x8f8726, 0x7871d2, 0x8f8726, 0x7972d5, 0x8f8726, 0x7972d5, 0x8f8726, 0x7773d5, 0x8f8726, 0x7773d5, 0x818626, 0x7773d5, 0x818626, 0x7773d5, 0x818626, 0x7773d5, 0x818626, 0x7773d5, 0x818626, 0x7773d5, 0x818626, 0x7773d7, 0x818626, 0x7773d7, 0x818626, 0x7773d7, 0x818624, 0x7473d7, 0x808524, 0x7570d1, 0x818622, 0x7473d7, 0x818624, 0x7473d1, 0x818622, 0x7770d4, 0x818620,
				0x7673d6, 0x818522, 0x7670d4, 0x808527, 0x7671d2, 0x808527, 0x7570d2, 0x808527, 0x7471d3, 0x878525, 0x7471d3, 0x85842b, 0x7772d2, 0x85842b, 0x7772d2, 0x85842b, 0x7171dc, 0x848429, 0x7270dc, 0x8a842f, 0x7270de, 0x8a842f, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c71dc, 0x898429, 0x7c72d3, 0x8e8124, 0x6070d2, 0x8e8124 };
		System.arraycopy(aFor, 0, key, 44710, aFor.length);
	}

	private static void init151(int[] key) {
		int[] aFor = { 0x7b74d1, 0x8e8124, 0x7b74d1, 0x8e8124, 0x7b74d1, 0x8e8124, 0x7b74d1, 0x8e8124, 0x7b74d1, 0x8e8124, 0x7b74d1, 0x8e8124, 0x7b74d1, 0x8e8124, 0x7b74d1, 0x8e8124, 0x7b74d7, 0x8e8124, 0x7b74d1, 0x8e8124, 0x7b74d1, 0x8e8124, 0x7b74d1, 0x8e8124, 0x7877d2, 0x8d8227, 0x7877d2, 0x8e8124, 0x7b74d1, 0x8f8025, 0x7877d0, 0x808b2b, 0x6d72d2, 0xbc9823, 0x1142d2, 0x94873a, 0xc933db, 0x8c9403, 0xc53ede, 0x958e3c, 0xc03fdc, 0x978b3c, 0xc23fde, 0x948a3d, 0xce3edb, 0x938b3e, 0xcd3dda, 0x908839, 0xcf3fdc, 0x918938, 0xce3edd, 0xaf873a, 0xcc3ed2, 0xaf873a, 0xcb3cd2, 0xae803b, 0xc93bd2, 0xa18738, 0xc83ad1, 0xa2843b, 0xc93ad1, 0xa2843b, 0xcf44d1, 0xa1853a, 0xce45d1, 0xa1853a, 0xd147d0, 0xa0843b, 0xd147d0, 0xa3833c, 0xd647d1, 0xa0823f, 0xd647d3, 0xa1813e, 0xd947d3, 0xa0803d, 0xda48d2,
				0xa18122, 0xda48d2, 0xa68223, 0xd84bd3, 0xa78122, 0x264dd1, 0xa78122, 0x274ad0, 0xa78122, 0x254fd0, 0xa68023, 0x234fd1, 0xa58023, 0x2c4fd2, 0xa78020, 0x2851d3, 0xb88327, 0x2952d3, 0xbb8026, 0x2f53d0, 0xba8725, 0x2252d1, 0xbb8424, 0x2350d2, 0xba8222, 0x1c5ad1, 0xa2b927, 0x7a55d0, 0x92a724, 0x6450dd, 0x9ea92a, 0x695ed3, 0x9daa25, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1, 0x9cab24, 0x695ed1,
				0x9cab24, 0x685fd0, 0x9cab24, 0x685fd0, 0x9cab24, 0x685edd, 0x9da825, 0x685fd3, 0x9ea726, 0x665ed2, 0x9ea726, 0x675fd2, 0x9fa827, 0x665fdf, 0x9ea727, 0x695fdd, 0x9ea727, 0x665fdf, 0x9ea729, 0x6550dd, 0x9ea729, 0x6750d1, 0x9fa829, 0x6750d1, 0x9fa829, 0x6750d1, 0x9fa829, 0x665fd1, 0x9fa727, 0x6650df, 0x9fa829, 0x665fd1, 0x9fa727, 0x6650df, 0x9fa829, 0x665fd1, 0x9fa829, 0x665fd1, 0x9fa829, 0x665fd1, 0x9fa829, 0x665fd1, 0x9fa829, 0x665fd1, 0x9fa829, 0x665fd1, 0x9fa829, 0x665fd1, 0x9fa829, 0x6650df, 0x9fa829, 0x6650df, 0x9fa829, 0x645fdf, 0x9fa829, 0x645fdf, 0x9fa829, 0x645fdf, 0x9fa829, 0x645fdf, 0x9fa829, 0x645fdf, 0x9fa829, 0x645fdf, 0x9fa829, 0x635edf, 0x9fa829, 0x635edf, 0x98a929, 0x615ed1, 0x99a629, 0x6051d3, 0x98a92b, 0x615ed1, 0x98a929, 0x615ed3, 0x98a92b, 0x6251d0,
				0x9ba628, 0x6050d2, 0x9ba72a, 0x6051d0, 0x9aa727, 0x6052de, 0x98a427, 0x6e53de, 0x9da426, 0x6e53de, 0x9aa629, 0x6952df, 0x9aa629, 0x6952df, 0x9da728, 0x6e53de, 0x9aa728, 0x6e53dc, 0x9aa728, 0x6c53dd, 0x9aa728, 0x6c52db, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x99a42b, 0x6f52dd, 0x9aa728, 0x6f52dd, 0x9aa728, 0x6f51d2, 0x9da225, 0x7353d3, 0x9da225 };
		System.arraycopy(aFor, 0, key, 45010, aFor.length);
	}

	private static void init152(int[] key) {
		int[] aFor = { 0x6b54d3, 0x9da225, 0x6b54d3, 0x9da225, 0x6b54d3, 0x9da225, 0x6b54d3, 0x9da225, 0x6b54d3, 0x9da225, 0x6b54d3, 0x9da225, 0x6b54d3, 0x9da225, 0x6b54d3, 0x9da225, 0x6b54d1, 0x9da225, 0x6b54d3, 0x9da225, 0x6b54d3, 0x9da225, 0x6b54d3, 0x9da225, 0x6b54d3, 0x9ea126, 0x6857d0, 0x9ea126, 0x6b54d3, 0x9ea126, 0x6956d3, 0x90ab2f, 0x7d52d6, 0xacb827, 0x162d6, 0x84a73e, 0xda12dc, 0x9fb504, 0xd61fd9, 0x86af3b, 0xd31edb, 0x85ad04, 0xd019e6, 0x85ad04, 0xdc1ee1, 0x81ab04, 0xdf1de2, 0x82a801, 0xdd1fe4, 0x83a900, 0xdc1ee5, 0xbda702, 0xdf1fe5, 0xbca60d, 0xdf1cea, 0xbba702, 0xdc1ceb, 0xb4a001, 0xdd1de8, 0xb4a001, 0xde1de8, 0xb5a302, 0xd91ceb, 0xb7dd00, 0xd81deb, 0xb7dd00, 0xc71fea, 0xb7dd00, 0xc61eeb, 0xb4da07, 0xc11eea, 0xb7db04, 0xc11ee8, 0xb7db04, 0xcf1de9, 0xb6da07, 0xcc12e8,
				0xb6da07, 0xcd13f7, 0xb6da07, 0xc813f7, 0xb7d906, 0x3615f5, 0xb7d906, 0x3712f4, 0xb7d906, 0x3614f7, 0xb5db04, 0x3115f7, 0xb4da05, 0x330af6, 0xb9da04, 0x350af7, 0xa5d803, 0x3409f7, 0xa6db02, 0x330ff5, 0xa6db02, 0x3108f7, 0xa9dd03, 0x3e0ef6, 0xa6df19, 0x7ea, 0xbee31d, 0x660fea, 0x8efd1e, 0x780ae7, 0x82f310, 0x7405e6, 0x80f112, 0x7405e6, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5, 0x81f013, 0x7706e5,
				0x81f013, 0x7405e6, 0x81f013, 0x7405e6, 0x81f013, 0x7706eb, 0x80f112, 0x7706e7, 0x80ff13, 0x7905e7, 0x80ff13, 0x7a06e6, 0x86fe11, 0x7d07eb, 0x87fd11, 0x7e07ed, 0x87fd11, 0x7e06eb, 0x84fc13, 0x7905e5, 0x84fc13, 0x7f06eb, 0x85fc11, 0x7f06eb, 0x85fc11, 0x7f06eb, 0x85fc11, 0x7f06e9, 0x85fc11, 0x7e06e9, 0x84fc11, 0x7f06e9, 0x84fc11, 0x7f06e9, 0x84fc11, 0x7f06e9, 0x84fc11, 0x7f05eb, 0x84fc11, 0x7f05eb, 0x84fc11, 0x7f05eb, 0x84fc11, 0x7f05eb, 0x84fc11, 0x7806ea, 0x84fc11, 0x7806ea, 0x84fc11, 0x7806ea, 0x83fd13, 0x7f07e8, 0x83fc11, 0x7f06ea, 0x83fd13, 0x7d07e8, 0x81fc11, 0x7f06ea, 0x83fd13, 0x7d07e8, 0x81fc11, 0x7d06ea, 0x81fd13, 0x7d07e8, 0x81fc11, 0x7f06ea, 0x81fc13, 0x7f06e8, 0x81fc13, 0x7d06e8, 0x86fd13, 0x7d06ee, 0x86fd15, 0x7d06e8, 0x81fc13, 0x7d06ee, 0x81fc15, 0x7d06e8,
				0x86ff12, 0x7d06ee, 0x86ff14, 0x7b07e8, 0x87ff11, 0x7b08ea, 0x81f013, 0x790aea, 0x8ef312, 0x780be5, 0x8dfc13, 0x790ae6, 0x8dfe12, 0x790ae4, 0x8dfe12, 0x780be7, 0x8dfe12, 0x780be7, 0x8dfe12, 0x7b08ea, 0x8dfe1c, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x780be7, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8dfe12, 0x7b08e4, 0x8efd11, 0x7b0beb, 0x89f81c, 0x6709ea, 0x89f81c };
		System.arraycopy(aFor, 0, key, 45310, aFor.length);
	}

	private static void init153(int[] key) {
		int[] aFor = { 0x7f0eea, 0x89f81c, 0x7f0eea, 0x89f81c, 0x7f0eea, 0x89f81c, 0x7f0eea, 0x89f81c, 0x7f0eea, 0x89f81c, 0x7f0eea, 0x89f81c, 0x7f0eea, 0x89f81c, 0x7f0eea, 0x89f81c, 0x7f0ee8, 0x89f81c, 0x7f0eea, 0x89f81c, 0x7f0eea, 0x89f81c, 0x7f0eea, 0x89f81c, 0x7f0eea, 0x89f81c, 0x7f0eea, 0x89f81c, 0x7c0de9, 0x89f81c, 0x7100ea, 0x89fc11, 0x6504e9, 0xb4ee18, 0x1a35ea, 0x9ef10d, 0xc244ec, 0x81e334, 0xc849e9, 0x98f90b, 0xcd48eb, 0x9bfb34, 0xce4fd6, 0x98fa35, 0xc24ed3, 0x9efa37, 0xc34fd2, 0x9efa31, 0xc04cd7, 0x9ffb30, 0xc04cd5, 0xa0f433, 0xc24cd4, 0xa1f53c, 0xc24fdb, 0xa6f433, 0xc14fda, 0xa6f433, 0xce48db, 0xa7f532, 0xcd48db, 0xa6f631, 0xca49da, 0xa6f631, 0xcb36db, 0xa5f730, 0xca37db, 0xbaf637, 0xcb35dc, 0xbaf637, 0xce35db, 0xbaf637, 0xcc33d9, 0xbbf536, 0xc333db, 0xbaf435, 0xc03cda,
				0xbbf52a, 0xc03cda, 0xbbf52a, 0xc63dc5, 0xb8f435, 0x383fc7, 0xb9f334, 0xc73fc6, 0xb9f334, 0x3b3ec0, 0xb8f133, 0x3c3fc0, 0xb9f032, 0x3f3fc0, 0xb6f031, 0x3d3fc3, 0xb0ee37, 0x203cc3, 0xb0ee37, 0x233dc1, 0xb0ee37, 0x243dc3, 0xb2e835, 0x263bc1, 0xb3eb2f, 0x163cdd, 0xa8d82a, 0x7f33dc, 0x96c029, 0x6037d0, 0x9ace27, 0x6d39d0, 0x98cc25, 0x6d3fd1, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3, 0x9ac925, 0x6c3fd3,
				0x9ac925, 0x6f3cd0, 0x9ac925, 0x6c3fd3, 0x94c924, 0x6e3dd2, 0x97ce21, 0x613bd2, 0x94cd23, 0x603ad3, 0x95cc23, 0x6339d2, 0x9bcd21, 0x6c38d7, 0x9ace21, 0x6e3bd6, 0x9ccd21, 0x6e3bd4, 0x9bce27, 0x633ad4, 0x9bce27, 0x6e3bd2, 0x9acd27, 0x6e3bd2, 0x9acd27, 0x6f3ad1, 0x9acd27, 0x6f3ad1, 0x9bcc24, 0x6d3ad2, 0x98cd24, 0x6e3bd2, 0x98cd24, 0x6e3bd2, 0x98cd24, 0x6e3bd2, 0x98cd24, 0x6e3bd2, 0x98cd24, 0x6e3bd2, 0x99cc25, 0x6e3bd2, 0x98cd24, 0x6e3bd2, 0x98cd24, 0x6035dc, 0x97c22b, 0x6134d3, 0x97c22b, 0x6035d2, 0x96cd25, 0x603bdd, 0x94cd28, 0x613bd0, 0x92cc26, 0x673ade, 0x94cd28, 0x613bd0, 0x95c327, 0x6334de, 0x96cd26, 0x653ade, 0x96cd28, 0x653ad0, 0x91c227, 0x653ade, 0x90c326, 0x643bdf, 0x90c328, 0x663bdf, 0x90c32a, 0x663bdd, 0x90c328, 0x663bdf, 0x91cc2a, 0x663bdd, 0x91cc28, 0x6934d0,
				0x9ec325, 0x6934d2, 0x91cc24, 0x6835dd, 0x92cf25, 0x6835df, 0x91cc28, 0x6834db, 0x93ce2e, 0x6834db, 0x91cc2f, 0x6834db, 0x91cd2c, 0x663adb, 0x92ce2f, 0x6438d7, 0x91cd20, 0x6539d6, 0x96cd20, 0x6238d9, 0x97ce21, 0x6139da, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6138d5, 0x97ce23, 0x6238d9, 0x90cb2e, 0x7e3ad8, 0x90cb2e };
		System.arraycopy(aFor, 0, key, 45610, aFor.length);
	}

	private static void init154(int[] key) {
		int[] aFor = { 0x663dd8, 0x90cb2e, 0x663dd8, 0x90cb2e, 0x663dd8, 0x90cb2e, 0x663dd8, 0x90cb2e, 0x663dd8, 0x90cb2e, 0x663dd8, 0x90cb2e, 0x663dd8, 0x90cb2e, 0x663dd8, 0x90cb2e, 0x663dda, 0x90cb2e, 0x663dd8, 0x90cb2e, 0x663dd8, 0x90cb2e, 0x663dd8, 0x90cb2e, 0x663dd8, 0x90cb2e, 0x663dd8, 0x90cb2e, 0x653edb, 0x90cb2e, 0x6833d8, 0x90cf23, 0x7c37db, 0xaddd2a, 0x7db, 0x84c33c, 0xdf77dc, 0x9cd004, 0xd57ad9, 0x85ca3b, 0xd07bdb, 0x85c905, 0xd17ae4, 0x84ce06, 0xdd7de3, 0x81c905, 0xdd7de1, 0x81c903, 0xdf7fe5, 0x81c903, 0xde7ee6, 0x81c903, 0xe07ee5, 0x82c602, 0xe17ce5, 0x82c602, 0xe47cea, 0x83c703, 0xe47ce4, 0x8cc00c, 0xe57ce4, 0x8fc10d, 0xe47fe7, 0x88c00c, 0xe500e6, 0x88c00c, 0xe700e7, 0x97c10b, 0xe602e0, 0x97c10b, 0xe302e7, 0x97c10b, 0xe205e6, 0x94c008, 0xe305e4, 0x9bc309, 0xe204e7, 0x98cc08,
				0xe204e7, 0x98cc08, 0xe504e7, 0x9bcd17, 0x1b06e5, 0x9bcd17, 0xe501e5, 0x9bcd17, 0x1a01e4, 0x99cf11, 0x1d01e2, 0x99cf11, 0x1f00e3, 0x98d010, 0x1200e2, 0x9ed011, 0x1101e2, 0x81d316, 0x1301e3, 0x81d316, 0x1500e2, 0x83d514, 0x1706e0, 0x82d60e, 0x2600ff, 0x9be309, 0x4e08ff, 0xa7fa08, 0x510df1, 0xa8f507, 0x5f02f0, 0xaaf705, 0x5f03f7, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503, 0x5e03f5, 0xa8f503,
				0x5d00f6, 0xa8f503, 0x5e03f5, 0xa6f502, 0x5c01f4, 0xabf200, 0x5b00f1, 0xb7f201, 0x5f01ee, 0xb5f21c, 0x5903e8, 0xb4f31d, 0x5903e8, 0xb5f21d, 0x5c00ea, 0xb4f31d, 0x5c00e8, 0xb5f31d, 0x5803e8, 0xb5f31d, 0x5902e8, 0xb3f01d, 0x5902e8, 0xb3f01d, 0x5802e5, 0xb3f113, 0x5900e4, 0xb3f113, 0x5900e4, 0xb3f113, 0x5900e4, 0xb3f113, 0x5900e4, 0xb3f113, 0x5f00e4, 0xb5f113, 0x5803e5, 0xb2f110, 0x5f03e6, 0xb3f711, 0x5d04e6, 0xb6f710, 0x5b05e6, 0xb0f610, 0x5b04e8, 0xb1f51f, 0x5b04e8, 0xb1f51f, 0x5a01e4, 0xb1f51d, 0x5a01e6, 0xb0f21c, 0x5906e6, 0xb0f21c, 0x5906e6, 0xb0f21c, 0x5906e6, 0xb0f21c, 0x5a07e7, 0xb2f21c, 0x5a07e7, 0xb2f21c, 0x5a07e7, 0xbdf11c, 0x5407e0, 0xbcf01c, 0x5405e7, 0xbcf01c, 0x5605e5, 0xbcf012, 0x5605eb, 0xbcf01c, 0x5704e5, 0xbcf112, 0x5004e8, 0xbcf112, 0x5004e8, 0xbcf112,
				0x5107e9, 0xbff015, 0x4f09eb, 0xbcf514, 0x4808eb, 0xbdf714, 0x440ae8, 0xbff514, 0x420ae8, 0xb9f714, 0x430bef, 0xb9f714, 0x410ded, 0xb7fb15, 0x430fe3, 0xb7fb15, 0x420ee2, 0xb4f81a, 0x420ee2, 0xb7fb15, 0x430fe3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x410de3, 0xb7fb15, 0x420def, 0xb0fe18, 0x5e0fee, 0xb0fe18 };
		System.arraycopy(aFor, 0, key, 45910, aFor.length);
	}

	private static void init155(int[] key) {
		int[] aFor = { 0x4608ee, 0xb0fe18, 0x4608ee, 0xb0fe18, 0x4608ee, 0xb0fe18, 0x4608ee, 0xb0fe18, 0x4608ee, 0xb0fe18, 0x4608ee, 0xb0fe18, 0x4608ee, 0xb0fe18, 0x4608ee, 0xb0fe18, 0x4608ee, 0xb0fe18, 0x4608ee, 0xb0fe18, 0x4608ee, 0xb0fe18, 0x4608ee, 0xb0fe18, 0x4608ee, 0xb0fe18, 0x4608ee, 0xb0fe18, 0x450bed, 0xb0fe18, 0x4806e0, 0xb0fa1d, 0x5c0de4, 0x8de417, 0x203de5, 0xa4f90d, 0xff4aec, 0xbdec34, 0xf545e8, 0xbaea09, 0xee5ae8, 0xbaea37, 0xe958d5, 0xbdeb36, 0xe559d0, 0xbeea35, 0xe45fd1, 0xbeea33, 0xe35fd6, 0xbeea33, 0xe05cd5, 0xbfeb32, 0xdf53d4, 0xbfeb32, 0xdd53d5, 0xbfeb32, 0xdb50da, 0xbfeb32, 0xd951da, 0xbeea33, 0xd656db, 0xbeea33, 0xd757da, 0xbde930, 0xd029da, 0xbde930, 0xd328db, 0xbcea37, 0xcc2bdb, 0xbde936, 0xcc2add, 0xbeee31, 0xca2ddd, 0xbfe930, 0xca2ddd, 0xbce833, 0xc42ede,
				0xbde930, 0xc42ede, 0xbee631, 0xc32ede, 0xbde72e, 0xc02cdf, 0xbee02d, 0xc32bdc, 0xbde72e, 0xc22add, 0x42e429, 0xc12bda, 0x42e429, 0xc72bdb, 0x40fb28, 0xca2bda, 0x41fa29, 0xcc2bdd, 0x41fa29, 0xce2bdd, 0x5ef929, 0xcd2ddd, 0x58fb2b, 0xcb28dd, 0x58f832, 0xfa2dc0, 0x46cf37, 0x9324cf, 0x74d639, 0x8221c0, 0x7bd936, 0x8c2ec1, 0x79db34, 0x8c2fc6, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4, 0x7bd932, 0x8d2fc4,
				0x7bd932, 0x8e2cc7, 0x7bd932, 0x8d2fc4, 0x7ad83d, 0x8d2cc6, 0x7ddc3e, 0x9f31cf, 0x47da20, 0x9331d1, 0x40dd22, 0x9637d7, 0x41de20, 0x9936d7, 0x4edf20, 0x9a35d7, 0x48df21, 0x9a35d7, 0x49dc21, 0x9c34d7, 0x4adc21, 0x9c34d7, 0x49dc21, 0x9d3bd4, 0x49dc21, 0x9d3bd7, 0x49dc22, 0x9d3bd4, 0x4edd21, 0x9b35d6, 0x4fd220, 0x9b35d6, 0x4fd220, 0x9b35d8, 0x4fd220, 0x9a34d8, 0x4ed32e, 0x9b34db, 0x48d22f, 0x9d35da, 0x49d22f, 0x9c35da, 0x4fd32e, 0x9b35da, 0x4fd22f, 0x9d37db, 0x4cd328, 0x8336db, 0x4cd328, 0x9c36de, 0x4dd12b, 0x8237dd, 0x4cd228, 0x8334de, 0x4cd228, 0x8334de, 0x4dd12b, 0x8334de, 0x4dd12b, 0x8334dc, 0x48d12a, 0x8536d2, 0x49d025, 0x8536d2, 0x4ed025, 0x8235dc, 0x49d325, 0x8237dd, 0x48d328, 0x8237dd, 0x4ed42e, 0x8237db, 0x4ed428, 0x8237dd, 0x4ed42e, 0x8237db, 0x4ed42e, 0x8430db,
				0x4ed42e, 0x8531d8, 0x48d620, 0x873fda, 0x55d327, 0x803cd8, 0x57cd27, 0x883ed9, 0x6acb25, 0x8f3ddb, 0x67ca25, 0x8a32db, 0x78c826, 0x8f33d8, 0x76c924, 0x8e31de, 0x76c729, 0x8132df, 0x77c62a, 0x8235de, 0x76c72d, 0x8334d9, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8235d8, 0x74c32e, 0x8135d4, 0x73c623, 0x9d37d5, 0x73c623 };
		System.arraycopy(aFor, 0, key, 46210, aFor.length);
	}

	private static void init156(int[] key) {
		int[] aFor = { 0x8530d5, 0x73c623, 0x8530d5, 0x73c623, 0x8530d5, 0x73c623, 0x8530d5, 0x73c623, 0x8530d5, 0x73c623, 0x8530d5, 0x73c623, 0x8530d5, 0x73c623, 0x8530d5, 0x73c623, 0x8530d5, 0x73c623, 0x8530d5, 0x73c623, 0x8530d5, 0x73c623, 0x8530d5, 0x73c623, 0x8530d5, 0x73c623, 0x8530d5, 0x73c623, 0x8633d6, 0x73c623, 0x8b3edb, 0x73c226, 0x9f35df, 0x4edc2c, 0xe305de, 0x60c639, 0x3a74d9, 0x7bd10e, 0x3c79d5, 0x72d735, 0x2667d4, 0x72d70b, 0x2066ea, 0x73d408, 0x2465ed, 0x7ed709, 0x2763ea, 0x7dd608, 0x2063ed, 0x7dd608, 0x2360ee, 0x7dd608, 0x2261ed, 0x42d90b, 0x2061ec, 0x42d90b, 0x2662e3, 0x42d90b, 0x2463e3, 0x43d80a, 0x2b64e2, 0x43d80a, 0x2a65e3, 0x43d80a, 0x2f67e3, 0x42a709, 0x2f67e3, 0x41a608, 0x3167e4, 0x40a509, 0x3166e2, 0x40a509, 0x3466e5, 0x40a509, 0x3561e4, 0x43a40a, 0x3b62e7,
				0x42a509, 0x3b62e7, 0x41aa08, 0x3d6de6, 0x43a416, 0x3e6fe7, 0x43a416, 0x3e6fe7, 0x43a416, 0x3c69e5, 0xbca711, 0x3f68e2, 0xbca711, 0x3869e2, 0xbda610, 0x3a76e3, 0xb0a611, 0x3c76e2, 0xb1a716, 0x3e76e2, 0xb1a716, 0x2375e3, 0xb7a016, 0x2572e3, 0xb7bd0d, 0x1568ff, 0xaf8b08, 0x7a60f0, 0x9d9206, 0x6b65ff, 0x929d09, 0x656afe, 0x909f0b, 0x656bf9, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb, 0x929d0d, 0x646bfb,
				0x929d0d, 0x6768f8, 0x929d0d, 0x646bfb, 0x9c9c07, 0x6f6ffa, 0x8a8202, 0x5864f3, 0x9b851f, 0x2064f1, 0x9a8503, 0x265af0, 0x988405, 0x275af6, 0x998704, 0x2259f6, 0x9b8707, 0x2c5af7, 0x9a8606, 0x2d5cf6, 0x9a8606, 0x2c5fe9, 0x998707, 0x2c50f7, 0x988618, 0x2c50f7, 0x9f8519, 0x2d51f4, 0x9c8218, 0x3252f3, 0x9f8318, 0x324cf2, 0x99831b, 0x324df1, 0x988018, 0x324df1, 0x988018, 0x304cfe, 0x98801a, 0x3f4bff, 0x98801a, 0x3e4afe, 0x9b831d, 0x3f44fe, 0x9a8c1a, 0x3944f9, 0x988218, 0x647fa, 0x9b831b, 0x647fa, 0x9d831a, 0x740c5, 0x9e821b, 0x441fa, 0x9d831a, 0x542c5, 0x92821b, 0x542c5, 0x918218, 0x23cc6, 0x918218, 0x23cc6, 0x938219, 0x23cc6, 0x8d8118, 0x33dc5, 0x8e8618, 0x23cc4, 0x89851f, 0x23cc4, 0x88841d, 0x232c4, 0x8b851d, 0x232c4, 0x8b851d, 0x333c5, 0x8b851d, 0xf31c5, 0x8b851d, 0xf31c5,
				0x8a841c, 0xf31c5, 0x888819, 0x234c6, 0x8f8a19, 0x1d35c7, 0x87f618, 0x223cfc, 0x93ed1a, 0x5337f1, 0x80d202, 0x6423f8, 0x94d405, 0x6e2ffa, 0x94d506, 0x6e2dff, 0x94d506, 0x6320f0, 0x97d203, 0x6421f6, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6722f7, 0x91d401, 0x6422fb, 0x96d10c, 0x7820fa, 0x96d10c };
		System.arraycopy(aFor, 0, key, 46510, aFor.length);
	}

	private static void init157(int[] key) {
		int[] aFor = { 0x6027fa, 0x96d10c, 0x6027fa, 0x96d10c, 0x6027fa, 0x96d10c, 0x6027fa, 0x96d10c, 0x6027fa, 0x96d10c, 0x6027fa, 0x96d10c, 0x6027fa, 0x96d10c, 0x6027fa, 0x96d10c, 0x6027fa, 0x96d10c, 0x6027fa, 0x96d10c, 0x6027fa, 0x96d10c, 0x6027fa, 0x96d10c, 0x6027fa, 0x96d10c, 0x6027fa, 0x96d10c, 0x6324f9, 0x96d10c, 0x6e29f4, 0x96d509, 0x7a22f0, 0xabcb03, 0x612f1, 0x84d616, 0xde64f6, 0x9fc121, 0xdb69fd, 0x97c41d, 0xc374fc, 0x97c423, 0xc575c2, 0x96c720, 0xc075c5, 0x98c721, 0xc173c2, 0x9bc620, 0xc772c4, 0x9ac721, 0xc772c4, 0x99c422, 0xc673c7, 0xa6cb21, 0xc473c6, 0xa6cb21, 0xc270c9, 0xa6cb21, 0xc170c8, 0xa6cb21, 0xce77c9, 0xa7ca20, 0xce77c9, 0xa4c923, 0xc876ca, 0xa4c923, 0xc909c9, 0xa7c822, 0xd709ce, 0xa7c822, 0xd60acf, 0xa7c822, 0xd30bce, 0xa7c822, 0xd20ccf, 0xa4c921, 0xdc0fcc,
				0xa5c822, 0xdf00cd, 0xa5c822, 0xd90fcc, 0xa4c723, 0xd80dd3, 0xa4c723, 0xd80dd3, 0xa5c622, 0xdb0ad0, 0xa4c723, 0x260ad7, 0xa5c524, 0x210bd7, 0xa4c425, 0x2314d6, 0xabc522, 0x2014d1, 0xabc522, 0x2517d5, 0xb5c520, 0x2717d5, 0xb4c423, 0x2515d7, 0xb4db3a, 0x160ec8, 0xadea30, 0x7801c8, 0x9ff33e, 0x6904c7, 0x90fc31, 0x670bc6, 0x92fe33, 0x670ac1, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3, 0x90fc35, 0x660ac3,
				0x93ff36, 0x660ac3, 0x93ff36, 0x6408c1, 0x93f03d, 0x7c03c2, 0xa1e938, 0x6508c9, 0xcad222, 0x6e0acc, 0xced23d, 0x6d04c8, 0xc9d13d, 0x6e05ce, 0xc8d63e, 0x6c05d1, 0xccd63f, 0x5004d3, 0xcad43f, 0x5018d2, 0xc9d33e, 0x5f18d5, 0xcad23c, 0x5918d5, 0xcbd13d, 0x5a19da, 0xcade3c, 0x441ada, 0xc9d93f, 0x451bd9, 0xcfd93c, 0x4519da, 0xcdd93f, 0x4a66db, 0xcfdb39, 0x4a67da, 0xcedc38, 0x4e66d8, 0x31df07, 0x4f67e7, 0x32d038, 0x4e66e6, 0x37d53d, 0x4f64e1, 0x37d53d, 0x4164e0, 0x34d43c, 0x457ae7, 0x2ad63e, 0x477ae6, 0x2cd030, 0x4577e6, 0x22d033, 0x4176e0, 0x20d332, 0x4077e1, 0x1fd433, 0x4176e2, 0x1ad432, 0x4074e3, 0x19eb33, 0x4175fc, 0x17eb2c, 0x4377e2, 0x11eb2f, 0x4070e3, 0xfe828, 0x417fe2, 0xae829, 0x407ee3, 0x8eb2a, 0x4f79e3, 0x9ea2a, 0x4f79e3, 0xaeb2b, 0x4879ec, 0x8e929, 0x3567ec, 0x9ea28,
				0x3367eb, 0xaeb29, 0x3261eb, 0x4ea29, 0x3c67ed, 0xe92b, 0x4278e2, 0xee02e, 0x5143fc, 0x24f324, 0xb54cc5, 0x5982b, 0xd770d6, 0x3d8829, 0xca76d6, 0x318a29, 0xcd76d7, 0x378c2b, 0xcf74d1, 0x3a822b, 0xc974d0, 0x3a832a, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcc75d2, 0x3a8324, 0xcf75de, 0x3d8629, 0xd377df, 0x3d8629 };
		System.arraycopy(aFor, 0, key, 46810, aFor.length);
	}

	private static void init158(int[] key) {
		int[] aFor = { 0xcb70df, 0x3d8629, 0xcb70df, 0x3d8629, 0xcb70df, 0x3d8629, 0xcb70df, 0x3d8629, 0xcb70df, 0x3d8629, 0xcb70df, 0x3d8629, 0xcb70df, 0x3d8629, 0xcb70df, 0x3d8629, 0xcb70df, 0x3d8629, 0xcb70df, 0x3d8629, 0xcb70df, 0x3d8629, 0xcb70df, 0x3d8629, 0xcb70df, 0x3d8629, 0xcb70df, 0x3d8629, 0xc873dc, 0x3d8629, 0xc57ed1, 0x3d822c, 0xd175d5, 0x1e9f26, 0xb245d4, 0x308133, 0x6930ec, 0x29943a, 0x6d3ce6, 0x269039, 0x753fd9, 0x269007, 0x7421e6, 0x279304, 0x7121e1, 0x299305, 0x7027e6, 0x299307, 0x7527e3, 0x299307, 0x7426e2, 0x2a9004, 0x7527e1, 0x159f07, 0x7428e1, 0x169006, 0x722bee, 0x169006, 0x712bef, 0x169006, 0x7e2cee, 0x179107, 0x7e2cee, 0x149204, 0x7f2cec, 0x139305, 0x7f2cec, 0x12ec06, 0x7d2ced, 0xded01, 0x7d2ced, 0xcee00, 0x782dec, 0xcee00, 0x792aed, 0xfef03, 0x7729ee, 0xeee00,
				0x7426ef, 0xeee00, 0x7229ee, 0xfe101, 0x7428ee, 0xfe101, 0x732bf1, 0xfe101, 0x712df3, 0xee000, 0x8c2df4, 0xee000, 0x8a2ef3, 0xee000, 0x882ff2, 0xfff01, 0x852ff3, 0xfff01, 0x822ef7, 0xfff03, 0x9f2df6, 0xcfe00, 0x9c2ef3, 0xde01e, 0xaf35ec, 0x14d114, 0xc03be3, 0x27c915, 0xd13eec, 0x28c61a, 0xdf31ed, 0x2ac418, 0xdf30ea, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x28c61e, 0xde30e8, 0x2bc51d, 0xde30e8,
				0x2bc51d, 0xdc32ea, 0x2bca16, 0xc639e9, 0x1fd313, 0xa30ce1, 0x6d40c, 0x9101e2, 0x2d510, 0x9606e6, 0x1d710, 0x9818e3, 0x1d712, 0x9718ff, 0x6d614, 0x8b1aff, 0x2d015, 0x8a16fe, 0xdd314, 0x8b17fd, 0xfd315, 0x8c10fc, 0xed214, 0x8e12f2, 0xf3ac16, 0x8e10f3, 0xf5ac17, 0x831bf6, 0xf0ad16, 0x8218f6, 0xf2ab28, 0x9c1af4, 0xf0ab2f, 0x9c04f3, 0xf6aa28, 0x9f07f4, 0xfaac28, 0x9e06f3, 0xfdaf29, 0x9c08f3, 0xc2ac24, 0x9e0ef2, 0xc2ac24, 0x9b0cf2, 0xccac27, 0x9932f2, 0xc8ae21, 0x8734f0, 0xcaae20, 0x8136f0, 0xc6a03e, 0x8235f2, 0xc0a039, 0x8032f3, 0xbea23b, 0x8532fc, 0xbfbd3a, 0x8633fd, 0xb0bf38, 0x8435fd, 0xb5bf39, 0x8536fc, 0xa8b13f, 0x8437fd, 0xaeb33f, 0x8730fe, 0xa2b13e, 0x8730fc, 0xa5b03c, 0x85ce82, 0x9ab33f, 0x85cf80, 0x98b33e, 0x83c982, 0x94b038, 0x80c782, 0x93b13b, 0x9cc48c, 0x91b739,
				0x9bc68d, 0x92b63e, 0x98c78a, 0x92b63e, 0x80c387, 0x9bb939, 0xb03afb, 0x8fb43c, 0xd728f1, 0xa08626, 0x3a43c1, 0x8c9630, 0x4272c9, 0x999933, 0x716bcf, 0x9e9d31, 0x6d65cf, 0x999233, 0x6a64c8, 0x999030, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6f66c8, 0x99903e, 0x6c66c4, 0x9e9533, 0x7064c5, 0x9e9533 };
		System.arraycopy(aFor, 0, key, 47110, aFor.length);
	}

	private static void init159(int[] key) {
		int[] aFor = { 0x6863c5, 0x9e9533, 0x6863c5, 0x9e9533, 0x6863c5, 0x9e9533, 0x6863c5, 0x9e9533, 0x6863c5, 0x9e9533, 0x6863c5, 0x9e9533, 0x6863c5, 0x9e9533, 0x6863c5, 0x9e9533, 0x6863c5, 0x9e9533, 0x6863c5, 0x9e9533, 0x6863c5, 0x9e9533, 0x6863c5, 0x9e9533, 0x6863c5, 0x9e9533, 0x6863c5, 0x9e9533, 0x6b60c6, 0x9e9533, 0x666dcb, 0x9e9136, 0x7469cf, 0xbb833c, 0x1759ce, 0x969a28, 0xcf2bf7, 0xf08822, 0xb32ff9, 0xf98427, 0xa92bf8, 0xfb8525, 0xaa35c5, 0xf98727, 0xaf35c2, 0xf78726, 0xaf34c4, 0xf68025, 0xaf34c6, 0xf58122, 0xa935c6, 0xf48023, 0xaa36c7, 0xf58122, 0x9436c4, 0xf58122, 0x963bc5, 0xf58122, 0x933bca, 0xf58122, 0x923acb, 0xfa8621, 0x923ac9, 0xfb8720, 0x9039c8, 0xfb8720, 0x9738c9, 0xfaf823, 0x9538c8, 0xe5f924, 0x9538c8, 0xe5f924, 0x9738ce, 0xe4fa25, 0x9039c9, 0xe5fd24, 0x9338ca,
				0xe4fe25, 0x9d39cb, 0xe4fe25, 0x9839cb, 0xe4fe25, 0x9f37ca, 0xe4fe25, 0x9f37d5, 0xe3fd24, 0x9e36d5, 0xe0fa27, 0x6034d3, 0xe0fa27, 0x6335d4, 0xe7fb27, 0x6134d5, 0xe6e426, 0x6e35d2, 0xe4e526, 0x6835d3, 0xe4e520, 0x7437d5, 0xe6e323, 0x6932d7, 0xf9fe39, 0x582ac8, 0xe2c93f, 0x3623c8, 0xd1d13e, 0x2726c7, 0xdede31, 0x2929c6, 0xdcdc33, 0x2928c1, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3, 0xdede35, 0x2828c3,
				0xdddd36, 0x2828c3, 0xdddd36, 0x2a2ac1, 0xd2d33c, 0x3d20c0, 0xe6cb38, 0x5b2ac9, 0xfff224, 0x6b24d4, 0xe4f220, 0x7727d8, 0xe2f420, 0x7a24d3, 0xe2f422, 0x7724cc, 0xe7f420, 0x6b3bcc, 0xecf721, 0x6b3fcf, 0xedf822, 0x683ece, 0xecfb25, 0x6e38ce, 0xeffa24, 0x903ace, 0xec8527, 0x9039cf, 0xe98528, 0x9e3fcf, 0xeb8629, 0x9831cf, 0xe9842b, 0x8637cf, 0xea852c, 0x8635cd, 0xec852c, 0x8b2acd, 0xed842d, 0x892af2, 0xea872c, 0x8b2df1, 0xd58a2b, 0x892ff1, 0xd58a2b, 0x8d29f1, 0xdb8a28, 0x882af0, 0xd8b527, 0x972bf0, 0xdbb625, 0x912cf0, 0xd6b523, 0x922df7, 0xd0bb25, 0xef2ef5, 0xd1ba3a, 0xea2eea, 0xd3bc24, 0xe42deb, 0xd1a226, 0xe22fea, 0xd2a321, 0xfd28ed, 0xd1a227, 0xfa2bee, 0xd2ac27, 0xf52aef, 0xd3af28, 0xf62be0, 0xd4aa25, 0xf4d5e6, 0xe9ab24, 0xf4d5e7, 0xe8aa24, 0xf1d6e4, 0xe4ac5a, 0xf7d6e5,
				0xe5af5b, 0xebd9e6, 0xe7ad5d, 0xefdee6, 0xe8ac5c, 0xecdce4, 0xe9ac5c, 0xedc3eb, 0xe4ac52, 0xebddea, 0xfcab50, 0xdcd3e8, 0xed5353, 0xa5de97, 0xfb465f, 0x7bf785, 0xe43162, 0x27ee95, 0xf91f6a, 0x8e495, 0xf21b6a, 0xee794, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0xe795, 0xf61163, 0x3e799, 0xf1146e, 0x1fe598, 0xf1146e };
		System.arraycopy(aFor, 0, key, 47410, aFor.length);
	}

	private static void init160(int[] key) {
		int[] aFor = { 0x7e298, 0xf1146e, 0x7e298, 0xf1146e, 0x7e298, 0xf1146e, 0x7e298, 0xf1146e, 0x7e298, 0xf1146e, 0x7e298, 0xf1146e, 0x7e298, 0xf1146e, 0x7e298, 0xf1146e, 0x7e298, 0xf1146e, 0x7e298, 0xf1146e, 0x7e298, 0xf1146e, 0x7e298, 0xf1146e, 0x7e298, 0xf1146e, 0x7e298, 0xf1146e, 0x4e19b, 0xf1146e, 0x9ec96, 0xf1106b, 0x1be892, 0xd40261, 0x78d890, 0xf91b76, 0xa0a9a8, 0x9e0d7d, 0xddaaa6, 0x970146, 0xd8aca6, 0x880379, 0xd8b399, 0x8a0278, 0xdfb39c, 0x88027f, 0xd0b19d, 0x88027f, 0xd1b69c, 0x88027f, 0xd4b69b, 0x89037e, 0xd7b59a, 0x89037e, 0xe9b59b, 0x89037e, 0xebba98, 0x88007f, 0xedb998, 0x88007f, 0xeeba97, 0x89017e, 0xeeba99, 0x860671, 0xedb89b, 0x860673, 0xeab99a, 0x877970, 0xe8b99b, 0x987877, 0xe8b99b, 0x987877, 0xe9b89e, 0x9b7974, 0xe8bb9f, 0x9c7873, 0xe9bc9e, 0x9f7970, 0xe7bf9d,
				0x9f7970, 0xe5b19f, 0x9f7971, 0xe5b19f, 0x9e7870, 0xe5b180, 0x997b71, 0xe4b080, 0x9a7c72, 0x1ab286, 0x9a7c72, 0x18b280, 0x9c7c73, 0x19b381, 0x9e6372, 0x19b381, 0x916275, 0x1bb281, 0x976274, 0x7b081, 0x956476, 0x18b582, 0x96786c, 0x8ab9e, 0xb04a69, 0x63a19e, 0x845368, 0x72a491, 0x8b5c67, 0x7cab90, 0x895e65, 0x7cad91, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x8b5b65, 0x7dad93, 0x885866, 0x7dad93,
				0x885866, 0x7faf91, 0x87566a, 0x76a293, 0xaa4f64, 0x15ac97, 0xb37667, 0x25a194, 0xb7786d, 0x21a097, 0xb9776d, 0x20a39b, 0xb87068, 0x2ca498, 0xbe7769, 0x31a698, 0xba7669, 0x31ba9b, 0xbb7168, 0x33b899, 0xb47069, 0x32b786, 0xb67269, 0x35b687, 0xb57569, 0xcbb485, 0xb67468, 0xcfc881, 0xb7746a, 0xc1ce83, 0xb3766a, 0xc3c08d, 0xad746a, 0xc0c78c, 0xad746a, 0xc4c48e, 0xa3746d, 0xc5db8f, 0xa6746e, 0xc7d98f, 0x987250, 0xc6d88e, 0x98716e, 0xc3d9b0, 0x9a7f6e, 0xcfdbb3, 0x9d7868, 0xccd9b4, 0x82796e, 0xcee7b4, 0x877a6d, 0xc1e6ba, 0x857c6f, 0xc5e5bc, 0xfb726f, 0xc6e4bd, 0xfd716e, 0xc4e2bf, 0xf2706e, 0xc1ffbe, 0xf36f6e, 0xc3e2be, 0xed6f71, 0xc0e3bf, 0xec6870, 0xc6e1bd, 0xe16971, 0xc4efbb, 0xe76b73, 0xc6e9b4, 0xe66872, 0xc6e9b4, 0xd86871, 0xc416b4, 0xdc6b77, 0xcb15b4, 0xdf6977, 0xcd13b4,
				0xc36a75, 0xc81db5, 0xc1680b, 0xc51bb0, 0xc6690a, 0xc506b2, 0xc46b04, 0xc401b2, 0xc46703, 0xc407a8, 0xc4590e, 0xcf3ba9, 0xd55301, 0xe029b4, 0xb9bb73, 0x3a09ad, 0x9dc043, 0x5e1bb6, 0x80f04d, 0x6c03b6, 0x9ff74e, 0x6a01b6, 0x9cf740, 0x6a01b6, 0x9cf740, 0x6a01b6, 0x9cf740, 0x6a01b6, 0x9cf740, 0x6b02b6, 0x9cf740, 0x6a01b6, 0x9cf740, 0x6900b6, 0x9ff640, 0x6900b6, 0x9ff640, 0x6900b6, 0x9ff640, 0x6900b6, 0x9ff640, 0x6900b6, 0x9ff640, 0x6900b6, 0x9ff640, 0x6900b6, 0x9ff640, 0x6900b6, 0x9ff640, 0x6900b6, 0x9ff640, 0x6900b6, 0x9ff640, 0x6900b6, 0x9ff640, 0x6900b6, 0x9ff640, 0x6900b6, 0x9ff640, 0x6900b6, 0x9ff640, 0x6a00ba, 0x98f34d, 0x7602bb, 0x98f34d };
		System.arraycopy(aFor, 0, key, 47710, aFor.length);
	}

	private static void init161(int[] key) {
		int[] aFor = { 0x6e05bb, 0x98f34d, 0x6e05bb, 0x98f34d, 0x6e05bb, 0x98f34d, 0x6e05bb, 0x98f34d, 0x6e05bb, 0x98f34d, 0x6e05bb, 0x98f34d, 0x6e05bb, 0x98f34d, 0x6e05bb, 0x98f34d, 0x6e05b9, 0x98f34d, 0x6e05bb, 0x98f34d, 0x6e05bb, 0x98f34d, 0x6e05bb, 0x98f34d, 0x6f04ba, 0x99f24c, 0x6f04ba, 0x99f24c, 0x6c07bf, 0x98f34d, 0x6f04b8, 0x97f843, 0x7b02b8, 0xb5e94b, 0x1e31a4, 0x9ef340, 0xcb439c, 0xf0e748, 0xb24294, 0xf9ee77, 0xb74096, 0xe7f074, 0xb64195, 0xe6f175, 0xb44094, 0xe1f176, 0xb64095, 0xe1f274, 0xb94196, 0xe1f274, 0xb84697, 0xe2f373, 0xb94596, 0xe5f270, 0xbb4494, 0xe4f371, 0xbb4494, 0xdafd73, 0xb94794, 0xddfc7c, 0xbe469b, 0xddfc7c, 0xb84095, 0xdefd7d, 0xb74094, 0xdefd7d, 0xb54397, 0xd9fc7c, 0xb43c96, 0xd9fc7c, 0xb73d97, 0xd9fc7c, 0xa93d90, 0xdbfe7e, 0xaf3d92, 0xdbfe7e, 0xae3a93,
				0xd9fc7c, 0xae3a93, 0xd9fc7e, 0xa03491, 0xdafc7e, 0xa13591, 0xdafc7e, 0xa6368e, 0xdafc7e, 0xa7378f, 0xdafc7e, 0xa5368f, 0x24fa7c, 0xa7378e, 0x24fa7c, 0xa0348f, 0x26e47a, 0xa1358c, 0x26fa79, 0xad2b8c, 0x26fa79, 0xab2b8d, 0x24f87b, 0xaf298e, 0x24e461, 0xbf3093, 0x9d06b, 0xc6399d, 0x20c86a, 0xd63f93, 0x2cc664, 0xd43e9c, 0x21cb69, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x23c96b, 0xd53f9d, 0x22c86a, 0xd53f9d,
				0x23c96b, 0xd63c9e, 0x20ca68, 0xd93391, 0x23c86c, 0xcc3c9b, 0x16d768, 0xad369c, 0xfee6e, 0x9a3a9b, 0xfef63, 0x953895, 0xdeb64, 0x943f96, 0xcea64, 0x9f3e96, 0xeec64, 0x9e3c97, 0x11f266, 0x9d3e96, 0x14f779, 0x9c3f97, 0x1bf87a, 0x9d3e96, 0x19fb7b, 0x9a3f97, 0x18fc7a, 0x983d91, 0xe5fd7a, 0x9e4393, 0xe6f87b, 0x914192, 0xe7fb7b, 0x944c9d, 0xe5f97b, 0x954d9e, 0xf9ff7d, 0x924e99, 0xfbff7a, 0x934f98, 0xf5ff79, 0x905198, 0xf2fa46, 0x92539a, 0xf2fa44, 0xac5d9a, 0xf1fb47, 0xa85f9a, 0xfefc41, 0xad5e9a, 0xfcfc40, 0xb16399, 0xf9fe4f, 0xbf629a, 0xf9fe4f, 0xba679d, 0xf9fe49, 0xbb669a, 0x86f048, 0xbb659c, 0x82f64d, 0xba649c, 0x8cf453, 0xb8799c, 0x8af753, 0xbb7a9d, 0x95f153, 0xb9789f, 0x93f154, 0xba799e, 0x92fe57, 0xb47b9e, 0x91ff56, 0xb57c91, 0x94fe57, 0x8b7e92, 0x96fe56, 0x8c8193,
				0x9afc51, 0x898793, 0x99fc52, 0x978690, 0x9cf12f, 0x9b8791, 0x9df22c, 0x998197, 0x9bf02e, 0x9b9e97, 0x9af32f, 0x9b9896, 0x98f020, 0x9d9591, 0x95f73f, 0x8d9d89, 0xaff13e, 0x9d8485, 0xc51448, 0xb9bc9f, 0x1f7b75, 0xd59b82, 0x326e7d, 0xc79382, 0x316b75, 0xc9938f, 0x3e6677, 0xcc9483, 0x3b6374, 0xcc9483, 0x3b6277, 0xc29781, 0x3b6277, 0xcc9781, 0x396077, 0xca9781, 0x3f6077, 0xc89581, 0x3f6077, 0xc99681, 0x3f6077, 0xc99681, 0x3f6077, 0xc99681, 0x3f6077, 0xc99681, 0x3f6077, 0xc99681, 0x3f6077, 0xc99681, 0x3f6077, 0xc99681, 0x3f6077, 0xc99681, 0x3f6077, 0xc99681, 0x3f6077, 0xc99681, 0x3f6077, 0xc99681, 0x3f6077, 0xca9781, 0x3f6077, 0xca968d, 0x396275, 0xd69082, 0x386174 };
		System.arraycopy(aFor, 0, key, 48010, aFor.length);
	}

	private static void init162(int[] key) {
		int[] aFor = { 0xce9782, 0x386174, 0xce9782, 0x386174, 0xce9782, 0x386174, 0xce9782, 0x386174, 0xce9782, 0x386174, 0xce9782, 0x386174, 0xce9782, 0x386174, 0xce9782, 0x386174, 0xce9780, 0x386174, 0xce9782, 0x386174, 0xce9782, 0x386174, 0xce9782, 0x386174, 0xcf9683, 0x396075, 0xcf9683, 0x396075, 0xcc9586, 0x386174, 0xcf9681, 0x376a7a, 0xdb9081, 0x157b72, 0xbea39f, 0x3e617d, 0x6ad0a1, 0x507372, 0x11d7a9, 0x5b7c4b, 0x16d2a8, 0x586249, 0x8d2ab, 0x58624b, 0xad3aa, 0x596148, 0xed0ab, 0x596148, 0x1d2aa, 0x596148, 0xd5ab, 0x5a604f, 0x1d6aa, 0x5d614c, 0x3d7a8, 0x5d614c, 0x2d6a9, 0x626e4f, 0xd7a9, 0x636d4e, 0xd7a9, 0x636d4e, 0x7d6a6, 0x626a4f, 0xbd7a6, 0x626a4f, 0x9d4a5, 0x656b4e, 0x9d4a7, 0x64144d, 0xad5a6, 0x64144d, 0x14d5a1, 0x65174c, 0x11d4a0, 0x65174c, 0x10d3a1, 0x66164f, 0x11d0a0,
				0x66164f, 0x1ed1a1, 0x67194e, 0x1cd0a1, 0x67194e, 0x1cd0a1, 0x601a51, 0x1cd0a1, 0x611b50, 0x1ed1a1, 0x9f1d52, 0x1cd0a0, 0x9f1d52, 0x1bd3a1, 0x9d0354, 0x1bd3a1, 0x9d0354, 0x17d3a0, 0x9d0354, 0x11d3a7, 0x9c0052, 0x15d1a5, 0x9d1d4a, 0x6c9b8, 0xb22840, 0x7dc1b6, 0x993041, 0x6fc7b8, 0x953e4f, 0x6dc6b5, 0x983342, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6cc7b6, 0x9a3140, 0x6fc4b5,
				0x993243, 0x61cabb, 0x983047, 0x68c5bf, 0xb02e4d, 0x9f1b9, 0xab264f, 0x33f2b9, 0xa42440, 0x3ff2b4, 0xa52444, 0x3df1b5, 0xab2747, 0x38f3b3, 0xa92247, 0x38f2b4, 0xa93f45, 0x24f4b5, 0xae3c58, 0x26f4b6, 0xa1335b, 0x27f5b7, 0xa2305c, 0x21f4b0, 0xa3375b, 0x23f6b0, 0x5c365a, 0x2788b3, 0x5f3355, 0x288abc, 0x5f3355, 0x2c84b3, 0x5d3157, 0x2d85b2, 0x433751, 0x2886b5, 0x423656, 0x2a86b4, 0x4d2955, 0x2887b4, 0x4a2c6a, 0x2a85b6, 0x4a2c6a, 0x158ab4, 0x482c69, 0x138fb4, 0x452c6f, 0x108db4, 0x412f6e, 0xfb1b7, 0x472c61, 0xb0b2, 0x462d61, 0x5b4b3, 0x462d61, 0x4b5b2, 0x3b2062, 0x6b5b6, 0x3c2767, 0x6b5b5, 0x3e2565, 0xbabb5, 0x3e2565, 0xcabaa, 0x3c2767, 0x11adaa, 0x3d2466, 0x14acac, 0x3c2b65, 0x1aaea2, 0x3f2a64, 0x1ba9a3, 0x382b65, 0x27aba1, 0x3a2b62, 0x2655a7, 0x302865, 0x2452a7, 0x342966,
				0x3b53a4, 0x30241b, 0x3752a5, 0x312718, 0x3752a4, 0x34211f, 0x3550a4, 0x352018, 0x354ea5, 0x34221f, 0x304ba6, 0x352d11, 0x3672a3, 0x352b0f, 0x3d72a5, 0x191e11, 0x5e9caf, 0x2b397a, 0x8af193, 0x43156a, 0xa4e397, 0x54166f, 0xa2e194, 0x57156d, 0xa4e698, 0x53116f, 0xa5e799, 0x53126a, 0xaae79c, 0x53126a, 0xa4e79c, 0x51106a, 0xa2e79c, 0x51106a, 0xa6e59c, 0x51106a, 0xa7e69c, 0x51106a, 0xa7e69c, 0x51106a, 0xa7e69c, 0x51106a, 0xa7e69c, 0x51106a, 0xa7e69c, 0x51106a, 0xa7e69c, 0x51106a, 0xa7e69c, 0x51106a, 0xa7e69c, 0x51106a, 0xa7e69c, 0x51106a, 0xa7e69c, 0x51106a, 0xa7e69c, 0x51106a, 0xa4e79c, 0x51106a, 0xa5e593, 0x56116b, 0xb9e39c, 0x57126a };
		System.arraycopy(aFor, 0, key, 48310, aFor.length);
	}

	private static void init163(int[] key) {
		int[] aFor = { 0xa1e49c, 0x57126a, 0xa1e49c, 0x57126a, 0xa1e49c, 0x57126a, 0xa1e49c, 0x57126a, 0xa1e49c, 0x57126a, 0xa1e49c, 0x57126a, 0xa1e49c, 0x57126a, 0xa1e49c, 0x57126a, 0xa1e49c, 0x57126a, 0xa1e49c, 0x57126a, 0xa1e49c, 0x57126a, 0xa1e49c, 0x57126a, 0xa0e59d, 0x56136b, 0xa0e59d, 0x56136b, 0xa3e698, 0x56136b, 0xaeeb9d, 0x571661, 0xbcef9b, 0x720669, 0xd9de84, 0x591c66, 0xdadba, 0x370e69, 0x76aab2, 0x3f0053, 0x72aeb0, 0x3c1e51, 0x6caeb3, 0x3c1e53, 0x6daeb3, 0x3e1c51, 0x69adb2, 0x3f1d50, 0x69afb3, 0x3e1c57, 0x67a8b4, 0x3d1d50, 0x66abb5, 0x3d1d50, 0x63abb4, 0x3d1d50, 0x62aab5, 0x21253, 0x63aab6, 0x11350, 0x62a9b7, 0x11350, 0x65a8b8, 0x11350, 0x69afb8, 0x1251, 0x69afb8, 0x31152, 0x6faeb9, 0x26e55, 0x6faebf, 0x16f54, 0x71aeb8, 0x6c55, 0x71afbe, 0x6c55, 0x74afb9, 0x26a57, 0x75acb8,
				0x36956, 0x7baeb8, 0x26657, 0x7baeb8, 0x16748, 0x7aaea7, 0x16748, 0x7dadb8, 0x6649, 0x7facb8, 0xff674a, 0x7eabb9, 0xff674a, 0x7ba9b9, 0xfe664d, 0x78b6b8, 0xfd794c, 0x74b6bf, 0xfd794c, 0x77a9be, 0xfb7b4a, 0x73abbc, 0xfb6753, 0x60b3a1, 0xd45259, 0x1bbbaf, 0xff4a58, 0xabca0, 0xf04557, 0x8bdad, 0xfd485a, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xff4a58, 0x9bcae, 0xfc495b, 0x9bcae, 0xff4a58, 0x7b2a0, 0xfe485c,
				0x10bea4, 0xc5564b, 0x708dbb, 0xd25849, 0x4a8cbf, 0xdd5a46, 0x478db2, 0xdd5b40, 0x458eb1, 0xd35843, 0x408cb7, 0xd15d43, 0x408db0, 0xd14041, 0x5c8bb1, 0xd6435c, 0x5e8bb2, 0xd94c5f, 0x5f8ab3, 0xda4f58, 0x598bb4, 0xdb485f, 0x5b89b4, 0x24495e, 0x5ff7b7, 0x274c51, 0x50f5b8, 0x274c51, 0x54fbb7, 0x254e53, 0x55fab6, 0x3b4855, 0x50f9b1, 0x3a4952, 0x52f9b0, 0x355651, 0x50f8b0, 0x32536e, 0x52fab2, 0x32536e, 0x6df5b0, 0x30536d, 0x6bf0b0, 0x3d536b, 0x68f2b0, 0x39506a, 0x77ceb3, 0x3f5365, 0x78cfb6, 0x3e5265, 0x7dcbb7, 0x3e5265, 0x7ccab6, 0x435f66, 0x7fcbb5, 0x465a65, 0x7fcbb4, 0x48447b, 0x7dcaab, 0x494764, 0x78caaa, 0x574166, 0x7bc8aa, 0x504061, 0x79c8ab, 0x514f62, 0x77caa5, 0x524e63, 0x76cda4, 0x554f62, 0x4acfa6, 0x574f65, 0x4b31a0, 0x5d4c62, 0x4936a0, 0x594d61, 0x5637a3, 0x5d401c,
				0x5a36a2, 0x5c431f, 0x5936a2, 0x5a431e, 0x5a30a2, 0x5a411e, 0x5a31a2, 0x5a5f19, 0x5b34a0, 0x585c16, 0x583da6, 0x58600b, 0x5b3aa2, 0x4f5e0f, 0x6630a0, 0x2db71d, 0x5b10cf, 0xc4d42e, 0x835dc, 0xe0c727, 0x1a3ad8, 0xeccc20, 0x1f3fd3, 0xeacc27, 0x193fd4, 0xefc922, 0x183fd6, 0xefc922, 0x193fd4, 0xecc822, 0x1f3fda, 0xeac922, 0x1c3fd4, 0xebca22, 0x1d3cd4, 0xebca22, 0x1d3cd4, 0xebca22, 0x1d3cd4, 0xebca22, 0x1d3cd4, 0xebca22, 0x1d3cd4, 0xebca22, 0x1d3cd4, 0xebca22, 0x1d3cd4, 0xebca22, 0x1d3cd4, 0xebca22, 0x1d3cd4, 0xebca22, 0x1d3cd4, 0xebca22, 0x1d3cd4, 0xebca22, 0x1e3dd4, 0xebca22, 0x1f3fdb, 0xeccb23, 0x339d4, 0xedc822 };
		System.arraycopy(aFor, 0, key, 48610, aFor.length);
	}

	private static void init164(int[] key) {
		int[] aFor = { 0x1b3ed4, 0xedc822, 0x1b3ed4, 0xedc822, 0x1b3ed4, 0xedc822, 0x1b3ed4, 0xedc822, 0x1b3ed4, 0xedc822, 0x1b3ed4, 0xedc822, 0x1b3ed4, 0xedc822, 0x1b3ed4, 0xedc822, 0x1b3ed4, 0xedc822, 0x1b3ed4, 0xedc822, 0x1b3ed4, 0xedc822, 0x1b3ed4, 0xedc822, 0x1a3fd5, 0xecc923, 0x1a3fd5, 0xecc923, 0x1a3fd7, 0xefca24, 0x1732d2, 0xeecf2e, 0x536d4, 0xcbdf26, 0x6007cb, 0xe0c529, 0xb375f2, 0x8ad720, 0xca74fa, 0x83de1b, 0xcf73f9, 0x81c318, 0xce6cf9, 0x81c326, 0xd073c6, 0x82c227, 0xd472c5, 0x82c227, 0xd470c4, 0x82c227, 0xda71c5, 0x83c526, 0xd970c2, 0x82c627, 0xdc70c3, 0x82c627, 0xe27ec1, 0x82c627, 0xe37ec2, 0x81c724, 0xe27dc3, 0x86c62b, 0xe27dc3, 0x86c62b, 0xee7ac3, 0x86c62b, 0xef7bc2, 0x85c528, 0xe97ac3, 0x84ba2f, 0xe97ac5, 0x84ba2f, 0xeb7ac4, 0x9bbb28, 0xeb79c2, 0x9aba29, 0xee79c5,
				0x9bbd28, 0xed78c6, 0x9bbd28, 0xec7bc5, 0x94bc2b, 0xed74c4, 0x94bc2b, 0xee74c5, 0x95bd2a, 0xe977da, 0x95bd2a, 0xea77db, 0x95bd2a, 0x1576d8, 0x94ba2b, 0x1777d9, 0x93b92a, 0x1676de, 0x93b92a, 0x1469d9, 0x9da62a, 0x1469db, 0x9fb82e, 0x1877db, 0x90bb34, 0xa68c5, 0xbe893d, 0x7160cb, 0x95913c, 0x6067c4, 0x9a9e33, 0x6266c9, 0x96923f, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc, 0x93973a, 0x6561cc,
				0x93973a, 0x6662cf, 0x909439, 0x686cc1, 0x92973c, 0x7f62cb, 0xac8426, 0x1f53cb, 0xbf803b, 0x2753ce, 0xb08537, 0x2a52c3, 0xb08530, 0x2850c1, 0xbe8633, 0x2d52c7, 0xbc8333, 0x2d53c0, 0xbc9e31, 0x3155c1, 0xbb9d2c, 0x3355c2, 0xb4922f, 0x3254c3, 0xb79128, 0x3455c4, 0xb6962f, 0x3657c4, 0x49972e, 0x3229c7, 0x4a9221, 0x3d2bc8, 0x4a9221, 0x3925c7, 0x489023, 0x3824c6, 0x569625, 0x3d27c1, 0x579722, 0x3f27c0, 0x588821, 0x3d26c0, 0x5f8d1e, 0x3f24c2, 0x5f8d1e, 0x2bc0, 0x5d8d1d, 0x62ec0, 0x508d1b, 0x52cc0, 0x548e1a, 0x1a10c3, 0x528d15, 0x1511c6, 0x538c15, 0x1015c7, 0x538c15, 0x1114c6, 0x2e8116, 0x1215c5, 0x2b8415, 0x1215c4, 0x259a0b, 0x1117c4, 0x259a0b, 0x1417c5, 0x3a9d0e, 0x1115c5, 0x3a9d0e, 0x1315c4, 0x3b920d, 0x1d17ca, 0x38930c, 0x1c10cb, 0x3f920d, 0x2012c9, 0x3d920a, 0x21eccf,
				0x36920c, 0x22e8ce, 0x32930f, 0x3de9cd, 0x369e72, 0x31e8cc, 0x349d71, 0x31e8cc, 0x339c71, 0x33eecc, 0x339f70, 0x33efcb, 0x338171, 0x33edc6, 0x338772, 0x36ebcb, 0x32837f, 0x36e7ce, 0x31b867, 0x3de3c7, 0x1c8462, 0x5502de, 0x21a710, 0x8660f0, 0x518907, 0xa676f8, 0x508103, 0xa675f6, 0x508005, 0xa373f6, 0x558500, 0xa273f4, 0x558500, 0xa373f6, 0x558500, 0xa073f8, 0x558500, 0xa373f6, 0x548600, 0xa270f6, 0x548600, 0xa270f6, 0x548600, 0xa270f6, 0x548600, 0xa270f6, 0x548600, 0xa270f6, 0x548600, 0xa270f6, 0x548600, 0xa270f6, 0x548600, 0xa270f6, 0x548600, 0xa270f6, 0x548600, 0xa270f6, 0x548600, 0xa270f6, 0x548600, 0xa171f6, 0x548600, 0xa073f9, 0x538701, 0xbc75f6, 0x528400 };
		System.arraycopy(aFor, 0, key, 48910, aFor.length);
	}

	private static void init165(int[] key) {
		int[] aFor = { 0xa472f6, 0x528400, 0xa472f6, 0x528400, 0xa472f6, 0x528400, 0xa472f6, 0x528400, 0xa472f6, 0x528400, 0xa472f6, 0x528400, 0xa472f6, 0x528400, 0xa472f6, 0x528400, 0xa472f6, 0x528400, 0xa472f6, 0x528400, 0xa472f8, 0x528400, 0xa472f8, 0x528400, 0xa472f8, 0x528400, 0xa472f6, 0x528400, 0xa771f5, 0x528400, 0xaa7cf6, 0x53810a, 0xb979f3, 0x779001, 0xdb49ef, 0x5b8b0d, 0x83bd6, 0x319904, 0xe3bdf, 0x46933d, 0xa3edf, 0x47913f, 0x83ede, 0x479101, 0x173ede, 0x458f3f, 0x133fdd, 0x458f3f, 0x103edd, 0x468c3e, 0x103edd, 0x488a38, 0x123fdc, 0x498939, 0x123fdc, 0x4e883a, 0x2e30dc, 0x718739, 0x2e30dc, 0x4e883a, 0x2d32dd, 0x498935, 0x2d32dd, 0x498935, 0x2e32d2, 0x468e3a, 0x2e32d2, 0x478f3b, 0x2c31d1, 0x408e3a, 0x2d4ed0, 0x408e3a, 0x2f4ed1, 0x408e3a, 0x304fd6, 0x418d3b, 0x354ed7, 0x418d3b,
				0x3449d6, 0x428c38, 0x354ad5, 0x428c38, 0x3a4bd6, 0x438339, 0x394bd6, 0x438339, 0x384ad6, 0x448026, 0x3a49d6, 0x458327, 0xc548d5, 0x448426, 0xc749d2, 0x448426, 0xc04ad5, 0x448426, 0xc24bd4, 0x448426, 0xcd4bd5, 0x469a20, 0xc155d5, 0x469e3b, 0xdc4dca, 0x68ac32, 0xa745c4, 0x44b532, 0xb143ca, 0x48bb3c, 0xbf4cc5, 0x4bb833, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36, 0xb84bc0, 0x4ebd36,
				0xbb48c3, 0x4dbe35, 0xb447cc, 0x4ebc31, 0xa349c6, 0x71ac2a, 0xc37ac6, 0x62a836, 0xfa7bc5, 0x6dad32, 0xf675c5, 0x6ca231, 0xf477c3, 0x62a237, 0xf176c3, 0x60a431, 0xf174c0, 0x7eba31, 0xf371c1, 0x79b92c, 0xf171c2, 0x76b62f, 0xf070c3, 0x76b62f, 0xf572c3, 0x77b128, 0xf770c3, 0x88b029, 0xf30ec0, 0x8bb526, 0xfc0ccf, 0x8bb526, 0xf802c0, 0x89b724, 0xf802c2, 0x96b021, 0xfd01c5, 0x97b126, 0xff01c4, 0x97b126, 0xf21fc7, 0x90b419, 0xf01dc5, 0x90b419, 0xcf12c7, 0x92b41a, 0xc917c7, 0x9fb41c, 0xca15c7, 0x9bb71d, 0xd529c4, 0x9db412, 0xda28c1, 0x9cb512, 0xdf2cc0, 0x9cb512, 0xde2dc1, 0xe1b811, 0xdd2cc2, 0xe4bd12, 0xde2fc0, 0xe6bf10, 0xd331c0, 0xe7bc0f, 0xd631c1, 0xf9ba0d, 0xd533c1, 0xf9ba0d, 0xd032c7, 0xf8b50e, 0xde30c9, 0xfbb40f, 0xdf37c8, 0xfcb50e, 0xe335ca, 0xfeb509, 0xe2cbcc, 0xf5b50f,
				0xe1cfcd, 0xf1b40c, 0xfecece, 0xf5b971, 0xf2cfcf, 0xf7ba72, 0xf2cfcd, 0xf1ba73, 0xf1c9cd, 0xf1bb72, 0xf1cace, 0xf1ba77, 0xf1d4c1, 0xf1b875, 0xf1dfc4, 0xf1b776, 0xf2dec2, 0xf0ba6d, 0xf3e1c8, 0xf8ba6a, 0xddd4d8, 0x9b5762, 0xe5fdb3, 0x582442, 0xb7d9bd, 0x452c47, 0xbcdbbf, 0x402348, 0xb6d7bd, 0x45244e, 0xb3d2ba, 0x45244e, 0xb3d2b8, 0x452440, 0xb0d2ba, 0x452440, 0xb3d2b6, 0x452442, 0xb3d2b4, 0x452442, 0xb3d2b4, 0x452442, 0xb3d2b4, 0x452442, 0xb3d2b4, 0x452442, 0xb3d2b4, 0x452442, 0xb3d2b4, 0x452442, 0xb3d2b4, 0x452442, 0xb3d2b4, 0x452442, 0xb3d2b4, 0x452442, 0xb3d2b4, 0x452442, 0xb3d2b4, 0x452442, 0xb0d3b4, 0x452442, 0xb1d1bb, 0x422543, 0xadd7b4, 0x432642 };
		System.arraycopy(aFor, 0, key, 49210, aFor.length);
	}

	private static void init166(int[] key) {
		int[] aFor = { 0xb5d0b4, 0x432642, 0xb5d0b4, 0x432642, 0xb5d0b4, 0x432642, 0xb5d0b4, 0x432642, 0xb5d0b4, 0x432642, 0xb5d0b4, 0x432642, 0xb5d0b4, 0x432642, 0xb5d0b4, 0x432642, 0xb5d0b4, 0x432642, 0xb5d0b4, 0x432642, 0xb5d0ba, 0x432642, 0xb5d0ba, 0x432642, 0xb5d0ba, 0x40254d, 0xb5d0b8, 0x43264e, 0xb6d3bb, 0x43264e, 0xbbdeb8, 0x422344, 0xa8dbbd, 0x67314e, 0xcbe8a0, 0x4a2b43, 0x1e9a9f, 0x263b4e, 0x199995, 0x5e3e74, 0x159295, 0x593c4a, 0x1792aa, 0x593c74, 0x993ab, 0x58234b, 0xd8caa, 0x58234b, 0xc93aa, 0x592248, 0xf90ab, 0x58234f, 0x197ac, 0x5b2248, 0x94ad, 0x5b2248, 0x594ac, 0x5b2248, 0x594ac, 0x5a2349, 0x389aaf, 0x5b2048, 0x389aaf, 0x5b2048, 0x3c9baf, 0x5b2048, 0x339ca0, 0x5a2149, 0x319fa3, 0x5d2048, 0x30e0a2, 0x5d2048, 0x32e0a3, 0x5c5f49, 0x339fa2, 0x435e4e, 0x309ca5, 0x445f49,
				0x319ba4, 0x475e4a, 0x319ba6, 0x465d4b, 0x3e9aa5, 0x465d4b, 0x3f9aa5, 0x45524a, 0x3f9aa4, 0x44534b, 0x3a9abb, 0x44534b, 0x3b99ba, 0xbb5248, 0x399ebb, 0xbb5248, 0x389fba, 0xbc5149, 0x3a9fbd, 0xbc504f, 0x359fbc, 0xbc4d49, 0x3b82bc, 0xbc4952, 0x249aa3, 0x977a54, 0x5992a1, 0xba6257, 0x4995af, 0xb06d59, 0x479aa0, 0xb36e56, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb66b53, 0x409da5, 0xb56850,
				0x409da5, 0xb66b53, 0x4f92aa, 0xb56957, 0x5e9aa2, 0x8a7f4f, 0x3da8a3, 0x9e7a4d, 0x7abbf, 0x917e49, 0x9a9bf, 0x9e7e4c, 0x8abb8, 0x9e7e4c, 0xdaab8, 0x9c784a, 0xda8bb, 0x82664a, 0xfadba, 0x856557, 0xdadb9, 0x8a6a54, 0xdadb9, 0x8b6b55, 0xfaeb8, 0x8d6d53, 0xdacb8, 0x726c52, 0x9d2bb, 0x71695d, 0x6d0b4, 0x71695d, 0x2debb, 0x736b5f, 0x2deb9, 0x6d6d5d, 0x6dcb9, 0x6c6c5a, 0x4dcb8, 0x6c6c5a, 0x9c2bb, 0x6b6965, 0xac3b8, 0x6a6a64, 0x35ccba, 0x686a67, 0x33c9ba, 0x656a61, 0x30cbba, 0x616960, 0x2ff7b9, 0x676a6f, 0x20f6bc, 0x666b6f, 0x25f2bd, 0x666b6f, 0x24f3bc, 0x1b666c, 0x27f2bf, 0x1e636f, 0x27f2be, 0x107d71, 0x25f3a1, 0x117e6e, 0x20f3a0, 0xf786c, 0x23f1a0, 0x8796b, 0x21f1a1, 0x67769, 0x20f2ae, 0x57668, 0x21f5af, 0x27769, 0x22f6ac, 0x3f766f, 0x2308aa, 0x347669, 0x210daa, 0x31766b,
				0x3e0ca9, 0x357b16, 0x320da8, 0x347815, 0x310daa, 0x337917, 0x320ba9, 0x327a16, 0x320aaa, 0x327a16, 0x3214a0, 0x327814, 0x3117a3, 0x307c16, 0x3015a3, 0x307612, 0x3029be, 0x347214, 0x2717a5, 0xf7a17, 0x57f7d6, 0xf5313e, 0x10c9c1, 0xe1313f, 0x1bcbc5, 0xe23e31, 0x14cac4, 0xe13f33, 0x17c9c5, 0xe13f31, 0x17c9c7, 0xe13f3f, 0x14c9c5, 0xe13f3f, 0x17c9c9, 0xe13f3d, 0x17c9cb, 0xe13f3d, 0x17c9cb, 0xe13f3d, 0x17c9cb, 0xe13f3d, 0x17c9cb, 0xe13f3d, 0x17c9cb, 0xe13f3d, 0x17c9cb, 0xe13f3d, 0x17c9cb, 0xe13f3d, 0x17c9cb, 0xe13f3d, 0x17c9cb, 0xe13f3d, 0x17c9cb, 0xe13f3d, 0x17c9cb, 0xe13f3d, 0x14c8cb, 0xe13f3d, 0x15cac4, 0xe73933, 0x8cbc4, 0xe63a32 };
		System.arraycopy(aFor, 0, key, 49510, aFor.length);
	}

	private static void init167(int[] key) {
		int[] aFor = { 0x13cfc5, 0xe63a32, 0x13cfc5, 0xe63a32, 0x13cfc5, 0xe63a32, 0x13cfc5, 0xe63a32, 0x13cfc5, 0xe63a32, 0x13cfc5, 0xe63a32, 0x13cfc5, 0xe63a32, 0x13cfc5, 0xe63a32, 0x13cfc7, 0xe63a32, 0x13cfc5, 0xe63a32, 0x13cfc5, 0xe63a32, 0x13cfc5, 0xe63a32, 0x13cfc5, 0xe63a32, 0x13cfc7, 0xe53931, 0x10ccc4, 0xe43830, 0x13cfc7, 0xea3239, 0x1cbc5, 0xce2136, 0x63fbd9, 0xe2383a, 0xb689e6, 0x8e2837, 0xb18aec, 0xf62d0d, 0xbf80ec, 0xf32e33, 0xbd80d3, 0xf32e0d, 0xa381d2, 0xf23132, 0xa79ed1, 0xf23132, 0xa681d3, 0xf23132, 0xa780d0, 0xf03334, 0xa987d7, 0xf33233, 0xa884d6, 0xf33233, 0xad84d7, 0xf33233, 0xad84d7, 0xf23332, 0x938bd7, 0xf13231, 0x9288d6, 0xf13231, 0x9788d7, 0xf03330, 0x988fd8, 0xf13231, 0x9b8cdb, 0xf03330, 0x9c8cdb, 0xf14c37, 0x9c8cdd, 0xf14c37, 0x9ff3dd, 0xef3231, 0x9ef1da,
				0xef3231, 0x9df6dd, 0xe93033, 0x9ff5df, 0xe83332, 0x9ff5df, 0xe73231, 0x9ff5df, 0xe73231, 0x9dfadf, 0xe63330, 0x9af9c0, 0xe63330, 0x98fac0, 0x183132, 0x99fdc1, 0x183132, 0x99fdc1, 0x1b3333, 0x9ffdc0, 0x1b3333, 0x9dfcc1, 0x152d35, 0x93e3c1, 0x15292c, 0x82fbde, 0x332429, 0xfecddc, 0x1d3d2a, 0xeecad2, 0x163224, 0xe1c5dd, 0x15312b, 0xe6c2d8, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1d9, 0x10342e, 0xe5c1db, 0x10342e, 0xe5c1db, 0x10342e, 0xe5c1db, 0x10342e, 0xe5c1db, 0x10342e, 0xe5c1db, 0x10342e, 0xe5c1db,
				0x10342e, 0xe4c0da, 0x11352f, 0xe9cdd7, 0x10372b, 0xfec4dd, 0x27232d, 0x9bf8c2, 0x3c2b2c, 0xa6fadc, 0x302f2a, 0xa7f9df, 0x312c2b, 0xa7f9dd, 0x312c2b, 0xa5ffdf, 0x372e2d, 0xa6fedc, 0x29302d, 0xa4fbdd, 0x2e3332, 0xa6fbdc, 0x213c31, 0xa6fbdc, 0x203d30, 0xa4f8dd, 0x263b36, 0xa6fadd, 0xd93a37, 0xa284de, 0xda3f38, 0xad86d1, 0xda3f38, 0xa988de, 0xdb3e3b, 0xaa8bdd, 0xc53839, 0xae89dd, 0xc4393e, 0xac89dc, 0xc4393e, 0xa197df, 0xc33c01, 0xa296dc, 0xc23f00, 0x9d99de, 0xc03f03, 0x9b9cde, 0xcd3f05, 0x989ede, 0xc93c04, 0x87a2dd, 0xcf3f0b, 0x88a3d8, 0xce3e0b, 0x8da7d9, 0xce3e0b, 0x8ca6d8, 0xb23217, 0x8ea6c4, 0xb73714, 0x8ea6c5, 0xb9290a, 0x8da4c5, 0xbe280b, 0x8ea4c6, 0xa02e0d, 0x8ba6c6, 0xa1210c, 0x88a9c6, 0xaf2f0e, 0x89aac9, 0xac2e0f, 0x88adc8, 0xab2f0e, 0x8baecb, 0x962e08, 0x8a50cd,
				0x9d2e0e, 0x8855cd, 0x99290f, 0x9653cd, 0x9d2472, 0x9a52cc, 0x9c2771, 0x9954cf, 0x9d2672, 0x9c57cf, 0x9c2773, 0x9c48cd, 0x9c2676, 0x9e4ace, 0x9f217b, 0x9f48c8, 0x9f2f79, 0x9f45cf, 0x9e2d7a, 0x9a4ac2, 0x981473, 0x9b4ddd, 0x9d1f7d, 0xa86ace, 0xd5c618, 0x1920e5, 0xf1d518, 0xb2ee5, 0xf3da16, 0x629e0, 0xf3dc17, 0x72ae2, 0xf3dc11, 0x629e4, 0xf3dc13, 0x729e9, 0xf3dc10, 0x629e5, 0xf3dc16, 0x629e3, 0xf3dc14, 0x629e3, 0xf3dc14, 0x629e3, 0xf3dc14, 0x629e3, 0xf3dc14, 0x629e3, 0xf3dc14, 0x629e3, 0xf3dc14, 0x629e3, 0xf3dc14, 0x629e3, 0xf3dc14, 0x629e1, 0xf3dc14, 0x629e1, 0xf3dc14, 0x629e1, 0xf3dc14, 0x72ae1, 0xf3dc14, 0x729ed, 0xf5da1a, 0x1a28ed, 0xf4d91b };
		System.arraycopy(aFor, 0, key, 49810, aFor.length);
	}

	private static void init168(int[] key) {
		int[] aFor = { 0x2ded, 0xf4d91b, 0x2ded, 0xf4d91b, 0x2ded, 0xf4d91b, 0x2ded, 0xf4d91b, 0x2ded, 0xf4d91b, 0x2ded, 0xf4d91b, 0x2ded, 0xf4d91b, 0x2ded, 0xf4d91b, 0x2def, 0xf4d91b, 0x2ded, 0xf4d91b, 0x2ded, 0xf4d91b, 0x2ded, 0xf4d91b, 0x12cec, 0xf5d81a, 0x2def, 0xf5d81a, 0x2def, 0xf4d91b, 0x32eec, 0xfbd211, 0x102bed, 0xdfc118, 0x721be9, 0xf0df0f, 0xa46ed3, 0x9ccf02, 0xa36dd9, 0xe4ca38, 0xac66d8, 0xe6c838, 0xab67d8, 0xe5c906, 0xaa67d8, 0xfbd738, 0xaf67db, 0xfac838, 0xae78d9, 0xfac838, 0xaf79da, 0xf8ca3e, 0xa17edd, 0xfbcb39, 0xa07ddc, 0xfbcb39, 0xa57ddd, 0xfbcb39, 0xa47cdc, 0xc4c43a, 0xa67ddc, 0xc4c43a, 0xa77edd, 0xc3c535, 0xa57fd3, 0xc2c434, 0xaa78dc, 0xc3c535, 0xa97bdf, 0xc2c434, 0xae7bdf, 0xc2c434, 0xaf04de, 0xc3bb37, 0xad04dd, 0xddc531, 0xac06da, 0xddc531, 0xaf01dd, 0xdcc430,
				0xaa01dc, 0xdcc430, 0xab02dd, 0xdcc430, 0xa403de, 0xdcc430, 0xa60cde, 0xdcc430, 0xa00ec0, 0xdbc72f, 0xa50edf, 0x25c52d, 0xa409de, 0x24c22c, 0xa50edf, 0x27c32b, 0xa30dd8, 0x27c32b, 0xa10cd9, 0x26dd2d, 0xa312d9, 0x26d934, 0xb30bc5, 0x3d533, 0xce3cc6, 0x2ccd30, 0xdf3ac8, 0x27c23e, 0xd035c7, 0x24c131, 0xd732c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c2, 0x21c434, 0xd530c0, 0x21c434, 0xd530c0, 0x21c434, 0xd530c0, 0x21c434, 0xd530c0, 0x21c434, 0xd530c0, 0x20c535, 0xd530c0, 0x21c434, 0xd530c0, 0x20c535,
				0xd732c2, 0x2ec938, 0xdf3ecf, 0x2d23c, 0xc60dce, 0x68db3e, 0xf509cf, 0x6fde39, 0xf707ce, 0x62d13a, 0xf404cc, 0x62d13a, 0xf602ce, 0x64d33c, 0xf503cd, 0x7acd3c, 0xf706cc, 0x7dce23, 0xf506cd, 0x72c120, 0xf506cd, 0x73c021, 0xf705cc, 0x75c627, 0xf507cc, 0x8ac726, 0xf179cf, 0x89c229, 0xfe7bc0, 0x89c229, 0xfa75cf, 0x88c32a, 0xf976cc, 0x96c528, 0xfd74cc, 0x97c42f, 0xff74cd, 0x97c42f, 0xf26ace, 0x90c110, 0xf16bcd, 0x90c110, 0xcf67ce, 0x92c113, 0xc962ce, 0x9fc115, 0xca60ce, 0x9bc214, 0xd55ccd, 0x9cc21a, 0xdb5ec9, 0x9cc01d, 0xdf59cf, 0x9cc01d, 0xde58ce, 0xe0cc01, 0xdc58d2, 0xe5c902, 0xdc58d3, 0xebd71c, 0xde59cc, 0xead403, 0xdb59cd, 0xf4d201, 0xd85bcd, 0xf3d306, 0xda5bcc, 0xfddd04, 0xdb58c3, 0xfedc05, 0xda5fc2, 0xf9dd04, 0xd95cc1, 0xc4dc02, 0xd8a2c7, 0xcfdc04, 0xdaa7c7, 0xcbdb05,
				0xc4a1c7, 0xcfd678, 0xc8a0c6, 0xced57b, 0xc9a6c7, 0xcdd47a, 0xcca5c1, 0xccd57d, 0xcdbac3, 0xced47d, 0xccb8c7, 0xc8d37f, 0xccb8c7, 0xced171, 0xccbdc9, 0xccda7d, 0xc8b3c4, 0xc9d271, 0xcb8ec5, 0xcadd62, 0xd4bace, 0x8e280b, 0x24e4e3, 0xfc0c16, 0x7f3e9, 0xfb0912, 0xdffea, 0xfc0e19, 0xffbed, 0xfc0e1f, 0x8faeb, 0xfc0e1d, 0xffae4, 0xfc0e1c, 0x8fae8, 0xfc0e1a, 0x8faee, 0xfc0e18, 0x8faee, 0xfc0e18, 0x8faee, 0xfc0e18, 0x8faee, 0xfc0e18, 0x8faee, 0xfc0e18, 0x8faee, 0xfc0e18, 0x8faee, 0xfc0e18, 0x8faee, 0xfc0e18, 0x8faec, 0xfc0e18, 0x8faec, 0xfc0e18, 0x8faec, 0xfc0e18, 0xffbec, 0xfc0e18, 0x8fbe1, 0xfa0816, 0x14f9e0, 0xfa0816 };
		System.arraycopy(aFor, 0, key, 50110, aFor.length);
	}

	private static void init169(int[] key) {
		int[] aFor = { 0xffde1, 0xfa0816, 0xffde1, 0xfa0816, 0xffde1, 0xfa0816, 0xffde1, 0xfa0816, 0xffde1, 0xfa0816, 0xffde1, 0xfa0816, 0xffde1, 0xfa0816, 0xffde1, 0xfa0816, 0xffde3, 0xfa0816, 0xffde1, 0xfa0816, 0xffde1, 0xfa0816, 0xffde1, 0xfa0816, 0xffde1, 0xfb0917, 0xffde3, 0xfa0816, 0xefce2, 0xfd0f11, 0xaf8e6, 0xf30518, 0x18fce4, 0xd71611, 0x7bcfe1, 0xfb0d05, 0xa8bdde, 0x9f220c, 0xa280d6, 0xe72837, 0xae84d4, 0xe7290b, 0xab87d4, 0xe5370b, 0xb587e9, 0xe52908, 0xb686ea, 0xe23609, 0xb787eb, 0xe23609, 0xb484ea, 0xe23609, 0xb585ed, 0xed3108, 0xb784ec, 0xed3108, 0xb687ed, 0xea300b, 0xb587ee, 0xea300b, 0xb587ee, 0xd53f08, 0xb485ee, 0xd63e09, 0xb285e1, 0xd63e09, 0xb185e0, 0xd63e09, 0xbe82e1, 0xd43c0b, 0xb883e0, 0xd33d0a, 0xb883e2, 0xd43c0b, 0xba83e1, 0xd5430a, 0xa582e6, 0xd5430a, 0xa481e7,
				0xd5420c, 0xa481e5, 0xd7440e, 0xa082e3, 0xd8450d, 0xa082e3, 0xd8450d, 0xa28de2, 0xd94412, 0xa28dfd, 0xde470d, 0xa18dfc, 0x21460e, 0xa18dfc, 0x20410f, 0xa28cfb, 0x20410f, 0xa28ffd, 0x21400e, 0xa48ffa, 0x225f0f, 0xa790f9, 0x245914, 0xb789fb, 0x6560c, 0xcdb1ff, 0x2c410a, 0xdfb6f2, 0x274e04, 0xd1b8fc, 0x254c0a, 0xd6bff9, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bffb, 0x234a0c, 0xd6bff9, 0x234a0c, 0xd6bff9, 0x234a0c, 0xd6bff9, 0x234a0c, 0xd6bff9, 0x234a0c, 0xd7bef8, 0x224b0d, 0xd7bef8, 0x234a0c, 0xd0b9ff,
				0x244d0b, 0xd2bbfd, 0x24430a, 0xd5b6fc, 0x334505, 0xfea2fd, 0x4c750c, 0xeca6fc, 0x76710a, 0xe0a6ff, 0x75700b, 0xe3a5fd, 0x7b7105, 0xeca2f0, 0x7f7003, 0xeea0ec, 0x606f03, 0xeda4f1, 0x676c00, 0xefa4ee, 0x676c00, 0xe0abed, 0x656e06, 0xe6aaea, 0x656e06, 0xe4acea, 0x9b6c00, 0xe0d2e9, 0x98690f, 0xefd0e6, 0x98690f, 0xebdee9, 0x9a6b0d, 0xeadfe8, 0x846d0b, 0xe8dfee, 0x826f0d, 0xebdeee, 0x8d700e, 0xebdfec, 0x8a7531, 0xebdfec, 0x8b7630, 0xd4d0ee, 0x887532, 0xd3d6ef, 0x877736, 0xd1d5ea, 0x817433, 0xceebe9, 0x86763f, 0xceebeb, 0x887638, 0xcbefea, 0x887638, 0xcaeeeb, 0xf57b3b, 0xc9efe8, 0xf07e38, 0xc9efe9, 0xfe6026, 0xcbeef6, 0xff6339, 0xceeef7, 0xe1653b, 0xcdecf7, 0xe6643c, 0xcfecf6, 0xe86a3e, 0xceeff9, 0xeb6b3f, 0xcfe8f8, 0xec6a3e, 0xccebfb, 0xd16b38, 0xcd15fd, 0xda6b3e, 0xcf10fd,
				0xde6c3f, 0xd116fd, 0xdd6e3d, 0xda1883, 0xdd6e3d, 0xdb1b80, 0xdf683b, 0xde1980, 0xde693c, 0xde0682, 0xde683f, 0xdc0383, 0xdf6a38, 0xdb0381, 0xd96a37, 0xd90081, 0xd96a37, 0xd80280, 0xd96637, 0xd93b83, 0xdb632e, 0xc80181, 0xf27b36, 0x74d5e7, 0xba3613, 0x42c9ec, 0xb83310, 0x4cc6e9, 0xbf321f, 0x4bc4ea, 0xb83118, 0x4bc2eb, 0xbf361d, 0x4bc3e7, 0xb8371f, 0x4dc2ea, 0xb83719, 0x4dc2ec, 0xb8371b, 0x4dc2ec, 0xb8371b, 0x4dc2ec, 0xb8371b, 0x4dc2ec, 0xb8371b, 0x4dc2ec, 0xb8371b, 0x4dc2ec, 0xb8371b, 0x4dc2ec, 0xb8371b, 0x4dc2ec, 0xb8371b, 0x4dc2ee, 0xb8371b, 0x4dc2ee, 0xb8371b, 0x4dc2ee, 0xb8371b, 0x4cc1ee, 0xb8371b, 0x4cc2e2, 0xbd3014, 0x53c1e2, 0xbd3014 };
		System.arraycopy(aFor, 0, key, 50410, aFor.length);
	}

	private static void init170(int[] key) {
		int[] aFor = { 0x49c4e2, 0xbd3014, 0x49c4e2, 0xbd3014, 0x49c4e2, 0xbd3014, 0x49c4e2, 0xbd3014, 0x49c4e2, 0xbd3014, 0x49c4e2, 0xbd3014, 0x49c4e2, 0xbd3014, 0x49c4e2, 0xbd3014, 0x49c4e0, 0xbd3014, 0x49c4e2, 0xbd3014, 0x49c4e2, 0xbd3014, 0x49c4e2, 0xbd3014, 0x48c5e3, 0xbc3115, 0x48c5e1, 0xbd3014, 0x49c4e0, 0xba3713, 0x4dc0e4, 0xb53c19, 0x5ec5e5, 0x912f10, 0x3df6e0, 0xbd3404, 0xef9bdf, 0xd93b0d, 0xe499d7, 0xa13136, 0xe99ad4, 0xa1360a, 0xe89bd4, 0xa5340a, 0xea9beb, 0xa5340a, 0xf59aeb, 0xa63509, 0xf285e8, 0xa7340a, 0xf285e8, 0xa4370b, 0xf384ef, 0xab300a, 0xf185ee, 0xab300a, 0xf185ee, 0xaa330b, 0xf584ee, 0xaa330b, 0xf584ee, 0x953c08, 0xf486ee, 0x963d09, 0xf286e1, 0x963d09, 0xf087e1, 0x973c08, 0xff80e0, 0x953e0a, 0xfe80e0, 0x953e0a, 0xfe80e2, 0x923f0b, 0xfc80e1, 0x93400a, 0xe381e6,
				0x92430b, 0xe381e6, 0x92430b, 0xe087e7, 0x93420c, 0xe484e1, 0x93420c, 0xeb85e2, 0x93420c, 0xea85e2, 0x904d0d, 0xeb84e2, 0x904d0d, 0xee84fd, 0x914e0c, 0x1185fe, 0x914e0c, 0x1082ff, 0x924f0b, 0x1081f9, 0x934e0a, 0x1780f9, 0x91500c, 0x129ef9, 0x915714, 0x287fb, 0xb3580c, 0x78bfff, 0x994f0a, 0x6ab8f2, 0x924004, 0x64b6fc, 0x90420a, 0x63b1f9, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0fa, 0x96440c, 0x62b0f8, 0x96440c, 0x62b0f8, 0x96440c, 0x62b0f8, 0x96440c, 0x62b0f8, 0x96440c, 0x62b0f8, 0x96440c, 0x62b0f8,
				0x91430b, 0x62b0f8, 0x96440c, 0x63b1f9, 0x95490e, 0x66bef8, 0x8d4802, 0x5faffa, 0xec7a14, 0x4daaf8, 0xd47e0a, 0x43a6fc, 0xd47e04, 0x41aaf3, 0xd97e0b, 0x4eadfe, 0xdb7c0d, 0x4aace2, 0xc4630d, 0x49a8ff, 0xc3600e, 0x4ba8e0, 0xc3600e, 0x44a7e3, 0xc16208, 0x42a6e4, 0xc16208, 0x40a0e4, 0x3f600e, 0x44dee7, 0x3c6501, 0x4bdce8, 0x3c6501, 0x4fd2e7, 0x3e6703, 0x4ed3e6, 0x206105, 0x4cd3e0, 0x266303, 0x4fd2e0, 0x297c00, 0x4fd3e2, 0x2e793f, 0x4fd3e2, 0x2f7a3e, 0x70dce0, 0x2c793c, 0x77dae1, 0x237b38, 0x75d9e4, 0x25783d, 0x6ae7e7, 0x227a31, 0x6ae7e5, 0x2c7a36, 0x6fe3e4, 0x2c7a36, 0x6ee2e5, 0x517735, 0x6de3e6, 0x547236, 0x6de3e7, 0x5a6c28, 0x6fe2f8, 0x5b6f37, 0x6ae2f9, 0x446832, 0x68e1fe, 0x436935, 0x6ae1ff, 0x4d6737, 0x6be2f0, 0x4e6636, 0x6ae5f1, 0x496737, 0x69e6f2, 0x746631, 0x6818f4,
				0x7f6637, 0x6a1df4, 0x7b6136, 0x741bf4, 0x786334, 0x7f158a, 0x786334, 0x7d1588, 0x7e6633, 0x7e148a, 0x7e6530, 0x7e158c, 0x7e7b31, 0x7f178f, 0x7c7e32, 0x7f1789, 0x7d7e31, 0x7d1487, 0x7d7e33, 0x7d1786, 0x7d7233, 0x7d2d86, 0x7c7637, 0x7b2a9a, 0x5f4336, 0x32dff0, 0x8c071f, 0x63fbe0, 0x95011d, 0x60f7e7, 0x940210, 0x60f4e5, 0x930714, 0x60f4e7, 0x940011, 0x67f4e8, 0x940010, 0x60f4e2, 0x950111, 0x61f5e5, 0x950113, 0x61f5e5, 0x950113, 0x61f5e5, 0x950113, 0x61f5e5, 0x950113, 0x61f5e5, 0x950113, 0x61f5e5, 0x950113, 0x61f5e5, 0x950113, 0x61f5e5, 0x950113, 0x61f5e7, 0x950113, 0x61f5e7, 0x950113, 0x61f5e7, 0x950113, 0x66f4e7, 0x950113, 0x61f4ea, 0x90061c, 0x7ef7ea, 0x90061c };
		System.arraycopy(aFor, 0, key, 50710, aFor.length);
	}

	private static void init171(int[] key) {
		int[] aFor = { 0x64f2e8, 0x90061c, 0x64f2e8, 0x90061c, 0x64f2e8, 0x90061c, 0x64f2e8, 0x90061c, 0x64f2e8, 0x90061c, 0x64f2e8, 0x90061c, 0x64f2e8, 0x90061c, 0x64f2e8, 0x90061c, 0x64f2e8, 0x90061c, 0x64f2e8, 0x90061c, 0x64f2ea, 0x90061c, 0x64f2ea, 0x90061c, 0x65f3eb, 0x91071d, 0x64f2e8, 0x91071d, 0x65f3e9, 0x96001a, 0x61f7ef, 0x990b12, 0x73f3e9, 0xbc191c, 0x10c0ec, 0x900208, 0xc0add3, 0xf53202, 0xc993db, 0x8a3b3b, 0xcc90da, 0x8a3c07, 0xc391d9, 0x893f06, 0xc490e6, 0x8a3e06, 0xda90e7, 0x8a3e06, 0xdb91e4, 0x892107, 0xdd91e6, 0x882004, 0xde92e7, 0x892103, 0xd095e0, 0x8a2004, 0xd095e0, 0x8b2305, 0xd595e1, 0x8a2204, 0xd595e1, 0x8a2204, 0xeb9be3, 0x89210b, 0xea9bec, 0x8e2004, 0xea9bec, 0x8e2004, 0xe99be3, 0x80260a, 0xea98e0, 0x832509, 0xe89be3, 0x842408, 0xe9e4e2, 0x872509, 0xf7e4e5,
				0x872509, 0xf6e7e4, 0x872509, 0xf5e1e5, 0x872509, 0xf4e0e2, 0x81270f, 0xf6e1e2, 0x8e260c, 0xf6e1e2, 0x8e260c, 0xf4eee3, 0x8f2713, 0xf3ede3, 0x8f2713, 0xf0ede2, 0x8f2713, 0xeebe0, 0x8c2614, 0xf3ebe7, 0x722412, 0xf1ebe1, 0x743a14, 0xf7f4e1, 0x753c0d, 0xe7f3e3, 0x482c15, 0x83cbe6, 0x623b13, 0x91cceb, 0x69341d, 0x9fc2e5, 0x6b3613, 0x98c5e0, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1, 0x6d3015, 0x99c4e1,
				0x6d3015, 0x9ec3e6, 0x6a3712, 0x9fc2e7, 0x693411, 0x9cc3e7, 0x73341d, 0xa4ddea, 0x130e03, 0x8cc3e4, 0x15110b, 0x83c6fe, 0x141f07, 0x81cbf0, 0x191f08, 0x81ccfd, 0x141e0c, 0x85cee3, 0xb010c, 0x86cafe, 0xc020f, 0x84cae1, 0xc020f, 0x8bc5e2, 0xe0009, 0x8dc4e5, 0xe0009, 0x8fc2e5, 0xf0020f, 0x8bbce6, 0xf30700, 0x84bee9, 0xf30700, 0x80b0e6, 0xf10502, 0x81b1e7, 0xef0304, 0x83b1e1, 0xe90102, 0x80b0e1, 0xe61e01, 0x80b1e3, 0xe11b3e, 0x80b1e3, 0xe0183f, 0xbfbee1, 0xe31b3d, 0xb8b8e0, 0xec1939, 0xbabbe5, 0xea1a3c, 0xa585e6, 0xed1830, 0xa585e4, 0xe31837, 0xa081e5, 0xe31837, 0xa180e4, 0x9e1534, 0xa281e7, 0x9b1037, 0xa281e6, 0x950e29, 0xa080f9, 0x940d36, 0xa580f8, 0x8b0a33, 0xa783ff, 0x8c0b34, 0xa583fe, 0x820536, 0xa480f1, 0x810437, 0xa587f0, 0x860536, 0xa684f3, 0xbb0430, 0xa77af5,
				0xb00436, 0xa57ff5, 0xb40337, 0xbb79f5, 0xb70135, 0xb0778b, 0xb60135, 0xb27788, 0xb20233, 0xb2718a, 0xb20330, 0xb2728c, 0xb21d31, 0xb2718f, 0xb21a32, 0xb37089, 0xb31a31, 0xb37084, 0xb31b30, 0xb37183, 0xb31631, 0xb37482, 0xb32b33, 0xb07783, 0xa02d20, 0xf4a598, 0x5f6871, 0xba9d8e, 0x486471, 0xbf9f8f, 0x476576, 0xb29085, 0x416374, 0xb29087, 0x466471, 0xb59088, 0x466470, 0xb29082, 0x476571, 0xb39185, 0x476571, 0xb39185, 0x476571, 0xb39185, 0x476571, 0xb39185, 0x476571, 0xb39185, 0x476571, 0xb39185, 0x476571, 0xb39185, 0x476571, 0xb39185, 0x476571, 0xb39185, 0x476571, 0xb39185, 0x476571, 0xb39185, 0x476571, 0xb49085, 0x476571, 0xb39088, 0x42627e, 0xac9388, 0x42627e };
		System.arraycopy(aFor, 0, key, 51010, aFor.length);
	}

	private static void init172(int[] key) {
		int[] aFor = { 0xb7978b, 0x42627e, 0xb7978b, 0x42627e, 0xb7978b, 0x42627e, 0xb7978b, 0x42627e, 0xb7978b, 0x42627e, 0xb7978b, 0x42627e, 0xb7978b, 0x42627e, 0xb7978b, 0x42627e, 0xb7978b, 0x42627e, 0xb7978b, 0x42627e, 0xb79789, 0x42627e, 0xb79789, 0x42627e, 0xb79789, 0x43637f, 0xb6968a, 0x43637f, 0xb7978b, 0x446478, 0xb3938d, 0x4b6f76, 0xa1978d, 0x6f7e79, 0xc3a789, 0xbe656a, 0xf1cbb0, 0xc56b61, 0xfccab9, 0xbc6266, 0xf8ce87, 0xbc635a, 0xfbce84, 0xb2635a, 0xfecd85, 0xb36265, 0xfccd84, 0xac6365, 0xfdcc87, 0xac6365, 0xffcc85, 0xab7c64, 0xfecd86, 0xa87f65, 0xf0cc87, 0xa97864, 0xf3cd80, 0xa87b65, 0xf6cd81, 0xa87b65, 0xf6cd81, 0xa97a64, 0xc9c282, 0xa87b65, 0xcac283, 0xa97864, 0xcdc38c, 0xa97864, 0xcec383, 0xa77e6a, 0xcec383, 0xa77e6a, 0xccc080, 0xa77e6a, 0xcbc183, 0xa60169, 0xc9c182,
				0xb9006e, 0xc9c182, 0xb8036f, 0xcac783, 0xb8036f, 0xcbc684, 0xbf0068, 0xc8c685, 0xb0016b, 0xc8c685, 0xb0016b, 0xcac984, 0xb0016b, 0xcbc884, 0xb0016b, 0xcec89b, 0xb1026a, 0x31c998, 0xb0056b, 0xcfc898, 0x4f066c, 0xcdc89e, 0x49186a, 0xcbd59e, 0x4b1c72, 0xdbd39c, 0x740c6a, 0xbfeb9f, 0x5e1b6a, 0xace392, 0x541b6a, 0xa2ed92, 0x561964, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97, 0x501f62, 0xa5ea97,
				0x511e63, 0xa5ea97, 0x511e63, 0xa4eb96, 0x521d60, 0xa4eb94, 0x57136f, 0x8af897, 0x312e7c, 0x92e39a, 0x83275, 0x9de481, 0x93277, 0x9ce680, 0xb3577, 0x9ce783, 0x83673, 0x99e69c, 0x172973, 0x9ae287, 0x102574, 0x98e284, 0x102a6a, 0x97ed87, 0x12286c, 0x91ec80, 0x12286c, 0x93ea80, 0xec2a6a, 0x979483, 0xef2f65, 0x98968c, 0xef2f65, 0x9c9883, 0xed2d67, 0x9d9982, 0xf32b61, 0x9f9984, 0xf52967, 0x9c9884, 0xfa3664, 0x9c9986, 0xfd335b, 0x9c9986, 0xfc305a, 0xa39684, 0xff3358, 0xa49085, 0xf0315c, 0xa69380, 0xe93358, 0xa6ac82, 0xee3154, 0xa9ad87, 0xef3054, 0xaca986, 0xef3054, 0xada887, 0x923d57, 0xaea984, 0x973854, 0xaea985, 0x99264a, 0xaca89a, 0x982555, 0xa9a89b, 0x872250, 0xabab9c, 0x802357, 0xa9ab9d, 0x8e2d55, 0xa8a892, 0x8d2c54, 0xa9af93, 0x8a2d55, 0xaaac90, 0xb72c53, 0xab5296,
				0xbc2c55, 0xa95796, 0xb82b54, 0xb75196, 0xbb2956, 0xbc5fe8, 0xba2956, 0xbe5fe9, 0xbe2a52, 0xbe59eb, 0xbe2a53, 0xbe58e9, 0xbe2852, 0xbe45ec, 0xbe2e51, 0xbe47ed, 0xbe2d55, 0xbe47e0, 0xbe2c53, 0xbe46e1, 0xbe2f52, 0xbe4ae1, 0xbf2852, 0xba77e7, 0xbc2378, 0xff5fcb, 0x67e129, 0xb409d2, 0x5cfb29, 0xa901d4, 0x50fa2e, 0xa70cda, 0x52f828, 0xa60adb, 0x52fe2d, 0xa60bd4, 0x52fe2d, 0xa70bde, 0x52fd2f, 0xa708da, 0x52fd2f, 0xa708da, 0x52fd2f, 0xa708da, 0x52fd2f, 0xa708da, 0x52fd2f, 0xa708da, 0x52fd2f, 0xa708da, 0x52fd2f, 0xa708da, 0x52fd2f, 0xa708da, 0x52fd2f, 0xa708da, 0x52fd2f, 0xa708da, 0x52fd2f, 0xa708da, 0x52fd2f, 0xa60bda, 0x52fd2f, 0xa608d6, 0x57fa20, 0xb90bd6, 0x57fa20 };
		System.arraycopy(aFor, 0, key, 51310, aFor.length);
	}

	private static void init173(int[] key) {
		int[] aFor = { 0xa20fd5, 0x57fa20, 0xa20fd5, 0x57fa20, 0xa20fd5, 0x57fa20, 0xa20fd5, 0x57fa20, 0xa20fd5, 0x57fa20, 0xa20fd5, 0x57fa20, 0xa20fd5, 0x57fa20, 0xa20fd5, 0x57fa20, 0xa20fd5, 0x57fa20, 0xa20fd5, 0x57fa20, 0xa20fd5, 0x57fa20, 0xa20fd5, 0x57fa20, 0xa20fd5, 0x56fb21, 0xa30ed4, 0x56fb21, 0xa20fd3, 0x51fc22, 0xa60bd7, 0x5ef72c, 0xb40fd7, 0x7ae623, 0xd03ecc, 0xadfc2f, 0xe252f5, 0xd1cd25, 0xe86dff, 0xa8ca1e, 0xec66ff, 0xa8cb22, 0xef66fc, 0xa7c822, 0xed66fd, 0xa0c91d, 0xef66fc, 0xa0c91d, 0xf166ff, 0xa0c91d, 0xf166ff, 0xa3d61c, 0xf766fd, 0xa2d71f, 0xf465fc, 0xa2d71f, 0xfb63fc, 0xa1d618, 0xfa60fd, 0xa1d618, 0xff60fc, 0xa1d618, 0xc16efe, 0xa0d719, 0xc16ffc, 0xa2d51b, 0xc16ffc, 0xa2d51b, 0xc46ff3, 0xacd319, 0xc56ef0, 0xadd218, 0xc76ff1, 0xadd218, 0xc66cf0, 0xaad319, 0xc46cf3,
				0xabac18, 0xc46cf3, 0xb4ad1f, 0xc56ef4, 0xb4ad1f, 0xc669f3, 0xb5ac1e, 0xc369f2, 0xb4af1f, 0xc369f2, 0xb4af1f, 0xce67f0, 0xb4af1f, 0xce67f0, 0xb5ae00, 0xc866ef, 0xb6af1f, 0xc965ee, 0x49ae1c, 0x3762ee, 0x48af1d, 0xc861ef, 0x49ae1c, 0xc960e8, 0xb6a705, 0x3969ea, 0x96b61c, 0x5c51e9, 0xbda11e, 0x4f56e4, 0xb7ae1c, 0x4158e4, 0xb5ac12, 0x415ee1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1, 0xb7aa14, 0x425fe1,
				0xb7aa14, 0x435ee0, 0xb7aa14, 0x425fe1, 0xb4a915, 0x4351e6, 0xb5ab1d, 0x5145e5, 0x959e08, 0x3e4de4, 0xa19815, 0x374ee7, 0xa59a13, 0x304ee4, 0xa79d13, 0x304fe7, 0xa49e17, 0x354ffa, 0xbb8015, 0x374be1, 0xbe8312, 0x3644e2, 0xbe8c0c, 0x394be1, 0xbc8e0a, 0x3f4ae6, 0xbc8e0a, 0x3d4ce6, 0x428c0c, 0x3932e5, 0x418903, 0x3630ea, 0x418903, 0x323ee5, 0x438b01, 0x333fe4, 0x5d8d07, 0x313fe2, 0x5b8f01, 0x323ee2, 0x549002, 0x323fe0, 0x53953d, 0x323fe0, 0x52963c, 0xd30e2, 0x51953e, 0xa36e3, 0x5e973a, 0x835e6, 0x47953e, 0x80ae4, 0x409732, 0x70be1, 0x419632, 0x20fe0, 0x419632, 0x30ee1, 0x3c9b31, 0xfe2, 0x399e32, 0xfe3, 0x37802c, 0x20efc, 0x368333, 0x70efd, 0x298436, 0x50dfa, 0x2e8531, 0x70dfb, 0x208b33, 0x60ef4, 0x238a32, 0x709f5, 0x248b33, 0x40af6, 0x198a35, 0x5f4f0, 0x128a33, 0x7f1f0,
				0x168d32, 0x19f7f0, 0x158f30, 0x12f98e, 0x148f4e, 0x10fa8f, 0x108e32, 0x10fd8b, 0x10893c, 0x10fb84, 0x108b3d, 0x10e681, 0x108d3c, 0x10e480, 0x108d3a, 0x10e78f, 0x108d3c, 0x10e78e, 0x118f3d, 0x10e989, 0x138d3c, 0x10d28a, 0x12832a, 0x25f085, 0xa65e5d, 0x1d8bb1, 0xc46c41, 0x3494ba, 0xcc6e43, 0x3b98b7, 0xcc6b45, 0x3899b6, 0xcc6d40, 0x3898b9, 0xcc6d4e, 0x3998bd, 0xcf6d4c, 0x3a98b9, 0xcf6d4c, 0x3a98b9, 0xcf6d4c, 0x3a98b9, 0xcf6d4c, 0x3a98b9, 0xcf6d4c, 0x3a98b9, 0xcf6d4c, 0x3a98b9, 0xcf6d4c, 0x3a98b9, 0xcf6d4c, 0x3a98b9, 0xcf6d4c, 0x3a98b9, 0xcf6d4c, 0x3a98b9, 0xcf6d4c, 0x3a98b9, 0xcf6d4c, 0x3b9bb9, 0xcf6d4c, 0x3b98b5, 0xca6a43, 0x249bb5, 0xca6a43 };
		System.arraycopy(aFor, 0, key, 51610, aFor.length);
	}

	private static void init174(int[] key) {
		int[] aFor = { 0x3f9fb6, 0xca6a43, 0x3f9fb6, 0xca6a43, 0x3f9fb6, 0xca6a43, 0x3f9fb6, 0xca6a43, 0x3f9fb6, 0xca6a43, 0x3f9fb6, 0xca6a43, 0x3f9fb6, 0xca6a43, 0x3f9fb6, 0xca6a43, 0x3f9fb6, 0xca6a43, 0x3f9fb6, 0xca6a43, 0x3f9fb6, 0xca6a43, 0x3f9fb6, 0xca6a43, 0x3f9fb6, 0xca6a43, 0x3f9fb6, 0xca6a43, 0x3e9eb1, 0xcd6d40, 0x3a9ab5, 0xc2664e, 0x289eb5, 0xe67741, 0x4cafae, 0x316d4d, 0x7cc394, 0x4e5d5b, 0x79fd82, 0x465b62, 0x4f782, 0x475a5f, 0x2f481, 0x45595c, 0xcf482, 0x475b62, 0x8f483, 0x465a63, 0x17f581, 0x465a63, 0x17f581, 0x465a63, 0x12ea82, 0x475b60, 0x12ea82, 0x445861, 0x1dec82, 0x445861, 0x1fee84, 0x445861, 0x19ed82, 0x475b66, 0x18ec83, 0x785465, 0x19ec80, 0x7b5566, 0x18ef81, 0x7b5566, 0x1eec81, 0x795768, 0x11eb80, 0x795768, 0x10eb80, 0x7a5669, 0x10eb8e, 0x7b5566, 0x16eb8f, 0x785465,
				0x17948e, 0x785465, 0x9978e, 0x785465, 0xa9089, 0x785465, 0xd908e, 0x7b5562, 0xc938f, 0x7b5562, 0x2928c, 0x785a63, 0x2928c, 0x795b7c, 0x49393, 0x7a5a63, 0x59092, 0x855b60, 0xf89091, 0x875d62, 0xf89093, 0x795f66, 0x69292, 0x79557f, 0xf69b90, 0x584667, 0x92a192, 0x735165, 0x81a69f, 0x795e67, 0x8fa89f, 0x7b5c69, 0x8fae9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8caf9a, 0x795a6f, 0x8dae9b, 0x785b6e, 0x8dae9b, 0x795a6f, 0x8aa99c,
				0x795a6f, 0x8dae9b, 0x785b68, 0x80ac9a, 0x785663, 0x9fa69a, 0x54466b, 0xe69e84, 0x474975, 0xd29c84, 0x424e76, 0xd79a81, 0x404976, 0xd79b82, 0x434a72, 0xd29b9f, 0x5c5470, 0xd09f84, 0x595777, 0xd19087, 0x595869, 0xde9f84, 0x5b5a6f, 0xd89e83, 0x5b5a6f, 0xda9883, 0xa55869, 0xdee680, 0xa65d66, 0xd1e48f, 0xa65d66, 0xd5ea80, 0xa45f64, 0xd4eb81, 0xba5962, 0xd6eb87, 0xbc5b64, 0xd5ea87, 0xb34467, 0xd5eb85, 0xb44158, 0xd5eb85, 0xb54259, 0xeae487, 0xb6415b, 0xede286, 0xb9435f, 0xefe183, 0xbf405a, 0xf0df80, 0xb84256, 0xf0df82, 0xb64251, 0xf5db83, 0xb64251, 0xf4da82, 0xcb4f52, 0xf7db81, 0xce4a51, 0xf7db80, 0xc0544f, 0xf5da9f, 0xc15750, 0xf0da9e, 0xde5055, 0xf2d999, 0xd95152, 0xf0d998, 0xd75f50, 0xf1da97, 0xd45e51, 0xf0dd96, 0xd35f50, 0xf3de95, 0xee5e56, 0xf22093, 0xe55e50, 0xf02593,
				0xe15951, 0xee2393, 0xe25b53, 0xe52ded, 0xe2582d, 0xe72cee, 0xe55f51, 0xe52ce8, 0xe55f5f, 0xe52ce8, 0xe55c5e, 0xe531e4, 0xe55a5f, 0xe533e5, 0xe55a5f, 0xe533ea, 0xe55a59, 0xe533ea, 0xe45b59, 0xe63ded, 0xe55958, 0xe707ed, 0xe7564f, 0xd726ff, 0xa4842f, 0xd4dcd, 0xc3ad21, 0x2c54da, 0xd7a920, 0x2e5cd2, 0xd6ae20, 0x205cd3, 0xd4a825, 0x205ddc, 0xd4a82b, 0x205cd9, 0xd5a829, 0x205ddc, 0xd5a829, 0x205ddc, 0xd5a829, 0x205ddc, 0xd5a829, 0x205ddc, 0xd5a829, 0x205ddc, 0xd5a829, 0x205ddc, 0xd5a829, 0x205ddc, 0xd5a829, 0x205ddc, 0xd5a829, 0x205ddc, 0xd5a829, 0x205ddc, 0xd5a829, 0x205ddc, 0xd5a829, 0x215edc, 0xd5a829, 0x215dd0, 0xd0af26, 0x3e5ed0, 0xd0af26 };
		System.arraycopy(aFor, 0, key, 51910, aFor.length);
	}

	private static void init175(int[] key) {
		int[] aFor = { 0x255ad3, 0xd0af26, 0x255ad3, 0xd0af26, 0x255ad3, 0xd0af26, 0x255ad3, 0xd0af26, 0x255ad3, 0xd0af26, 0x255ad3, 0xd0af26, 0x255ad3, 0xd0af26, 0x255ad3, 0xd0af26, 0x255ad5, 0xd0af26, 0x255ad3, 0xd0af26, 0x255ad3, 0xd0af26, 0x255ad3, 0xd0af26, 0x255ad3, 0xd0af26, 0x255ad3, 0xd0af26, 0x245bd4, 0xd7a825, 0x205fd0, 0xd8a32b, 0x325bd0, 0xffb224, 0x556acb, 0x29ab29, 0x6405f0, 0x569b3f, 0x613be6, 0x5c9d39, 0x1d36e6, 0x5f9a3a, 0x1b37e7, 0x5d9b3b, 0x1537e6, 0x5f9939, 0x1137d9, 0x5f9939, 0xf37d8, 0x5f9939, 0xe36db, 0x5f9939, 0xb29d8, 0x5e983a, 0xb29d8, 0x5d9b3b, 0x528d9, 0x5c9c3a, 0x629de, 0x5d9f3b, 0x2ad8, 0x5d9f3b, 0x228de, 0x629038, 0x227dc, 0x609e3a, 0x324dd, 0x619d3b, 0x424dc, 0x629e34, 0xa22dc, 0x629e34, 0xb22dc, 0x619f35, 0xb22dc, 0x609c36, 0xc23df, 0x61e335, 0xe23de,
				0x61e335, 0x1121df, 0x60e234, 0x1226d8, 0x60e234, 0x1421d8, 0x61e535, 0x1720d9, 0x6fe737, 0x1620d9, 0x6fe737, 0x152fd8, 0x6ee628, 0x152fd8, 0x69e529, 0x172cd9, 0x68e628, 0x152dd9, 0x68e02b, 0x172dd8, 0x96e22d, 0xe92fd9, 0x96e834, 0x1926db, 0xb7fb2c, 0x7d1cd9, 0x9cec2e, 0x6e1bd4, 0x96e32c, 0x6015d4, 0x94e122, 0x6013d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6312d1, 0x96e724, 0x6213d0, 0x97e625, 0x6213d0, 0x96e724, 0x6213d0,
				0x91e023, 0x6514d7, 0x90e124, 0x6816d6, 0x90ee20, 0x791eda, 0xa9fd2e, 0x1f27dc, 0xbcf12d, 0x2825dd, 0xa7f42c, 0x3027db, 0xa8f52c, 0x3124de, 0xa4f430, 0x3425dd, 0xb9ea32, 0x3521c6, 0xbce935, 0x342ec5, 0xbce62b, 0x3b21c6, 0xbee42d, 0x3d20c1, 0xbee42d, 0x3f26c1, 0x40e62b, 0x3b58c2, 0x43e324, 0x345acd, 0x43e324, 0x3054c2, 0x41e126, 0x3155c3, 0x5fe720, 0x3355c5, 0x59e526, 0x3054c5, 0x56fa25, 0x3055c7, 0x51ff1a, 0x3055c7, 0x50fc1b, 0xf5ac5, 0x53ff19, 0x85cc4, 0x5cfd1d, 0xa5fc1, 0x5afe18, 0x1561c2, 0x5dfc14, 0x1561c0, 0x53fc13, 0x1065c1, 0x53fc13, 0x1164c0, 0x2ef110, 0x1265c3, 0x2bf413, 0x1265c2, 0x25ea0d, 0x1064dd, 0x24e912, 0x1564dc, 0x3bee17, 0x1767db, 0x3cef10, 0x1567da, 0x32e112, 0x1464d5, 0x31e013, 0x1563d4, 0x36e112, 0x1660d7, 0xbe014, 0x179ed1, 0xe012, 0x159bd1, 0x4e713,
				0xb9dd1, 0x7e511, 0x93af, 0x7e66f, 0xf95ac, 0x9e46d, 0x895d4, 0x8e463, 0x896d6, 0x8e662, 0x98bda, 0xae163, 0x989d9, 0xae163, 0x888d5, 0xae161, 0xb89d2, 0x9e161, 0xd84d7, 0x9e760, 0xbb9d5, 0xaeb76, 0x2187c6, 0x491d0d, 0xd6dfd3, 0x1e0138, 0xf3f8c1, 0xe073b, 0xf4f2c9, 0xe033b, 0xf8f2ce, 0xc0136, 0xfef7c1, 0xc0134, 0xf9f5c6, 0xc0136, 0xf9f4c3, 0xc0136, 0xf9f4c3, 0xc0136, 0xf9f4c3, 0xc0136, 0xf9f4c3, 0xc0136, 0xf9f4c3, 0xc0136, 0xf9f4c3, 0xc0136, 0xf9f4c3, 0xc0136, 0xf9f4c3, 0xc0136, 0xf9f4c3, 0xc0136, 0xf9f4c3, 0xc0136, 0xf9f4c3, 0xc0136, 0xf8f7c3, 0xc0136, 0xf8f4cf, 0x90639, 0xe7f7cf, 0x90639 };
		System.arraycopy(aFor, 0, key, 52210, aFor.length);
	}

	private static void init176(int[] key) {
		int[] aFor = { 0xfcf3cc, 0x90639, 0xfcf3cc, 0x90639, 0xfcf3cc, 0x90639, 0xfcf3cc, 0x90639, 0xfcf3cc, 0x90639, 0xfcf3cc, 0x90639, 0xfcf3cc, 0x90639, 0xfcf3cc, 0x90639, 0xfcf3ca, 0x90639, 0xfcf3cc, 0x90639, 0xfcf3cc, 0x90639, 0xfcf3cc, 0x90639, 0xfcf3cc, 0x90639, 0xfcf3cc, 0x90639, 0xfdf2cb, 0xe013a, 0xf9f6cf, 0x10a34, 0xebf2cf, 0x261b3b, 0x8cc3d4, 0xf70136, 0xbaafef, 0x8a313e, 0xbf91e6, 0x823739, 0xc39ce6, 0x813038, 0xc29ce4, 0x87373f, 0xc09ce3, 0x8a323c, 0xc79ddc, 0x8a3003, 0xda9ee2, 0x8a3003, 0xda9ee2, 0x8b3100, 0xdf81e1, 0x8a3003, 0xdc82e0, 0x8a3003, 0xd283e1, 0x8b3702, 0xd182e6, 0x8b3702, 0xd682e1, 0x8b3702, 0xd581e6, 0xb53900, 0xd58ee4, 0xb43601, 0xd68fe7, 0xb43601, 0xd18fe6, 0xb7350e, 0xd08ee7, 0xb8320f, 0xd28fe6, 0xb8320f, 0xd28fe6, 0xb9310c, 0xd58ee5, 0xb84e0f, 0xd78ee4,
				0xa74f08, 0xd78de2, 0xa64e09, 0xd48ae5, 0xa64e09, 0xd28de5, 0xa64e09, 0xd08be5, 0xa84c0b, 0xd18be5, 0xa84c0b, 0xd284e4, 0xa94d14, 0xd284e4, 0xae4e15, 0xd087e5, 0xad4c14, 0xd087e5, 0xae4b17, 0xd186e4, 0x514810, 0x2e85e4, 0x534208, 0xdd8fe6, 0x735211, 0xb9b5e4, 0x584513, 0xaab2e9, 0x524a11, 0xa4bce9, 0x50481f, 0xa4baec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa7bbec, 0x524e19, 0xa4b8ef, 0x514d1a, 0xa5b9ee,
				0x514d1a, 0xa5b9ee, 0x534c1d, 0xa8b4ee, 0x524d19, 0xbcbce1, 0x695913, 0xd085e3, 0x74530e, 0xe280fe, 0x70530d, 0xe780fa, 0x7f520d, 0xe880ff, 0x7c5111, 0xec80fe, 0x614f11, 0xed83e3, 0x644b12, 0xec83fc, 0x644b12, 0xe38cff, 0x664914, 0xe58df8, 0x664914, 0xe78bf8, 0x984b12, 0xe3f5fb, 0x9b4e1d, 0xecf4fa, 0x9b4d13, 0xe8faf5, 0x994f11, 0xe9fbf4, 0x874917, 0xebfbf2, 0x814b11, 0xe8faf2, 0x8e5412, 0xe8fbf0, 0x89512d, 0xe8fbf0, 0x88522c, 0xd7f4f2, 0x8b512e, 0xd0f2f3, 0x84532a, 0xd2f1f6, 0x82502f, 0xcdcff5, 0x855223, 0xcdcff7, 0x8b5224, 0xc8cbf6, 0x8b5224, 0xc9caf7, 0xf65f27, 0xcacbf4, 0xf35a24, 0xcacbf5, 0xfd443a, 0xc8caea, 0xfc4725, 0xcdcaeb, 0xe34020, 0xcfc9ec, 0xe44127, 0xcdc9ed, 0xea4f25, 0xcccae2, 0xe94e24, 0xcdcde3, 0xee4f25, 0xcecee0, 0xd0b123, 0xcccfe6, 0xd4b225, 0xc1c9e6,
				0xd2b224, 0xddc8e6, 0xd1b026, 0xd6c698, 0xd1b358, 0xd9c09b, 0xdfb15a, 0xddc1e1, 0xddb056, 0xddc1e3, 0xddb155, 0xdfdde3, 0xdcb754, 0xdfdfec, 0xdcb754, 0xdedee2, 0xdcb754, 0xdddfe7, 0xdfb852, 0xdedce7, 0xdabf50, 0xd9e2e3, 0xd9b341, 0xfcdbef, 0x9e4e25, 0x4f0fb, 0xc02b10, 0x2adee7, 0xd1231d, 0x2bd5e8, 0xd2261b, 0x26d4ee, 0xd22018, 0x27d6e0, 0xd22116, 0x24d4e5, 0xd22116, 0x27d4e3, 0xd22116, 0x27d4e3, 0xd22116, 0x27d4e3, 0xd22116, 0x27d4e3, 0xd22116, 0x27d4e3, 0xd22116, 0x27d4e3, 0xd22116, 0x27d4e3, 0xd22116, 0x27d4e3, 0xd22116, 0x27d4e3, 0xd22116, 0x27d4e3, 0xd22116, 0x27d4e3, 0xd22116, 0x26d7e3, 0xd22116, 0x26d4ef, 0xd72619, 0x39d7ef, 0xd72619 };
		System.arraycopy(aFor, 0, key, 52510, aFor.length);
	}

	private static void init177(int[] key) {
		int[] aFor = { 0x22d3ec, 0xd72619, 0x22d3ec, 0xd72619, 0x22d3ec, 0xd72619, 0x22d3ec, 0xd72619, 0x22d3ec, 0xd72619, 0x22d3ec, 0xd72619, 0x22d3ec, 0xd72619, 0x22d3ec, 0xd72619, 0x22d3ec, 0xd72619, 0x22d3ec, 0xd72619, 0x22d3ec, 0xd72619, 0x22d3ec, 0xd72619, 0x22d3ec, 0xd72619, 0x22d3ea, 0xd72619, 0x23d2eb, 0xd0211a, 0x26d6e8, 0xde2a13, 0x35d3ef, 0xfb391a, 0x51e0f7, 0x2a2215, 0x618fcf, 0x4f121d, 0x7ab2c5, 0x46151a, 0x7bffb, 0x461424, 0x5bffa, 0x431327, 0x4b8fb, 0x4c1426, 0x7b8f9, 0x4b1519, 0x6b8c6, 0x481626, 0x18b8c7, 0x491725, 0x1ab8c7, 0x4e0824, 0x1bb9c6, 0x4d0b25, 0x1abac6, 0x420822, 0x18bdc6, 0x420822, 0x18bdc6, 0x430b23, 0x1fbcc7, 0x410521, 0x1eb2c4, 0x410521, 0x20b2c7, 0x420a20, 0x21b3c8, 0x450820, 0x20b4c9, 0x460923, 0x2eb5c9, 0x460923, 0x2cb4ca, 0x470a20, 0x2bb5cb, 0x467527,
				0x28b4cc, 0x467527, 0x29b5cc, 0x597420, 0x28b6cd, 0x5a7523, 0x28b1cf, 0x5a7523, 0x2fb1ce, 0x5a7523, 0x2cb0cf, 0x547721, 0x2ebfce, 0x577820, 0x2db0ce, 0x507b3f, 0x2db0ce, 0x517a3e, 0x2eb0cf, 0x517a3e, 0xd1b1cc, 0x517f39, 0x2cb5cd, 0x517223, 0xdfbcd2, 0x746124, 0xbe86d1, 0x5c7729, 0xaf8ed0, 0x567727, 0xa180d0, 0x557424, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222, 0xa687d7, 0x537222,
				0xa687d7, 0x537222, 0xa687d7, 0x537325, 0xaa80d6, 0x517720, 0xa085d4, 0x7b6f3b, 0xbf8bca, 0x135025, 0x8482d5, 0x165327, 0x8081d1, 0x1a5426, 0x8380d2, 0x10503d, 0x8081cc, 0xf4e3e, 0x8285ce, 0x84d23, 0x8085cd, 0x84d23, 0x8f8ace, 0xa4f25, 0x898bc9, 0xa4f25, 0x8b8dc9, 0xf44d23, 0x8ff3ca, 0xf7482c, 0x80f2cb, 0xf7482c, 0x84ffca, 0xf54a2e, 0x85fecb, 0xeb4c28, 0x87fecd, 0xed4e2e, 0x84ffcd, 0xe2512d, 0x84fecf, 0xe55412, 0x84fecf, 0xe45713, 0xbbf1cd, 0xe75411, 0xbcf7cc, 0xe85615, 0xbef4c9, 0xee5510, 0xa1caca, 0xe9571c, 0xa1cac8, 0xe7571b, 0xa4cec9, 0xe7571b, 0xa5cfc8, 0x9a5a18, 0xa6cecb, 0x9f5f1b, 0xa6ceca, 0x914105, 0xa4cfd5, 0x90421a, 0xa1cfd4, 0x8e4418, 0xa2cdd4, 0x89451f, 0xa3c2d5, 0x8b471d, 0xacc3da, 0x8a401c, 0xaec3db, 0x8d411d, 0xadc0d8, 0xb3bf1b, 0xafc1de, 0xb7bc1d,
				0xa2c7de, 0xb1bc1c, 0xbec6de, 0xb2be1e, 0xb5c8a0, 0xb2be1e, 0xb7cbdf, 0xb4b860, 0xb5c9db, 0xb5b963, 0xb5c9db, 0xb5a66c, 0xb4cbd4, 0xb5a063, 0xb4cbd4, 0xb6a262, 0xb6cbd7, 0xb6a262, 0xb6cbd7, 0xb7a362, 0xb7c4d6, 0xb6a063, 0xb2fdd2, 0xb3b273, 0x97d5dd, 0xc94716, 0x5cfecb, 0x9d2927, 0x77dcdc, 0x8d2223, 0x7ad5d4, 0x892627, 0x7ad5d4, 0x8f2021, 0x79d4d4, 0x8f2021, 0x79d4d6, 0x8c2121, 0x79d4d4, 0x8c2121, 0x79d4d4, 0x8c2121, 0x79d4d4, 0x8c2121, 0x79d4d4, 0x8c2121, 0x79d4d4, 0x8c2121, 0x79d4d4, 0x8c2121, 0x79d4d4, 0x8c2121, 0x79d4d4, 0x8c2121, 0x79d4d4, 0x8c2121, 0x79d4d4, 0x8c2121, 0x79d4d4, 0x8c2121, 0x78d7d4, 0x8c2121, 0x78d4d8, 0x8a272f, 0x64d6d9, 0x8a272f };
		System.arraycopy(aFor, 0, key, 52810, aFor.length);
	}

	private static void init178(int[] key) {
		int[] aFor = { 0x7fd2da, 0x8a272f, 0x7fd2da, 0x8a272f, 0x7fd2da, 0x8a272f, 0x7fd2da, 0x8a272f, 0x7fd2da, 0x8a272f, 0x7fd2da, 0x8a272f, 0x7fd2da, 0x8a272f, 0x7fd2da, 0x8a272f, 0x7fd2da, 0x8a272f, 0x7fd2da, 0x8a272f, 0x7fd2da, 0x8a272f, 0x7fd2da, 0x8a272f, 0x7fd2da, 0x8a272f, 0x7fd2dc, 0x8a272f, 0x7ed3dd, 0x8d202c, 0x7bd7de, 0x832b25, 0x69d3de, 0xa43a2a, 0xee3c7, 0x762226, 0x3d8ffc, 0x10132d, 0x228cf5, 0x192a2b, 0x5983cb, 0x192915, 0x5d80ca, 0x182a14, 0x5f81c8, 0x172d15, 0x5c81ca, 0x172d15, 0x5a80f5, 0x142e15, 0x5b83f5, 0xb2d14, 0x5882f6, 0xb2d14, 0x5f9df5, 0xa2c17, 0x5c9cf5, 0x42e11, 0x5e9bf5, 0x42e11, 0x5d9af2, 0x42e11, 0x5f98f2, 0x22017, 0x5c96f3, 0x32116, 0x6296f0, 0x2e17, 0x6296f0, 0x12f18, 0x6594f0, 0x2819, 0x6894f3, 0x2819, 0x6a95f0, 0x12b1a, 0x6a95f0, 0x62a1b, 0x6beaf1,
				0x52b1a, 0x6aebf1, 0x1a2a1d, 0x6be8f0, 0x192b1e, 0x6beff2, 0x192b1e, 0x6de8f2, 0x182c1f, 0x6ee9f3, 0x162e1d, 0x6ce6f2, 0x15211c, 0x6fe9f2, 0x122203, 0x6fe9f2, 0x14201d, 0x94eaec, 0xeb231c, 0x6be8ee, 0xeb261b, 0x96ecef, 0xea2b00, 0x64e5f1, 0xcd3804, 0x7dff3, 0xe52e0b, 0x16d7f2, 0xef2e05, 0x18d9f2, 0xec2d06, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5, 0xea2b00, 0x1fdef5,
				0xea2b00, 0x1fdef5, 0xea2d01, 0x12dff3, 0xee2905, 0x1bdcf6, 0xfe2c04, 0x30c6f1, 0x83181e, 0x1fc9ee, 0x8d071e, 0x1bd5ea, 0x82001d, 0x15d3e8, 0x87021a, 0x17d2e9, 0x981d1a, 0x15d1f5, 0x9f1918, 0x17d1f6, 0x9f1918, 0x18def5, 0x9d1b1e, 0x1edff2, 0x9d1b1e, 0x1cd9f2, 0x631918, 0x18a7f1, 0x601c17, 0x17a6f0, 0x601c17, 0x13abf1, 0x621e15, 0x12aaf0, 0x7c1813, 0x10aaf6, 0x7a1a15, 0x13abf6, 0x750516, 0x13aaf4, 0x720029, 0x13aaf4, 0x730328, 0x2ca5f6, 0x70002a, 0x2ba3f7, 0x7f022e, 0x29a0f2, 0x79012b, 0x369ef1, 0x7e0327, 0x369ef3, 0x700320, 0x339af2, 0x700320, 0x329bf3, 0xd0e23, 0x319af0, 0x80b20, 0x319af1, 0x6153e, 0x339bee, 0x71621, 0x369bef, 0x181124, 0x3498e8, 0x1f1023, 0x3597e9, 0x1d1221, 0x3a96e6, 0x1c1520, 0x3896e7, 0x1b1421, 0x3b95e4, 0x25ea27, 0x3994e2, 0x21e921, 0x3792e2,
				0x24e920, 0x3590e2, 0x39e822, 0x309d9c, 0x36eb22, 0x339e9d, 0x31ea20, 0x309b9b, 0x30eb21, 0x31849b, 0x31ea22, 0x30879a, 0x30eb2d, 0x31809a, 0x31ea2c, 0x318399, 0x31ea2c, 0x318399, 0x31ea2c, 0x318298, 0x30e72b, 0x35b999, 0x36e93b, 0x148f96, 0x4e1e5c, 0xdaa981, 0x1a7f6c, 0xf68a92, 0xc746d, 0xfa8394, 0x87767, 0xfb8494, 0xe7161, 0xf68592, 0x7167, 0xf68590, 0x37067, 0xf68590, 0x37065, 0xf68590, 0x37065, 0xf68590, 0x37065, 0xf68590, 0x37065, 0xf68590, 0x37065, 0xf68590, 0x37065, 0xf68590, 0x37065, 0xf68590, 0x37065, 0xf68590, 0x37065, 0xf68590, 0x37065, 0xf68590, 0x37065, 0xf78690, 0x37065, 0xf7859c, 0x5766b, 0xeb879d, 0x5766b };
		System.arraycopy(aFor, 0, key, 53110, aFor.length);
	}

	private static void init179(int[] key) {
		int[] aFor = { 0xf0839e, 0x5766b, 0xf0839e, 0x5766b, 0xf0839e, 0x5766b, 0xf0839e, 0x5766b, 0xf0839e, 0x5766b, 0xf0839e, 0x5766b, 0xf0839e, 0x5766b, 0xf0839e, 0x5766b, 0xf0839e, 0x5766b, 0xf0839e, 0x5766b, 0xf0839e, 0x5766b, 0xf0839e, 0x5766b, 0xf0839e, 0x5766b, 0xf0839e, 0x5766b, 0xf18299, 0x27168, 0xf4879c, 0xc7b61, 0xe6839a, 0x2b6a6e, 0x82b282, 0xfa7363, 0xb0dfba, 0x9d436b, 0xacddbc, 0x967861, 0xa9d0be, 0xe97a60, 0xadd3bf, 0xe87961, 0xafd2bd, 0xe87961, 0xa2d2bf, 0xe97e60, 0xa5d2bf, 0xe87f60, 0xa6d180, 0xe97e61, 0xb9d080, 0xe87f62, 0xbccf83, 0xe87f62, 0xbdd083, 0xea6160, 0xb3d583, 0xea6160, 0xb2d282, 0xea6160, 0xb0d484, 0xed6c63, 0xb3da87, 0xec6d62, 0xb3da87, 0xd36261, 0xb1da86, 0xd2636e, 0xb6d886, 0xd2636e, 0xbadf84, 0xd2636e, 0xbadf86, 0xd3626f, 0xb8dc85, 0xd4636e, 0xb9a382,
				0xd4636e, 0xbba182, 0xd4636e, 0xa5a183, 0xd4636e, 0xa5a085, 0xd4636e, 0xa0a082, 0xd5646f, 0xa0a084, 0xd76669, 0xaea187, 0xd76669, 0xadae87, 0xd16477, 0xadae87, 0xd66768, 0x56ad99, 0x296469, 0x56ae98, 0x29636c, 0x54a998, 0x2f6f76, 0xa2a286, 0xb7f73, 0xc29985, 0x236972, 0xd1918a, 0x28687d, 0xdf9f8a, 0x2b6b7e, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d, 0x2d6d78, 0xd8988d,
				0x2d6d78, 0xd8988d, 0x2d6b79, 0xdb9988, 0x226c7c, 0xd59b8b, 0x3b6d72, 0xe0828a, 0x5d637b, 0xfcb095, 0x6f7e7b, 0xf9ac8f, 0x6c787a, 0xf8ab8e, 0x6a7a7c, 0xfab58e, 0x747b7f, 0xf9b08f, 0x737a61, 0xfbb28f, 0x737a61, 0xf4bd8c, 0x717867, 0xf2bc8b, 0x717867, 0xf0ba8b, 0x8f7a61, 0xf4c488, 0x8c7f6e, 0xfbc589, 0x8c7f6e, 0xffc888, 0x8e7d6c, 0xfec989, 0x907b6a, 0xfcc98f, 0x96796c, 0xffc88f, 0x99666f, 0xffc98d, 0x9e6350, 0xffc98d, 0x9f6051, 0xc0c68f, 0x9c6353, 0xc7c08e, 0x936157, 0xc5c38b, 0x956252, 0xdafd88, 0x92605e, 0xdafd8a, 0x9c6059, 0xdff98b, 0x9c6059, 0xdef88a, 0xe16d5a, 0xddf989, 0xe46859, 0xddf988, 0xea7647, 0xdff897, 0xeb7558, 0xdaf896, 0xf4725d, 0xd8fb91, 0xf3735a, 0xd9f490, 0xf17158, 0xd6f59f, 0xf07659, 0xd4f59e, 0xf77758, 0xd7f69d, 0xc9895e, 0xd5f79b, 0xcd8a58, 0xdbf19b,
				0xc88a59, 0xd9f39b, 0xd58b5b, 0xdcfee5, 0xda885b, 0xdffde4, 0xdd8959, 0xdcf8e2, 0xdc8858, 0xdde7e2, 0xdd895b, 0xdce4e3, 0xdc8854, 0xdde3e3, 0xdd8955, 0xdde0e0, 0xdd8955, 0xdde0e0, 0xdd8955, 0xdde1e1, 0xdc8452, 0xdfd8e2, 0xde9743, 0xfcf1ee, 0xa47e26, 0x36cbfd, 0xf61d10, 0x1de9ed, 0xe41413, 0x12e3ea, 0xe01719, 0x13e4ea, 0xe6111f, 0x1ee5ec, 0xe81119, 0x1ee5ee, 0xeb1019, 0x1ee5ee, 0xeb101b, 0x1ee5ee, 0xeb101b, 0x1ee5ee, 0xeb101b, 0x1ee5ee, 0xeb101b, 0x1ee5ee, 0xeb101b, 0x1ee5ee, 0xeb101b, 0x1ee5ee, 0xeb101b, 0x1ee5ee, 0xeb101b, 0x1ee5ee, 0xeb101b, 0x1ee5ee, 0xeb101b, 0x1ee5ee, 0xeb101b, 0x1fe6ee, 0xeb101b, 0x1fe5e2, 0xee1714, 0xe6e2, 0xee1714 };
		System.arraycopy(aFor, 0, key, 53410, aFor.length);
	}

	private static void init180(int[] key) {
		int[] aFor = { 0x1be2e1, 0xee1714, 0x1be2e1, 0xee1714, 0x1be2e1, 0xee1714, 0x1be2e1, 0xee1714, 0x1be2e1, 0xee1714, 0x1be2e1, 0xee1714, 0x1be2e1, 0xee1714, 0x1be2e1, 0xee1714, 0x1be2e1, 0xee1714, 0x1be2e1, 0xee1714, 0x1be2e1, 0xee1714, 0x1be2e1, 0xee1714, 0x1be2e1, 0xee1714, 0x1be2e1, 0xee1714, 0x1ae3e6, 0xe91017, 0x1fe6e3, 0xe71a1e, 0xde2e5, 0xc00b11, 0x69d3fd, 0x11121c, 0x5bbec5, 0x762214, 0x47bcc3, 0x7d191e, 0x43bec0, 0x7c171d, 0x3ebdc2, 0x7b171c, 0x3dbdc7, 0x7a161b, 0x33bcc6, 0x791718, 0x35bbc7, 0x781618, 0x36b8f8, 0x781618, 0x28b8f9, 0x781618, 0x2bb9f8, 0x7f0919, 0x2aa6f8, 0x7d171b, 0x25a4f9, 0x7d171b, 0x25a4f9, 0x7d171b, 0x27a2ff, 0x7b1519, 0x26a0fa, 0x78161e, 0x27a1fb, 0x47191d, 0x26aefb, 0x451713, 0x21acfb, 0x451713, 0x22acfa, 0x451713, 0x2dabfb, 0x441612, 0x2fa8f8,
				0x431713, 0x2fa8f8, 0x426814, 0x2daaf8, 0x426814, 0x32a9f8, 0x426814, 0x32aafe, 0x436915, 0x37aaf9, 0x436915, 0x36adfe, 0x416b13, 0x38acfd, 0x416b13, 0x3ba3fd, 0x406a12, 0x3ca0e2, 0x47690d, 0x39a0fd, 0x47690d, 0x38a3fc, 0x476e08, 0x3ca4fb, 0x466116, 0xcdacf9, 0x65700d, 0xac96fb, 0x4d660c, 0xbf9ef4, 0x476602, 0xb091f5, 0x446501, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x426307, 0xb796f2,
				0x426307, 0xb796f2, 0x426307, 0xb796f2, 0x436206, 0xb696f4, 0x406307, 0xb794f0, 0x446c0b, 0xa79df1, 0x607e00, 0xc9a8ed, 0x516700, 0xc4b3f5, 0x566100, 0xc4b3f5, 0x576100, 0xc7aef2, 0x486003, 0xc4acf3, 0x4e661d, 0xc6aef3, 0x4e661d, 0xc9a1f0, 0x4c641b, 0xcfa0f7, 0x4c641b, 0xcda6f7, 0xb2661d, 0xc9d8f4, 0xb16312, 0xc6d9f5, 0xb16312, 0xc2d4f4, 0xb36110, 0xc3d5f5, 0xad6716, 0xc1d5f3, 0xab6510, 0xc2d4f3, 0xa47a13, 0xc2d5f1, 0xa37f2c, 0xc2d5f1, 0xa27c2d, 0xfddaf3, 0xa17f2f, 0xfadcf2, 0xae7d2b, 0xf8dff7, 0xb77f2f, 0xf8e0f5, 0xb07d23, 0xf7e1f0, 0xb17c23, 0xf2e5f1, 0xb17c23, 0xf3e4f0, 0xcc7120, 0xf0e5f3, 0xc97423, 0xf0e5f2, 0xc76a3d, 0xf2e4ed, 0xc66922, 0xf7e4ec, 0xd96e27, 0xf5e7eb, 0xde6f20, 0xf4e8ea, 0xdc6d22, 0xfbe9e5, 0xdd6a23, 0xf9e9e4, 0xda6b22, 0xfaeae7, 0xe49524, 0xf8ebe1,
				0xe09622, 0xf6ede1, 0xe59623, 0xf4efe1, 0xf89721, 0xf1e29f, 0xf79421, 0xf2e19e, 0xf09523, 0xf1e498, 0xf19422, 0xf0fb98, 0xf09521, 0xf1f899, 0xf1942e, 0xf0ff99, 0xf0952f, 0xf0fc9a, 0xf0952f, 0xf0fc9a, 0xf0952f, 0xf0fd9b, 0xf19828, 0xf3c387, 0xf28c26, 0xd0ea8b, 0x88654c, 0x19d196, 0xd9047c, 0x32f081, 0xca0c7c, 0x3cfb85, 0xce0f76, 0x3dfc85, 0xc80970, 0x30fd83, 0xc60976, 0x33fc81, 0xc60976, 0x33fc83, 0xc60976, 0x33fc83, 0xc60976, 0x33fc83, 0xc60976, 0x33fc83, 0xc60976, 0x33fc83, 0xc60976, 0x33fc83, 0xc60976, 0x33fc83, 0xc60976, 0x33fc83, 0xc60976, 0x33fc83, 0xc60976, 0x33fc83, 0xc60976, 0x33fc83, 0xc60976, 0x32ff83, 0xc60976, 0x35fd8e, 0xc40f78, 0x2afe8e, 0xc40f78 };
		System.arraycopy(aFor, 0, key, 53710, aFor.length);
	}

	private static void init181(int[] key) {
		int[] aFor = { 0x31fa8d, 0xc40f78, 0x31fa8d, 0xc40f78, 0x31fa8d, 0xc40f78, 0x31fa8d, 0xc40f78, 0x31fa8d, 0xc40f78, 0x31fa8d, 0xc40f78, 0x31fa8d, 0xc40f78, 0x31fa8d, 0xc40f78, 0x31fa8d, 0xc40f78, 0x31fa8f, 0xc40f78, 0x31fa8f, 0xc40f78, 0x31fa8f, 0xc40f78, 0x31fa8f, 0xc50e79, 0x30fb8c, 0xc50e79, 0x31fa8b, 0xc2097a, 0x34ff8e, 0xcc0373, 0x26fb88, 0xeb127c, 0x42ca90, 0x3a0b71, 0x70a7a8, 0x5d3b79, 0x6ca5ae, 0x560073, 0x6ba8ad, 0x540170, 0x16abaf, 0x550071, 0x10abad, 0x560771, 0x11acac, 0x590072, 0x12acad, 0x5e0272, 0x10ac92, 0x5e0272, 0xeac93, 0x5e0272, 0xdad92, 0x591d73, 0xfaf90, 0x591d73, 0xeaf92, 0x561c70, 0xfa893, 0x551d77, 0xeab92, 0x551d77, 0x8a894, 0x571f71, 0x37a797, 0x681072, 0x9a794, 0x6a1e7c, 0xea594, 0x6a1e7c, 0xca494, 0x6b1f7d, 0xca49a, 0x641872, 0xea59b, 0x651b71, 0x9a49a,
				0x651b71, 0xbda9a, 0x651b71, 0xad99d, 0x651b71, 0x15da9d, 0x651b71, 0x14d89a, 0x661c76, 0x13d89b, 0x651d75, 0x12db98, 0x651d75, 0x1cda9b, 0x661274, 0x1ddb9b, 0x671375, 0x19da85, 0x64126a, 0x1adb9b, 0x641768, 0x1ede9a, 0x641b77, 0xefd698, 0x480d6b, 0x80e89e, 0x600768, 0x92ff90, 0x6a0766, 0x9df091, 0x690465, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796, 0x6f0263, 0x9af796,
				0x6f0263, 0x9af796, 0x6e0362, 0x9af591, 0x690063, 0x9ff695, 0x680e69, 0x82ff90, 0x521c61, 0xe1c48a, 0x7e1560, 0xe9c193, 0x661060, 0xe9c193, 0x7b1366, 0xe8dc95, 0x781065, 0xf4dc95, 0x7c157a, 0xf4dd94, 0x7c157a, 0xfbd297, 0x7e177c, 0xfdd390, 0x7e177c, 0xffd590, 0x80157a, 0xfbab93, 0x831075, 0xf4aa92, 0x831075, 0xf0a793, 0x811277, 0xf1a692, 0x9f1471, 0xf3a694, 0x991677, 0xf0a794, 0x960974, 0xf0a696, 0x910c4b, 0xf0a696, 0x900f4a, 0xcfa994, 0x930c48, 0xc8af95, 0x9c0e4c, 0xcaac90, 0x850c48, 0xca9392, 0x820e44, 0xc59297, 0x830f44, 0xc09696, 0x830f44, 0xc19797, 0xfe0247, 0xc29694, 0xfb0744, 0xc29695, 0xf5195a, 0xc0978a, 0xf41a45, 0xc5978b, 0xeb1d40, 0xc7948c, 0xec1c47, 0xc69b8d, 0xee1e45, 0xc99a82, 0xef1944, 0xcb9a83, 0xe81845, 0xc89980, 0xd6e643, 0xca9886, 0xd2e545, 0xc49e86,
				0xd7e544, 0xc69c86, 0xcae446, 0xc391f8, 0xc5e746, 0xc092f9, 0xc2e644, 0xc397ff, 0xc3e745, 0xc288ff, 0xc2e646, 0xc38bfe, 0xc3e749, 0xc28cfe, 0xc2e648, 0xc28ffd, 0xc2e648, 0xc38efd, 0xc2e648, 0xc281fc, 0xc3e44f, 0xc7b9fe, 0xc6f65f, 0xe791f2, 0xbf1e35, 0x2eaaef, 0xee7f05, 0x58bf8, 0xfe7706, 0x880ff, 0xfa730a, 0x980ff, 0xfc750a, 0x481f9, 0xf1720d, 0x487fa, 0xf7730c, 0x286f9, 0xf7730c, 0x286f9, 0xf7730c, 0x286f9, 0xf7730c, 0x286f9, 0xf7730c, 0x286f9, 0xf7730c, 0x286f9, 0xf7730c, 0x286f9, 0xf7730c, 0x286f9, 0xf7730c, 0x286f9, 0xf7730c, 0x286f9, 0xf7730c, 0x286f9, 0xf7730c, 0x385f9, 0xf7730c, 0x487f4, 0xf57502, 0x1b84f4, 0xf57502 };
		System.arraycopy(aFor, 0, key, 54010, aFor.length);
	}

	private static void init182(int[] key) {
		int[] aFor = { 0x80f7, 0xf57502, 0x80f7, 0xf57502, 0x80f7, 0xf57502, 0x80f7, 0xf57502, 0x80f7, 0xf57502, 0x80f7, 0xf57502, 0x80f7, 0xf57502, 0x80f7, 0xf57502, 0x80f7, 0xf57502, 0x80f5, 0xf57502, 0x80f5, 0xf57502, 0x80f5, 0xf57502, 0x80f5, 0xf47403, 0x181f6, 0xf47403, 0x80f1, 0xf37300, 0x585f4, 0xfd7909, 0x1781f2, 0xda6806, 0x73b0ea, 0x4700a, 0x4cddd3, 0x664103, 0x57dfd4, 0x6d7a09, 0x50d2d7, 0x6e7b0a, 0x2ed1d4, 0x6c7b09, 0x29d0d5, 0x6c7b09, 0x2bd0d6, 0x637c36, 0x29d7e8, 0x627a36, 0x2fd7e9, 0x617909, 0x2ed4e9, 0x7e7a08, 0x2dd5e8, 0x796509, 0x2fd7ea, 0x796509, 0x2ed7e8, 0x76640a, 0x2fd0e9, 0x75650d, 0x2fd0e9, 0x75650d, 0x28d0ee, 0x77670b, 0x28d0ee, 0x77670b, 0x17d1ee, 0x746806, 0x10d3ee, 0x736909, 0x15d3e1, 0x736909, 0x14d2ee, 0x7c6e06, 0x16d3ef, 0x7d6d05, 0x16d3ef, 0x7a6c04,
				0x17acee, 0x796d05, 0x17acee, 0x786e02, 0x8afee, 0x786e02, 0x9ade9, 0x7b6905, 0xeade8, 0x7b6905, 0xdace9, 0x7a6a04, 0x3adea, 0x796505, 0x3adeb, 0x796505, 0x4adea, 0x796505, 0x5aff4, 0x786307, 0x2aaf3, 0x7b6e1f, 0xf1a2f1, 0x567902, 0x9e9cf7, 0x7e7301, 0x8c8bf9, 0x74730f, 0x8384f8, 0x77700c, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff, 0x71760a, 0x8483ff,
				0x77760b, 0x8281ff, 0x70750c, 0x8683f4, 0x7e7408, 0x9186f1, 0x4a6e00, 0x8ab2ea, 0x236103, 0xbab4f2, 0x377b03, 0xbab4f1, 0x286607, 0xbba9f4, 0x2a6405, 0xa6a8f7, 0x2e6118, 0xa6a9f6, 0x2e6118, 0xa9a6f5, 0x2c631e, 0xafa7f2, 0x2c631e, 0xada1f2, 0xd26118, 0xa9dff1, 0xd16417, 0xa6def0, 0xd16417, 0xa2d3f1, 0xd36615, 0xa3d2f0, 0xcd6013, 0xa1d2f6, 0xcb6215, 0xa2d3f6, 0xc47d16, 0xa2d2f4, 0xc37829, 0xa2d2f4, 0xc27b28, 0x9dddf6, 0xc1782a, 0x9adbf7, 0xce7a2e, 0x98d8f2, 0xc8792b, 0x87e6f1, 0xcf7b27, 0x87e6f3, 0xc17b20, 0x82e2f2, 0xc17b20, 0x83e3f3, 0xbc7623, 0x80e2f0, 0xb97320, 0x80e2f1, 0xb76d3e, 0x82e3ee, 0xb66e21, 0x87e3ef, 0xa96924, 0x85e0e8, 0xae6823, 0x84efe9, 0xac6a21, 0x8beee6, 0xad6d20, 0x89eee7, 0xaa6c21, 0x8aede4, 0x949227, 0x88ece2, 0x909121, 0x86eae2, 0x959120, 0x84e8e2,
				0x889022, 0x81e59c, 0x879322, 0x82e69d, 0x809220, 0x81e39b, 0x819321, 0x80fc9b, 0x809222, 0x81ff9a, 0x81932d, 0x80f89a, 0x80922c, 0x80fb99, 0x80922c, 0x81fa99, 0x80922c, 0x80f598, 0x81902b, 0x82ce9a, 0x829e3b, 0xa3f996, 0xfb6850, 0x6adf8b, 0xaa0a63, 0x40f999, 0xbb0567, 0x4df29e, 0xbf016b, 0x4df39f, 0xb8066a, 0x40f29f, 0xb5066d, 0x40f398, 0xb3076e, 0x46f29b, 0xb3076e, 0x46f29b, 0xb3076e, 0x46f29b, 0xb3076e, 0x46f29b, 0xb3076e, 0x46f29b, 0xb3076e, 0x46f29b, 0xb3076e, 0x46f29b, 0xb3076e, 0x46f29b, 0xb3076e, 0x46f29b, 0xb3076e, 0x46f29b, 0xb3076e, 0x46f29b, 0xb3076e, 0x47f19b, 0xb3076e, 0x40f396, 0xb10160, 0x5cf195, 0xb20063 };
		System.arraycopy(aFor, 0, key, 54310, aFor.length);
	}

	private static void init183(int[] key) {
		int[] aFor = { 0x47f596, 0xb20063, 0x47f596, 0xb20063, 0x47f596, 0xb20063, 0x47f596, 0xb20063, 0x47f596, 0xb20063, 0x47f596, 0xb20063, 0x47f596, 0xb20063, 0x47f596, 0xb20063, 0x47f594, 0xb20063, 0x47f594, 0xb20063, 0x47f594, 0xb20063, 0x47f594, 0xb20063, 0x47f594, 0xb30162, 0x46f497, 0xb30162, 0x47f596, 0xb40665, 0x43f190, 0xbb0d6d, 0x51f596, 0x9c1c62, 0x35c48e, 0x42046e, 0x5a8b6, 0x2f3466, 0x1fa9b0, 0x280d6c, 0x13a4b2, 0x2e0c6e, 0x11a4b1, 0x500d6f, 0x14a7b4, 0x510c68, 0x16a7b7, 0x510c68, 0x18a6b5, 0x520d6b, 0x19a1b4, 0x550c54, 0x1ba2b4, 0x540d55, 0x5a2b7, 0x571254, 0x2a3b6, 0x571254, 0x2a3b6, 0x541155, 0x3a2b7, 0x5b1654, 0x3a2b7, 0x591753, 0x5a3b7, 0x5b1551, 0x4a2b6, 0x5a1450, 0x5a3b5, 0x641a52, 0x7a3ba, 0x641a52, 0xa1ba, 0x641a52, 0x2a0ba, 0x651b53, 0xda7bb, 0x641a52, 0xea4b8,
				0x641a52, 0x8a5bb, 0x656551, 0xba4ba, 0x646656, 0x14a7ba, 0x656557, 0x14a6bc, 0x666250, 0x13a6bd, 0x666250, 0x10a7bc, 0x676151, 0x1ea6bf, 0x676151, 0x1ea6bf, 0x646e50, 0x19a6bf, 0x656151, 0x1ea8a1, 0x626353, 0x1baba0, 0x626f4c, 0xe8a3a2, 0x4e7950, 0x899da4, 0x697252, 0x9b8aaa, 0x63725c, 0x9485ab, 0x60715f, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9382ac, 0x667759, 0x9283ad, 0x677658, 0x9283ad, 0x677658, 0x9283ad,
				0x677658, 0x9283ad, 0x617659, 0x9481ad, 0x66755e, 0x9083a6, 0x6a7b5b, 0x9c8fa2, 0x756156, 0xa785a6, 0x1f5e48, 0x818aa6, 0xd474b, 0x848abb, 0x15594d, 0x8489be, 0x15444f, 0x9889bc, 0x104e4c, 0x9886a2, 0x104e4c, 0x9789a1, 0x124c4a, 0x9188a6, 0x124c4a, 0x938ea6, 0xec4e4c, 0x97f0a5, 0xef4b43, 0x98f1a4, 0xef4b43, 0x9cfca5, 0xed4941, 0x9dfda4, 0xf34f47, 0x9ffda2, 0xf54d41, 0x9cfca2, 0xfa5242, 0x9cfda0, 0xfd577d, 0x9cfda0, 0xfc547c, 0xa3f2a2, 0xff577e, 0xa4f4a3, 0xf0557a, 0xa6f7a6, 0xf6567f, 0xb9c9a5, 0xf15473, 0xb9c9a7, 0xff5474, 0xbccda6, 0xff5474, 0xbdcca7, 0x825977, 0xbecda4, 0x875c74, 0xbecda5, 0x89426a, 0xbcccba, 0x884175, 0xb9ccbb, 0x974670, 0xbbcfbc, 0x904777, 0xbac0bd, 0x924575, 0xb5c1b2, 0x934274, 0xb7c1b3, 0x944375, 0xb4c2b0, 0xaabd73, 0xb6c3b6, 0xaebe75, 0xb8c5b6,
				0xabbe74, 0xbac7b6, 0xb6bf76, 0xbfcac8, 0xb9bc76, 0xbcc9c9, 0xbebd74, 0xbfcccf, 0xbfbc75, 0xbfcccf, 0xbfa276, 0xbecfce, 0xbea379, 0xbfc8ce, 0xbfa278, 0xbfcbcd, 0xbfa278, 0xbecacd, 0xbfa278, 0xbfc5cc, 0xbea07f, 0xbdfece, 0xbdaf51, 0x9fc4fe, 0xff5d30, 0x67e2d0, 0xa33b3a, 0x48cfc3, 0xb23338, 0x44c4c1, 0xb63734, 0x44c5c0, 0xb13035, 0x49c4c0, 0xbc3032, 0x49c5c7, 0xba3033, 0x4fc5c6, 0xba3033, 0x4fc5c6, 0xba3033, 0x4fc5c6, 0xba3033, 0x4fc5c6, 0xba3033, 0x4fc5c6, 0xba3033, 0x4fc5c6, 0xba3033, 0x4fc5c6, 0xba3033, 0x4fc5c6, 0xba3033, 0x4fc5c6, 0xba3033, 0x4fc5c6, 0xba3033, 0x4fc5c6, 0xba3033, 0x4ec6c6, 0xba3033, 0x49c4cb, 0xb8363d, 0x55c6c8, 0xbb373e };
		System.arraycopy(aFor, 0, key, 54610, aFor.length);
	}

	private static void init184(int[] key) {
		int[] aFor = { 0x4ec2cb, 0xbb373e, 0x4ec2cb, 0xbb373e, 0x4ec2cb, 0xbb373e, 0x4ec2cb, 0xbb373e, 0x4ec2cb, 0xbb373e, 0x4ec2cb, 0xbb373e, 0x4ec2cb, 0xbb373e, 0x4ec2cb, 0xbb373e, 0x4ec2c9, 0xbb373e, 0x4ec2c9, 0xbb373e, 0x4ec2c9, 0xbb373e, 0x4ec2c9, 0xbb373e, 0x4ec2c9, 0xba363f, 0x4fc3ca, 0xba363f, 0x4ec2cb, 0xbd3138, 0x4ac6cd, 0xb23a30, 0x5bcdca, 0x972539, 0x3ff2d2, 0x483232, 0xf9eea, 0x26053b, 0x898ee, 0x3e3b35, 0x493e8, 0x3f3a34, 0x193eb, 0x3e3a36, 0x7f90ec, 0x3b3a37, 0x7d90e9, 0x3a3b36, 0x7292e8, 0x3b3835, 0x7193eb, 0x3a3f34, 0x7792eb, 0x383d0a, 0x6992e8, 0x3b220b, 0x6f92ea, 0x3b220b, 0x6e93e9, 0x3b220b, 0x6d90ea, 0x3b220b, 0x6c91e9, 0x34250a, 0x6d91e9, 0x33270f, 0x6c90e8, 0x32260e, 0x6c90ea, 0xd290d, 0x6e90e5, 0xc2802, 0x6f92e5, 0xb290d, 0x6d93e5, 0xa280c, 0x6294e4, 0xb290d,
				0x6197e7, 0xb290d, 0x6097e5, 0xc280c, 0x62e9e7, 0xd2b0b, 0x7deae7, 0xc280a, 0x7debe1, 0xc280a, 0x78ebe6, 0xd2f0b, 0x78ebe0, 0xf2d0d, 0x77ebe0, 0xe2c0e, 0x77ebe0, 0xe2c0e, 0x73e4e1, 0xf230f, 0x74eaff, 0x8210d, 0x71e9fe, 0x92a15, 0x80e1f8, 0x26380c, 0xe3ddf8, 0x3c330d, 0xcdc4fa, 0x353c0c, 0xc2cbfb, 0x363f0f, 0xc5ccfc, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd, 0x313808, 0xc5ccfc, 0x313808, 0xc4cdfd, 0x313808, 0xc4cdfd,
				0x313808, 0xc4cdfd, 0x303909, 0xc5cefd, 0x343d0f, 0xc1c8f8, 0x393e03, 0xc0cafb, 0x32390c, 0xd0d5f9, 0x193609, 0xbce5e2, 0x322e0a, 0xb8e2e4, 0x373112, 0xa6e0e6, 0x292e17, 0xa7e2e4, 0x20240b, 0xa8ece5, 0x20240b, 0xa7e3e6, 0x22260d, 0xa1e2e1, 0x22260d, 0xa3e4e1, 0xdc240b, 0xa79ae2, 0xdf2104, 0xa89be3, 0xdf2104, 0xac96e2, 0xdd2306, 0xad97e3, 0xc32500, 0xaf97e5, 0xc52706, 0xac96e5, 0xca3805, 0xac97e7, 0xcd3d3a, 0xac97e7, 0xcc3e3b, 0x9398e5, 0xcf3d39, 0x949ee4, 0xc03f3d, 0x969de1, 0xc63c38, 0x89a3e2, 0xc13e34, 0x89a3e0, 0xcf3e33, 0x8ca7e1, 0xcf3e33, 0x8da6e0, 0xb23330, 0x8ea7e3, 0xb73633, 0x8ea7e2, 0xb9282d, 0x8ca6fd, 0xb82b32, 0x89a6fc, 0xa72c37, 0x8ba5fb, 0xa02d30, 0x8aaafa, 0xa22f32, 0x85abf5, 0xa32833, 0x87abf4, 0xa42932, 0x84a8f7, 0x9ad734, 0x86a9f1, 0x9ed432, 0x88aff1,
				0x9bd433, 0x8aadf1, 0x86d531, 0x8fa08f, 0x89d631, 0x8ca38e, 0x8ed733, 0x8fa688, 0x8fd632, 0x8fa688, 0x8fc931, 0x8fa489, 0x8fc83e, 0x8ea389, 0x8ec93f, 0x8ea08a, 0x8ec93f, 0x8fa18a, 0x8ec93f, 0x8eae8b, 0x8fcb38, 0x8d9589, 0x8dc628, 0xa5b79d, 0xcd134b, 0x6fdaa3, 0xa50553, 0x48f3a8, 0xb30e54, 0x45f9ad, 0xb70a58, 0x45f8ac, 0xb00d59, 0x47fead, 0xb20a5f, 0x47ffaa, 0xb40a5e, 0x41ffab, 0xb40a5e, 0x41ffab, 0xb40a5e, 0x41ffab, 0xb40a5e, 0x41ffab, 0xb40a5e, 0x41ffab, 0xb40a5e, 0x41ffab, 0xb40a5e, 0x41ffab, 0xb40a5e, 0x41ffab, 0xb40a5e, 0x41ffab, 0xb40a5e, 0x41ffab, 0xb40a5e, 0x41ffab, 0xb40a5e, 0x40fcab, 0xb40a5e, 0x47fea6, 0xb60c50, 0x5bfca5, 0xb50d53 };
		System.arraycopy(aFor, 0, key, 54910, aFor.length);
	}

	private static void init185(int[] key) {
		int[] aFor = { 0x41f9a7, 0xb50d53, 0x41f9a7, 0xb50d53, 0x41f9a7, 0xb50d53, 0x41f9a7, 0xb50d53, 0x41f9a7, 0xb50d53, 0x41f9a7, 0xb50d53, 0x41f9a7, 0xb50d53, 0x41f9a7, 0xb50d53, 0x41f9a5, 0xb50d53, 0x41f9a5, 0xb50d53, 0x41f9a5, 0xb50d53, 0x41f9a5, 0xb50d53, 0x41f9a5, 0xb20a50, 0x41f9a3, 0xb50d57, 0x46fea4, 0xb40c56, 0x42faa2, 0xba065f, 0x53f1a5, 0x981657, 0x3fc0bd, 0x4a7e63, 0xfd4b5, 0x274e65, 0x9d3b0, 0x3c776c, 0x4d0b2, 0x3e786f, 0x3d0b1, 0x3c796c, 0x7cd1b7, 0x3d7b6d, 0x79d2b0, 0x3c786e, 0x7ad2b0, 0x3d796d, 0x7ad2b0, 0x327e6e, 0x79d3b0, 0x377d50, 0x67d3b1, 0x377d50, 0x67d28f, 0x36626f, 0x62d28e, 0x36626f, 0x62d2b0, 0x376350, 0x60d0b2, 0x396556, 0x63d0b2, 0x396556, 0x64d0b3, 0x3a6655, 0x65d1b0, 0x3a6655, 0x5bd1b3, 0x3a6655, 0x59dcb2, 0x3a6655, 0x5cdcbd, 0x3b6754, 0x5cdcb3, 0x34605b,
				0x5dddb2, 0x34605b, 0x5fdeb1, 0x34605b, 0x58dfb0, 0x351f5c, 0x5bdeb7, 0x351f5c, 0x5adfb7, 0x351f5c, 0x44dcb7, 0x37195a, 0x42ddb7, 0x37195a, 0x41dcb6, 0x361a5b, 0x4eddb5, 0x371a5b, 0x4bddb5, 0x371a5b, 0x4dd2b4, 0x361845, 0x4cd1b1, 0x35155d, 0xbddfb0, 0x1b0644, 0xdfe2b7, 0x20c42, 0xf0f4ba, 0x80c4c, 0xfefaba, 0xd0949, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb, 0xb0f4f, 0xfffbbb,
				0xb0f4f, 0xfefabc, 0xf094e, 0xfcfdb8, 0x8094e, 0xfefbbd, 0x90e45, 0xf9fdbd, 0x2e144e, 0x9bcfbe, 0xc0259, 0x82cfb5, 0xe1e47, 0x82d0a9, 0xc1e58, 0x80d4a9, 0xb1d5b, 0x82d4b4, 0xa1c5a, 0x8cdab6, 0x91f5d, 0x8ddab0, 0xe1e5c, 0x8fdcb0, 0xf01c5a, 0x8ba2b3, 0xf31955, 0x84a3b2, 0xf31955, 0x80aeb3, 0xf11b57, 0x81afb2, 0xef1d51, 0x83afb4, 0xe91f57, 0x80aeb4, 0xe60054, 0x80afb6, 0xe1056b, 0x80afb6, 0xe0066a, 0xbfa0b4, 0xe30568, 0xb8a6b5, 0xec076c, 0xbaa5b0, 0xea0469, 0xa59bb3, 0xed0665, 0xa59bb1, 0xe30662, 0xa09fb0, 0xe30662, 0xa19eb1, 0x9e0b61, 0xa29fb2, 0x9b0e62, 0xa29fb3, 0x95107c, 0xa09eac, 0x941363, 0xa59ead, 0x8a1561, 0xa69cad, 0x8d1466, 0xa793ac, 0x8f1664, 0xa892a3, 0x8e1165, 0xaa92a2, 0x891064, 0xa991a1, 0xb7ee62, 0xab90a7, 0xb3ed64, 0xa596a7, 0xb6ed65, 0xa794a7, 0xabec67,
				0xa299d9, 0xa4ef67, 0xa19ad8, 0xa3ee65, 0xa29fde, 0xa2ef64, 0xa29fde, 0xa2f067, 0xa29ddf, 0xa2f168, 0xa39adf, 0xa3f069, 0xa298dc, 0xa3f069, 0xa197dc, 0xa3f069, 0xa296dd, 0xa0f069, 0xa2afc6, 0xa2fa66, 0x8e8dde, 0xff2001, 0x51f5f3, 0x801d05, 0x6fe4fe, 0x961f06, 0x63eaf3, 0x901900, 0x62ebf4, 0x911807, 0x66ebf3, 0x921802, 0x61ebf1, 0x931f02, 0x67ebf6, 0x931f02, 0x67ebf6, 0x931f02, 0x67ebf6, 0x931f02, 0x67ebf6, 0x931f02, 0x67ebf6, 0x931f02, 0x67ebf6, 0x931f02, 0x67ebf6, 0x931f02, 0x67ebf6, 0x931f02, 0x67ebf6, 0x931f02, 0x67ebf6, 0x931f02, 0x67ebf6, 0x931f02, 0x60eaf6, 0x931f02, 0x60ebfa, 0x91190c, 0x7fe8fa, 0x91190c };
		System.arraycopy(aFor, 0, key, 55210, aFor.length);
	}

	private static void init186(int[] key) {
		int[] aFor = { 0x62eaff, 0x91190c, 0x62eaff, 0x91190c, 0x62eaff, 0x91190c, 0x62eaff, 0x91190c, 0x62eaff, 0x91190c, 0x62eaff, 0x91190c, 0x62eaff, 0x91190c, 0x62eaff, 0x91190c, 0x62eaf9, 0x91190c, 0x62eaf9, 0x91190c, 0x62eaf9, 0x91190c, 0x62eaf9, 0x91190c, 0x65edfa, 0x961e0f, 0x65edfc, 0x911908, 0x62eafb, 0x901809, 0x66eefd, 0x911501, 0x78e2fb, 0xb30509, 0x14d3e3, 0x616d3d, 0x24c7eb, 0x35d3b, 0x28c1ef, 0x1c6234, 0x2bc4e9, 0x126335, 0x2fcbeb, 0x116337, 0x51cbec, 0x106230, 0x54cbef, 0x11610f, 0x57cbd1, 0x11610d, 0x56cad0, 0x1e660e, 0x55cbd0, 0x19650f, 0x57cbef, 0x7650e, 0x57cad1, 0x67a31, 0x52cad0, 0x67a31, 0x52caee, 0x77b0e, 0x50c8ec, 0x87c0f, 0x51c8ec, 0xb7d08, 0x56c8ed, 0x87e0b, 0x56c8ef, 0x97f0a, 0x68c8ec, 0x97f0a, 0x6ac5ed, 0x97f0a, 0x6fc5e2, 0x97f0a, 0x6ec4ed, 0x67805, 0x6fc5ec,
				0x67805, 0x6dc6ef, 0x67805, 0x6ac7ee, 0x70702, 0x69c6e9, 0x70702, 0x68c7e9, 0x70702, 0x76c4e9, 0x40005, 0x71c4e8, 0x40005, 0x72c5e9, 0x50304, 0x7dc4ea, 0x50304, 0x7cc4e9, 0x60c07, 0x7cc4e8, 0x70e19, 0x70c6ea, 0x60201, 0x80c8ec, 0x241218, 0xe0f6eb, 0x3d181e, 0xcfe0e6, 0x371810, 0xc1eee6, 0x321d15, 0xc0efe7, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13, 0xc7e8e0, 0x341b13,
				0xc7e8e0, 0x341b13, 0xc0efe1, 0x311e10, 0xc3ede5, 0x301913, 0xc6ebe0, 0x3d1c18, 0xcbeae0, 0x2a0114, 0xe8defb, 0x4c0c12, 0xd9ddff, 0x540d12, 0xdec1fe, 0x500f0f, 0xdec3fc, 0x52090f, 0xd8c1e0, 0x50090e, 0xd6cfe2, 0x530a09, 0xd7cfe4, 0x540b08, 0xd5c9e4, 0xaa090e, 0xd1b7e7, 0xa90c01, 0xdeb6e6, 0xa90c01, 0xdabbe7, 0xab0e03, 0xdbbae6, 0xb50805, 0xd9bae0, 0xb30a03, 0xdabbe0, 0xbc1500, 0xdabae2, 0xbb103f, 0xdabae2, 0xba133e, 0xe5b5e0, 0xb9103c, 0xe2b3e1, 0xb61238, 0xe0b0e4, 0xb0113d, 0xff8ee7, 0xb71331, 0xff8ee5, 0xb91336, 0xfa8ae4, 0xb91336, 0xfb8be5, 0xc41e35, 0xf88ae6, 0xc11b36, 0xf88ae7, 0xcf0528, 0xfa8bf8, 0xce0637, 0xff8bf9, 0xd10132, 0xfd88fe, 0xd60035, 0xfc87ff, 0xd40237, 0xf386f0, 0xd50536, 0xf186f1, 0xd20437, 0xf285f2, 0xecfa31, 0xf084f4, 0xe8f937, 0xfe82f4, 0xedf936,
				0xfc80f4, 0xf0f834, 0xf98d8a, 0xfffb34, 0xfa8e8b, 0xf8fa36, 0xf98b8d, 0xf9fb37, 0xf98b8d, 0xf9e434, 0xf9898c, 0xf9e53b, 0xf98e8d, 0xf9e43b, 0xfb8d8d, 0xf9e43b, 0xfb838e, 0xfae53a, 0xfa8188, 0xfae239, 0xfbbc97, 0xfaeb35, 0xca978f, 0xb2226b, 0x6fc9c, 0xd31165, 0x23eb9e, 0xda1066, 0x2fe593, 0xdc1660, 0x2ee494, 0xda1661, 0x2de595, 0xd91664, 0x2ae597, 0xd81164, 0x2be297, 0xd81164, 0x2be297, 0xd81164, 0x2be297, 0xd81164, 0x2be297, 0xd81164, 0x2be297, 0xd81164, 0x2be297, 0xd81164, 0x2be297, 0xd81164, 0x2be297, 0xd81164, 0x2be297, 0xd81164, 0x2be297, 0xd81164, 0x2be297, 0xd81164, 0x2ae597, 0xd81164, 0x2be59c, 0xda176a, 0x34e69c, 0xda176a };
		System.arraycopy(aFor, 0, key, 55510, aFor.length);
	}

	private static void init187(int[] key) {
		int[] aFor = { 0x29e499, 0xda176a, 0x29e499, 0xda176a, 0x29e499, 0xda176a, 0x29e499, 0xda176a, 0x29e499, 0xda176a, 0x29e499, 0xda176a, 0x29e499, 0xda176a, 0x29e499, 0xda176a, 0x29e499, 0xda176a, 0x29e49f, 0xda176a, 0x29e49f, 0xda176a, 0x29e49f, 0xda176a, 0x2ee39c, 0xdd1069, 0x29e49d, 0xdd1069, 0x2ee398, 0xdc1168, 0x2ae79c, 0xdd1c60, 0x34eb9a, 0xff0c68, 0x58da82, 0x2d645c, 0x69cf8a, 0x4f5645, 0x64ca91, 0x56694a, 0x61cf97, 0x58684b, 0x64cf94, 0x59674a, 0x66ce91, 0x27674d, 0x64cf93, 0x20664c, 0x65cc92, 0x20674e, 0x67cc93, 0x2f604d, 0x64cc92, 0x286172, 0x66cf92, 0x296073, 0x78cf91, 0x296073, 0x7acf93, 0x2e7f72, 0x7bce90, 0x2d7c73, 0x7acf97, 0x227b72, 0x7bcf91, 0x217a75, 0x7acc90, 0x217a75, 0x7fcc93, 0x207b74, 0x7fcc91, 0x1f7477, 0x7dcc90, 0x1e7578, 0x7dcf9f, 0x197477, 0x7ecf9e,
				0x167374, 0x7ecf9e, 0x177275, 0x7dcc9f, 0x177275, 0x7bcd9e, 0x160d72, 0x7bcd98, 0x150c73, 0x7acc98, 0x150c73, 0x65ce99, 0x170a75, 0x62ce98, 0x170a75, 0x62ce9e, 0x150873, 0x6dcf9d, 0x150873, 0x6ccf9e, 0x160770, 0x6dce80, 0x160471, 0x61cc82, 0x140f68, 0x91c684, 0x351c70, 0xf1f883, 0x2c1676, 0xdeee8e, 0x261678, 0xd0e08e, 0x23137b, 0xd1e189, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e,
				0x25157d, 0xd6e68e, 0x25157d, 0xd6e68e, 0x25157d, 0xd1e68c, 0x23167d, 0xd1e588, 0x23167d, 0xd6e589, 0x2a1d7e, 0xd1ea86, 0x3d0570, 0xece182, 0x5a386f, 0xc5eb84, 0x4a276c, 0xc3ed86, 0x4e2076, 0xc0ec85, 0x492b6b, 0xc3e384, 0x4b2b6a, 0xcded86, 0x48286d, 0xcced80, 0x4f296c, 0xceeb80, 0xb12b6a, 0xca9583, 0xb22e65, 0xc59482, 0xb22e65, 0xc19983, 0xb02c67, 0xc09882, 0xae2a61, 0xc29884, 0xa82867, 0xc19984, 0xa73764, 0xc19886, 0xa0325b, 0xc19886, 0xa1315a, 0xfe9784, 0xa23258, 0xf99185, 0xad305c, 0xfb9280, 0xab3359, 0xe4ac83, 0xac3155, 0xe4ac81, 0xa23152, 0xe1a880, 0xa23152, 0xe0a981, 0xdf3c51, 0xe3a882, 0xda3952, 0xe3a883, 0xd4274c, 0xe1a99c, 0xd52453, 0xe4a99d, 0xca2356, 0xe6aa9a, 0xcd2251, 0xe7a59b, 0xcf2053, 0xe8a494, 0xce2752, 0xeaa495, 0xc92653, 0xe9a796, 0xf7d855, 0xeba690,
				0xf3db53, 0xe5a090, 0xf6db52, 0xe7a290, 0xebda50, 0xe2afee, 0xe4d950, 0xe1acef, 0xe3d852, 0xe2a9e9, 0xe2d953, 0xe2a9e9, 0xe2c650, 0xe2abe8, 0xe2c75f, 0xe2abe8, 0xe3c05f, 0xe1a9e9, 0xe3c05f, 0xe1a7ea, 0xe0c15e, 0xe0a2ef, 0xe0c35f, 0xe09cf3, 0xe2c651, 0xd144ec, 0xaff904, 0x141cf9, 0xccec03, 0x2315fb, 0xd4ec0f, 0x2119fc, 0xd2ea0f, 0x211bfb, 0xd5e90e, 0x221afa, 0xd6e90b, 0x251afa, 0xd7ee0b, 0x241df8, 0xd7ee0b, 0x241df8, 0xd7ee0b, 0x241df8, 0xd7ee0b, 0x241df8, 0xd7ee0b, 0x241df8, 0xd7ee0b, 0x241df8, 0xd7ee0b, 0x241df8, 0xd7ee0b, 0x241df8, 0xd7ee0b, 0x241df8, 0xd7ee0b, 0x241df8, 0xd7ee0b, 0x241df8, 0xd7ee0b, 0x251af8, 0xd7ee0b, 0x241af3, 0xd5e805, 0x3b19f3, 0xd5e805 };
		System.arraycopy(aFor, 0, key, 55810, aFor.length);
	}

	private static void init188(int[] key) {
		int[] aFor = { 0x211cf1, 0xd5e805, 0x211cf1, 0xd5e805, 0x211cf1, 0xd5e805, 0x211cf1, 0xd5e805, 0x211cf1, 0xd5e805, 0x211cf1, 0xd5e805, 0x211cf1, 0xd5e805, 0x211cf1, 0xd5e805, 0x211cf1, 0xd5e805, 0x211cf3, 0xd5e805, 0x211cf3, 0xd5e805, 0x211cf3, 0xd5e805, 0x211cf3, 0xd2ef06, 0x261bf2, 0xd2ef06, 0x211cf7, 0xd3ee07, 0x2518f3, 0xd2e30f, 0x3b14f5, 0xf0f307, 0x5625ed, 0x239b33, 0x6031e6, 0x45ab29, 0x6f30fa, 0x5e9220, 0x6934fd, 0x519321, 0x6b34fe, 0x569c20, 0x6834fa, 0x579d21, 0x1634ff, 0x529d20, 0x1634fd, 0x539f21, 0x1535fd, 0x529e20, 0x1835fe, 0x54981e, 0x1935c1, 0x579b21, 0x634c3, 0x579b21, 0x434c1, 0x508420, 0x535c2, 0x538721, 0x434c5, 0x538721, 0xb34c3, 0x528020, 0x835c4, 0x538321, 0xe36c4, 0x508022, 0xf37c7, 0x6f8f21, 0xd37c6, 0x6f8f21, 0xc35c6, 0x6f8f21, 0x935c9, 0x6e8e20,
				0x632ca, 0x6e8e20, 0x733c9, 0x6d8d23, 0x132c8, 0x6cf224, 0x132ce, 0x6ff325, 0x33ce, 0x6ff325, 0x1f31cf, 0x6ef224, 0x1a31c8, 0x6ef224, 0x1b36cf, 0x6df323, 0x1534cd, 0x6df323, 0x1535cf, 0x6ffd21, 0x1534d1, 0x6cff20, 0x1a38d2, 0x6efa3b, 0xeb33d7, 0x4fe923, 0x8b0dd0, 0x56e325, 0xa41bdd, 0x5ce32b, 0xaa15d3, 0x59e626, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4, 0x5fe020, 0xab14d4,
				0x5fe020, 0xab14d4, 0x5fe020, 0xa915d3, 0x5de720, 0xaf13d3, 0x5de720, 0xa814d4, 0x52e221, 0xa814d6, 0x59e423, 0x840ed0, 0x42ec20, 0xe83bcc, 0x7cf72b, 0xf430cd, 0x78fc22, 0xf537d2, 0x72f23e, 0xfb3bd1, 0x73f33f, 0xf535d3, 0x70f038, 0xf435d5, 0x77f139, 0xf633d5, 0x89f33f, 0xf24dd6, 0x8af630, 0xfd4cd7, 0x8af630, 0xf941d6, 0x88f432, 0xf840d7, 0x96f234, 0xfa40d1, 0x90f032, 0xf941d1, 0x9fef31, 0xf940d3, 0x98ea0e, 0xf940d3, 0x99e90f, 0xc64fd1, 0x9aea0d, 0xc149d0, 0x95e809, 0xc34ad5, 0x8cea0d, 0xc375d7, 0x8be801, 0xcc74d2, 0x8ae901, 0xc970d3, 0x8ae901, 0xc871d2, 0xf7e402, 0xcb70d1, 0xf2e101, 0xcb70d0, 0xfcff1f, 0xc971cf, 0xfdfc00, 0xcc71ce, 0xe2fb05, 0xce72c9, 0xe5fa02, 0xcf7dc8, 0xe7f800, 0xc07cc7, 0xe6ff01, 0xc27cc6, 0xe1fe00, 0xc17fc5, 0xdf0006, 0xc37ec3, 0xdb0300, 0xcd78c3,
				0xde0301, 0xcf7ac3, 0xc30203, 0xca77bd, 0xcc0103, 0xc974bc, 0xcb0001, 0xca71ba, 0xca0100, 0xca71ba, 0xca1e03, 0xca73bb, 0xca1f0c, 0xca73bb, 0xca180d, 0xcb70b8, 0xca180d, 0xc87fb8, 0xc9190c, 0xc97abd, 0xc91a12, 0xc97abf, 0xce2519, 0xf4acdb, 0x776e30, 0xc986ce, 0x107437, 0xfe8dc2, 0x97436, 0xfc81c5, 0xf7236, 0xfc83c0, 0x87135, 0xff82c1, 0xa7633, 0xf985c2, 0xb7133, 0xff85c7, 0xb7133, 0xff85c7, 0xb7133, 0xff85c7, 0xb7133, 0xff85c7, 0xb7133, 0xff85c7, 0xb7133, 0xff85c7, 0xb7133, 0xff85c7, 0xb7133, 0xff85c7, 0xb7133, 0xff85c7, 0xb7133, 0xff85c7, 0xb7133, 0xff85c7, 0xb7133, 0xf884c7, 0xb7133, 0xf885cb, 0x9773d, 0xe786cb, 0x9773d };
		System.arraycopy(aFor, 0, key, 56110, aFor.length);
	}

	private static void init189(int[] key) {
		int[] aFor = { 0xfd83c9, 0x9773d, 0xfd83c9, 0x9773d, 0xfd83c9, 0x9773d, 0xfd83c9, 0x9773d, 0xfd83c9, 0x9773d, 0xfd83c9, 0x9773d, 0xfd83c9, 0x9773d, 0xfd83c9, 0x9773d, 0xfd83c9, 0x9773d, 0xfd83c9, 0x9773d, 0xfd83c9, 0x9773d, 0xfd83c9, 0x9773d, 0xfd83c9, 0xe703a, 0xfa84ce, 0xe703a, 0xfd83cb, 0xf713b, 0xf987cf, 0xe7c33, 0xe78bc9, 0x2b633a, 0x8cb4d7, 0xf80b09, 0xbba1dc, 0x9f3812, 0xb5a3c1, 0x84011b, 0xb0a7c7, 0x87011c, 0xbea7c2, 0x82001f, 0xbca8c5, 0x82001f, 0xc2a8c2, 0x83011c, 0xc1abc1, 0x83001a, 0xc6abc6, 0x80071b, 0xc8abc5, 0x83071a, 0xceaac5, 0x83071a, 0xd3a9fb, 0x83071a, 0xd2b7fa, 0x83071a, 0xd6b6f8, 0x80041b, 0xd6b6f8, 0x80041b, 0xd8b7f9, 0x80041b, 0xd9b0f8, 0x83051c, 0xdeb0f9, 0x80061f, 0xdeb0fb, 0x81071e, 0xe0b0f8, 0x81071e, 0xe3bef8, 0x80041f, 0xe6bef7, 0x80041f, 0xe7bff6,
				0x80041f, 0xe8b8f7, 0x81051e, 0xeabaf5, 0x81051e, 0xecc5f2, 0x81051e, 0xecc5f4, 0x82041f, 0xedc4f4, 0x9c0619, 0xeec2f5, 0x9c0619, 0xe8c5f5, 0x9e001b, 0xe9c6f6, 0x9e001b, 0xe6c6f6, 0x9c0e19, 0xe5c6f6, 0x9d0c06, 0xebcbf4, 0x9f091d, 0x1bc1f6, 0xb81805, 0x7cfcf6, 0xa11203, 0x53eafb, 0xab120d, 0x5de4f5, 0xae1700, 0x5ce5f4, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6, 0xa81102, 0x5ce5f6,
				0xa81102, 0x5ce5f6, 0xa81102, 0x5ee5f7, 0xab1603, 0x5fe2f7, 0xac1104, 0x5fe2f7, 0xa91602, 0x51e2f1, 0xa21104, 0x48e0f3, 0x900a07, 0x28d1e9, 0xb61c0e, 0x3bd4e6, 0xb01f08, 0x3dd4f8, 0xb51c14, 0x3cd5fb, 0xb41d15, 0x32dbf9, 0xb71e12, 0x33dbff, 0xb01f13, 0x31ddff, 0x4e1d15, 0x35a3fc, 0x4d181a, 0x3aa2fd, 0x4d181a, 0x3eaffc, 0x4f1a18, 0x3faefd, 0x511c1e, 0x3daefb, 0x571e18, 0x3eaffb, 0x58011b, 0x3eaef9, 0x5f0424, 0x3eaef9, 0x5e0725, 0x1a1fb, 0x5d0427, 0x6a7fa, 0x520623, 0x4a4ff, 0x4b0427, 0x49bfd, 0x4c062b, 0xb9af8, 0x4d072b, 0xe9ef9, 0x4d072b, 0xf9ff8, 0x300a28, 0xc9efb, 0x350f2b, 0xc9efa, 0x3b1135, 0xe9fe5, 0x3a122a, 0xb9fe4, 0x25152f, 0x99ce3, 0x221428, 0x893e2, 0x20162a, 0x792ed, 0x21112b, 0x592ec, 0x26102a, 0x691ef, 0x18ee2c, 0x490e9, 0x1ced2a, 0xa96e9, 0x19ed2b, 0x894e9,
				0x4ec29, 0xd9997, 0xbef29, 0xe9a96, 0xcee2b, 0xd9f90, 0xdef2a, 0xd9f90, 0xdf029, 0xd9d91, 0xdf126, 0xc9c9e, 0xcf728, 0xd9f9d, 0xcf728, 0xf9f9e, 0xef92a, 0xe9b9a, 0xec630, 0xfa79d, 0x1cd30, 0x4558fc, 0xcd9113, 0xc7dec, 0xd78915, 0x3873e3, 0xc08817, 0x357de4, 0xc68e17, 0x357fe1, 0xc18d14, 0x367ee0, 0xc38a12, 0x307fe0, 0xc38a12, 0x377ee6, 0xc38a12, 0x377ee6, 0xc38a12, 0x377ee6, 0xc38a12, 0x377ee6, 0xc38a12, 0x377ee6, 0xc38a12, 0x377ee6, 0xc38a12, 0x377ee6, 0xc38a12, 0x377ee6, 0xc38a12, 0x377ee6, 0xc38a12, 0x377ee6, 0xc38a12, 0x377ee6, 0xc38a12, 0x307fe6, 0xc38a12, 0x307eea, 0xc18c1c, 0x2f7dea, 0xc18c1c };
		System.arraycopy(aFor, 0, key, 56410, aFor.length);
	}

	private static void init190(int[] key) {
		int[] aFor = { 0x3578e8, 0xc18c1c, 0x3578e8, 0xc18c1c, 0x3578e8, 0xc18c1c, 0x3578e8, 0xc18c1c, 0x3578e8, 0xc18c1c, 0x3578e8, 0xc18c1c, 0x3578e8, 0xc18c1c, 0x3578e8, 0xc18c1c, 0x3578e8, 0xc18c1c, 0x3578e8, 0xc18c1c, 0x3578e8, 0xc18c1c, 0x3578e8, 0xc18c1c, 0x3578e8, 0xc18c1c, 0x3578e8, 0xc18c1c, 0x327fed, 0xc08d1d, 0x367be9, 0xc18015, 0x2877ef, 0xe49f1c, 0x4348f1, 0x36882e, 0x7223f6, 0x56ba38, 0x7f20ea, 0x4f8133, 0x7b27ef, 0x4e8034, 0x7726ea, 0x4d8e37, 0x7029ee, 0x4e8134, 0xe29e9, 0x4e8134, 0xc2be9, 0x4e8032, 0xa2ae9, 0x4f8135, 0x82ae8, 0x408636, 0xb2be8, 0x468637, 0x92bd7, 0x598536, 0x835d6, 0x598536, 0xd35d7, 0x588435, 0xd35d7, 0x588435, 0xf36d4, 0x578536, 0xe31d5, 0x548431, 0x830d5, 0x558530, 0xb33d4, 0x548431, 0x3432d4, 0x558532, 0x343dd7, 0x568431, 0x333dd6, 0x55873e, 0x323cd7,
				0x55873e, 0x3d3bd6, 0x54863f, 0x3e38d5, 0x55873e, 0x3938d5, 0x55873e, 0x3847d4, 0x56863f, 0x3946d4, 0x498738, 0x3844d3, 0x498738, 0x3d44d4, 0x4b813a, 0x3c47d7, 0x4b813a, 0x3347d7, 0x4a8039, 0x3348d6, 0x4b8226, 0x3d45d4, 0x49873d, 0xcd4fd6, 0x6f9724, 0xab73d7, 0x769d22, 0x8465da, 0x7c9d2c, 0x8a6bd4, 0x799821, 0x8b6ad5, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8b6ad7,
				0x7f9e23, 0x8b6ad7, 0x7f9e23, 0x8a6dd7, 0x7f9e23, 0x8a6dd7, 0x7e9f24, 0x8d6cd7, 0x799823, 0x8c6cd1, 0x799924, 0x8a6edc, 0x6e9f2b, 0xa87fc4, 0x1ae2e, 0x9464c4, 0x1ead28, 0x9566c7, 0x1dac2a, 0x9465c5, 0x1cad2b, 0x9a6bc7, 0x1fae2c, 0x9b6bc1, 0x18af2d, 0x996dc1, 0xe6ad2b, 0x9d13c2, 0xe5a824, 0x9212c3, 0xe5a824, 0x961fc2, 0xe7aa26, 0x971ec3, 0xf9ac20, 0x951ec5, 0xffae26, 0x961fc5, 0xf0b125, 0x961ec7, 0xf7b41a, 0x961ec7, 0xf6b71b, 0xa911c5, 0xf5b419, 0xae17c4, 0xfab61d, 0xac14c1, 0xfcb518, 0xb32ac2, 0xfbb714, 0xb32ac0, 0xf5b713, 0xb62ec1, 0xf5b713, 0xb72fc0, 0x88ba10, 0xb42ec3, 0x8dbf13, 0xb42ec2, 0x83a10d, 0xb62fdd, 0x82a212, 0xb32fdc, 0x9da517, 0xb12cdb, 0x9aa410, 0xb023da, 0x98a612, 0xbf22d5, 0x99a113, 0xbd22d4, 0x9ea012, 0xbe21d7, 0xa05e14, 0xbc20d1, 0xa45d12, 0xb226d1,
				0xa15d13, 0xb024d1, 0xbc5c11, 0xb529af, 0xb25f11, 0xb72aae, 0xb55e13, 0xb42fa8, 0xb45f12, 0xb42fa8, 0xb44011, 0xb42da9, 0xb4411e, 0xb42da9, 0xb4461f, 0xb62fa9, 0xb5451e, 0xb62da8, 0xb6481b, 0xb628b5, 0xb6731d, 0xb417b2, 0xae6105, 0xfcc2dd, 0x72122e, 0xb3fed3, 0x680a2b, 0x87f0df, 0x700a2c, 0x85ffdf, 0x760c2c, 0x85fdd8, 0x710f2d, 0x86fcd9, 0x73082b, 0x80fdd9, 0x710b2b, 0x85ffdf, 0x710b2b, 0x85ffdf, 0x710b2b, 0x85ffdf, 0x710b2b, 0x85ffdf, 0x710b2b, 0x85ffdf, 0x710b2b, 0x85ffdf, 0x710b2b, 0x85ffdf, 0x710b2b, 0x85ffdf, 0x710b2b, 0x85ffdf, 0x710b2b, 0x85ffdf, 0x710b2b, 0x85ffdf, 0x710b2b, 0x82fedf, 0x710b2b, 0x82ffd3, 0x730d25, 0x9dfcd3, 0x730d25 };
		System.arraycopy(aFor, 0, key, 56710, aFor.length);
	}

	private static void init191(int[] key) {
		int[] aFor = { 0x87f9d1, 0x730d25, 0x87f9d1, 0x730d25, 0x87f9d1, 0x730d25, 0x87f9d1, 0x730d25, 0x87f9d1, 0x730d25, 0x87f9d1, 0x730d25, 0x87f9d1, 0x730d25, 0x87f9d1, 0x730d25, 0x87f9d1, 0x730d25, 0x87f9d1, 0x730d25, 0x87f9d1, 0x730d25, 0x87f9d1, 0x730d25, 0x87f9d1, 0x730d25, 0x87f9d7, 0x730d25, 0x80fed4, 0x720c24, 0x84fbd6, 0x73002c, 0x9af7d6, 0x571e22, 0xffc6cc, 0x89072c, 0xcdacf4, 0xe9353a, 0xc0afe8, 0xf00e31, 0xc3abea, 0xf70d30, 0xcfa8ed, 0xf60f31, 0xcba8ea, 0xf60f33, 0xc9a8ef, 0x890032, 0xc8a9ee, 0x8a0333, 0xcea9e8, 0x8b0234, 0xcca9e9, 0x840537, 0xcfa8e9, 0x840537, 0xc9a8e8, 0x870608, 0xd6b6e8, 0x870608, 0xd4a9e8, 0x870608, 0xd3b6e9, 0x86070b, 0xd0b7e9, 0x87060a, 0xdeb2e9, 0x87060a, 0xdbb2ee, 0x86070b, 0xd8b1ef, 0x86070b, 0xe6b1ee, 0x86070b, 0xe7bfee, 0x850608, 0xe6bcef,
				0x820707, 0xe4bdef, 0x830606, 0xe4bde1, 0x8c0109, 0xe6bfe3, 0x8c0109, 0xe7bfe3, 0x8c0109, 0xe0bee0, 0x8d7e0a, 0xe3c1e0, 0x93000c, 0xe2c3e7, 0x93000c, 0xe7c3e0, 0x92070d, 0xe4c2e3, 0x93040c, 0xebc2e1, 0x92050f, 0xeac2e1, 0x9d0b0e, 0xebccfc, 0x9f0e15, 0x1bc6fe, 0xb91e0c, 0x7dfaff, 0xa0140a, 0x52ecf2, 0xaa1404, 0x5ce2fc, 0xaf1109, 0x5ce0fd, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff,
				0xa9130b, 0x5de7ff, 0xa9130b, 0x5de7ff, 0xa9130b, 0x5ae0f8, 0xaf130c, 0x58e0fe, 0xae120d, 0x5be1f9, 0xa8120a, 0x5ce6f8, 0xaa100c, 0x52e8fa, 0xbf1d02, 0x6cfbf6, 0xd72004, 0x77f1f6, 0xfb391a, 0x7cf0f6, 0xf9391a, 0x71f0f5, 0xf9381b, 0x7ffef7, 0xfa3b1c, 0x7efef1, 0xfd3a1d, 0x7cf8f1, 0x3381b, 0x7886f2, 0x3d14, 0x7787f3, 0x3d14, 0x738af2, 0x23f16, 0x728bf3, 0x1c3910, 0x708bf5, 0x1a3b16, 0x738af5, 0x152415, 0x738bf7, 0x12212a, 0x738bf7, 0x13222b, 0x4c84f5, 0x102129, 0x4b82f4, 0x1f232d, 0x4981f1, 0x192028, 0x56bff2, 0x1e2224, 0x56bff0, 0x102223, 0x53bbf1, 0x102223, 0x52baf0, 0x6d2f20, 0x51bbf3, 0x682a23, 0x51bbf2, 0x66343d, 0x53baed, 0x673722, 0x56baec, 0x783027, 0x54b9eb, 0x7f3120, 0x55b6ea, 0x7d3322, 0x5ab7e5, 0x7c3423, 0x58b7e4, 0x7b3522, 0x5bb4e7, 0x45cb24, 0x59b5e1, 0x41c822,
				0x57b3e1, 0x44c823, 0x55b1e1, 0x59c921, 0x50bc9f, 0x57ca21, 0x52bf9e, 0x51cc23, 0x50bd98, 0x50cd22, 0x50bd98, 0x50d221, 0x50bf99, 0x50d32e, 0x50b898, 0x50d32e, 0x52ba98, 0x50d32e, 0x52b49b, 0x52d029, 0x52b086, 0x52ed2c, 0x5e839b, 0x740b53, 0x16b8bb, 0x826e42, 0x3f85b8, 0xe8764c, 0x78cb8, 0xf17548, 0x483b9, 0xf0714a, 0x380be, 0xf7724b, 0x81bf, 0xf5754d, 0x680bf, 0xf7764d, 0x382b9, 0xf7764d, 0x382b9, 0xf7764d, 0x382b9, 0xf7764d, 0x382b9, 0xf7764d, 0x382b9, 0xf7764d, 0x382b9, 0xf7764d, 0x382b9, 0xf7764d, 0x382b9, 0xf7764d, 0x382b9, 0xf7764d, 0x382b9, 0xf7764d, 0x382b9, 0xf7764d, 0x483b9, 0xf7764d, 0x482b5, 0xf57043, 0x1b81b5, 0xf57043 };
		System.arraycopy(aFor, 0, key, 57010, aFor.length);
	}

	private static void init192(int[] key) {
		int[] aFor = { 0x184b7, 0xf57043, 0x184b7, 0xf57043, 0x184b7, 0xf57043, 0x184b7, 0xf57043, 0x184b7, 0xf57043, 0x184b7, 0xf57043, 0x184b7, 0xf57043, 0x184b7, 0xf57043, 0x184b7, 0xf57043, 0x184b7, 0xf57043, 0x184b7, 0xf57043, 0x184b7, 0xf57043, 0x184b7, 0xf57043, 0x184b1, 0xf57043, 0x683b2, 0xf47142, 0x286b0, 0xf57d4a, 0x1f85b1, 0xd26c45, 0x7bb5a8, 0xd7448, 0x4fdf90, 0x6b465e, 0x43dd8a, 0x737c51, 0x40d98a, 0x747f50, 0x4cda8d, 0x757d51, 0x49da8a, 0x747d53, 0x4ada8d, 0xa7252, 0x4bdb8c, 0xa7250, 0x4ed88b, 0xb7357, 0x4cd88a, 0x47454, 0x4fd88b, 0x47555, 0x49d88a, 0x7766a, 0x56d988, 0x76968, 0x54c688, 0x76968, 0x53d989, 0x6686b, 0x50d889, 0x7696a, 0x5fda88, 0x66e6b, 0x5cdb8f, 0x16e6a, 0x5cdb89, 0x26d6d, 0x5cdb89, 0x3c6d6c, 0x5dd589, 0x3c6d6c, 0x5ed48a, 0x3d6e6d, 0x5bd485, 0x3d6e6d,
				0x5ad58a, 0x326962, 0x5bd48b, 0x316a61, 0x5ad48b, 0x316a61, 0x5dd588, 0x301562, 0x5eaa88, 0x2e6b64, 0x5fa88f, 0x2e6b64, 0x5da98f, 0x286d62, 0x5ea88c, 0x286d62, 0x50a88d, 0x296f63, 0x5ea98e, 0x29607f, 0x5ca88d, 0x2f6a64, 0xaba28f, 0xa757e, 0xc9918d, 0x147f78, 0xe68882, 0x1e707a, 0xe88682, 0x1b7577, 0xe98783, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375, 0xe98781, 0x1d7375,
				0xe98781, 0x1d7375, 0xee8086, 0x187473, 0xef8787, 0x187473, 0xed8785, 0x1e7470, 0xec8083, 0x197775, 0xe08f83, 0x15797b, 0xf4928e, 0x397176, 0x89a682, 0x1a6f69, 0x9da882, 0x1e6f6e, 0x97a681, 0x1f6e6f, 0x99a883, 0x1d6d6e, 0x99a883, 0x1a6c6d, 0x9bae81, 0xe46e6b, 0x99d382, 0xe36964, 0x94d383, 0xe36964, 0x90de82, 0xe16b66, 0x90d883, 0xfe6a60, 0x90db85, 0xfa6b66, 0x90db85, 0xf67565, 0x91db87, 0xf0715a, 0x91db87, 0xf17259, 0xaed487, 0xf2715b, 0xabd586, 0xff755c, 0xabd680, 0xfb765b, 0xb5d681, 0xff4a57, 0xb7d783, 0xf14a50, 0xb2d382, 0xf14a50, 0xb3d283, 0x8c4753, 0xb0d282, 0x894352, 0xb0d283, 0x86424c, 0xb3cc9c, 0x814253, 0xb0cf9d, 0x9e4556, 0xb2cc9a, 0x994451, 0xb3c39b, 0x944553, 0xb3c194, 0x964552, 0xb2c695, 0x914453, 0xb1c596, 0xafba55, 0xb3c490, 0xabb953, 0xbdc290, 0xaeb952,
				0xbfc090, 0xb2b850, 0xbbcdee, 0xbcbb50, 0xb9ceed, 0xbabd56, 0xbbcced, 0xbbbc57, 0xbbcced, 0xbba254, 0xbbcfec, 0xbba35b, 0xbbc8ed, 0xbba25b, 0xbacaee, 0xbbac5a, 0xbbc8e8, 0xbbab59, 0xbac9e8, 0xbbaa46, 0xacd0f8, 0x944729, 0xfa87d9, 0x6d5e22, 0xd1b4db, 0x7462e, 0xe8bcda, 0x1f4428, 0xebb0da, 0x1f4229, 0xecb3dd, 0x184128, 0xedb5da, 0x184128, 0xebb4da, 0x184128, 0xecb5dc, 0x184128, 0xecb5dc, 0x184128, 0xecb5dc, 0x184128, 0xecb5dc, 0x184128, 0xecb5dc, 0x184128, 0xecb5dc, 0x184128, 0xecb5dc, 0x184128, 0xecb5dc, 0x184128, 0xecb5dc, 0x184128, 0xecb5dc, 0x184128, 0xecb5dc, 0x184128, 0xebb4dc, 0x18402a, 0xebb4d2, 0x1a4625, 0xf4b7d3, 0x1a4625 };
		System.arraycopy(aFor, 0, key, 57310, aFor.length);
	}

	private static void init193(int[] key) {
		int[] aFor = { 0xefb5d1, 0x1a4625, 0xefb5d1, 0x1a4625, 0xefb5d1, 0x1a4625, 0xefb5d1, 0x1a4625, 0xefb5d1, 0x1a4625, 0xefb5d1, 0x1a4625, 0xefb5d1, 0x1a4625, 0xefb5d1, 0x1a4625, 0xeeb2d1, 0x1a4625, 0xeeb2d1, 0x1a4625, 0xeeb2d3, 0x1a4625, 0xeeb2d3, 0x1a4625, 0xeeb2d1, 0x1a4625, 0xeeb2d1, 0x1a4625, 0xe9b5d4, 0x1b4724, 0xeeb2d7, 0x19492d, 0xf5bed4, 0x385625, 0x918fc8, 0xe53016, 0xa69ccf, 0x860402, 0xae9ed4, 0x803e08, 0xb29dd3, 0x813808, 0xb69cd4, 0x8e3a0f, 0xb69cd8, 0x8d3b00, 0xb19cdd, 0x8f3b03, 0xcf93de, 0x8e3a02, 0xcc90df, 0x8f3b01, 0xca91df, 0x8c3d02, 0xcb96df, 0x833a01, 0xce94e0, 0x83393f, 0xcd95e0, 0x9d3b01, 0xcd95e0, 0x9d3b01, 0xc98be2, 0x9f3907, 0xc98be4, 0x9c3a06, 0xca88e5, 0x923c00, 0xcb89e4, 0x913c00, 0xcb89e4, 0x973e02, 0xca86e7, 0x953102, 0xca86e7, 0xaa3e01, 0xcb84e7,
				0xa93f00, 0xcd84e8, 0xa83801, 0xcf83e8, 0xa83801, 0xc084eb, 0xa93900, 0xc084e9, 0xa93900, 0xc586eb, 0xab4706, 0xc586ed, 0xab4706, 0xdb86ea, 0xab4706, 0xda84ed, 0xa84001, 0xdb85ec, 0xad4002, 0xda84ec, 0xa24103, 0xda86f3, 0xac4e03, 0xdf88f3, 0xad4919, 0x2e8ef3, 0x8c5607, 0x4eb5f3, 0x925a05, 0x62a2fe, 0x955a04, 0x60acfc, 0x925f09, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x63acfb, 0x97580f, 0x62abfb, 0x97580f, 0x62abfb, 0x97580f, 0x62abfb, 0x97580f, 0x62abfb, 0x97580f, 0x62abfb, 0x97580f, 0x62acfd,
				0x97580f, 0x62acfd, 0x97580f, 0x62acfd, 0x97580f, 0x62abfb, 0x965908, 0x60abfb, 0x97590d, 0x62aaf5, 0x915802, 0x63abf5, 0x905f03, 0x69a8fb, 0x935e0c, 0x62b1f8, 0x805b0d, 0x48bafa, 0xe87313, 0x6acef6, 0xef0605, 0x67c1f5, 0xed0904, 0x65cef4, 0xe10b1b, 0x62cff5, 0xe10c1a, 0x63cdf7, 0x1c731d, 0x62cef4, 0x197412, 0x60cdf5, 0x177712, 0x63c1f4, 0x117510, 0x62c7f5, 0x137716, 0x7ec7f2, 0x147711, 0x7dd8f3, 0x156811, 0x73c5f0, 0x106f2e, 0x71c5f1, 0x106f2e, 0x4ec8f0, 0x126c2e, 0x4bc8f0, 0x1f682a, 0x4bcbf4, 0x1b6b29, 0x55cbf5, 0x1f572d, 0x57caf9, 0x1f572a, 0x5ccdfa, 0x1f5428, 0x5dccfb, 0x62592b, 0x5eccfa, 0x675d2a, 0x5fcffb, 0x695f34, 0x5cd1e4, 0x6e5f2b, 0x5fd2fb, 0x715935, 0x5dd0f9, 0x765832, 0x5fd0f8, 0x7a5730, 0x5cd2f7, 0x7f5731, 0x5dd4f6, 0x7c5630, 0x5cd7f5, 0x42a836, 0x5ed6f3,
				0x46ab30, 0x50d0f3, 0x43ab31, 0x52d2f3, 0x5fa532, 0x56d0f2, 0x51a64c, 0x57d1f1, 0x54a54b, 0x55d5f3, 0x57a548, 0x55d5f5, 0x57b84e, 0x57d3f7, 0x56b840, 0x56d2f6, 0x57ba45, 0x55d2f6, 0x55b646, 0x55d4e8, 0x558b44, 0x51e8f7, 0x598244, 0x470784, 0xfad5f, 0x7663a8, 0xe1ba51, 0x585ea4, 0x8fae53, 0x7e57a8, 0x86af5e, 0x735aab, 0x80a958, 0x725bac, 0x81a85f, 0x745cad, 0x80a85f, 0x735dad, 0x80a859, 0x745cad, 0x81af59, 0x745cad, 0x81af59, 0x745cad, 0x81af59, 0x745cad, 0x81af59, 0x745cad, 0x81af59, 0x745cad, 0x81af59, 0x745cad, 0x81af59, 0x745cad, 0x81af59, 0x755baf, 0x81af59, 0x755bad, 0x81af59, 0x755bab, 0x81af5f, 0x725aab, 0x81ae5d, 0x725aa5, 0x83a852, 0x6d59aa, 0x83a852 };
		System.arraycopy(aFor, 0, key, 57610, aFor.length);
	}

	private static void init194(int[] key) {
		int[] aFor = { 0x765ba6, 0x83a852, 0x765ba6, 0x83a852, 0x765ba6, 0x83a852, 0x765ba6, 0x83a852, 0x765ba6, 0x83a852, 0x765ba6, 0x83a852, 0x765ba6, 0x83a852, 0x765ba6, 0x83a852, 0x775ca6, 0x83a852, 0x775ca6, 0x83a852, 0x775ca4, 0x83a852, 0x775ca4, 0x83a852, 0x775ca6, 0x83a852, 0x775ca6, 0x83a852, 0x705ba3, 0x82a953, 0x775ca0, 0x80a75a, 0x6c50a3, 0xa1b84c, 0x861a1, 0x7cde7f, 0x3d72a5, 0x1de56a, 0x3a7ebc, 0x14de60, 0x267dbb, 0x15d860, 0x237dbc, 0x1bdb67, 0x237db0, 0x1ada68, 0x267db5, 0x1bd56b, 0x247cb6, 0x65d56a, 0x247cb6, 0x66d66b, 0x237cb5, 0x66d66b, 0x217db6, 0x69d168, 0x247f89, 0x68d269, 0x257fb6, 0x6ad256, 0x3a7cb7, 0x6ad256, 0x3e62b5, 0x68d050, 0x3e62b3, 0x6bd351, 0x3d61b2, 0x65d557, 0x3c60b3, 0x65d557, 0x3f60b3, 0x64d656, 0x3861b2, 0x64d656, 0x3b61b3, 0x5bd955, 0x3b60b0,
				0x59db57, 0x3d60bf, 0x59db57, 0x3e60be, 0x59db57, 0x3167bd, 0x58da56, 0x3167bf, 0x58da56, 0x3465bd, 0x5aa450, 0x3764ba, 0x59a551, 0x2964bd, 0x59a551, 0x2866ba, 0x5aa256, 0x2967bb, 0x5da155, 0x2b64a5, 0x5ca254, 0x2965bb, 0x5cad4b, 0x2f6bb9, 0x5daa53, 0xdf62b9, 0x7dba4d, 0xbf59b9, 0x62b74f, 0x9040b4, 0x68b84c, 0x9e4eba, 0x6dbd49, 0x9f4fbb, 0x6bbb4f, 0x9f4fbb, 0x6bbb4f, 0x9f4fbb, 0x6bbb4f, 0x9f4fbb, 0x6bbb4f, 0x9f4fbb, 0x6bbb4f, 0x9f4fbb, 0x6bbb4f, 0x9f4fbb, 0x6bbb4f, 0x9f4fbb, 0x6bbb4f, 0x9f4fbb, 0x6bbb4f, 0x9f4fbb, 0x6cba4f, 0x984ebb, 0x6bbb4f, 0x9f4fbb, 0x6cba4f, 0x984ebb, 0x6cba4f, 0x984ebb, 0x6cba4f, 0x984ebb, 0x6cba4f, 0x984ebb, 0x6cba4f, 0x984ebb, 0x6cba4f, 0x984ebb, 0x6cba4f, 0x9949bb, 0x6dbd4f, 0x984ebb, 0x6cba4f, 0x9949bb, 0x6dbd4f, 0x984ebb, 0x6cba4f, 0x9949bb,
				0x6dbd49, 0x984ebd, 0x6cba4f, 0x994ebd, 0x6dba4f, 0x994ebb, 0x6dbc48, 0x9b4ebb, 0x6cbc4d, 0x994fb5, 0x6abd42, 0x9a49b5, 0x69bd43, 0x9e4bb7, 0x65bd44, 0x9c4eb7, 0x6dbe41, 0xb556b6, 0x5845d, 0x8b40b5, 0xe865b, 0x8a45b7, 0xc8059, 0x8b46b6, 0xf8359, 0x8c47b7, 0xe845a, 0x8c45b6, 0xcfa5c, 0x7247b5, 0x8fd53, 0x7f47b4, 0x9fd5d, 0x7a4abb, 0x8fe5f, 0x794dba, 0x16fc59, 0x7b4cbd, 0x11fc5e, 0x7853bc, 0x10e35e, 0x764ebf, 0x15e461, 0x744ebe, 0x15e461, 0x4b43bf, 0x17e761, 0x4e43bc, 0x1ae366, 0x4e40b8, 0x1ee063, 0x5040bf, 0x1adc67, 0x5241b3, 0x15df67, 0x5645b7, 0x15dc65, 0x5744b6, 0x6ad266, 0x5647b7, 0x6fd667, 0x5744b6, 0x61d479, 0x525ba9, 0x60d566, 0x5058b6, 0x7ed378, 0x525ab4, 0x79d27f, 0x505ab5, 0x75dd7d, 0x515bba, 0x72de7c, 0x505dbb, 0x71df7d, 0x515eb8, 0x4f217b, 0x535fbe, 0x4b227d,
				0x5e59be, 0x4d227c, 0x4258be, 0x4e207f, 0x4755bf, 0x402301, 0x4555bd, 0x462107, 0x4450be, 0x453f04, 0x4450b8, 0x463d03, 0x4751b9, 0x453d03, 0x4456b4, 0x473c01, 0x4255b4, 0x463305, 0x4652a9, 0x473304, 0x565cbd, 0x48237e, 0x7cbfaf, 0x2e0a70, 0x55da87, 0xc20070, 0x7ae386, 0xaf0e71, 0x5ff68a, 0xa70e72, 0x52fb85, 0xa10870, 0x50fb82, 0xa20f73, 0x57fb81, 0xa30e71, 0x50fb85, 0xa30e71, 0x57fa85, 0xa20971, 0x57fa85, 0xa20971, 0x57fa85, 0xa20971, 0x57fa85, 0xa20971, 0x57fa85, 0xa20971, 0x57fa85, 0xa20971, 0x57fa85, 0xa20971, 0x57fa85, 0xa20971, 0x56fd87, 0xa20971, 0x56fd85, 0xa20971, 0x56fd83, 0xa20971, 0x51fd87, 0xa20971, 0x51fd88, 0xa00f7f, 0x4efe85, 0xa00f7f };
		System.arraycopy(aFor, 0, key, 57910, aFor.length);
	}

	private static void init195(int[] key) {
		int[] aFor = { 0x54fb8b, 0xa00f7f, 0x54fb8b, 0xa00f7f, 0x54fb8b, 0xa00f7f, 0x54fb8b, 0xa00f7f, 0x54fb8b, 0xa00f7f, 0x54fb8b, 0xa00f7f, 0x54fb8b, 0xa00f7f, 0x54fb8b, 0xa00f7f, 0x54fb8b, 0xa00f7f, 0x54fb8b, 0xa00f7f, 0x54fb89, 0xa00f7f, 0x54fb89, 0xa00f7f, 0x54fb8b, 0xa00f7f, 0x54fb8b, 0xa00f7f, 0x53fc8e, 0xa10e7e, 0x54fb8d, 0xa30077, 0x4ff78e, 0x821f61, 0x2bc68c, 0x5f7952, 0x1ed588, 0x3e4247, 0x18d892, 0x347849, 0x4db93, 0x367f49, 0x3db92, 0x347e48, 0xcd89f, 0x357f47, 0xcd89b, 0x307f46, 0xed79a, 0x317e47, 0x70d79b, 0x327d46, 0x76d49b, 0x337e45, 0x74d598, 0x3c7946, 0x70d4a6, 0x3c7946, 0x71d499, 0x3f7a79, 0x6fd498, 0x3f7a79, 0x6cd59b, 0x39647f, 0x6cd59d, 0x39647f, 0x6fd69c, 0x386578, 0x60d19b, 0x386578, 0x62d09c, 0x396679, 0x65d19d, 0x396679, 0x67d09d, 0x386778, 0x58de9d, 0x39647b,
				0x5bdf9c, 0x39647b, 0x5cd892, 0x39647b, 0x51d891, 0x38657a, 0x51d893, 0x38657a, 0x53db90, 0x3e1b7c, 0x53db96, 0x3e1b7c, 0x4eda90, 0x3e1b7c, 0x4fd897, 0x3d1c7b, 0x4fd897, 0x3c1d7a, 0x49d997, 0x3f1c79, 0x4adb96, 0x3f1366, 0x4cd594, 0x3d157d, 0xbed297, 0x1a0565, 0xdee196, 0x10f63, 0xf4f99b, 0x8016c, 0xf2f799, 0x40568, 0xf7f798, 0x2036a, 0xf6f79e, 0x50368, 0xf6f79e, 0x50368, 0xf6f79e, 0x50368, 0xf6f79e, 0x50368, 0xf6f79e, 0x50368, 0xf6f79e, 0x50368, 0xf6f79e, 0x50368, 0xf6f79e, 0x50368, 0xf6f79e, 0x70268, 0xf4f69e, 0x50368, 0xf6f79e, 0x70268, 0xf4f69e, 0x70268, 0xf4f69e, 0x70268, 0xf4f69e, 0x70268, 0xf4f69e, 0x70268, 0xf4f69e, 0x70268, 0xf4f69e, 0x70268, 0xf3f69e, 0x268, 0xf4f69e, 0x70268, 0xf3f69e, 0x268, 0xf4f69e, 0x70268, 0xf3f69e, 0x36a, 0xf4f79c, 0x70268, 0xf3f69c, 0x368,
				0xf3f69a, 0x368, 0xf4f79a, 0x368, 0xf4f79c, 0x6036f, 0xf6f79a, 0x7026e, 0xf4f681, 0xc0371, 0xf7f583, 0x274, 0xe4f38e, 0x21117a, 0x80c190, 0xa0676, 0x8ac791, 0xf5037a, 0x71c697, 0xf7007b, 0x72c391, 0xf10078, 0x71c19f, 0xc0077, 0x76bf9f, 0x30377, 0x77b89e, 0x30275, 0x72b59d, 0x1d007b, 0x72b69f, 0x1e047c, 0x75b598, 0x1f057b, 0x76aa99, 0x1e1a7b, 0x78b49b, 0x1a1846, 0x7bb29b, 0x1a1844, 0x44bf98, 0x181a44, 0x42bf98, 0x161e41, 0x42bd9a, 0x121c43, 0x5cbc99, 0x14214f, 0x53bc99, 0x16224f, 0x57b89d, 0x162249, 0x56bb9a, 0x6b2d48, 0x57b99b, 0x6f2b4b, 0x57b99a, 0x612955, 0x52a685, 0x60284a, 0x51a584, 0x7e2e48, 0x53a782, 0x782e4b, 0x52a981, 0x752f49, 0x53aa8e, 0x762e48, 0x52ad8f, 0x712f49, 0x51ae8c, 0x4fd14f, 0x53af8a, 0x4bd249, 0x5ea98a, 0x4dd248, 0x42a88a, 0x4ed04a, 0x47a5f4, 0x40d34a,
				0x44a7f4, 0x40d34a, 0x42a1f6, 0x42d14c, 0x42a1f6, 0x43ce4a, 0x43a0f1, 0x42cc4b, 0x42a6f3, 0x42c046, 0x42a3f7, 0x42c25b, 0x429ffe, 0x4bf955, 0x6f7996, 0x51e54f, 0x352a4, 0x5d934f, 0x275cb9, 0xb1854f, 0x966b9, 0xdd8a4f, 0x337cb7, 0xcb844f, 0x3e71b8, 0xcd824d, 0x3c71bf, 0xce854e, 0x3b71bc, 0xcf844c, 0x3c71b8, 0xcf844c, 0x3b70b8, 0xcf844c, 0x3b70b8, 0xcf844c, 0x3b70b8, 0xcf844c, 0x3b70b8, 0xcf844c, 0x3b70b8, 0xcf844c, 0x3b70b8, 0xcf844c, 0x3b70b8, 0xcf844c, 0x3b70b8, 0xcf844c, 0x3b70ba, 0xcf844c, 0x3b70b8, 0xcf844c, 0x3b70be, 0xcf844c, 0x3c70ba, 0xcf844c, 0x3c70b5, 0xcd8242, 0x2373b8, 0xcd8242 };
		System.arraycopy(aFor, 0, key, 58210, aFor.length);
	}

	private static void init196(int[] key) {
		int[] aFor = { 0x3976b6, 0xcd8242, 0x3976b6, 0xcd8242, 0x3976b6, 0xcd8242, 0x3976b6, 0xcd8242, 0x3976b6, 0xcd8242, 0x3976b6, 0xcd8242, 0x3976b6, 0xcd8242, 0x3976b6, 0xcd8242, 0x3976b6, 0xcd8242, 0x3976b6, 0xcd8242, 0x3976b4, 0xcd8242, 0x3976b4, 0xcd8242, 0x3976b6, 0xcd8242, 0x3976b6, 0xcd8242, 0x3e71b3, 0xcc8343, 0x3976b0, 0xce8d4a, 0x227ab3, 0xef925c, 0x474ab0, 0x34f46d, 0x745fb4, 0x6ac87a, 0x4f51ae, 0x64ce74, 0x546dae, 0x66c974, 0x536daf, 0x64c875, 0x536da3, 0x6bcb74, 0x526ca8, 0x68c475, 0x5562a8, 0x6bca74, 0x2b62af, 0x6acb73, 0x2e62ae, 0x6bc870, 0x2c63ad, 0x64cf73, 0x2e64ad, 0x65c872, 0x2865ad, 0x65c872, 0x2a6592, 0x7acb73, 0x296491, 0x7dd472, 0x296493, 0x7dd472, 0x286590, 0x7fd674, 0x276297, 0x7fd674, 0x256390, 0x7fd674, 0x246097, 0x7fd674, 0x226397, 0x7cd573, 0x236d97,
				0x43d472, 0x226e94, 0x40d573, 0x246e9b, 0x40d573, 0x276e9a, 0x4fd270, 0x276e98, 0x4fd270, 0x256f99, 0x49d072, 0x256f9b, 0x48af71, 0x276f9a, 0x57ae76, 0x266d9d, 0x57ae76, 0x256a9a, 0x57ae76, 0x236d9a, 0x56a977, 0x226f99, 0x56a868, 0x276d99, 0x56ad70, 0xd56a9c, 0x71bd6e, 0xb45f9c, 0x54b26f, 0xa24497, 0x5eb363, 0xa54696, 0x52b767, 0xa74697, 0x52b265, 0xa64691, 0x55b365, 0xa64793, 0x55b267, 0xa64691, 0x55b365, 0xa64793, 0x55b267, 0xa14691, 0x52b365, 0xa64793, 0x55b267, 0xa14691, 0x52b365, 0xa64793, 0x55b365, 0xa64793, 0x57b265, 0xa64793, 0x57b265, 0xa64793, 0x57b265, 0xa44693, 0x57b265, 0xa44693, 0x57b265, 0xa44693, 0x57b265, 0xa44693, 0x57b265, 0xa34693, 0x50b265, 0xa44693, 0x57b367, 0xa44791, 0x57b265, 0xa44693, 0x57b367, 0xa44791, 0x57b265, 0xa44693, 0x57b367, 0xa44791,
				0x57b265, 0xa44693, 0x57b367, 0xa44693, 0x57b367, 0xa64595, 0x57b367, 0xa34795, 0x57b265, 0xa34697, 0x50b365, 0xa14691, 0x50b063, 0xa2438e, 0x57b165, 0xad448a, 0x5ab37f, 0xb74584, 0x6eaa7e, 0xd74a8f, 0x4f866b, 0xcd448e, 0xb28764, 0x31448d, 0xb48767, 0x33448f, 0xb78668, 0x37478f, 0x4b8667, 0x33468f, 0x47fb67, 0x33408e, 0x47fa65, 0x344d8d, 0x5bf86b, 0x354e8d, 0x59fa69, 0x324b8d, 0x58fb6e, 0x304b8c, 0x58fb6e, 0x3d548e, 0x5ff853, 0x3e528e, 0x5ff853, 0x15f8f, 0x5dfa55, 0x75f89, 0x53fe5e, 0x55d85, 0x54fd5d, 0x1b5d85, 0x53c051, 0x155c84, 0x50c252, 0x115886, 0x50c252, 0x105b87, 0x2cce56, 0x105a85, 0x28c855, 0x105a84, 0x26ca4b, 0x134585, 0x21cb48, 0x104686, 0x3fcd4c, 0x124486, 0x3ecc4f, 0x154b87, 0x3dce4f, 0x1a4a88, 0x3fce4e, 0x1a4c89, 0x39ce4f, 0x1b4f8a, 0x53049, 0x194f8a,
				0x13249, 0x14498a, 0x53548, 0xa4f8a, 0x6374a, 0x141f7, 0x63749, 0x24389, 0x63749, 0x445f7, 0x4354d, 0x445f7, 0x4354d, 0x45bf6, 0x4314e, 0x55af7, 0x53f43, 0x55eed, 0xd365f, 0x1f59eb, 0x39db2a, 0x7c45f2, 0x22f902, 0x4730f8, 0x24f608, 0x533df8, 0xc0eb0b, 0x7808fd, 0xabe308, 0x4515f0, 0xbcec07, 0x4919f0, 0xbaea05, 0x4b19f7, 0xb9ed04, 0x4c19f6, 0xb8ed04, 0x4c19f0, 0xbfec04, 0x4b18f0, 0xbfec04, 0x4b18f0, 0xbfec04, 0x4b18f0, 0xbfec04, 0x4b18f0, 0xbfec04, 0x4b18f0, 0xbfec04, 0x4b18f0, 0xbfec04, 0x4b18f0, 0xbfec04, 0x4b18f0, 0xbfec04, 0x4b18f2, 0xbfec04, 0x4b18f0, 0xbfec04, 0x4b18f6, 0xbfec04, 0x4c18f2, 0xbfec04, 0x4c18fd, 0xbdea0a, 0x531bf0, 0xbdea0a };
		System.arraycopy(aFor, 0, key, 58510, aFor.length);
	}

	private static void init197(int[] key) {
		int[] aFor = { 0x491efe, 0xbdea0a, 0x491efe, 0xbdea0a, 0x491efe, 0xbdea0a, 0x491efe, 0xbdea0a, 0x491efe, 0xbdea0a, 0x491efe, 0xbdea0a, 0x491efe, 0xbdea0a, 0x491efe, 0xbdea0a, 0x491efe, 0xbdea0a, 0x491efe, 0xbdea0a, 0x491efc, 0xbdea0a, 0x491efc, 0xbdea0a, 0x491efe, 0xbaed0d, 0x4e19f9, 0xbaed0d, 0x491efc, 0xbbec0c, 0x4e19ff, 0xb9e205, 0x5214fd, 0x9ef313, 0x362bff, 0x459522, 0x53efb, 0x18a836, 0x3d31e2, 0x16ae38, 0x260de2, 0x17ae3b, 0x220ae0, 0x17ae39, 0x200be1, 0x18ad38, 0x200be3, 0x19ac3f, 0x2509e3, 0x18ae38, 0x2606e4, 0x19af39, 0x5806e5, 0x1aac38, 0x5f06e6, 0x18ad39, 0x5107e4, 0x1bac3a, 0x5700e5, 0x1aad05, 0x5500e5, 0x1aad05, 0x4a03e4, 0x1bac06, 0x4803e6, 0x1cb307, 0x4902e5, 0x1fb006, 0x4803e4, 0x10b707, 0x4903e4, 0x13b600, 0x4800e3, 0x13b600, 0x4e03e3, 0x10b507, 0x4e02e4,
				0x2ebb01, 0x4e02e4, 0x2fb802, 0x4b03ea, 0x2fb802, 0x4b03ea, 0x2ebf03, 0x4904e4, 0x2ebf03, 0x4702ea, 0x2cbd01, 0x4703e9, 0x2bbc00, 0x457deb, 0x2abf07, 0x5a7ded, 0x2bbe06, 0x5a7ded, 0x28b901, 0x5c7aeb, 0x29be00, 0x5a7bed, 0x2ebc1c, 0x417aed, 0x2fba05, 0xae7dee, 0xdab1d, 0xc849ef, 0x29a51d, 0xdf51ea, 0x21a71e, 0xdb53ea, 0x2ca219, 0xd953eb, 0x2ca01f, 0xd854eb, 0x2ca019, 0xd854ed, 0x2ca01f, 0xd854eb, 0x2ca019, 0xd854ed, 0x2ca01f, 0xd953eb, 0x2da719, 0xd854ed, 0x2ca01f, 0xd953eb, 0x2da719, 0xd854ed, 0x2ca019, 0xdf55ed, 0x2ca019, 0xdf55ed, 0x2ca019, 0xdf55ed, 0x2ca019, 0xd854ed, 0x2ca019, 0xd854ed, 0x2ca019, 0xd854ed, 0x2ca019, 0xd854ed, 0x2ca019, 0xd953ed, 0x2da719, 0xd854ed, 0x2ca01f, 0xd854eb, 0x2ca019, 0xd854ed, 0x2ca01f, 0xd854eb, 0x2ca019, 0xd854ed, 0x2ca01f, 0xd854eb,
				0x2ca019, 0xd854ed, 0x2ca01f, 0xd854ed, 0x2ba11f, 0xda54eb, 0x2ba219, 0xdf56eb, 0x2aa219, 0xdf56eb, 0x2ba219, 0xda54eb, 0x29a119, 0xda55f6, 0x2fa71b, 0xd754f4, 0x2ea106, 0xda59ff, 0x31a101, 0xe14af5, 0x4c9c1d, 0xc25bf8, 0x469f12, 0xc521f4, 0x419e13, 0xc75ffa, 0x439d11, 0xc25ffb, 0xbc9e10, 0xc621f9, 0xb19a11, 0xc623f8, 0xb19a11, 0xc52cf9, 0xb6991e, 0xd92cf8, 0xb49f1e, 0xd82dfb, 0xb29d18, 0xda2dfa, 0xb29d18, 0xd732f8, 0xb59e25, 0xd434f8, 0xb49d24, 0xea3afe, 0xb69f26, 0xec39fc, 0xb89829, 0xee3bf0, 0xbf9a26, 0xf03af1, 0xbaa625, 0xfd3af0, 0xbba627, 0xf83ff3, 0xbba627, 0xf93ef2, 0xc5ab23, 0xf93ff0, 0xc0ae20, 0xf93ff0, 0xceb03e, 0xf83ef3, 0xccb03f, 0xff3df3, 0xceb63a, 0xe13ff2, 0xcfb735, 0xe231fd, 0xcbb43b, 0xe330fc, 0xc5b33a, 0xe331ff, 0xc7b03b, 0xe531fe, 0xfb4e3d, 0xe731fe,
				0xff4c3f, 0xea30fe, 0xfb4c3e, 0xf436fe, 0xf84f40, 0xff39fb, 0xf84f45, 0xfc3b85, 0xfe4844, 0xff3a84, 0xff4a38, 0xff3a84, 0xff4a38, 0xff2683, 0xff4e35, 0xff2a86, 0xff4a2d, 0xff2a87, 0xe75f3d, 0xc8d6f5, 0x81742f, 0xe1c2c6, 0x8f0b3e, 0xe2d9c1, 0x801c2e, 0xf4d4c3, 0x660133, 0xdfe5c6, 0xb0832, 0xe5feca, 0x1d063c, 0xe8f3cb, 0x1b003e, 0xeaf2ca, 0x180639, 0xedf2cb, 0x190639, 0xeaf5ca, 0x19013c, 0xedf5c8, 0x19013c, 0xedf5c8, 0x19013c, 0xedf5c8, 0x19013c, 0xedf5c8, 0x19013c, 0xedf5c8, 0x19013c, 0xedf5c8, 0x19013c, 0xedf5c8, 0x19013c, 0xedf5c8, 0x19013c, 0xedf5ca, 0x19013c, 0xedf5c8, 0x19013c, 0xedf5ce, 0x19013c, 0xeaf5ca, 0x19013c, 0xeaf5c5, 0x1b0732, 0xf5f6c8, 0x1b0732 };
		System.arraycopy(aFor, 0, key, 58810, aFor.length);
	}

	private static void init198(int[] key) {
		int[] aFor = { 0xeff3c6, 0x1b0732, 0xeff3c6, 0x1b0732, 0xeff3c6, 0x1b0732, 0xeff3c6, 0x1b0732, 0xeff3c6, 0x1b0732, 0xeff3c6, 0x1b0732, 0xeff3c6, 0x1b0732, 0xeff3c6, 0x1b0732, 0xeff3c6, 0x1b0732, 0xeff3c6, 0x1b0732, 0xeff3c4, 0x1b0732, 0xeff3c4, 0x1b0732, 0xeff3c6, 0x1c0035, 0xe8f4c1, 0x1c0035, 0xeff3c4, 0x1d0134, 0xe8f4c7, 0x1f0f3d, 0xf4f9c5, 0x381e35, 0x90c6d9, 0xe17805, 0xded2dd, 0xc34410, 0xe1ddc3, 0xcb431a, 0xe4e1c3, 0xd4421a, 0xe6e6c0, 0xd34219, 0xe5e6ce, 0xd24316, 0xeae5cd, 0xd24316, 0xe9e5ca, 0xd54310, 0xebebcc, 0xd44211, 0x94eaca, 0xd54316, 0x90e9c8, 0xd54316, 0x93e9ca, 0xda4317, 0x96efc8, 0xda4317, 0x94efc8, 0xdb4228, 0x8becc9, 0xdb4228, 0x88edc8, 0xdc5d29, 0x89eccb, 0xdc5d29, 0x8aefc8, 0xd25b2b, 0x8befc8, 0xd25b2b, 0x88eec9, 0xd25b2b, 0x8feec8, 0xd25b2b, 0x8cecc8,
				0xd3542c, 0xb3edc9, 0xd2572f, 0xb1edc8, 0xd2572f, 0xb6ecc7, 0xd3502e, 0xb4ebc9, 0xd3502e, 0xbbecc6, 0xd1522c, 0xbaecc4, 0xd6532d, 0xbb93c7, 0xd5522c, 0xba93c5, 0xca512f, 0xbb92c4, 0xcf5128, 0xbb93c1, 0xce572a, 0xbd92c7, 0xcf5537, 0xa190c7, 0xcc502d, 0x4c95c1, 0xec4333, 0x29a1c1, 0xc84a35, 0x3dbfc2, 0xc14934, 0x38bcc2, 0xcc4e37, 0x3fbfc3, 0xcb4b35, 0x3fbfc1, 0xcb4b33, 0x3fbfc1, 0xcb4b33, 0x3fbfc1, 0xcb4b33, 0x3ebfc1, 0xcb4b33, 0x3ebfc1, 0xcb4b33, 0x3ebfc1, 0xcb4b33, 0x3ebfc1, 0xcb4b33, 0x3ebfc1, 0xcb4b33, 0x3fbfc7, 0xcc4a33, 0x3fbfc7, 0xcc4a33, 0x38bec7, 0xcc4a33, 0x38bec7, 0xcc4a33, 0x38bec7, 0xcc4a33, 0x38bec7, 0xcc4a33, 0x39b9c7, 0xcc4a33, 0x39b9c7, 0xcc4a33, 0x39bec1, 0xcc4a33, 0x38bec1, 0xcc4a33, 0x38bec1, 0xcc4a33, 0x38bec1, 0xcc4a33, 0x38bec1, 0xcc4a33, 0x38bec1,
				0xcc4a33, 0x38bec1, 0xcc4a33, 0x38bec1, 0xcb4b33, 0x3abec7, 0xcb4b33, 0x3fbfc7, 0xca4b35, 0x3fbfc7, 0xcb4b35, 0x38bec7, 0xcb4b35, 0x38b8c4, 0xcb4a34, 0x3cb8db, 0xc44a29, 0x33bdde, 0xc64723, 0x24b6d5, 0xe7693e, 0x43bbd2, 0xd1733e, 0x56ccda, 0xd4703e, 0x55cfd6, 0xd40f3d, 0x54cfd1, 0x2a0e3d, 0x51b0d4, 0x280931, 0x51b0d6, 0x2b0831, 0x5dbed7, 0x280a30, 0x59bed8, 0x340d3e, 0x58bfdb, 0x320f38, 0x5ba0da, 0x331038, 0x56bfd8, 0x341305, 0x55b9d8, 0x351004, 0x6bb7de, 0x371204, 0x6db4de, 0x391509, 0x6db1d0, 0x3d1008, 0x72b0df, 0x382c0b, 0x7fb0de, 0x392c09, 0x7ab5dd, 0x392c09, 0x7bb4dc, 0x45200d, 0x79b4de, 0x40250e, 0x79b4de, 0x4e3b10, 0x78b5dd, 0x4c3b11, 0x7fb6da, 0x4e3d13, 0x61b4d4, 0x4f3c13, 0x62badb, 0x4b3f1d, 0x63bbda, 0x44381c, 0x62bad9, 0x463b1d, 0x64bad8, 0x7ac51b, 0x66bad8,
				0x7ec719, 0x6bbbd8, 0x78c718, 0x77bdd8, 0x7bc466, 0x72b2dd, 0x75c460, 0x71b1a1, 0x73c260, 0x73b3df, 0x73c361, 0x73addc, 0x73c065, 0x73a9d2, 0x73c166, 0x70a8d2, 0x79c360, 0x6bb2d5, 0x443e1c, 0xe9dc7, 0x662336, 0x13eace, 0x6a3830, 0x5e9ce, 0x672a23, 0x14edc8, 0x873b39, 0x3edfcc, 0xea3238, 0x5c5c1, 0xf23234, 0x7c7c3, 0xf43436, 0x5c6c2, 0xf73231, 0x2c1c5, 0xf63531, 0x5c6c4, 0xf63232, 0x2c6c6, 0xf63232, 0x2c6c6, 0xf63232, 0x2c6c6, 0xf63232, 0x2c6c6, 0xf63232, 0x2c6c6, 0xf63232, 0x2c6c6, 0xf63232, 0x2c6c6, 0xf63232, 0x2c6c6, 0xf63232, 0x2c6c4, 0xf63232, 0x2c6c6, 0xf63232, 0x2c6c0, 0xf63232, 0x5c6c4, 0xf63232, 0x5c6cb, 0xf4343c, 0x1ac5c6, 0xf4343c };
		System.arraycopy(aFor, 0, key, 59110, aFor.length);
	}

	private static void init199(int[] key) {
		int[] aFor = { 0xc0c8, 0xf4343c, 0xc0c8, 0xf4343c, 0xc0c8, 0xf4343c, 0xc0c8, 0xf4343c, 0xc0c8, 0xf4343c, 0xc0c8, 0xf4343c, 0xc0c8, 0xf4343c, 0xc0c8, 0xf4343c, 0xc0c8, 0xf4343c, 0xc0c8, 0xf4343c, 0xc0ca, 0xf4343c, 0xc0ca, 0xf4343c, 0xc0c8, 0xf3333b, 0x7c7cf, 0xf3333b, 0xc0ca, 0xf2323a, 0x4c4ce, 0xf33f34, 0x18c9cc, 0xd42e3c, 0x72f7d0, 0x34a0d, 0x3ce0d5, 0x207519, 0x2ecca, 0x257212, 0xbd1cb, 0x3b7212, 0x9d6c8, 0x3a7311, 0xfd6c6, 0x39701e, 0xfd5c4, 0x37731f, 0xdd6c4, 0x36701e, 0xbd7c5, 0x357f19, 0x75d7c2, 0x347e1e, 0x70d7c3, 0x357d1d, 0x70d4c6, 0x377f1b, 0x7cd3c4, 0x377f1b, 0x7ad2c4, 0x347c24, 0x7ad2c4, 0x347c24, 0x64d3fb, 0x35631b, 0x67d2fa, 0x35631b, 0x63d1f8, 0x34621c, 0x6cd6ff, 0x34621c, 0x6ed7f8, 0x34621c, 0x6fd4ff, 0x34621c, 0x6ad4f8, 0x35631d, 0x55daf8, 0x35631d, 0x56d9fa,
				0x35631d, 0x51d8f5, 0x35631d, 0x53d9f5, 0x35631d, 0x5ddff5, 0x37611f, 0x5cdff5, 0x30601e, 0x5cdff7, 0x311f1d, 0x5edff6, 0x2e1e1a, 0x5fddf1, 0x2c1f1a, 0x58ddf3, 0x2e1918, 0x5ddcf5, 0x2f1b05, 0x41def7, 0x2d611e, 0x53a7f2, 0xf37206, 0x3190f7, 0xee7c03, 0x1a89f4, 0xe07f01, 0x178af9, 0xe6780f, 0x1689f9, 0xe77c01, 0x1588f2, 0xe77c03, 0x148ff2, 0xe77c03, 0x148ff2, 0xe77c03, 0x148ff2, 0xe77c03, 0x148ff2, 0xe77c03, 0x138ff2, 0xe77c03, 0x138ff2, 0xe77c03, 0x138ff2, 0xe77c03, 0x148ff2, 0xe77c03, 0x148ff2, 0xe77c03, 0x148ff2, 0xe77c03, 0x148ff2, 0xe77c03, 0x138ff2, 0xe77c03, 0x138ff2, 0xe77c03, 0x138ff2, 0xe77c03, 0x138ff2, 0xe77c03, 0x138ff2, 0xe77c03, 0x138ff2, 0xe77c03, 0x138ff2, 0xe77c03, 0x148ff2, 0xe77c03, 0x148ff2, 0xe77c03, 0x148ff2, 0xe77c03, 0x148ff2, 0xe77c03, 0x148ff2,
				0xe67b03, 0x168ff0, 0xe47b03, 0x1788f0, 0xe37a03, 0x1588f2, 0xe17b03, 0x138ff0, 0xe37b05, 0x1289f1, 0xe07b05, 0x158af7, 0xe37a05, 0x1489f1, 0xec710b, 0x282fd, 0xdb680c, 0x1a88f9, 0xb35a09, 0x2398ea, 0xa02509, 0xdd98e0, 0xa6250d, 0xdd98e2, 0xa2270d, 0xdc9be6, 0xa72303, 0xdc9be7, 0xa72303, 0xd096e7, 0xa52302, 0xd790eb, 0xb8220c, 0xd693e9, 0xbc230a, 0xd58ce8, 0xbd3c0a, 0xd892eb, 0xba3935, 0xda90e9, 0xba3935, 0xe49ee9, 0xb83b35, 0xe29ee9, 0xb63f30, 0xe29ceb, 0xb23d32, 0xfd9dea, 0xb6003d, 0xf19ce8, 0xb6003d, 0xf298e9, 0xb6003d, 0xf498e8, 0xca0c39, 0xf698ea, 0xcf093a, 0xf698eb, 0xc11724, 0xf498ea, 0xc01627, 0xf39beb, 0xdc1021, 0xf199e9, 0xdd112e, 0xf696e6, 0xde132e, 0xf997e9, 0xdf142f, 0xfa96e8, 0xd9142e, 0xfb94e8, 0xe5eb2c, 0xf994ef, 0xe1e92e, 0xf495ef, 0xe7e92f, 0xe893ef,
				0xe4ea51, 0xed9cea, 0xeaea57, 0xee9ce8, 0xeeee57, 0xee9ee9, 0xeef056, 0xee9beb, 0xeef353, 0xee94e7, 0xebfd53, 0xfa8fe4, 0xdbf05b, 0xf47c9e, 0xbed846, 0xe36ba2, 0x96a255, 0xee6ead, 0x98a154, 0xf36fac, 0x93ae47, 0xe069ac, 0x74bc5d, 0xcd5ea9, 0x18b25d, 0xe84aa7, 0x1fbd52, 0xea48a5, 0x19bb50, 0xe849a4, 0x1abd57, 0xef4ea3, 0x1bba57, 0xe849a2, 0x1aba57, 0xee4ea3, 0x1aba57, 0xee4ea3, 0x1aba57, 0xee4ea3, 0x1aba57, 0xee4ea3, 0x1aba57, 0xee4ea3, 0x1aba57, 0xee4ea3, 0x1aba57, 0xee4ea3, 0x1aba57, 0xee4ea3, 0x1aba57, 0xee4ea1, 0x1aba57, 0xee4ea3, 0x1aba57, 0xee4ea5, 0x1aba57, 0xe94ea1, 0x1aba57, 0xe94eae, 0x18bc59, 0xf64da3, 0x18bc59 };
		System.arraycopy(aFor, 0, key, 59410, aFor.length);
	}

	private static void init200(int[] key) {
		int[] aFor = { 0xec48ad, 0x18bc59, 0xec48ad, 0x18bc59, 0xec48ad, 0x18bc59, 0xec48ad, 0x18bc59, 0xec48ad, 0x18bc59, 0xec48ad, 0x18bc59, 0xec48ad, 0x18bc59, 0xec48ad, 0x18bc59, 0xec48ad, 0x18bc59, 0xec48ad, 0x18bc59, 0xec48af, 0x18bc59, 0xec48af, 0x18bc59, 0xec48ad, 0x1fbb5e, 0xeb4faa, 0x1fbb5e, 0xec48af, 0x1eba5f, 0xe84cab, 0x1fb751, 0xf441a9, 0x38a659, 0x9d7eb2, 0xecc36f, 0xd269b7, 0xc8ff7b, 0xe867af, 0xcff977, 0xe15aae, 0xcefe77, 0xff5aad, 0xcdfe75, 0xf85ba2, 0xcefd7a, 0xf858a0, 0xcffe7d, 0xf55ba6, 0xcefd7c, 0xf35aa7, 0xcdf27b, 0x8d5aa0, 0xcdf27b, 0x8e5aa7, 0xcaf37a, 0x8e5ba0, 0xc9f07d, 0x825ca2, 0xc9f07d, 0x855ca3, 0xcbf243, 0x855ca3, 0xc8f17c, 0x985ea3, 0xc9ee43, 0x9b5fa2, 0xc9ee43, 0x9c5fa1, 0xcbec45, 0x9358a6, 0xc4eb44, 0x9e5ea0, 0xc4eb44, 0x9f5da7, 0xc4eb44, 0x9a5da0,
				0xc5ea45, 0xa553a0, 0xc5ea45, 0xa753a3, 0xc4e944, 0xa753a3, 0xc3e84b, 0xa552a3, 0xc3e84b, 0xa453ac, 0xcdee45, 0xa650af, 0xcaef44, 0xa650ad, 0xcb9047, 0xa52fad, 0xcaef46, 0xbb2cad, 0xc9e841, 0xbd29aa, 0xcbea47, 0xb82faa, 0xcae85a, 0xa72cab, 0xcb9342, 0xb656a9, 0x288058, 0xea62a9, 0x378e5a, 0xc67bac, 0x3e8d5b, 0xca78ac, 0x258b5a, 0xc879ac, 0x278d5b, 0xc87ea9, 0x398d59, 0xc87eab, 0x398d5b, 0xcb7fa9, 0x3a8c59, 0xc87eab, 0x398d5b, 0xcb7fa9, 0x398d59, 0xcb7fab, 0x398d5b, 0xcb7fa9, 0x398d59, 0xca7cab, 0x388e5b, 0xca7cab, 0x3b8f5b, 0xc97dab, 0x3b8f5b, 0xc97dab, 0x3b8f5b, 0xc97dab, 0x3b8f5b, 0xc97dab, 0x3b8f5b, 0xc87dab, 0x3a8f5b, 0xc97dab, 0x3b8f5b, 0xc87dab, 0x3a8f5b, 0xc97dab, 0x3b8f5b, 0xc87dab, 0x3a8f5b, 0xc97dab, 0x3b8f5b, 0xc97dab, 0x3b8f5b, 0xc97dab, 0x3b8f5b, 0xc97dab,
				0x3b8f5b, 0xc97dab, 0x3b8f5b, 0xc97dab, 0x388e5b, 0xd77da9, 0x25895a, 0xd67aa9, 0x258859, 0xd079a9, 0x248a58, 0xd67eab, 0x398d5f, 0xd67eab, 0x248d5c, 0xd07fa9, 0x24905a, 0xd262a9, 0x2a955c, 0xdc63a8, 0x30975e, 0xe97ca9, 0x55a746, 0xc860a6, 0x40dd79, 0x3c669d, 0x4bdd77, 0x32669a, 0x4fda75, 0x31669e, 0x4ade7a, 0x316798, 0x4bde7a, 0x3c6898, 0x49dd7d, 0x3b6e94, 0x54dc73, 0x3a6d96, 0x57dd72, 0x3c7390, 0x55dc72, 0x337193, 0x51da4d, 0x317391, 0x51da4f, 0xf7d91, 0x53d84d, 0x97d93, 0x5ddd49, 0x97e95, 0x59de4e, 0x177e94, 0x5ee043, 0x197c96, 0x5ee043, 0x1d7790, 0x5eee44, 0x1c7691, 0x20e242, 0x1c7691, 0x24e440, 0x1c7691, 0x2af940, 0x1f7790, 0x2df95f, 0x1c7491, 0x32f85d, 0x1e7297, 0x32f85d, 0x1b7097, 0x3cf65d, 0x1a7394, 0x3ff75c, 0x1d749b, 0x3cf65c, 0x1c779a, 0x1085c, 0x1b7799,
				0xc095a, 0x187599, 0x9095b, 0x6739b, 0xb0b25, 0x27e98, 0x50825, 0x17c9b, 0x10d26, 0x1629d, 0x10c20, 0x16597, 0x10626, 0x26396, 0xf0827, 0x2e759b, 0x12e255, 0x414f8a, 0x2a8c7b, 0x584a89, 0x279e74, 0x5d518c, 0x2e9d7a, 0x47578f, 0x18e866, 0x6c2e8d, 0xf8fb7c, 0x401a8f, 0x95f67b, 0x640f80, 0x9cf776, 0x690281, 0x9af174, 0x6b0380, 0x99f773, 0x6c0487, 0x9ff774, 0x6c0481, 0x9ef774, 0x6a0382, 0x9ef776, 0x6a0382, 0x9ef776, 0x6a0382, 0x9ef776, 0x6a0382, 0x9ef776, 0x6a0382, 0x9ef776, 0x6a0382, 0x9ef776, 0x6a0382, 0x9ef776, 0x6a0382, 0x9ef776, 0x6a0380, 0x9ef776, 0x6a0382, 0x9ef776, 0x6a0384, 0x9ef776, 0x6d0380, 0x9ef776, 0x6d038f, 0x9cf178, 0x720082, 0x9cf178 };
		System.arraycopy(aFor, 0, key, 59710, aFor.length);
	}

	private static void init201(int[] key) {
		int[] aFor = { 0x6f028b, 0x9cf178, 0x6f028b, 0x9cf178, 0x6f028b, 0x9cf178, 0x6f028b, 0x9cf178, 0x6f028b, 0x9cf178, 0x6f028b, 0x9cf178, 0x6f028b, 0x9cf178, 0x6f028b, 0x9cf178, 0x6f028b, 0x9cf178, 0x6f028b, 0x9cf178, 0x6f028d, 0x9cf178, 0x6f028d, 0x9cf178, 0x68058c, 0x9bf67f, 0x68058c, 0x9bf67f, 0x69048f, 0x9bf67f, 0x6e038c, 0x99f876, 0x750f8f, 0xb8e77e, 0x1e3e92, 0x6f834f, 0x522a97, 0x4bbf5c, 0x6b2788, 0x4cb853, 0x671a89, 0x49b950, 0x791a8a, 0x48be50, 0x7b1b87, 0x4fbd5f, 0x791883, 0x4fbd5f, 0x741b83, 0x4fbd59, 0x731a82, 0x4fbd59, 0x711585, 0x4ebc58, 0xf1584, 0x4dbf59, 0x81587, 0x4dbf59, 0xa1484, 0x42b85a, 0x91485, 0x45b965, 0xb1785, 0x44b864, 0x151786, 0x47a765, 0x141587, 0x47a765, 0x121687, 0x44a464, 0x131786, 0x44a464, 0x1d1087, 0x47a563, 0x1c1380, 0x40a464, 0x1e1280, 0x40a464,
				0x1f1381, 0x7eaa66, 0x1c1281, 0x7fab69, 0x1b1081, 0x7fab69, 0x1c118e, 0x78aa66, 0x10168e, 0x79ab67, 0x13158d, 0x79ab67, 0x15148e, 0x78d464, 0x16158f, 0x79d763, 0x16158f, 0x67d762, 0x13148c, 0x67d762, 0x15148c, 0x67d163, 0x8128c, 0x63af69, 0xe36983, 0x41b177, 0x825584, 0x5eb870, 0xad4189, 0x57bb71, 0xa04289, 0x53b571, 0xa24286, 0x53b571, 0xa04289, 0x53b57f, 0xa04287, 0x53b571, 0xa64389, 0x55b47f, 0xa04287, 0x53b571, 0xa54288, 0x53ba7f, 0xa54d86, 0x50ba70, 0xa54c88, 0x50bb7e, 0xa64d86, 0x53ba70, 0xa64d84, 0x55b570, 0xa04284, 0x55b570, 0xa34d85, 0x55b570, 0xa34d85, 0x55b570, 0xa04284, 0x55b570, 0xa34384, 0x56b470, 0xa04284, 0x55b570, 0xa34384, 0x56b470, 0xa04286, 0x55b570, 0xa34386, 0x56b470, 0xa04286, 0x55b570, 0xa04286, 0x55b570, 0xa14385, 0x54b473, 0xa14385, 0x55b570,
				0xa14385, 0x55b570, 0xa14385, 0x55b576, 0xa74285, 0x53b476, 0xa64185, 0x50b474, 0xa64185, 0x53b774, 0xa64086, 0x55b872, 0xa74e85, 0x55b872, 0xa64c8a, 0x52b87c, 0xa54b88, 0x5cbe7a, 0xa4468a, 0x5cbc7f, 0xb74988, 0x62ae79, 0xd97292, 0x46bf77, 0xca789e, 0xb6c57b, 0xcd7b90, 0xb1c57e, 0xca7e97, 0xb1c472, 0xc97d93, 0xbcc571, 0xcf7390, 0xbec674, 0xce7593, 0xa0c475, 0xcd7491, 0xa1db72, 0xcb7693, 0xacdb73, 0xc97793, 0xaddc4c, 0xcc7693, 0x93de4e, 0xce7893, 0x95db4e, 0xc27992, 0x97d849, 0xc57995, 0x8ae649, 0xc17b90, 0x86e047, 0xc07a91, 0x83e345, 0xc27491, 0x82e242, 0xbd7696, 0x86e544, 0xbe7795, 0x8ae744, 0xb96894, 0x89e544, 0xa76e8a, 0x8ce446, 0xa66d8b, 0x8fe547, 0xaa638d, 0x89e745, 0xab628d, 0x8be14a, 0x95608f, 0x88e04b, 0x95608f, 0x8c1e4b, 0x946388, 0x821f4c, 0x96658e, 0x841f4f,
				0x94678e, 0x9f1130, 0x96658c, 0x911637, 0x97648c, 0x931435, 0x91658c, 0x910a3b, 0x926583, 0x950b3a, 0x9c6682, 0x8d143b, 0xaf6afa, 0x9ce130, 0xdb7fe4, 0x82d004, 0xed13f5, 0x97dc0d, 0xea0ef6, 0x97dc0d, 0xef11fb, 0x9fd808, 0xf810fb, 0x99d110, 0xec16fc, 0x79c30c, 0xc020ff, 0x16cd0c, 0xe635f6, 0x11c203, 0xe437f4, 0x17c401, 0xe636f5, 0x14c206, 0xe131f2, 0x15c506, 0xe636f3, 0x14c506, 0xe736f3, 0x14c500, 0xe736f3, 0x14c500, 0xe736f3, 0x14c500, 0xe736f3, 0x14c500, 0xe736f3, 0x14c500, 0xe736f3, 0x14c500, 0xe736f3, 0x14c500, 0xe736f3, 0x14c500, 0xe736f5, 0x14c500, 0xe736f3, 0x14c500, 0xe736f1, 0x14c500, 0xe636f5, 0x14c500, 0xe636f8, 0x14c500, 0xfb37fb, 0x15c601 };
		System.arraycopy(aFor, 0, key, 60010, aFor.length);
	}

	private static void init202(int[] key) {
		int[] aFor = { 0xe132f5, 0x15c601, 0xe132f5, 0x15c601, 0xe132f5, 0x15c601, 0xe132f5, 0x15c601, 0xe132f5, 0x15c601, 0xe132f5, 0x15c601, 0xe132f5, 0x15c601, 0xe132f5, 0x15c601, 0xe132f5, 0x15c601, 0xe132f5, 0x15c601, 0xe132f7, 0x15c601, 0xe132f7, 0x15c601, 0xe132f5, 0x12c106, 0xe132f5, 0x15c601, 0xe635f0, 0x14c700, 0xe231f4, 0x15ca0e, 0xfe3cf4, 0x32db04, 0x9703e9, 0xe7bf35, 0xdb17e2, 0xc2832f, 0xe21bfb, 0xc48521, 0xee24f8, 0xc58720, 0xeb24f9, 0xdb8720, 0xe923f6, 0xda8621, 0xef22fa, 0xda8621, 0xe220fa, 0xd98620, 0xe220fa, 0xde8721, 0xe320fa, 0xdd8826, 0x9c21fa, 0xde8b27, 0x9b21f9, 0xde8b27, 0x9920fa, 0xd18c24, 0x9b27fa, 0xd08b25, 0x9e25c5, 0xd18a24, 0x8124c5, 0xd08b27, 0x823ac6, 0xd08b27, 0x843bc6, 0xd18a24, 0x8738c5, 0xd18a24, 0x883ec7, 0xd18a24, 0x8b3fc6, 0xd78822, 0x893ec6,
				0xd48b25, 0x8a3dc1, 0xea8527, 0x8b32c1, 0xe98a26, 0x8a30c1, 0xe98a26, 0x8a30c1, 0xe98a26, 0x8e31c1, 0xe78c28, 0x8e31c1, 0xe48f2b, 0x8f31c3, 0xe38e2a, 0x8e4ec0, 0xe38e2a, 0x8d4fc1, 0xe38e2a, 0x924cc5, 0xe38e2a, 0x924cc7, 0xe08928, 0x8e4ac4, 0xe3f627, 0x6330cf, 0xc2e93d, 0x700c4, 0xd9f13c, 0x2b0dc2, 0xd1f33d, 0x290dc3, 0xdef03e, 0x2b0ec3, 0xdff33f, 0x280ec2, 0xdff23d, 0x280ec2, 0xdff23d, 0x280ec2, 0xdff23d, 0x280ec2, 0xdff23d, 0x280ec2, 0xdff23d, 0x280ec2, 0xdff23d, 0x270ec2, 0xdff23d, 0x270ec2, 0xdff23f, 0x280fc4, 0xdff23f, 0x280fc4, 0xdff23f, 0x270ec4, 0xdff23f, 0x270ec4, 0xdff23f, 0x270ec4, 0xdff23f, 0x270ec4, 0xd0f33f, 0x2708c5, 0xd0f53e, 0x2809c5, 0xdff43e, 0x280fc2, 0xdef33e, 0x2908c2, 0xdff43e, 0x280fc2, 0xdff43e, 0x280fc2, 0xdff43e, 0x290ec5, 0xdff43e, 0x280fc2,
				0xdef53b, 0x280fc0, 0xdef539, 0x280fc2, 0xdef53b, 0x280ecc, 0xdef53b, 0x260fcc, 0xdff63b, 0x260cce, 0xdef63b, 0x280dce, 0xddf639, 0x2b0ac5, 0xddf13b, 0x2a0bc4, 0xd2f239, 0x2b0bc2, 0xd0f13a, 0x2d0ccf, 0xd0f239, 0x270ec1, 0xccf839, 0x1b08ce, 0xa1d721, 0x4cf, 0x89c029, 0x800c0, 0x74bf2a, 0xc04cc, 0x7bbe29, 0xe04cd, 0x7dbc2f, 0xf0acc, 0x60bc28, 0xd0fcc, 0x61bd29, 0xd12ca, 0x67bf2b, 0xf14f4, 0x6bbe29, 0x917f4, 0x69b02f, 0x3416f4, 0x6fb22d, 0x3610f4, 0x6eb02e, 0x3b2df9, 0x69b02e, 0x242cf9, 0x6eb62c, 0x292ff9, 0x6ab82a, 0x2b2dfb, 0x15b934, 0x292bf9, 0x12ba37, 0x2b35fb, 0x1dbb36, 0x2f37fd, 0xbc31, 0x2e36fa, 0x2bf36, 0x2b39ff, 0xcbf37, 0x2a3afe, 0xeb939, 0x2e38fc, 0x30473f, 0x2c38fd, 0x36453d, 0x2f39fd, 0x384343, 0x2f39fd, 0x3b4040, 0x2937fd, 0x384141, 0x3734fc, 0x3a4747, 0x3035fc,
				0x384545, 0x3c2af2, 0x3f4444, 0x3d29f1, 0x3c4545, 0x3c2ef6, 0x3e4447, 0x382ff6, 0x344044, 0x2334f3, 0x8b130, 0x4f2ae7, 0x148403, 0x7e38ef, 0xdfc1e, 0x7630e9, 0xbe011, 0x712fe7, 0x6e012, 0x732de1, 0x2e017, 0x6a29e3, 0x9e90a, 0x7e2ee6, 0xebfb16, 0x5218e5, 0x84f516, 0x740dec, 0x83fa19, 0x760fec, 0x85fc19, 0x740eed, 0x87fd1e, 0x720eea, 0x87fd1e, 0x740eeb, 0x86fd1e, 0x7209ea, 0x86fd1e, 0x7209ea, 0x86fd1e, 0x7209ea, 0x86fd1e, 0x7209ea, 0x86fd1e, 0x7209ea, 0x86fd1e, 0x7209ea, 0x86fd1e, 0x7209ea, 0x86fd1e, 0x7209ea, 0x86fd1e, 0x7209e8, 0x86fd1e, 0x7209ea, 0x86fd1e, 0x7209ec, 0x86fd1e, 0x7509e8, 0x86fd1e, 0x740ee6, 0x86fd1e, 0x690fe5, 0x87fe1f };
		System.arraycopy(aFor, 0, key, 60310, aFor.length);
	}

	private static void init203(int[] key) {
		int[] aFor = { 0x730aeb, 0x87fe1f, 0x730aeb, 0x87fe1f, 0x730aeb, 0x87fe1f, 0x730aeb, 0x87fe1f, 0x730aeb, 0x87fe1f, 0x730aeb, 0x87fe1f, 0x730aeb, 0x87fe1f, 0x730aeb, 0x87fe1f, 0x730aeb, 0x87fe1f, 0x730aeb, 0x87fe1f, 0x730ae9, 0x87fe1f, 0x730ae9, 0x87fe1f, 0x730aeb, 0x80f918, 0x740dec, 0x80f918, 0x730ae9, 0x81f819, 0x770eed, 0x8ff216, 0x6404ec, 0xa8e31c, 0xd3bf1, 0x62802a, 0x5e28fd, 0x46bb31, 0x592ce2, 0x7cb13b, 0x5410e3, 0x7eb234, 0x5310ec, 0x7cb234, 0x4d11e1, 0x7fb537, 0x4d11ed, 0x78b536, 0x4013ed, 0x79b431, 0x4013eb, 0x7abb30, 0x461ceb, 0x7bb437, 0x441dec, 0x6b731, 0x421eec, 0x7b432, 0x401fef, 0x8b331, 0x4119ec, 0xbb232, 0x471fd2, 0x9b133, 0x461cd3, 0x16b232, 0x471dd0, 0x16b232, 0x4702d2, 0x15b333, 0x4002d1, 0x15b333, 0x4200d1, 0x15b333, 0x4c07d0, 0x17b135, 0x4c07d6, 0x10b032,
				0x4c07d6, 0x11bf33, 0x7107d5, 0x11bf33, 0x7307d4, 0x11bf33, 0x7205d4, 0x11bf33, 0x7604da, 0x1eb830, 0x7705d9, 0x1eb830, 0x7405d9, 0x1fbb33, 0x7304da, 0x1fbb33, 0x727bd9, 0x1fbb35, 0x6f79c4, 0x1fb834, 0x6e7adb, 0x1dbe34, 0x727cd8, 0x1dc13c, 0x9c04d4, 0x3d326, 0xbc35d1, 0x68d927, 0x8d2dde, 0x60db25, 0x8c2cde, 0x60db27, 0x8d2cdf, 0x60db27, 0x8d2cde, 0x60db27, 0x8d2cde, 0x60db27, 0x8d2cde, 0x63d424, 0x8d2cde, 0x63d424, 0x8e23dd, 0x63d424, 0x8e23dd, 0x63d424, 0x8d2cde, 0x63d424, 0x8d2cde, 0x63d424, 0x8d2cdd, 0x63d424, 0x8d2cdd, 0x63d424, 0x8d2cdd, 0x63d424, 0x8d2cdd, 0x63d424, 0x8c2dde, 0x63d424, 0x8d2cdd, 0x60d524, 0x8e2ddd, 0x60d727, 0x8f2edd, 0x61d427, 0x8f2cdd, 0x62d427, 0x8c2cde, 0x61d527, 0x8f2dde, 0x61d527, 0x8e2cdd, 0x61d527, 0x8f2dde, 0x60d424, 0x902cde, 0x60d526,
				0x8f22df, 0x60da28, 0x8f2dd1, 0x7fd429, 0x902cde, 0x61db2b, 0x932ddc, 0x61db2b, 0x932dde, 0x62da2b, 0x8d22de, 0x63db2b, 0x8d23d2, 0x63db28, 0x8c2dd4, 0x7cd82f, 0x8d2cd6, 0x7cd920, 0x882fd1, 0x7bd720, 0x8f2ed3, 0x7fd524, 0x982cd9, 0x48c72f, 0xfd1dc2, 0x64d520, 0xe214c3, 0x9ea920, 0xea12c5, 0x99ae2c, 0xea14c4, 0x98ad23, 0xeb1acb, 0x9aaf2f, 0xf71bcd, 0x9ba82c, 0xf618c8, 0x9ab72b, 0xf01aca, 0x97b72a, 0xf31bf4, 0x91b128, 0xf116f3, 0xafb328, 0xf217f2, 0xa8b428, 0xf015f0, 0xa5b529, 0xf62bfe, 0xa6b728, 0xea2cfe, 0xa3b52a, 0xe72cf8, 0xa4b429, 0xe522e6, 0xdab736, 0xe724f8, 0xddb737, 0xea38f9, 0xdfb737, 0xed3bfc, 0xc2b030, 0xef39fa, 0xc3b133, 0xe937fa, 0xc1b232, 0xe731f4, 0xc2b331, 0xe131f3, 0xc0b133, 0xde318c, 0xc34e32, 0xdf308d, 0xc44d33, 0xdd378d, 0xca4d33, 0xdc358c, 0xcf4030,
				0xc13389, 0xcf4030, 0xc2328a, 0xce4333, 0xc5328a, 0xc84032, 0xd9348a, 0xcc4332, 0xd03988, 0xf54633, 0xc1cdf2, 0x8d5221, 0xe5eac8, 0x982131, 0x1ff5ce, 0x982131, 0x1cf2cd, 0x622235, 0x15eec6, 0x672436, 0x16efc6, 0x662132, 0xee8c6, 0x6d282f, 0x15e0c2, 0x803532, 0x39d6c1, 0xef3b32, 0x1fc3c8, 0xe8343d, 0x1dc1c8, 0xee323b, 0x1fc0cf, 0xec333c, 0x19c0c8, 0xed323b, 0x1ec1ce, 0xec323b, 0x18c6cf, 0xec323b, 0x18c6cf, 0xec323b, 0x18c6cf, 0xec323b, 0x18c6cf, 0xec323b, 0x18c6cf, 0xec323b, 0x18c6cf, 0xec323b, 0x18c6cf, 0xec323b, 0x18c6cf, 0xec323b, 0x18c6cd, 0xec323b, 0x18c6cf, 0xec323b, 0x18c6c9, 0xeb3538, 0x19c6cd, 0xeb3538, 0x19c6c0, 0xe83437, 0x7c6cc, 0xe93736 };
		System.arraycopy(aFor, 0, key, 60610, aFor.length);
	}

	private static void init204(int[] key) {
		int[] aFor = { 0x1ac4c5, 0xe93736, 0x1ac4c5, 0xe93736, 0x1ac4c5, 0xe93736, 0x1ac4c5, 0xe93736, 0x1ac4c5, 0xe93736, 0x1ac4c5, 0xe93736, 0x1ac4c5, 0xe93736, 0x1ac4c5, 0xe93736, 0x1ac4c5, 0xe93736, 0x1ac4c5, 0xe93736, 0x1ac4c3, 0xe93736, 0x1ac4c3, 0xe93736, 0x1ac4c5, 0xe93736, 0x1ac4c5, 0xee3031, 0x1cc2c1, 0xee3031, 0x18c6c5, 0xef3d3f, 0x4cbc5, 0xc82c35, 0x6df4d8, 0x4803, 0x3befd5, 0x2c7b19, 0x31e3ca, 0x147e13, 0x3cdfcb, 0x167d1c, 0x3bdfc4, 0x147d1c, 0x25dec9, 0x177a1f, 0x25dec5, 0x167b1e, 0x21ddc3, 0x197b18, 0x20dcc2, 0x197b18, 0x25dcc3, 0x18741f, 0x27ddc4, 0x677718, 0x26dec4, 0x63741a, 0x24dfc7, 0x63741a, 0x2adec7, 0x63741a, 0x28d8c5, 0x657624, 0x2bdafb, 0x7b741a, 0x2adbf8, 0x7a7519, 0x2bc5f9, 0x797418, 0x2cc5fa, 0x797418, 0x2ec7fa, 0x78751b, 0x20c6f9, 0x7a731d, 0x21c5fe, 0x7d721a,
				0x21c5fe, 0x7c7d1b, 0x1cc5fd, 0x7c7d1b, 0x1dcafd, 0x7f721a, 0x1cc8fd, 0x7f721a, 0x19c8f2, 0x7e731b, 0x16cff3, 0x7f721a, 0x15cff3, 0x7e7119, 0x12cef0, 0x7e7119, 0x13b1f3, 0x7e711f, 0x11b0ef, 0x7e711f, 0xfb3f2, 0x7d771e, 0xdb5f4, 0x7c0a12, 0xfcccf8, 0x681d16, 0xc2caf8, 0x7b1015, 0xbecffb, 0x752e14, 0xbecffb, 0x752e15, 0xb9cefe, 0x752e17, 0xb8cffb, 0x752e17, 0xb8cffb, 0x752e17, 0xbbccfa, 0x752e17, 0xbbccfa, 0x742f14, 0xbbccfa, 0x762f14, 0xb9ccfa, 0x742f14, 0xa4cbfb, 0x6a2f14, 0xbacbfb, 0x742f14, 0xbacbfb, 0x742e16, 0xbacbfb, 0x752d15, 0xbacbfb, 0x752d15, 0xbacbfb, 0x752d15, 0xa5cafa, 0x752d15, 0xbac5fa, 0x752d15, 0xbac5fa, 0x6a2c0a, 0xbac5fa, 0x6a2c0a, 0xbac4f8, 0x6a2c0a, 0xbac5fa, 0x6a2c0a, 0xbac5fa, 0x6b2f0b, 0xb9c6fa, 0x6b2f0b, 0xb9c6fa, 0x6a2c0a, 0xbcc6fb, 0x692f0b,
				0xbcc6fb, 0x692f0b, 0xbfc6fb, 0x682c0a, 0xbfc6fa, 0x672f0a, 0xbfc6fb, 0x672f0a, 0xbfc6fb, 0x672f0b, 0xbfc5e5, 0x672e0a, 0xbec2f8, 0x67290d, 0xbec2fa, 0x672b02, 0xbec1f6, 0x652804, 0xb8c3ea, 0x662f07, 0xb8c1ea, 0x58331e, 0x86c1e7, 0x492811, 0xf2f4fe, 0x513b16, 0xdcfdf2, 0xa14210, 0xd2fef5, 0xa0421e, 0xd2fef3, 0xa0441f, 0xd2fcf4, 0xa34b1c, 0xccfdf8, 0xa2481b, 0xcffbff, 0xa24819, 0xc9fbfc, 0xa3491e, 0xcaf8fd, 0xad571c, 0xcbf9fc, 0xae5423, 0xcaf8fd, 0xa95223, 0xcbfbfe, 0xab5c25, 0xf5fbf9, 0xa95e23, 0xf1fdf9, 0xa75e20, 0xf3faf9, 0xa15921, 0xf0fbf6, 0xbf5b21, 0xf1c4f7, 0xba5922, 0xf0c5f6, 0xb95e23, 0xf1c4f7, 0xb45e24, 0xf2c6f0, 0xb05022, 0xf1c5f3, 0xb15123, 0x8ec2ec, 0xb05022, 0x8dc3ee, 0xb15125, 0x8ac0ef, 0xb25126, 0x85c1ec, 0xb34e27, 0x80c3ec, 0xb24f26, 0x82c5ef, 0xa94229,
				0x81c6ea, 0xa8432e, 0x81c6e8, 0xa6432d, 0x8fc4ea, 0xa24f21, 0x95c0ef, 0xd5563e, 0x9cc8eb, 0xce6d3c, 0x93c3e7, 0xfe7f02, 0x81b5f0, 0x6670a, 0x8cb2f7, 0x9610d, 0x88b1f4, 0xf47f02, 0x83b3f1, 0xf27a1e, 0x82b0f3, 0xec7c01, 0x84b5f5, 0xe7751c, 0x9fbdf1, 0xa6801, 0xb38bf2, 0x656601, 0x959efb, 0x62690e, 0x979cfb, 0x646f08, 0x959dfc, 0x666e0f, 0x929cfc, 0x666f0d, 0x959cf8, 0x676f0d, 0x949cfe, 0x676f0d, 0x949cfe, 0x676f0d, 0x949cfe, 0x676f0d, 0x949cfe, 0x676f0d, 0x949cfe, 0x676f0d, 0x949cfe, 0x676f0d, 0x949cfe, 0x676f0d, 0x949cfe, 0x676f0d, 0x949cf8, 0x676f0d, 0x949cfe, 0x676f0d, 0x949cfc, 0x676f0d, 0x959cf8, 0x676f0d, 0x959cf5, 0x646e02, 0x8b9cf9, 0x656d03 };
		System.arraycopy(aFor, 0, key, 60910, aFor.length);
	}

	private static void init205(int[] key) {
		int[] aFor = { 0x969ef0, 0x656d03, 0x969ef0, 0x656d03, 0x969ef0, 0x656d03, 0x969ef0, 0x656d03, 0x969ef0, 0x656d03, 0x969ef0, 0x656d03, 0x969ef0, 0x656d03, 0x969ef0, 0x656d03, 0x969ef0, 0x656d03, 0x969ef0, 0x656d03, 0x969ef6, 0x656d03, 0x969ef6, 0x656d03, 0x969ef0, 0x646c02, 0x979ff1, 0x646c02, 0x969ef2, 0x646c02, 0x9199f1, 0x66620b, 0x8d94f1, 0x417301, 0xe4abec, 0x891737, 0xb2b0e1, 0xa5242d, 0xb9b3ff, 0x9a2d26, 0xb38fff, 0x992d28, 0xb48ff0, 0x9a2c28, 0xab89f0, 0x9a2c28, 0xa989f3, 0x9a2c28, 0xac89f4, 0x9a2c2e, 0xa28af5, 0x9a2c2e, 0xa18af4, 0x9d2d2f, 0xa385f3, 0x9c2c2e, 0xdd85f2, 0x9f2f2f, 0xd984f0, 0x9f2f2f, 0xd985f3, 0x9f2f2f, 0xd584f1, 0x992911, 0xd785ce, 0x872b2f, 0xd684cd, 0x872b2f, 0xd69bcf, 0x85292d, 0xd39bce, 0x85292d, 0xd29acf, 0x84282e, 0xdc9bcc, 0x862e28, 0xdd98cb,
				0x812f2f, 0xdd98cb, 0x80202e, 0xe098c8, 0x80202e, 0xe098c8, 0x81212f, 0xe29bc8, 0x862020, 0xe29bc8, 0x862020, 0xee9cc8, 0x862020, 0xef9dc9, 0x852323, 0xe99cca, 0x845c20, 0xea9dcb, 0x845c26, 0xea9ed6, 0x845e39, 0xf49fd5, 0x875d3e, 0xf69ed5, 0x825d3f, 0xf898d3, 0x7a5e38, 0xeb99d1, 0x735f36, 0xef98d1, 0x4f5136, 0xef98df, 0x4f5138, 0xee99dd, 0x4a5039, 0xeb99da, 0x4a5039, 0xeb99da, 0x49533e, 0xeb99da, 0x48523f, 0xec9ed9, 0x48523f, 0xed9fd8, 0x49513f, 0xef9fd7, 0x4a503f, 0xed9fd6, 0x4b4f3f, 0xec80d6, 0x4b513f, 0xec80d6, 0x4b513f, 0xec80d6, 0x4b513f, 0xed82d5, 0x4b513f, 0xed82d5, 0x4b513f, 0xec85d4, 0x4b513f, 0xed85d4, 0x4b513f, 0xec84d3, 0x4b513f, 0xe387d2, 0x4b513f, 0xe387d2, 0x4b513f, 0xe286d1, 0x4b513f, 0xe089d2, 0x4c503c, 0xe089d2, 0x4d533d, 0xe38ad1, 0x4c503c, 0xfd8ad2,
				0x4c503e, 0xfc89d5, 0x4d5339, 0xfe8ad5, 0x4a5038, 0xff8bd6, 0x495038, 0xfe8bc9, 0x495038, 0xf18cca, 0x48503a, 0xf28ed4, 0x48503a, 0xf38ecb, 0x485039, 0xf48ece, 0x485039, 0xf38dcf, 0x4f523c, 0xf18dcc, 0x4e6d23, 0x8e8fcd, 0x4a6a39, 0x8e8fcf, 0x306c39, 0x83b1cc, 0x26663e, 0xa9add3, 0xd76f34, 0xa6d3d2, 0xd66e39, 0xa6d2d7, 0xd66e39, 0xa4d2d4, 0xd6683e, 0xa7d2d9, 0xc86b3f, 0xa5dcd9, 0xcb643e, 0xa7ddd9, 0xcc653d, 0xa7dddb, 0xcb6b38, 0xa0deda, 0xcc6b38, 0xa1dfda, 0xce6c38, 0xa0ded9, 0xcd6f39, 0xa7dee6, 0xce6e38, 0xa9dee5, 0xce6e38, 0xa8c1e4, 0xce6e38, 0xa8c1e4, 0xcd6c39, 0xa9c0e5, 0xca6b3e, 0xa8c1e4, 0xca6b3e, 0xabc2e7, 0xca6b3e, 0xa8c3e5, 0xc9643d, 0xa8c3e5, 0xc86532, 0xa8c3e5, 0xc86532, 0x96c0e1, 0xcb6431, 0x97c7e0, 0xcd6430, 0x97c6e2, 0xcf6431, 0x9bc4e3, 0xc95a33, 0x99c7e2,
				0xd45d2c, 0x98c4e3, 0xd25e2c, 0x98c4e3, 0xd15e2c, 0x9cc0f9, 0xcf6420, 0xaccbc3, 0xc17d2a, 0xb6bcda, 0xc9762e, 0x4fa6db, 0xc5722c, 0x4ea7d4, 0xc77422, 0x42a5d7, 0xc26b23, 0xbfa7d0, 0xc46a25, 0xbca7d1, 0xcf6c20, 0xbda0d1, 0xcc6d25, 0xa5a7d0, 0xc1663a, 0xb9aed7, 0x2e7a27, 0x9598d4, 0x4d7427, 0xbd8cdd, 0x4a7b28, 0xbe8fdc, 0x4d7c2f, 0xbc8edb, 0x4f7d28, 0xbb8fdb, 0x4f7c2a, 0xbc8fdf, 0x4f7c2a, 0xbc8fd9, 0x4f7c2a, 0xbc8fd9, 0x4f7c2a, 0xbc8fd9, 0x4f7c2a, 0xbc8fd9, 0x4f7c2a, 0xbc8fd9, 0x4f7c2a, 0xbc8fd9, 0x4f7c2a, 0xbc8fd9, 0x4f7c2a, 0xbc8fd9, 0x4f7c2a, 0xbc8fdf, 0x4f7c2a, 0xbc8fd9, 0x4f7c2a, 0xbc8fdb, 0x4f7c2a, 0xbd8fdf, 0x4f7c2a, 0xbe8edd, 0x4f7c2a, 0xa08ed1, 0x4f7c2a };
		System.arraycopy(aFor, 0, key, 61210, aFor.length);
	}

	private static void init206(int[] key) {
		int[] aFor = { 0xbd8ed8, 0x4f7c2a, 0xbd8ed8, 0x4f7c2a, 0xbd8ed8, 0x4f7c2a, 0xbd8ed8, 0x4f7c2a, 0xbd8ed8, 0x4f7c2a, 0xbd8ed8, 0x4f7c2a, 0xbd8ed8, 0x4f7c2a, 0xbd8ed8, 0x4f7c2a, 0xbd8ed8, 0x4f7c2a, 0xbd8ed8, 0x4f7c2a, 0xbd8ede, 0x4f7c2a, 0xbd8ede, 0x4f7c2a, 0xbd8ed8, 0x4f7c2a, 0xbd8ed8, 0x4e7d2b, 0xbc8fdb, 0x4d7e34, 0xb88bc7, 0x4f703d, 0xa486c7, 0x686135, 0xcdb9d8, 0xa00503, 0x9ba2d5, 0x8d311e, 0x91a6cc, 0xb33b14, 0x9b9acc, 0xb2381b, 0x999bc3, 0xb7381b, 0x869dc3, 0xb7381b, 0x849dc0, 0xb7381b, 0x829cc0, 0xb4391a, 0x839cc0, 0xbb3a1b, 0x819fc2, 0xbd3819, 0x8390c5, 0xbc3918, 0xfc91c3, 0xbe3b1e, 0xfb91c0, 0xbe3b1e, 0xf891c2, 0xbe3b1e, 0xf490c0, 0xbf3c1f, 0xf291c0, 0xa23f21, 0xf390c3, 0xa23f21, 0xf38fc1, 0xa03d23, 0xf68fc0, 0xa03d23, 0xf68fc2, 0xa03d23, 0xf88ec1, 0xa23b25, 0xf98dc6,
				0xa23b25, 0xf98dc6, 0xa53a22, 0xfa8dc7, 0xa53a22, 0xfa8dc7, 0x9a3521, 0xf98fc6, 0x9d342e, 0xf98fc6, 0x9d342e, 0xf588c6, 0x9d342e, 0xf489c7, 0x9e372d, 0xf288c4, 0x9f482e, 0xf189c5, 0x9f4828, 0xf289c7, 0x9c482a, 0xee89c0, 0x9c4828, 0xef8dc5, 0x994535, 0xed86db, 0x833f38, 0xed8ee4, 0x802433, 0xe780e0, 0x802433, 0xe880eb, 0x81253c, 0xed83ea, 0x80243f, 0xec83ec, 0x86243f, 0xed8ceb, 0x86243f, 0xea8dea, 0x87273c, 0xe98ceb, 0x84203c, 0xea8de4, 0x84203c, 0xeb8ee5, 0x84203c, 0xf48fe6, 0x843e3d, 0xf58ee6, 0x843c3a, 0xf58ee6, 0x9a3d3c, 0xea8ee1, 0x9a3a3a, 0xeb8ee4, 0x9b3b38, 0xea8de7, 0x9b3b3a, 0xea8de5, 0x9b3b38, 0xf48ce7, 0x843439, 0xf58dd8, 0x873738, 0xf58dda, 0x86363b, 0xf58dda, 0x86363b, 0xf28ad9, 0x87373a, 0xff89d8, 0x86363b, 0xfcf6df, 0x87493b, 0xfb89d8, 0x84483c, 0x58bd9,
				0x87493c, 0x58bd9, 0x87493c, 0x48ada, 0x824f32, 0x589d5, 0x8d4e3f, 0x588d4, 0x8c4f38, 0x87d4, 0x8e4e3f, 0x184d7, 0x934f3f, 0x285d8, 0x904e31, 0x385df, 0x97492e, 0x385c1, 0x97492c, 0x287c7, 0x95482d, 0xf9ac0, 0x934e2f, 0xf9ac0, 0x914f33, 0x99cc0, 0x9a4e35, 0x1989d9, 0x6f493e, 0x1f4d6, 0x6d493a, 0xf4d4, 0x6e4a3b, 0x1ef4d5, 0x6e4a3b, 0x1ef4d7, 0x6e4a3b, 0x1ef4d7, 0x6f343c, 0x1ff5d0, 0x6d343c, 0x1ff5d0, 0x6c353a, 0x19f5d2, 0x6e353b, 0x16f5d3, 0x6a4a3a, 0x178ad0, 0x684a38, 0x148adf, 0x684a38, 0x148bd0, 0x694a38, 0x168ade, 0x974b39, 0x168ade, 0x944836, 0x1589d1, 0x944836, 0x1789de, 0x914837, 0x12f7d3, 0x974836, 0x1188d0, 0x974836, 0x1f88d3, 0x974836, 0x1e89d0, 0x944b35, 0x1e8bd7, 0x973436, 0x1f8ad4, 0x993435, 0x1c89d7, 0x9e3535, 0xe18fd7, 0x9a3637, 0xe38ed6, 0x943809, 0xe18ee9,
				0x923809, 0xe08dd6, 0x913b09, 0xe481ed, 0x9d3f0a, 0x1bf8fb, 0x90340f, 0x2e7f6, 0x953e0a, 0xde2f5, 0x9a3c0b, 0x8e5f2, 0x823007, 0x7e1f4, 0x782c05, 0x2e0f4, 0x7a2c05, 0xde0f6, 0x7b2b04, 0xfe7f6, 0x7d2901, 0x17e0f4, 0x722018, 0xbe7f5, 0x933204, 0x28d0f7, 0xf03c04, 0xc4fe, 0xf7330b, 0x3c7ff, 0xf1350d, 0xc7f9, 0xf2350b, 0x6c6fa, 0xf2350b, 0x1c4f9, 0xf2370c, 0xc5fe, 0xf2370c, 0xc5fe, 0xf2370c, 0xc5fe, 0xf2370c, 0xc5fe, 0xf2370c, 0xc5fe, 0xf2370c, 0xc5fe, 0xf2370c, 0xc5fe, 0xf2370c, 0xc5fe, 0xf2370c, 0x1c4f9, 0xf2370c, 0x1c4ff, 0xf3360d, 0x1c4fd, 0xf3360d, 0x2c4f9, 0xf3360d, 0x2c4fa, 0xf3360d, 0x1cc4f6, 0xf3360d };
		System.arraycopy(aFor, 0, key, 61510, aFor.length);
	}

	private static void init207(int[] key) {
		int[] aFor = { 0x1c4ff, 0xf3360d, 0x1c4ff, 0xf3360d, 0x1c4ff, 0xf3360d, 0x1c4ff, 0xf3360d, 0x1c4ff, 0xf3360d, 0x1c4ff, 0xf3360d, 0x1c4ff, 0xf3360d, 0x1c4ff, 0xf3360d, 0x1c4ff, 0xf3360d, 0x1c4ff, 0xf3360d, 0x1c4f9, 0xf3360d, 0x1c4f9, 0xf3360d, 0xc5fe, 0xf2370c, 0x1c4ff, 0xf2370c, 0xc5fc, 0xf2370c, 0x7c2ff, 0xf03905, 0x1bcfff, 0xd0290e, 0x74fee2, 0x19423f, 0x22e5e9, 0x347622, 0x2fe0f3, 0xd7d2b, 0x28dcfc, 0x7d2a, 0x2adffd, 0x77d2a, 0x37d9fd, 0x67c25, 0x34d8ff, 0x67c25, 0x33d8fe, 0x57d24, 0x32d8fe, 0xa7e25, 0x32d8fc, 0x97e26, 0x37d6fa, 0x87f27, 0x48d7fc, 0x97e20, 0x4ad6fc, 0xe7f21, 0x48d5fd, 0xf7e20, 0x47d2fe, 0xc7e21, 0x40d2ff, 0xe7c1f, 0x5ed2fe, 0xe7c1f, 0x5ed3c0, 0xc6221, 0x59d3c3, 0xc6221, 0x59d3c1, 0xf6120, 0x57d2c2, 0xe6621, 0x54d3c5, 0xd6726, 0x57d2c4, 0xb6520, 0x54d2c5,
				0xa6421, 0x55d3c4, 0x356b22, 0x56d1c5, 0x326a2d, 0x56d1c5, 0x356b22, 0x52d0c5, 0x3a6c2d, 0x52d0c5, 0x3b6d2c, 0x50d3c6, 0x3c6c2d, 0x51acc7, 0x3c6c2d, 0x51acc1, 0x3f6d2a, 0x4eadcd, 0x3c6f2a, 0x49a8c7, 0x336530, 0x5da7c1, 0x40c1c, 0x429fd5, 0x7b1a6a, 0x506cdd, 0x751e6b, 0x5368d6, 0x791217, 0x5569a9, 0x781517, 0x526ba9, 0x7b1517, 0x526ba9, 0x781416, 0x5195d6, 0x7b1717, 0x5094d5, 0x7b1717, 0x5793d4, 0x7c1617, 0x5090d3, 0x7c1617, 0x5191d2, 0x7d1814, 0x5291d3, 0x7f1b14, 0x5290dc, 0x7f1b14, 0x5197de, 0x7c1a17, 0x5294dc, 0x7d1b17, 0x4d8bda, 0x7d1b16, 0x538bdb, 0x7c1916, 0x5388d8, 0x631b16, 0x5288c6, 0x611e17, 0x5289c4, 0x611e16, 0x5587c7, 0x611e16, 0x5787c4, 0x601d17, 0x5981c4, 0x631c10, 0x5e82c5, 0x601d13, 0x22bcc4, 0x661e1c, 0x20bac4, 0x691e1d, 0x20bbc5, 0x691e1d, 0x22b9c7,
				0x6c111b, 0x23b8c0, 0x73121c, 0x22b9c3, 0x711422, 0x27bac2, 0x7f0a22, 0x23bafe, 0x7d0b27, 0x22b9fd, 0x430b20, 0x20bfc3, 0x440b26, 0x20bdc0, 0x450a26, 0x23b3c5, 0x440921, 0x2eb2c7, 0x430c2e, 0x2fb3c7, 0x5f702a, 0x31b1c1, 0x41722e, 0x2accc4, 0x43702c, 0x29cec0, 0x42712d, 0x28b0c3, 0x43722c, 0x2fb1dc, 0x42752d, 0x32b1df, 0x43722d, 0x30b4df, 0x457c2d, 0x32b6d9, 0x4a7d2a, 0x30b1de, 0x4d7d2d, 0x32b0de, 0xb67e2d, 0x3eb0df, 0xb47e2e, 0x3bb1dd, 0xab612e, 0x3ab0da, 0xab612e, 0x38b5da, 0xad6129, 0x34b5db, 0xaa602f, 0xab7d9, 0xab6f2e, 0x9b8d8, 0xaa602f, 0xdbad8, 0xa46020, 0xfbad6, 0xa1612e, 0x10bcd6, 0xa2622f, 0x16bcd8, 0xa3632f, 0x1b83d6, 0xa1602f, 0x1c83d5, 0xa06122, 0x1b80da, 0xa26120, 0x1a81da, 0xac5e21, 0x1c83db, 0xb25e22, 0x1885db, 0xb05c2c, 0x1685d4, 0xb55d23, 0x1485d5,
				0xb45c23, 0x1485d5, 0xb45c23, 0x1485d5, 0xb45c22, 0x2a85db, 0xb75f22, 0x2d86de, 0xbb5e24, 0x348bd3, 0xbc5820, 0x388bd2, 0xb85b23, 0xc395d3, 0xb45e3c, 0xc295cc, 0xb45e3e, 0xc295ca, 0xb1593c, 0xdb90c9, 0xbe5025, 0xc498cb, 0x5c4d39, 0xe7afca, 0x3f4339, 0xcfbbc3, 0x384c36, 0xccb8c2, 0x3e4a30, 0xceb8c1, 0x3c4a33, 0xc8b9c2, 0x3c4a33, 0xcfbbc1, 0x3c4834, 0xcebac6, 0x3c4834, 0xcebac6, 0x3c4834, 0xcebac6, 0x3c4834, 0xcebac6, 0x3c4834, 0xcebac6, 0x3c4834, 0xcebac6, 0x3c4834, 0xcebac6, 0x3c4834, 0xcebac6, 0x3c4834, 0xcebac0, 0x3c4834, 0xcebac6, 0x3c4834, 0xcebac4, 0x3c4834, 0xcdbac0, 0x3c4834, 0xcdbac3, 0x3c4834, 0xd3bacf, 0x3c4834 };
		System.arraycopy(aFor, 0, key, 61810, aFor.length);
	}

	private static void init208(int[] key) {
		int[] aFor = { 0xcfbbc7, 0x3c4834, 0xcfbbc7, 0x3c4834, 0xcfbbc7, 0x3c4834, 0xcfbbc7, 0x3c4834, 0xcfbbc7, 0x3c4834, 0xcfbbc7, 0x3c4834, 0xcfbbc7, 0x3c4834, 0xcfbbc7, 0x3c4834, 0xcfbbc7, 0x3c4834, 0xcfbbc7, 0x3c4834, 0xcfbbc7, 0x3c4834, 0xcfbbc1, 0x3c4832, 0xcfbbc1, 0x3d4933, 0xcebac0, 0x3d4933, 0xcfbbc3, 0x3d4933, 0xcbbfc7, 0x3c443b, 0xd7b0c2, 0x1c5633, 0xb881df, 0xd43a03, 0xec9dd6, 0xf90f1c, 0xe299cd, 0xc3051a, 0xe6a4cd, 0xc30518, 0xeaa5c0, 0xc70718, 0xe9a4c0, 0xd90017, 0xe8a3ce, 0xda0714, 0xefa3cd, 0xda0714, 0xeca2ce, 0xdb0714, 0xe3a1cd, 0xda0617, 0xe6a1cc, 0xd80910, 0xe7a0cb, 0xa70810, 0xe4a0cc, 0xa00911, 0xe6a3cd, 0xa10810, 0xe9a4ce, 0xa00911, 0xeaa2cf, 0xa70f10, 0xe8a2f0, 0xa70f10, 0xe8a2f0, 0xb91210, 0xeda2f1, 0xb91210, 0xeca3f2, 0xb91212, 0xe1a1f0, 0xb81513, 0xe1a1f0,
				0xb91212, 0xe0a6f3, 0xbb1010, 0xe5a6f4, 0xbb1010, 0xe5a6f4, 0xba1111, 0xd8a9f6, 0xbb1311, 0xd8a9f6, 0xba1010, 0xddabf9, 0xba101e, 0xd2acf6, 0xba101e, 0xd0adf7, 0xbb131d, 0xd7acf4, 0xbb131d, 0xd6d3f7, 0xb9121e, 0xc8d2f9, 0xb9121e, 0xcfdaf0, 0xb31509, 0xd9d5e6, 0x94773f, 0xa5f2fc, 0xb98348, 0xbcdeed, 0xbc8648, 0xbcdae4, 0xbebb55, 0xb8d8e4, 0xbcbc54, 0xbedae5, 0xbfbd54, 0xbdd5e6, 0xbebc55, 0xbdd7e1, 0xb9bb54, 0xbcd6e2, 0xb9bb54, 0xbcd6e2, 0xbab855, 0xbcd6e2, 0xbbb954, 0xbdc8e3, 0xbaba5b, 0xb2c9e2, 0xbaba5b, 0xb2cee7, 0xb4bb5b, 0xbdcee6, 0xb5b958, 0xbcc1e7, 0xb6b827, 0xbdc2e6, 0xb7b927, 0xbbc4e4, 0xb7b927, 0xbac7e3, 0xb4b826, 0xbb38e0, 0xaaba26, 0xbb39ef, 0xaabd28, 0xb93bef, 0xaabd28, 0xbf3be0, 0xa8b228, 0xb139e2, 0xabb529, 0xb638e4, 0xa8b629, 0x8a26e6, 0xafb729, 0x8624f8,
				0xacb028, 0x8624f8, 0xadb129, 0x8327fa, 0xacbf28, 0x9e26fb, 0xadbc2f, 0x9e20f9, 0xabbe21, 0x9321f8, 0xaf8021, 0x9122f5, 0xd08121, 0x9322f2, 0xd68124, 0x9124fd, 0xd88320, 0x912bfe, 0xdb8123, 0x972dfd, 0xdb8123, 0x962afd, 0xc7851f, 0x9634fe, 0xc3811b, 0x9133f9, 0xc88b1f, 0x9731f6, 0xf18f1a, 0x9630f7, 0xfef11a, 0x9432f5, 0xfdf605, 0x9733f4, 0xf9f407, 0x963cf3, 0xe7f406, 0x933cf2, 0xe5f706, 0x9c39f3, 0xe0f604, 0x9f27f3, 0x1cf40b, 0x9420f3, 0x1ff50b, 0x8f23f3, 0x1cfb0a, 0x8422f3, 0x1ff808, 0x8323f2, 0x1eff09, 0x8121f4, 0x22c109, 0x8a21f2, 0x27c109, 0x9722f7, 0x24c708, 0x9222f7, 0x25c509, 0x992df6, 0x27c609, 0x982ff6, 0x5ac409, 0x9c28f6, 0x55c509, 0x9f2af6, 0x52da09, 0x8328f6, 0x50dc09, 0x8829f6, 0x50dc09, 0x8528f6, 0x51db09, 0x8528f6, 0x54d909, 0x9829f6, 0x51c609, 0x9729f6,
				0x53c709, 0x932af6, 0x2dc609, 0x912af6, 0x28c109, 0x9e29f6, 0x2fcc0b, 0x812ef1, 0x28f108, 0x8c2af1, 0x13f207, 0x8b26f1, 0x1af705, 0x9126f6, 0x16f404, 0x9325f5, 0x12f407, 0x6e3be8, 0x17f607, 0x6f3af7, 0x18f604, 0x6e3df0, 0x1cf605, 0x713cf3, 0x17fe18, 0x6d36f6, 0xf5e304, 0x4e01f7, 0x96ed04, 0x791afd, 0x8eed08, 0x7a19fc, 0x8bea0e, 0x7b18ff, 0x89ea0d, 0x7d19fc, 0x89ea0d, 0x7a1bf9, 0x88e90d, 0x7b1afe, 0x88e90d, 0x7b1afe, 0x88e90d, 0x7b1afe, 0x88e90d, 0x7b1afe, 0x88e90d, 0x7b1afe, 0x88e90d, 0x7b1afe, 0x88e90d, 0x7b1afe, 0x88e90d, 0x7b1afe, 0x88e90d, 0x7b1af8, 0x88e90d, 0x7b1afe, 0x88e90d, 0x7b1afc, 0x88e90f, 0x7a1dfc, 0x88ee09, 0x791cff, 0x88ee08, 0x671cf1, 0x88ee08 };
		System.arraycopy(aFor, 0, key, 62110, aFor.length);
	}

	private static void init209(int[] key) {
		int[] aFor = { 0x7b1dfb, 0x88ee08, 0x7b1dfb, 0x88ee08, 0x7b1dfb, 0x88ee08, 0x7b1dfb, 0x88ee08, 0x7b1dfb, 0x88ee08, 0x7b1dfb, 0x88ee08, 0x7b1dfb, 0x88ee08, 0x7b1dfb, 0x88ee08, 0x7b1df9, 0x88ee08, 0x7b1df9, 0x88ee08, 0x7b1df9, 0x88ee08, 0x7b1dfb, 0x88ee0a, 0x7c1af8, 0x8fe909, 0x7c1af8, 0x8fe909, 0x7d1bf9, 0x8fe909, 0x7a1cfa, 0x82e501, 0x6e16fc, 0xa5f308, 0x524e3, 0x6d9f3a, 0x5b3ae8, 0x4faa2e, 0x563cfe, 0x76a129, 0x5500fd, 0x71a029, 0x593ff0, 0x729d2c, 0x593ff6, 0x729c2e, 0x423ef6, 0x769d2c, 0x473efb, 0x759a23, 0x463ffa, 0x729c22, 0x4738fb, 0x7f9e20, 0x4639fa, 0x7d9f20, 0x4038fb, 0x7e9027, 0x3f39fb, 0x7d9326, 0x3839f8, 0x7d9326, 0x3839f8, 0x7e9324, 0x3438fa, 0x7f9425, 0x3239c5, 0x7c9725, 0x333ac5, 0x7c9725, 0x2e39c4, 0x7d9624, 0x2827c6, 0x7e9525, 0x2627c1, 0x719622, 0x2624c3,
				0x7f9020, 0x2525c4, 0x7f9020, 0x2327c6, 0x7f9020, 0x2327c6, 0x7e9f23, 0x1e27c5, 0x7f9e22, 0x1d24ca, 0x7e9822, 0x1a23ca, 0x7e9822, 0x1923cb, 0x7e9822, 0x1624ca, 0x7f9923, 0x1527c9, 0x7e9822, 0x1526ca, 0x78e620, 0x1558c9, 0x659a23, 0x165fce, 0x6d9138, 0x151d6, 0x53f60b, 0x677ac0, 0x7a027e, 0x7c64ce, 0x7c0761, 0x7d6fd2, 0x7e026b, 0x7a6cd1, 0x79036b, 0x786cd1, 0x781c69, 0x796dd2, 0x7b1f6e, 0x786cd3, 0x7c186d, 0x7a6dd0, 0x7d1b6e, 0x756cd1, 0x7c1411, 0x766dd0, 0x7d1711, 0x726cd2, 0x631117, 0x716fd1, 0x621016, 0x726fd0, 0x62ee17, 0x716cde, 0x63ef17, 0x716cd0, 0x62e818, 0x766dd1, 0x63eb1b, 0x756cd0, 0x63e51c, 0x746fd1, 0x6ce41f, 0x7568d0, 0x6fe51e, 0x746bcf, 0x6fe500, 0x7575d0, 0x6ee41f, 0x7176ce, 0x51e51c, 0x7071cf, 0x52e71c, 0x7671c8, 0x51e61e, 0x7b7ec9, 0x57e41e, 0x797ec6,
				0x48e511, 0x7a79c9, 0x4ee41e, 0x7b7ac6, 0x4cda1c, 0x747bc6, 0x4ed81a, 0x737cc4, 0x4cda24, 0xe7dfb, 0x4dd51b, 0x87dc4, 0x40d41a, 0xb7fc4, 0x40d41a, 0xc78c5, 0x42d624, 0x1379c7, 0x41c923, 0x1278c6, 0x41c922, 0x197dc5, 0x40c823, 0x1970cb, 0x42ca21, 0x1e71c8, 0x41ca22, 0x2076c9, 0x43c822, 0x2777ce, 0x40c823, 0x2809ce, 0x42ca21, 0x290ecf, 0x44c83f, 0x2a0fce, 0x44c83f, 0x3501ce, 0x47cb3c, 0x3100ce, 0x48cc3a, 0x3301c9, 0x4cce3d, 0xc91fc8, 0x41cd3d, 0xcd1fc9, 0x43cc3d, 0xd019c8, 0x45cf3e, 0xd318c9, 0x44c03f, 0xdc17c9, 0x47cf3c, 0xe615cb, 0x42c93c, 0xeb15cb, 0x47cb32, 0xe815ca, 0x58f53d, 0xeb2ac5, 0x5fcb3d, 0xe82ac4, 0x52c93d, 0xee2cc6, 0x2eca3d, 0xec2dc7, 0x28ca3d, 0xe023c7, 0x29c93c, 0xe423c6, 0x2ac83d, 0xe423c6, 0x28c83b, 0xe322c7, 0x2bcb3b, 0xef2cc0, 0x2ec93b, 0x912cc1,
				0x2ac83b, 0x9c2bc1, 0x28c93b, 0x9a2bc2, 0x34cb3b, 0x9815cc, 0x33c83a, 0x9511cc, 0x36c93b, 0x961ece, 0xac93b, 0x9d1fcc, 0xfcb3a, 0x8119cf, 0x8cb3c, 0x8f1ac8, 0xacb3d, 0x8b04ce, 0xf5ca3d, 0x8c07cf, 0xfbcb3e, 0x8c07cd, 0xf8ca38, 0x9500cb, 0xfdc122, 0x8408cc, 0x13df3f, 0xa93cca, 0x7cd03e, 0x8d27c9, 0x7ad03c, 0x8e24c8, 0x7fd73a, 0x8f26c9, 0x7ed53b, 0x8a26ca, 0x7ed53b, 0x8a27ce, 0x79d43b, 0x8a27c8, 0x79d43b, 0x8a27c8, 0x79d43b, 0x8a27c8, 0x79d43b, 0x8a27c8, 0x79d43b, 0x8a27c8, 0x79d43b, 0x8a27c8, 0x79d43b, 0x8a27c8, 0x79d43b, 0x8a27c8, 0x79d43b, 0x8a27c8, 0x79d43b, 0x8a27c8, 0x79d43b, 0x8a27c8, 0x79d43b, 0x8b20c8, 0x79d33d, 0x8821cb, 0x79d33c, 0x9621cb, 0x79d33c };
		System.arraycopy(aFor, 0, key, 62410, aFor.length);
	}

	private static void init210(int[] key) {
		int[] aFor = { 0x8a20cf, 0x79d33c, 0x8a20cf, 0x79d33c, 0x8a20cf, 0x79d33c, 0x8a20cf, 0x79d33c, 0x8a20cf, 0x79d33c, 0x8a20cf, 0x79d33c, 0x8a20cf, 0x79d33c, 0x8a20cf, 0x79d33c, 0x8a20cd, 0x79d33c, 0x8a20cd, 0x79d33c, 0x8a20cd, 0x79d33c, 0x8a20cd, 0x79d33c, 0x8d27ce, 0x7ed43f, 0x8d27ce, 0x7ed43f, 0x8c26cf, 0x7ed43f, 0x8b21cc, 0x73d837, 0x9f2bca, 0x52cf3e, 0xf015d5, 0x9aab0f, 0xad0ddc, 0xb99c1b, 0xa109d4, 0xbe9403, 0x9c35d5, 0xbf9401, 0x970bd8, 0xbdaa03, 0x9709df, 0xbdaa05, 0x9208dc, 0xa1aa05, 0x9009d2, 0xa2ad0a, 0x9009d2, 0xa2ad0a, 0x9709d3, 0xa0af08, 0x9908d2, 0xa0af08, 0x9c08d3, 0xa2a00f, 0xe309d3, 0xa1a30e, 0xe50ad3, 0xa1a30e, 0xe409d0, 0xa1a30e, 0xeb08d0, 0xa0a40f, 0xed09ef, 0xa0a40f, 0xef09ef, 0xbfa70e, 0xed09ef, 0xbea60d, 0xeb17ef, 0xbda50c, 0xea14ef, 0xbda50c, 0xea17ed,
				0xb3a30e, 0xe916ea, 0xb3a30e, 0xe815eb, 0xb4a20d, 0xe815eb, 0xb5ad0c, 0xd515ea, 0xb4ac0d, 0xd616e5, 0xb4ac0d, 0xd017e5, 0xb4ac0d, 0xd317e4, 0xb4ac0d, 0xdc10e5, 0xb5ad0c, 0xdf13e6, 0xb4ac0d, 0xdf12e5, 0xb2d20f, 0xdf6ce4, 0xb0ac0f, 0xc268e3, 0xb9a615, 0xd566f9, 0x84cf22, 0xb140ec, 0xaf3c2e, 0xa9569b, 0xa9302a, 0xa95c9f, 0xab2c24, 0xa95e9a, 0xa82c24, 0xa8589b, 0xa82c26, 0xa959e6, 0xa82c26, 0xab5be4, 0xaf2327, 0xa85ae5, 0xa02026, 0xa95be2, 0xa32727, 0xaf5be3, 0xa22626, 0xb259e0, 0xa0d828, 0xb559e1, 0xa6db28, 0xb559e1, 0xa1dc2a, 0xb45ae6, 0xa1dc2a, 0xb75be1, 0xa1dc2a, 0xb654e6, 0xaedd2b, 0xb656e5, 0xafda2a, 0xb557fa, 0xaed92b, 0xb256fb, 0xafc62a, 0xb157f8, 0xafc62a, 0xb255fb, 0xacc129, 0x8e54fd, 0xadc228, 0x895afd, 0xacc32b, 0x8459f3, 0xadc22a, 0x815ff3, 0xaec229, 0x9f5cf0,
				0xadc32a, 0x985cf3, 0xaffc29, 0x965ef5, 0xacfd28, 0x9759f5, 0xaaff2a, 0xea57f5, 0xabfe15, 0xef57f4, 0xa9fe16, 0xe355f4, 0xa8f917, 0xe555f5, 0xabf816, 0xe457f4, 0xb5e610, 0xe154f6, 0xb4e711, 0xe253f9, 0xb4e71e, 0xed52f8, 0xb6e510, 0xea5df9, 0xb7e413, 0xe95efa, 0xb6e510, 0xd759fb, 0xb4e716, 0xd058fa, 0xb59817, 0xdd59fa, 0xb79a15, 0xdc5efb, 0xb1980b, 0xdf5ffa, 0xb1980b, 0xc150fb, 0xb0990a, 0xc553fb, 0xb2980b, 0xcb53fa, 0xb69e0a, 0x3450f8, 0xb19f0a, 0x394ef8, 0xb59c0c, 0x244ff9, 0xb69b0d, 0x224ef8, 0xb7980e, 0x204efb, 0xba990f, 0x264efa, 0x87970e, 0x224cf9, 0x8a900d, 0x214dfb, 0x8f930e, 0x3e4dfb, 0x8c920d, 0x384cfb, 0x8eac03, 0x374efb, 0x8dad0c, 0x324ef5, 0xf2ab0d, 0x304ef5, 0xf6a90d, 0x314efb, 0xfaa603, 0x314efb, 0xfaa603, 0x3241fa, 0xf4a602, 0x3745fa, 0x89a60c, 0x3447fb,
				0x8ca60e, 0x3979f9, 0x88a60f, 0x3878f9, 0x95a40f, 0x3c7ffb, 0x94a50e, 0x327cf8, 0x91a40f, 0x3173f9, 0xaaa50d, 0x3c70fb, 0xaea40f, 0x2076fa, 0xaaa50e, 0x2275f8, 0xa7a40d, 0x246af8, 0x5aa40b, 0x2068f9, 0x57a408, 0x2068fb, 0x54a50e, 0x396ffd, 0x51ae14, 0x2867f8, 0xbfb00b, 0x454fd, 0xd2b908, 0x234eff, 0xd4b90a, 0x204dfe, 0xd1be0c, 0x3f4cff, 0xcebf0d, 0x3a4dfe, 0xcebf0d, 0x3d4cf8, 0xcebf0d, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3c4bf8, 0xcebf0b, 0x3f4dfd, 0xcebf0b, 0x214dfc, 0xcebf0b };
		System.arraycopy(aFor, 0, key, 62710, aFor.length);
	}

	private static void init211(int[] key) {
		int[] aFor = { 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cf8, 0xcebf0b, 0x3d4cfa, 0xcebf0b, 0x3d4cfa, 0xcebf0b, 0x3d4cfa, 0xcebf0b, 0x3d4cfa, 0xcebf0b, 0x3a4bf9, 0xc9b808, 0x3a4bf9, 0xc9b808, 0x3b4af8, 0xc9b808, 0x3c4dfb, 0xc4b400, 0x2847fb, 0xe7a209, 0x4e7be4, 0x21c538, 0x186ded, 0xbff24, 0x1c6af4, 0x2f623, 0x2057f5, 0x4f723, 0x2357fa, 0x9f621, 0x2054fa, 0x9f623, 0x2757fb, 0x17f523, 0x2757f5, 0x16f422, 0x2450fa, 0x16f422, 0x2350fb, 0x14f620, 0x2d51fa, 0x14f620, 0x2851fb, 0x15f927, 0x2a50fc, 0x6afa20, 0x2b53fc, 0x69f921, 0x2c53ff, 0x69f921, 0x2053fc, 0x6af822, 0x2154fd, 0x6df91d, 0x2357fd, 0x6cf81c, 0x3d57fe, 0x6cf81c, 0x3848fd, 0x6df91f, 0x3b4bfc, 0x6efa1e, 0x3948ff, 0x61fb1d,
				0x384ef9, 0x61fb1d, 0x3a4df8, 0x61fb1d, 0x3d4cfb, 0x60f41c, 0x4cfa, 0x61f51d, 0x4cfa, 0x62f612, 0x64dfa, 0x62f612, 0x54dfb, 0x62f612, 0xa4afa, 0x63f713, 0x949f9, 0x62f612, 0x948fa, 0x65f713, 0x849f8, 0x678913, 0x164af8, 0x6c870d, 0x47e1, 0x51ee3a, 0x677ef5, 0x790237, 0x7f6882, 0x7f0e33, 0x7e6385, 0x7c133e, 0x7e6180, 0x7c123f, 0x7c6680, 0x7c123d, 0x7d6783, 0x7f113c, 0x7c66fc, 0x781e3d, 0x7d67ff, 0x7b1d3c, 0x7161f9, 0x7b1d3c, 0x7660f9, 0x781e3f, 0x699ef8, 0x7b1f30, 0x6e9ef9, 0x7a1d33, 0x6e9efb, 0x7a1b32, 0x6c9cf9, 0x7a1b32, 0x6c9cf9, 0x7b1435, 0x639df8, 0x7a1736, 0x609cf9, 0x7b1029, 0x609ee6, 0x7c1136, 0x6181e7, 0x7f1035, 0x6082e6, 0x7f1035, 0x6283e4, 0x7d1637, 0x5f83e3, 0x7c1536, 0x588de3, 0x7e1734, 0x578ced, 0x7d1037, 0x518dee, 0x611335, 0x538cef, 0x602c34, 0x568cee,
				0x612d35, 0x5b8ee8, 0x602a36, 0x5e8fe9, 0x612837, 0x2180e8, 0x602908, 0x2480e9, 0x62290b, 0x2882e9, 0x642f0d, 0x2a82ee, 0x652c0a, 0x3483e9, 0x66330d, 0x3281eb, 0x67320c, 0x3186eb, 0x663303, 0x3c85e4, 0x67320c, 0x3a8be6, 0x64310d, 0x3a8be4, 0x65300e, 0x48ce5, 0x663109, 0x28ee5, 0x663109, 0xef0e4, 0x67320a, 0xcf6e4, 0x60330b, 0xdf5fb, 0x63320a, 0x13fafa, 0x62330b, 0x16fafb, 0x61310b, 0x18fafa, 0x643615, 0xe5fbe4, 0x613515, 0xe6e5e4, 0x6d3417, 0xfde6e3, 0x6f3215, 0xfce6e1, 0x683314, 0xfee6e0, 0x673013, 0xfbe7e6, 0x5b3f15, 0xffe5e3, 0x583e10, 0xf2e2e5, 0x5f3f11, 0xefe2e5, 0x5e3c10, 0xede1e5, 0x583e12, 0xe0dfe5, 0x593d13, 0xe4dce4, 0x5b3813, 0x9adce4, 0x5f3a13, 0x98dde5, 0x523a12, 0x9bd2e8, 0x533511, 0x94d3e9, 0x51351e, 0x92d6e6, 0x2c3510, 0x91d4e7, 0x293512, 0x9ceae5,
				0x2d3513, 0x82e8e6, 0x2f3512, 0x86eee6, 0x2e3413, 0x89eee4, 0x2a3613, 0x8ae1e5, 0x113711, 0x87e2e7, 0x143712, 0x9be4e4, 0x113710, 0x99e7e6, 0x1c3613, 0x98f9e5, 0xe73611, 0x9cfbe2, 0xe43610, 0x93fae3, 0xe73716, 0x8cfce5, 0xea3e0c, 0x91f7e1, 0xb2015, 0xb6c3e3, 0x6e2f16, 0x9fd9ef, 0x682e1a, 0x9cdaee, 0x6d291c, 0x9dd8ef, 0x6c2b1d, 0x98d9ee, 0x6c2b1d, 0x9fd8e8, 0x6c2b1d, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9edfe8, 0x6c2b1b, 0x9dd9ed, 0x6c2b1b, 0x83d9ec, 0x6c2b1b };
		System.arraycopy(aFor, 0, key, 63010, aFor.length);
	}

	private static void init212(int[] key) {
		int[] aFor = { 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8e8, 0x6c2b1b, 0x9fd8ea, 0x6c2b1b, 0x9fd8ea, 0x6c2b1b, 0x9fd8ea, 0x6c2b1b, 0x9fd8ea, 0x6c2b1b, 0x9fd8ea, 0x6c2b1b, 0x9fd8ea, 0x6c2b1b, 0x9ed9eb, 0x6f2804, 0x9bdcf6, 0x6c240c, 0x82d7f5, 0x563f06, 0xf9e2eb, 0x8c2236, 0xb18be1, 0xa5182b, 0xb08df9, 0xab1621, 0x8989f6, 0xad2920, 0x8a89f9, 0xa22823, 0x8a89fb, 0xa32b22, 0x8e8bf5, 0xa12b2d, 0x9189f5, 0xa02a22, 0x9189f5, 0xa32d2d, 0x9689f4, 0xa02c2e, 0x988af7, 0xa02c2e, 0x9c8bf5, 0xa12329, 0x9f8bf3, 0xa02228, 0xe08af3, 0xa1232f, 0xe58af2, 0xa0202c, 0xe78bf1, 0xad202f, 0xe68cf0, 0xaa2110, 0xe48ff0, 0xab2011, 0xfa8ff3, 0xab2011, 0xff90f0, 0xab2011, 0xfe91f3, 0xab2011, 0xfd91f1,
				0xa52213, 0xfd96f0, 0xa42314, 0xff95f1, 0xa42314, 0xff95f1, 0xa32217, 0xfc95f2, 0x9c2d14, 0xfd94f3, 0x9c2d14, 0xff97f3, 0x9b2c1b, 0xfd96f3, 0x9a2d1a, 0xf291f2, 0x9a2d1a, 0xf093f0, 0x9b2c1b, 0xf092f3, 0x9c2d1a, 0xf090f0, 0x9e2f1a, 0xefecf1, 0x952104, 0xfe9eef, 0xaf3734, 0x9cb8fa, 0x82c438, 0x87ad8c, 0x87cb3d, 0x87a788, 0x87d732, 0x86a68f, 0x87d431, 0x87a78f, 0x87d433, 0x87a08e, 0x86d530, 0x84a38f, 0x87d44f, 0x83ac8e, 0x86d54c, 0x8fae88, 0x86d54c, 0x8dae8f, 0x80d34a, 0x90ac8c, 0x812c4b, 0x95ac83, 0x802d4a, 0x93af8d, 0x802b45, 0x95ad8f, 0x802b45, 0x95ad8f, 0x832a44, 0x94a288, 0x8c2b45, 0x95a18b, 0x8f2a44, 0x95a78a, 0x8e2945, 0x92a695, 0x8f3644, 0x91a796, 0x8f3644, 0x91a794, 0x8c3445, 0xada096, 0x8f3542, 0xaca296, 0x893b40, 0xa1a198, 0x883a41, 0xa3a699, 0x8e3843, 0xbfa69a,
				0x8d3940, 0xb8a699, 0x8e0643, 0xb7a49f, 0x8d0743, 0xb0a39d, 0x8e0540, 0xb1a29e, 0xf30541, 0xb7a2a1, 0xf20a40, 0xbba0a1, 0xf10b43, 0xbda0a2, 0xf00c40, 0xa0a2a2, 0xf10d41, 0xa3bda5, 0xf70f43, 0xa2bca5, 0xf40842, 0xaebea5, 0xf5094d, 0xa9b1a4, 0xf4084e, 0xa9b1a6, 0xf70b4f, 0x97b0a5, 0xf60c4e, 0x95b2a5, 0xf10d49, 0x96cda5, 0xff0f4b, 0x94cba5, 0xf80e4a, 0x95c8ba, 0xfb0f4b, 0x94c8a4, 0xe50155, 0x91c8a5, 0xe70357, 0x9ec8a6, 0xe20457, 0x62caa5, 0xe60454, 0x61d4a5, 0xea0556, 0x67d7a5, 0xf60450, 0x64d7a3, 0xf00256, 0x66d7a2, 0xff0157, 0x63d6a2, 0xc30f54, 0x67d5a2, 0xcf0e54, 0x65d2a1, 0xc80f55, 0x67d2a0, 0xd50d56, 0x61d3a0, 0xd73358, 0x6fd3a1, 0xd53058, 0x68d3a0, 0xd73757, 0x15d2af, 0xd03458, 0x17d2a0, 0xdc3a58, 0x16d3a3, 0xdf3b59, 0x17dca0, 0xd13b58, 0x14dda1, 0xd43859, 0x6adaa1,
				0xd03956, 0x67d8af, 0xd43858, 0x65e7af, 0xcb395a, 0x60e4ac, 0xc93f5a, 0x6ee5ad, 0xca3c55, 0x6aeba3, 0xf13d57, 0x66eba2, 0xf53e57, 0x7aeaa2, 0xf73957, 0x7eeba2, 0xf93a54, 0x7df5a2, 0x23a56, 0x79f7a5, 0x3a57, 0x77f6a4, 0x33b51, 0x6ff7a5, 0x9354c, 0x72fca1, 0xe82b52, 0x56c8a7, 0x8e2452, 0x7fd2ab, 0x87255e, 0x73d1aa, 0x822258, 0x72d3ab, 0x802159, 0x74d2a8, 0x80205b, 0x73d3ae, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x72d4a8, 0x80205b, 0x71d2ad, 0x80205b, 0x6fd2ac, 0x80205b };
		System.arraycopy(aFor, 0, key, 63310, aFor.length);
	}

	private static void init213(int[] key) {
		int[] aFor = { 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x73d3a8, 0x80205b, 0x72d2a9, 0x832358, 0x77d7ac, 0x802f56, 0x6fdba1, 0xb63153, 0xceea2, 0x722d42, 0x328695, 0x20155f, 0x34838d, 0x2e1f55, 0xf8183, 0x2c1e56, 0xa818e, 0x2d2157, 0x5808f, 0x2c2159, 0x8180, 0x2d2157, 0x2838f, 0x2d2157, 0x1c828e, 0x2e2654, 0x1d838d, 0x2b2657, 0x1c838d, 0x242556, 0x18828d, 0x242556, 0x1a8d8a, 0x242556, 0x1b828c, 0x5b2a57, 0x19808a, 0x5c2a54, 0x1a8088, 0x5d2b55, 0x17808b, 0x5c2c54, 0x11818b, 0x5f2f6b, 0xf818a, 0x5e2e68, 0xd8188, 0x5e2e68, 0xa9e89, 0x5f2f6b, 0xa9e8b, 0x5c2c6a,
				0xb9f88, 0x532b6b, 0x99e8f, 0x52286a, 0x99e8f, 0x552969, 0x99e8d, 0x542668, 0x349e8e, 0x542668, 0x379c8f, 0x542668, 0x309d80, 0x542668, 0x339d8f, 0x5b2167, 0x329c8e, 0x582264, 0x319c83, 0x5a5c6a, 0x31e280, 0x5c226a, 0x33e080, 0x4a2c76, 0x21939d, 0x713b47, 0x42b489, 0x5cc84b, 0x5aa2fe, 0x5ac44f, 0x5aa8fa, 0x5ad840, 0x5ba9fd, 0x5adb43, 0x5aa8fd, 0x5adb41, 0x5aaffc, 0x5bda42, 0x59acfd, 0x5adb3d, 0x5ea3fc, 0x5bda3e, 0x52a1fa, 0x5bda3e, 0x50a1fd, 0x5ddc38, 0x52a2fd, 0x43223a, 0x57a2f2, 0x42233b, 0x56a0f3, 0x43243a, 0x55a1f0, 0x42273b, 0x55a1f0, 0x42273b, 0x5aaef0, 0x43243c, 0x5aaef0, 0x40253d, 0x5ba9f3, 0x47243c, 0x5aaaec, 0x44253d, 0x5bb5ef, 0x45243d, 0x5bb5ed, 0x44273c, 0x65b3ef, 0x47263b, 0x64b1ef, 0x412839, 0x69b2e1, 0x402938, 0x6bb5e0, 0x462b3a, 0x77b5e3, 0x452a39,
				0x70b5e2, 0x46153e, 0x7fb7e2, 0x45143e, 0x78b0e0, 0x46163d, 0x7b0e3, 0x45173c, 0x1b0e2, 0x44183d, 0xdb2dc, 0x47193e, 0xbb2df, 0x461e3d, 0x16b0df, 0x471f3c, 0x15afdf, 0x411d3a, 0x14aedc, 0x421a3b, 0x1bafdd, 0x41193a, 0x1da1d3, 0x401839, 0x1da1d1, 0x431b38, 0x22a7d3, 0x401a3f, 0x23a4d4, 0x471b38, 0x20dbd4, 0x49193a, 0x23dad5, 0x4f1f24, 0x22d9d4, 0x4f1f24, 0x21d9ca, 0x51113a, 0x22d9d5, 0x571324, 0x2fd9d4, 0x531525, 0x2cd8d4, 0xa81625, 0x2ed9d5, 0xa40927, 0x28d8d5, 0xa70926, 0x36dbd4, 0xa40827, 0x31dcd2, 0xa80a27, 0x34ddd2, 0xab0527, 0x8dcd2, 0xaf0627, 0x6ddd3, 0xaa0120, 0x5dcd5, 0xb50223, 0x7dcd4, 0xb43c23, 0x3ddda, 0xba3f22, 0x6ddd5, 0xb83e23, 0x79dad4, 0xbd3f22, 0x7ad9da, 0xb2312d, 0x7bd9d7, 0xb2312d, 0x7ad6d4, 0xbc312c, 0x79d7d5, 0xb9322d, 0x6d1d4, 0xbc3223, 0xbd3da,
				0xb8332d, 0x9ecda, 0xa7322f, 0xcefd9, 0xa5342f, 0xdefd7, 0xa93521, 0x8edd7, 0x963a22, 0xfecd7, 0x9a3a21, 0x8eed7, 0x853d22, 0xcefd7, 0x8b3e21, 0xeeed6, 0x8f2123, 0xf1ecd7, 0x882125, 0xffedd6, 0x8b2023, 0xe0ecd5, 0x86283f, 0xfbe1d2, 0x603621, 0xdfd4d4, 0x63f21, 0xf4c9d8, 0xc3f2f, 0xf9ccd9, 0xb3e2d, 0xfacfdc, 0x83d2e, 0xfccedf, 0x83c2c, 0xfbcfd9, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfbc8df, 0x93c2c, 0xf8ceda, 0x93c2c, 0xe6cedb, 0x93c2c };
		System.arraycopy(aFor, 0, key, 63610, aFor.length);
	}

	private static void init214(int[] key) {
		int[] aFor = { 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfacfdf, 0x93c2c, 0xfbcede, 0xa3f2f, 0xfecbdb, 0x93223, 0xf8c7d5, 0x182821, 0xdeced4, 0x540937, 0x10a7ef, 0x23327, 0x13a5f6, 0xb392c, 0x14a4fb, 0x373b2e, 0x11a4f6, 0x373b20, 0x109bf5, 0x393a23, 0x159afa, 0x383a23, 0x1798fa, 0x39392d, 0x99bf5, 0x3b3f2f, 0x89af6, 0x3b3f2f, 0xd9af5, 0x353c2e, 0xe9af4, 0x353c2e, 0x89bf5, 0x353c2e, 0xa9bf4, 0x4a332f, 0xb9af3, 0x49302e, 0xd9af5, 0x4b3029, 0x19bf7, 0x4a3728, 0x69bf6, 0x4b3629, 0x49bc9, 0x543528, 0x79ac8, 0x543528, 0x79ac8, 0x532a29, 0x69bc9, 0x532a29, 0x598c8, 0x5d2c2b, 0x799cf,
				0x5d2c2b, 0x69ace, 0x5d2c2b, 0x19bcf, 0x5c232a, 0x394cf, 0x632c29, 0x195cf, 0x632c29, 0x96ce, 0x642d26, 0x297c0, 0x652c27, 0xd90cf, 0x642d26, 0xd93c1, 0x672c29, 0xd91c0, 0x612e2b, 0xeecc7, 0x762131, 0x1e9edb, 0x4e3601, 0x7db9cf, 0x60c20e, 0x65abba, 0x65ce0a, 0x65a5be, 0x65d504, 0x65a5b8, 0x65d405, 0x65a7bb, 0x65d407, 0x65a0ba, 0x64d504, 0x66a3bb, 0x65d47b, 0x61acba, 0x64d578, 0x6daebc, 0x64d578, 0x6faebb, 0x62d37e, 0x6dadbb, 0x7c2d7c, 0x68adb4, 0x7c2d7c, 0x6fafbb, 0x7a2b72, 0x6caeb8, 0x7a2b72, 0x6dadb9, 0x7a2b72, 0x6da3b8, 0x742974, 0x6ea2b9, 0x742974, 0x68a4bb, 0x742974, 0x69a7a4, 0x772875, 0x68b8a7, 0x772875, 0x69b9a5, 0x762b74, 0x57bfa7, 0x752a73, 0x56bda7, 0x722572, 0x55bca5, 0x7c277c, 0x57bba4, 0x7b267d, 0x4bb8a4, 0x79277e, 0x4cb8a5, 0x7a1879, 0x43baa5, 0x791979,
				0x45baa4, 0x781f78, 0x39b9a6, 0x7b1e79, 0x3fb9a7, 0x7a1178, 0x33bb99, 0x79107b, 0x35bb9a, 0x781778, 0x28b99a, 0x791679, 0x2ba69a, 0x78177e, 0x2da498, 0x7b107f, 0x22a599, 0x78137e, 0x24ab97, 0x79127d, 0x27a894, 0x78137e, 0x19af95, 0x7b1279, 0x18ac92, 0x7c137e, 0x1bd392, 0x73127f, 0x19d190, 0x721560, 0x1ed08f, 0x73167f, 0x1cd190, 0x6c1960, 0x18d092, 0x6d1a63, 0x15d692, 0x6f1a63, 0xefd497, 0x6b0463, 0xedd490, 0x650562, 0xeed790, 0x630563, 0xf2d791, 0x610365, 0xf7d693, 0x600066, 0xfcd793, 0x630f66, 0xc1d593, 0x640e66, 0xcdd590, 0x610e65, 0xced390, 0x7e0d66, 0xcfd090, 0x7c0f68, 0xcaef90, 0x7d0e67, 0xc6ef9f, 0x7a0d68, 0xc5e99f, 0x70c67, 0xc2ea90, 0xa0267, 0xc3ea9d, 0xa0267, 0xc2e59e, 0x50366, 0xc0e59f, 0x10168, 0xbee59f, 0x20768, 0xbae69f, 0xf3968, 0xbde79f, 0x123a6a, 0xbfe69c,
				0x153a69, 0xbce091, 0x1a3967, 0xb8ee91, 0x263965, 0xbcee91, 0x293865, 0xbbec91, 0x353f65, 0xb9ed91, 0x303f64, 0xb6ef91, 0x372064, 0x49ed90, 0x322063, 0x4aeb90, 0x3e2665, 0x55ea93, 0x332e79, 0x4ce594, 0xec3d67, 0x2fd992, 0xf43566, 0x7c29c, 0xfd346b, 0x8c79d, 0xfb3669, 0xac798, 0xf8356a, 0xcc69b, 0xff356a, 0xdc199, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xdc69f, 0xff326c, 0xec09a, 0xff326c, 0x10c09b, 0xff326c };
		System.arraycopy(aFor, 0, key, 63910, aFor.length);
	}

	private static void init215(int[] key) {
		int[] aFor = { 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xcc19f, 0xff326c, 0xdc09e, 0xfc316f, 0x8c59b, 0xfe3d6c, 0xcca9f, 0xeb386b, 0x38d293, 0xae1e7b, 0xe5aea1, 0xf33b6b, 0xe2adba, 0xf53663, 0xebaab5, 0xc93763, 0xeaa8b6, 0xce0860, 0xe897b4, 0xc03662, 0xea97bb, 0xc63762, 0xe894bb, 0xc5366c, 0xea94b4, 0xda376d, 0xe893b7, 0xdb366c, 0xee92b5, 0xd9346e, 0xe192b7, 0xd8356d, 0xe492b6, 0xd8356d, 0xe69db1, 0xd9346c, 0x989db0, 0xd9346c, 0x9d9eb7, 0xd8356b, 0x9f9eb6, 0xd73268, 0x9c9eb7, 0xd73268, 0x9a9fb7, 0xd43157, 0x849fb6, 0xd43157, 0x869f88, 0xd22f69, 0x869f88, 0xd32e6a, 0x859c8b,
				0xdd2868, 0x849d8c, 0xdd2868, 0x879d8c, 0xdc2b69, 0x879d8c, 0xdb2a6a, 0x849d8f, 0xdb2a6a, 0xbb928c, 0xda2b6b, 0xb9918c, 0xda2b6b, 0xbc9183, 0xdb2a6a, 0xb39682, 0xda2b6b, 0xbc958d, 0xd62a65, 0xbc978c, 0xd02867, 0xbfea8b, 0xc7277d, 0xaf9891, 0xe23f4a, 0xd1b084, 0xcccb45, 0xc8a3f6, 0xc8c546, 0xc8aef2, 0xc8c14b, 0xc8b1f7, 0xc8c14b, 0xc8b3f6, 0xc8c04a, 0xc8b3f6, 0xc8c74b, 0xc9b2f5, 0xcac535, 0xcebdf4, 0xcac535, 0xc2bff6, 0xcac535, 0xc0bff7, 0xccc333, 0xc2bef7, 0xd2c131, 0xc341f6, 0xd2c131, 0xc143f6, 0xd5c03e, 0xc044f7, 0xd6c13d, 0xc047f5, 0xd6c13d, 0xce49f7, 0xd7c03c, 0xcd4af0, 0xd6c13d, 0xcd4df3, 0xd1c03c, 0xcd4ef1, 0xd0c13f, 0xce51f0, 0xd1c020, 0xcc50ef, 0xd3c23e, 0xf351ec, 0xd2c53f, 0xf050eb, 0xd3c63e, 0xf55ee8, 0xddc430, 0xf75fe7, 0xdcc33f, 0xf35ee7, 0xc2c03e, 0xf65ee4,
				0xc3c13f, 0xf561e5, 0xccc33e, 0xf761e2, 0xcbc539, 0x8b60e4, 0xc9c73b, 0x8d60e5, 0xc8c83a, 0x8061e4, 0xcaca04, 0x8160e4, 0xcccc06, 0x8361e7, 0xd2ce04, 0x8361e6, 0xd0d002, 0x8462e7, 0xd1d101, 0x8965e4, 0xd3d303, 0x8864eb, 0xd5dd01, 0x8864eb, 0xd6de00, 0xb762eb, 0xd5df07, 0xb661ec, 0xd5df07, 0xb21feb, 0xdade06, 0xb01de9, 0xdbd919, 0xb71cf6, 0xdbd919, 0xb51ee8, 0xdad618, 0xa81cea, 0xddd61b, 0xa51aea, 0xdfd61b, 0xa01be8, 0x23d41b, 0xa405ef, 0x2cd41d, 0xa007ee, 0x2dd51d, 0xbc04e9, 0x2fd71f, 0xba01e9, 0x22d61f, 0xbe01ea, 0x21d91f, 0x8303ea, 0x26d81f, 0x8f03e9, 0x23d81c, 0x8c05e9, 0x3dda1e, 0x8f04e9, 0x3cdb11, 0x8a3be9, 0x3dda1e, 0x863be6, 0x3ad911, 0x853de6, 0x47d81e, 0x813fe6, 0x49d81f, 0x8030e5, 0x49d81f, 0x8030e5, 0x48d71c, 0x8e30e6, 0x4cd51e, 0x8c30e6, 0x31d31e, 0x8831e6,
				0x3ed11e, 0x8c0fe9, 0x3cd11f, 0x920ce8, 0x39d11e, 0x900be6, 0x36d210, 0x9405e6, 0xbdd13, 0x970ae6, 0xdc13, 0x9308e7, 0x1ddb13, 0x9109e7, 0x18db12, 0x9f0ae4, 0x1bc512, 0x9b0be7, 0xe0c614, 0x980de7, 0xecc012, 0x870ce5, 0xefc80e, 0x6d05e3, 0xc9df11, 0xe38e7, 0xd1d612, 0x2420e8, 0xddd51e, 0x2a27e8, 0xd9d61c, 0x2827ed, 0xdad51f, 0x2926ee, 0xdad51f, 0x2821ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2821ec, 0xdad51f, 0x2b27e9, 0xdad51f, 0x3527e8, 0xdad51f };
		System.arraycopy(aFor, 0, key, 64210, aFor.length);
	}

	private static void init216(int[] key) {
		int[] aFor = { 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xdad51f, 0x2926ec, 0xddd218, 0x2f20ea, 0xded11b, 0x2d22e8, 0xdad51d, 0x2f22ef, 0xc4d71b, 0x1839e1, 0xb8e906, 0xea5bdc, 0xf3ce14, 0xe05bc5, 0xf6c11d, 0xeb5acb, 0xcac61e, 0xe958c9, 0xcac71c, 0xec58c8, 0xc4f91e, 0xee58c5, 0xc4f91c, 0xea5ac5, 0xc7f812, 0xe959c5, 0xd9fa1c, 0xeb5ec6, 0xd9fa1c, 0xec5ec5, 0xdbf81e, 0xe35ec7, 0xdaf91d, 0xe15fc7, 0xddf81c, 0xe350c0, 0xddf81c, 0x9d50c7, 0xdcf91b, 0x9850c6, 0xddfb1a, 0x9a50c7, 0xd2fc19, 0x9857c7, 0xd3fb18, 0x9e56c7, 0xd3fb18, 0x8355f9, 0xd3fb18, 0x8155c7, 0xd5e526, 0x8155c7,
				0xd5e526, 0x8357c7, 0xdbe324, 0x8256c0, 0xdbe324, 0x8156c0, 0xdae025, 0x8156c0, 0xdde126, 0x8256c3, 0xdde126, 0xbd59c0, 0xdde126, 0xbf58c0, 0xdce227, 0xb95bc0, 0xdfe128, 0xb85acf, 0xd0e627, 0xb65bcf, 0xdee425, 0xb759ce, 0xda9922, 0xb55bce, 0xcd9638, 0xa529d4, 0xe88e0f, 0xdb01c1, 0xc07d00, 0xc514b4, 0xc57204, 0xc519b0, 0xc57609, 0xc506b5, 0xc57708, 0xc504b6, 0xc5770a, 0xc504b6, 0xc5700b, 0xc405b5, 0xc77275, 0xc30ab4, 0xc77275, 0xcf08b6, 0xc77275, 0xcd08b7, 0xc17473, 0xcf09b7, 0xc07772, 0xd008b4, 0xc18873, 0xd20ab4, 0xc6897c, 0xd30db5, 0xc5887f, 0xd30eb7, 0xc5887f, 0xdd00b5, 0xc4897e, 0xde03b2, 0xc5887f, 0xde04b1, 0xc2897e, 0xde07b3, 0xc3887d, 0xdd18b2, 0xc28962, 0xdc18b2, 0xc38a63, 0xe319b1, 0xc28d62, 0xe018b6, 0xc38e63, 0xe516b5, 0xc28f62, 0xeb15b4, 0xc0896c, 0xee15bb,
				0xc18863, 0xf016ba, 0xc48860, 0xf228ba, 0xca8b61, 0xf02aba, 0xcc8e61, 0x8c2bbc, 0xce8c63, 0x8a2bbd, 0xcf8362, 0x8629bd, 0xcc825d, 0x8728bd, 0xca845f, 0x9a2abd, 0xcb855e, 0x9935bd, 0xca8459, 0x9e36bc, 0xc8825b, 0x9036be, 0xc98358, 0x9234b0, 0xce8c59, 0x9234b0, 0xcf8d5a, 0xaf36b0, 0xce8a5b, 0xad34b0, 0xce8a5b, 0xa94ab7, 0xc18b5a, 0xab48b5, 0xc08c45, 0xac49aa, 0xc08c45, 0xad4ab5, 0xc38d44, 0xb244b5, 0xc08e47, 0xb647b6, 0xce8d46, 0xb241b7, 0xcd8c46, 0x485db5, 0xcf8d46, 0x455db4, 0xc98c46, 0x465db5, 0xd48f40, 0x405ab5, 0xd78c42, 0x4d5bb4, 0xd08342, 0x715bb4, 0xd58142, 0x725bb7, 0xdb8043, 0x765cb5, 0xc68243, 0x745cb4, 0xc7834c, 0x7163b5, 0xc6824c, 0x7e63bb, 0xc2814c, 0x7d65bb, 0xbc814c, 0x7967b5, 0xb1804c, 0x7868b6, 0xb1804c, 0x7868b6, 0xb08f4f, 0x7569b6, 0xb18c4e, 0x7068b6,
				0xce8b40, 0x756ab8, 0xc0b54d, 0x726bba, 0xc2b54c, 0x6c68bb, 0xc0b34e, 0x6968b8, 0xcfb14e, 0x6d66b8, 0xf2be4d, 0x6e69b8, 0xf9be4b, 0x6a6ab9, 0xfab84b, 0x776ab8, 0xfbb84c, 0x7368ba, 0xf7b84e, 0x7776bb, 0xcbb48, 0x7470bb, 0xbd4e, 0x6b71b9, 0xb555, 0x8678b8, 0x2ca44b, 0xe04cbf, 0x4a34a, 0xf155b0, 0x8a046, 0xff52b0, 0xaa244, 0xf852b5, 0xaa047, 0xf953b6, 0xaa047, 0xf854b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf854b4, 0xaa047, 0xfb52b1, 0xaa047, 0xe552b0, 0xaa047 };
		System.arraycopy(aFor, 0, key, 64510, aFor.length);
	}

	private static void init217(int[] key) {
		int[] aFor = { 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xf953b4, 0xaa047, 0xfe54b3, 0xda740, 0xfe54b3, 0xda740, 0xff55b2, 0xda740, 0xfe54b3, 0x8a247, 0xff5ab4, 0xda242, 0xe950b9, 0x408350, 0x1c378a, 0x3ca14c, 0x283482, 0x3cac54, 0x203681, 0x3faa55, 0x1d3783, 0x3ea856, 0x183782, 0x309757, 0x18368d, 0x30a95a, 0x1c088d, 0x31aa55, 0x1f098d, 0x30ad54, 0x1098e, 0x33ac55, 0x70a8f, 0x31af55, 0x9098e, 0x31af55, 0xb0a8c, 0x30ac56, 0xd0b8d, 0x33a351, 0xc0a8c, 0x4da350, 0x90a8d, 0x4da350, 0x8088c, 0x4fa552, 0x6088d, 0x4aa56d, 0x40b8d, 0x4aa56d, 0x1a0b8c, 0x4aa56d, 0x1a0ab2, 0x4bba52, 0x1815b2, 0x4ca553, 0x1a17b0, 0x4da454,
				0x1a17b0, 0x4da454, 0x1a17b6, 0x43a252, 0x1f15b4, 0x42ad53, 0x1c1bb7, 0x41ae54, 0x1e19b1, 0x7ea157, 0x1c18b1, 0x7ea157, 0x1d1bb0, 0x78a759, 0x1f1cb0, 0x78a757, 0x1e1abf, 0x79a456, 0x1019bd, 0x7ba656, 0x1567bd, 0x62ab48, 0x515a3, 0x48b278, 0x7a3cb5, 0x604775, 0x652ec1, 0x654970, 0x6525c5, 0x654a7c, 0x653ac0, 0x654b7d, 0x653ac0, 0x64497c, 0x643dc1, 0x64497c, 0x653cc2, 0x674a7d, 0x643dbd, 0x60457c, 0x653cbe, 0x63467d, 0x683bb9, 0x64457c, 0x6a3ab9, 0x65ba7f, 0x743ab8, 0x65ba7f, 0x763aba, 0x60b972, 0x773fb9, 0x60b972, 0x753cb5, 0x60b972, 0x7831b8, 0x63ba75, 0x7930b9, 0x62bb74, 0x7937ba, 0x65ba75, 0x7934b8, 0x64bb76, 0x7934b8, 0x67a477, 0x7935a5, 0x67a477, 0x7836a6, 0x59a275, 0x7b37a1, 0x59a275, 0x7c35a0, 0x54af78, 0x7d35ae, 0x57ae79, 0x7932ae, 0x56af76, 0x6731af, 0x55ae75,
				0x630eaf, 0x54ac75, 0x6d0caf, 0x56af75, 0x6809a8, 0x28a177, 0x6b09a9, 0x2ea176, 0x6608a8, 0x2fa277, 0x630996, 0x2fa277, 0x6209a8, 0x32a74a, 0x6308a8, 0x31b84b, 0x6209af, 0x37ba49, 0x6009af, 0x3abf46, 0x6108ae, 0x3db047, 0x630aac, 0x3eb346, 0x600aae, 0xb144, 0x610dad, 0x2b346, 0x6573aa, 0xdb247, 0x6470a9, 0xfb459, 0x6371b6, 0xeb746, 0x6070b7, 0xfb845, 0x7e71b4, 0xcbb46, 0x7a72b7, 0x3b946, 0x7d77b5, 0xfdb947, 0x7e76b6, 0xf9a645, 0x7376b7, 0xffa644, 0x7077b7, 0xe1a442, 0x7570b5, 0xe3a543, 0x7972b5, 0xe5a540, 0x447db6, 0xe0a740, 0x477db5, 0xeea641, 0x437ab7, 0xeda740, 0x427ab7, 0xf3a540, 0x4745b9, 0xf1a541, 0x4944b6, 0xf2a540, 0x4c46b6, 0x8ea34e, 0x4b45b7, 0x8da24f, 0x4a4ab6, 0x82a34c, 0x4b4bb6, 0x82a34c, 0x454bb7, 0x80ad4e, 0x4248b7, 0xfdac40, 0x414eb9, 0xf6af4e, 0x424fb7,
				0xf39040, 0x5d4db7, 0xf09141, 0x5a4db6, 0xf29640, 0x564cb6, 0xf79542, 0x684db7, 0xf29a43, 0x674eb0, 0xf59a44, 0x7b49b0, 0xf79b44, 0x7f4bb2, 0xfa8446, 0x7b4bb0, 0x78544, 0x7e49b0, 0xa8544, 0x6748b3, 0xc8b5a, 0x8145b6, 0x32a545, 0xe14eb2, 0x7a146, 0xf057bd, 0x9a345, 0xfe51b3, 0xabe40, 0xf84eb1, 0xcbc42, 0xf848b6, 0xbbb45, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf84eb7, 0xaba44, 0xfb48b2, 0xaba44, 0xe548b3, 0xaba44 };
		System.arraycopy(aFor, 0, key, 64810, aFor.length);
	}

	private static void init218(int[] key) {
		int[] aFor = { 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf949b7, 0xaba44, 0xf848b6, 0xaba44, 0xf949b7, 0xcbc44, 0xfb44b7, 0xfbc40, 0xe44abc, 0x569d56, 0x312a8c, 0x1bb34b, 0x12685, 0x14b156, 0xc2885, 0x11b350, 0x302d88, 0x13b35f, 0x352c89, 0x128c5c, 0x352c8b, 0x1d8d53, 0x372f84, 0x1b8e53, 0x362c84, 0x188f5c, 0x282c85, 0x19885f, 0x2a2d86, 0x1e8b5c, 0x282e86, 0x1f8b5c, 0x252e85, 0x1e885f, 0x232f84, 0x1d8758, 0x222e85, 0x1d8758, 0x5c2e84, 0x188759, 0x5d2c85, 0x1b8058, 0x532c86, 0x1a8159, 0x562f86, 0x1b8259, 0x542fb9, 0x48158, 0x542e87, 0x59e67, 0x563187, 0x28166, 0x573084, 0x18267,
				0x573084, 0x8360, 0x583783, 0x18267, 0x5a3482, 0x68364, 0x583580, 0x68364, 0x593481, 0x398c67, 0x583482, 0x3a8d64, 0x593783, 0x3d8c6b, 0x5a3782, 0x3d8c6b, 0x58308c, 0x3f8e65, 0x57328f, 0x3d8c65, 0x534d8e, 0x24817b, 0x433f90, 0xf994a, 0x3d1787, 0x216d47, 0x2404f3, 0x246342, 0x240ff7, 0x24604e, 0x2410f2, 0x24614f, 0x2410f2, 0x25634e, 0x2517f3, 0x25634e, 0x2416f0, 0x26604f, 0x25178f, 0x26604f, 0x23198d, 0x25634e, 0x2f1f8d, 0x236148, 0x2e1f8c, 0x206049, 0x31e08e, 0x236146, 0x37e080, 0x216348, 0x37e682, 0x216348, 0x34e68f, 0x216348, 0x39eb82, 0x23614e, 0x39eb82, 0x22604f, 0x39ec81, 0x22604f, 0x3eee82, 0x22604f, 0x3fef81, 0x217f4e, 0x3fee9c, 0x217f4e, 0x3eed9f, 0x1f794c, 0x3dec98, 0x1f794c, 0x3aee99, 0x127441, 0x38ef96, 0x127441, 0x3ce896, 0x13754e, 0x22eb97, 0x10744d, 0x25eb94,
				0x134b4e, 0x2ae995, 0x114a4f, 0x2fec92, 0x104b4c, 0x52ec91, 0x11444f, 0x57edaf, 0x1e4770, 0x52ec91, 0x194671, 0x54edae, 0x1b404f, 0x4aefad, 0x185f4e, 0x4beeaa, 0x1e5d4c, 0x46e9ab, 0x1c5f42, 0x47e8aa, 0x1c5f42, 0x41e6a8, 0x1c5f42, 0x42e6aa, 0x235a41, 0x42e6a8, 0x215843, 0x4698af, 0x215843, 0x4999ae, 0x235a41, 0x4f9fae, 0x235a41, 0x4d9db0, 0x235a41, 0x539db3, 0x225442, 0x579eb3, 0x2f5242, 0x549fb1, 0x2b5045, 0xa89fb6, 0x2e4f45, 0xa69eb7, 0x2d4f44, 0xa29eb7, 0x324c43, 0xa19fb5, 0x374a43, 0xae9cb6, 0x324b43, 0x9292b5, 0x304840, 0x9691b6, 0x3f4a40, 0x9391b5, 0x3d4c42, 0x9291b5, 0x234e4c, 0x9091b4, 0x24704c, 0x9c90b5, 0x25724d, 0x9891b5, 0x58744d, 0x9b92b4, 0x5d754c, 0x9a9db5, 0x5d754c, 0x949db6, 0x5d754c, 0x9a9db7, 0x5c7a4d, 0x9e9fb4, 0x217b43, 0x9d99b4, 0x257843, 0x9398bb,
				0x21464c, 0x8e9bbb, 0x23474d, 0x8e9bb5, 0x274043, 0x8199b5, 0x234340, 0xbc9bb5, 0x264c46, 0xb099b2, 0x234d46, 0xb29eb3, 0x3f4f47, 0xb59fb3, 0x305047, 0xb19fb2, 0xce5147, 0xb49db3, 0xc05147, 0xaf9bb1, 0xc05859, 0x5297b2, 0xef7347, 0x339dbf, 0xd86d4b, 0x2e98b1, 0xd96a47, 0x2e98b1, 0xdd6945, 0x2f99b4, 0xdc6a47, 0x289eb3, 0xdb6d40, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x2898b2, 0xda6c41, 0x2b9eb7, 0xda6c41, 0x359eb6, 0xda6c41 };
		System.arraycopy(aFor, 0, key, 65110, aFor.length);
	}

	private static void init219(int[] key) {
		int[] aFor = { 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x299fb2, 0xda6c41, 0x289eb3, 0xda6c41, 0x299fb2, 0xdd6b40, 0x289db1, 0xdd6747, 0x2c9fb9, 0x914255, 0xe4fc8b, 0xdd6241, 0xfefa8f, 0xe66c5e, 0xf0fb8f, 0xea605a, 0xcafe83, 0xe9605a, 0xccfe8f, 0xea615b, 0xcdc18c, 0xe56054, 0xccc182, 0xe66355, 0xcac282, 0xe7605a, 0xc8c483, 0xf96059, 0xcbc483, 0xf86158, 0xcec482, 0xf86158, 0xc0c783, 0xf9605f, 0xc5c784, 0xf9605f, 0xc4c883, 0xfa605f, 0xbbc983, 0xfa605f, 0xbec982, 0xfb635c, 0xb3cf82, 0xfa625d, 0xb1ce82, 0xfd6362, 0xb0cebd, 0xfe605d, 0xaecebc, 0xff615e, 0xaed1be,
				0xfc605f, 0xa9d1bd, 0xfc605f, 0xa9d1bd, 0xfe6259, 0xa7d7bf, 0xfe6259, 0xa4d7bd, 0xfe6259, 0xa2d5bf, 0xff6d58, 0xa1dbbc, 0xfe6c59, 0x9fdbbf, 0xfe6c59, 0x9cd5bf, 0xf86e57, 0x9dd2be, 0xf96956, 0x9cd5b1, 0xfb6b58, 0x93d7b2, 0xf96958, 0x97a8b3, 0xe16347, 0x86ddac, 0xca7b76, 0xfbf6ba, 0xe78c7a, 0xe2e5ce, 0xe2837f, 0xe2e8cb, 0xe28673, 0xe2f6cf, 0xe28772, 0xe2f6cf, 0xe38573, 0xe1f1ce, 0xe38573, 0xe2f0cd, 0xe38573, 0xe2f2cc, 0xe08a0c, 0xe5f3ce, 0xe3890d, 0xe9f5ce, 0xe2880a, 0xeff6ce, 0xe1890b, 0xf009cc, 0xe28804, 0xf009c2, 0xe48a0a, 0xf10ec3, 0xe78b09, 0xf20fc0, 0xe48a0a, 0xf30dc3, 0xea8408, 0xf00ec4, 0xea8408, 0xf00fc5, 0xeb830b, 0xf00fc5, 0xec820a, 0xf10cda, 0xef830b, 0xf112d9, 0xef830b, 0xf011da, 0xd18509, 0xf310dd, 0xd18509, 0xf412dc, 0xdc8804, 0xf613d3, 0xdc8804, 0xf214dd,
				0xdd8907, 0xec17de, 0xde8804, 0xeb17df, 0xddb705, 0xe415de, 0xdeb602, 0xe313de, 0xddb503, 0x9c13dd, 0xdeb400, 0x9b1cdf, 0xddb53f, 0x971edf, 0xddb53f, 0x9119e0, 0xdfb701, 0x9018e3, 0xc1a907, 0x9218e3, 0xc6aa06, 0x9e1ee1, 0xc4a808, 0x9e1eef, 0xc4a808, 0x9810e1, 0xc4a808, 0x9a11e0, 0xfbad0b, 0x9b16e3, 0xf9ab09, 0x9f15e5, 0xf8aa08, 0x906be5, 0xfaa80a, 0x916cfa, 0xfda90b, 0x906ff9, 0xfea808, 0x8e6ffa, 0xffa60b, 0x8b6ffb, 0xfca40b, 0x8668f9, 0xf8a60a, 0x7b69f9, 0xfdb90a, 0x7568f8, 0xfeb90b, 0x7168ff, 0xe1ba0a, 0x7269fc, 0xe7bd09, 0x7e6bfc, 0xe5bd08, 0x7a65fd, 0xd8bf08, 0x7e66fe, 0xd6bc0b, 0x7a67fe, 0xd7bb08, 0x7866ff, 0xc8b807, 0x7a66f0, 0xc98607, 0x7166fe, 0xc88406, 0x7567fe, 0xca8309, 0x866f1, 0xce810b, 0x969f2, 0xce810b, 0x769f1, 0xcd800a, 0x468f0, 0xc28f0a, 0x6af3, 0xc08f0b,
				0x7d6cf3, 0xc48e0b, 0x726ef3, 0xc1b10b, 0x716ff3, 0xdcb305, 0x716ffd, 0xdbb30a, 0x7c69ff, 0xdfb00a, 0x7e68fc, 0xe2b008, 0x7b66fd, 0xefb308, 0x7d67fe, 0xf3b50b, 0x7965ff, 0xffb50a, 0x7b7afc, 0x4b409, 0x7e78fd, 0x8b309, 0x7979fd, 0xaba15, 0x9068fe, 0x578009, 0xb175f5, 0x5e8603, 0xab73f4, 0x588200, 0xad71f6, 0x5e8002, 0xac70f3, 0x5f8300, 0xab77f6, 0x598403, 0xab76f1, 0x588502, 0xab76f1, 0x588502, 0xab76f1, 0x588502, 0xab76f1, 0x588502, 0xab76f1, 0x588502, 0xab76f1, 0x588502, 0xab76f1, 0x588502, 0xab76f1, 0x588502, 0xab76f1, 0x588502, 0xab76f1, 0x588502, 0xab76f1, 0x588502, 0xab76f1, 0x588502, 0xaa71f1, 0x588502, 0xa977f4, 0x588502, 0xb777f5, 0x588502 };
		System.arraycopy(aFor, 0, key, 65410, aFor.length);
	}

	private static void init220(int[] key) {
		int[] aFor = { 0xaa77f0, 0x588502, 0xaa77f0, 0x588502, 0xaa77f0, 0x588502, 0xaa77f0, 0x588502, 0xaa77f0, 0x588502, 0xaa77f0, 0x588502, 0xaa77f0, 0x588502, 0xaa77f0, 0x588502, 0xaa77f0, 0x588502, 0xaa77f0, 0x588502, 0xaa77f0, 0x588502, 0xaa77f0, 0x588502, 0xab76f1, 0x588502, 0xab76f1, 0x588502, 0xaa77f0, 0x588502, 0xaa77f0, 0x598401, 0xad71f1, 0x5a8807, 0xae74f9, 0x689617, 0xef51f4, 0xa4f624, 0x8a6bf6, 0x90fc39, 0x8268f7, 0x94f323, 0xb46dfa, 0x96f223, 0xb26ff7, 0x97f124, 0xb250f3, 0x94f22b, 0xbc52fe, 0x95f328, 0xbe53fe, 0x92f229, 0xbc51f1, 0x93f528, 0xa356f1, 0x91f22b, 0xa456f2, 0x91f22b, 0xa657f1, 0x9ef12a, 0xa557f0, 0x99f02b, 0xa557f0, 0x98ff2c, 0xa756f7, 0xe6ff2b, 0xa557f7, 0xe0fd29, 0xa756f4, 0xeffa2a, 0xa551f4, 0xeefd2b, 0xa251f5, 0xeffc2a, 0xa051ca, 0xf0ff2b, 0xa14fcb,
				0xf0ff2b, 0xa44fca, 0xf1fe28, 0xa44fca, 0xf2fd29, 0xaa49cc, 0xf2fd29, 0xab49ca, 0xf1fc2e, 0xaa4acb, 0xf7f22c, 0xa944c8, 0xf6f32d, 0x9744cb, 0xf6f32d, 0x944acb, 0xf7f02c, 0x934bc4, 0xf7f02c, 0x934bca, 0xf5f622, 0x924dcb, 0xfbf022, 0x9630c8, 0xe0fb3c, 0x8646d6, 0xcae00c, 0xfb6dc0, 0xe71700, 0xe37fb3, 0xe31902, 0xe372b6, 0xe31f0e, 0xe370b5, 0xe30108, 0xe373b3, 0xe30108, 0xe272b4, 0xe00609, 0xe072b4, 0xe1070a, 0xe070b5, 0xe20875, 0xe670b4, 0xe30976, 0xea72b4, 0xe00e77, 0xec73b4, 0xe10d70, 0xf172b6, 0xe3f37e, 0xf071b9, 0xe3f37e, 0xf770b6, 0xe2f47f, 0xf471b5, 0xe2f47f, 0xf573b6, 0xedfb7c, 0xf472b7, 0xeef87b, 0xf473b6, 0xeef87b, 0xf574b5, 0xe9f97a, 0xf477aa, 0xeaf87b, 0xf768aa, 0xe9f978, 0xf66ba9, 0xd6f87b, 0xf76ca8, 0xd5f97c, 0xf06ea9, 0xd7f77e, 0xfe6da8, 0xd4f67f, 0xf96da7,
				0xd7f17e, 0xe76ca6, 0xd6f27f, 0xe36da4, 0xd6f27d, 0xef50a1, 0xd5f37d, 0xe957a6, 0xd4f27a, 0x9457a7, 0xd5f179, 0x9156a7, 0xd7ff47, 0x9d54a7, 0xd7ff47, 0x9b54a6, 0xd6f946, 0x9956a4, 0xc9e647, 0x9a57a3, 0xcee546, 0x9956a0, 0xc3e049, 0x9956ae, 0xc3e049, 0x9f58a0, 0xc3e049, 0x9d59a1, 0xfde24b, 0x9d59a3, 0xffe449, 0x995aa5, 0xffe449, 0x9824a5, 0xf1e64b, 0x9b25a4, 0xf0e154, 0x9c24a5, 0xf1e257, 0x9e24a6, 0xeee354, 0x9d2ba5, 0xe8e154, 0x922da6, 0xefe054, 0x6e2fa7, 0xeaff53, 0x622ea7, 0xe9ff54, 0x642ea0, 0xf4fc55, 0x662ea0, 0xf2fa57, 0x6a2ea1, 0xf0f957, 0x6f21a1, 0xcef957, 0x6d20a2, 0xcbf956, 0x6222a0, 0xcef955, 0x6124a2, 0xd1fa5a, 0x6027a2, 0xd3f85a, 0x6518a2, 0xdcfa5a, 0x6119a2, 0xdefd55, 0x1c18ac, 0xd9fe55, 0x1f19ad, 0xd8f154, 0x1119ae, 0xdbf055, 0x1218af, 0xd5fe57, 0x1018ae,
				0xd1fc56, 0x6f1eae, 0xd4ff58, 0x6c1fa1, 0xdfff56, 0x6e22ae, 0xc1ff59, 0x6f22a0, 0xc5fe57, 0x6d24a2, 0xc9fe56, 0x6827a2, 0xf4ff56, 0x6d29a5, 0xf8fd56, 0x6c28a3, 0xe2fb57, 0x692aa4, 0xeffa57, 0x6b35a1, 0xebe554, 0x9028a1, 0xe7e255, 0x922ba0, 0xe8ef49, 0x493ca3, 0x84d755, 0x692fa9, 0x9adb5f, 0x6e2fa9, 0x9cdf5a, 0x682daf, 0x9bdc5b, 0x692ea9, 0x9add5a, 0x682eaf, 0x9add5a, 0x682fae, 0x9bdc5d, 0x692eaf, 0x9bdc5d, 0x692eaf, 0x9bdc5d, 0x692eaf, 0x9bdc5d, 0x692eaf, 0x9bdc5d, 0x692eaf, 0x9bdc5d, 0x692eaf, 0x9bdc5d, 0x692eaf, 0x9bdc5d, 0x692eaf, 0x9bdc5d, 0x682fae, 0x9bdc5d, 0x682fae, 0x9bdc5d, 0x682fae, 0x9add5c, 0x6b2eae, 0x9add5c, 0x6b2faa, 0x9add5c, 0x752fab, 0x9add5c };
		System.arraycopy(aFor, 0, key, 65710, aFor.length);
	}

	private static void init221(int[] key) {
		int[] aFor = { 0x692ea9, 0x9add5c, 0x692ea9, 0x9add5c, 0x692ea9, 0x9add5c, 0x692ea9, 0x9add5c, 0x692ea9, 0x9add5c, 0x692ea9, 0x9add5c, 0x692ea9, 0x9add5c, 0x692ea9, 0x9add5c, 0x692ea9, 0x9add5c, 0x692ea9, 0x9add5c, 0x692ea9, 0x9add5c, 0x692ea9, 0x9add5c, 0x692ea9, 0x9add5c, 0x682fa8, 0x9add5c, 0x682fa8, 0x9bdc5d, 0x692ea9, 0x9bdc5b, 0x6e28a9, 0x96d25e, 0x632ca3, 0xadca53, 0x3a05bb, 0x67b46d, 0x5d17be, 0x408173, 0x4d13b9, 0x5e896b, 0x4314b1, 0x628968, 0x4115bd, 0x658869, 0x4128bd, 0x648968, 0x4c29bd, 0x648968, 0x4d28be, 0x678a69, 0x4a28b1, 0x648b68, 0x5428b1, 0x648b68, 0x562fb2, 0x638b69, 0x542eb3, 0x6c8868, 0x552fb4, 0x6c8868, 0x502fb5, 0x6c886e, 0x5220b4, 0x6d896f, 0x2c20b3, 0x6e8a6e, 0x2b21b2, 0x6c8a6f, 0x2621b1, 0x6c8a6f, 0x2026b1, 0x6d8b6e, 0x22268e, 0x72886f, 0x2227b0,
				0x739750, 0x2227b0, 0x709651, 0x2527b3, 0x739550, 0x2527b3, 0x729457, 0x2a20b4, 0x739550, 0x2823b5, 0x749453, 0x2921b0, 0x769655, 0x2921b0, 0x769655, 0x172eb0, 0x749457, 0x102fbf, 0x739558, 0x172eb0, 0x729259, 0x1529b3, 0x7c9458, 0x1154b4, 0x649d41, 0x220ab, 0x4f8472, 0x7e09be, 0x657001, 0x6118b2, 0x617d02, 0x6117b6, 0x617a0e, 0x6115b5, 0x606408, 0x6016b3, 0x606408, 0x6117b4, 0x606408, 0x6010b5, 0x61650b, 0x6012b4, 0x61650b, 0x621cca, 0x676508, 0x6f1fc9, 0x66640b, 0x6d18c9, 0x60660d, 0x7019cb, 0x629803, 0x711ac4, 0x629803, 0x711ac4, 0x65990c, 0x701dc5, 0x66980f, 0x701fc4, 0x66980f, 0x7110c3, 0x69990e, 0x7013c2, 0x6a980f, 0x7114c1, 0x6a980f, 0x7615c0, 0x6b9b10, 0x7714c0, 0x6a8411, 0x7516c2, 0x6a8411, 0x4a17c3, 0x6b8310, 0x4f15c4, 0x698d12, 0x4114c7, 0x688e11, 0x4414c6,
				0x6a881f, 0x5a15c7, 0x6b8b1e, 0x582bc5, 0x6c8a1f, 0x5b2bc4, 0x63881f, 0x582cc2, 0x63881f, 0x5e2dc3, 0x1f8b1d, 0x5b2cc3, 0x1e841c, 0x572efd, 0x1e8422, 0x542fc2, 0x1f8323, 0x512dc2, 0x19d21, 0x532fc4, 0x9e21, 0x562cc4, 0xf992c, 0x552fc5, 0xf992c, 0x5321c5, 0xf992c, 0x5221cb, 0xd9b22, 0x5221c5, 0x309c2f, 0x5521c4, 0x339f28, 0x545fc4, 0x3c9e29, 0x565dc6, 0x3c9e29, 0x505bd8, 0x3c9e29, 0x5158d9, 0x3e9e28, 0x4d56d9, 0x389c28, 0x4157d9, 0x3c9a2b, 0x4357da, 0xc09829, 0x4748da, 0xcd982e, 0x4049da, 0xd09b2f, 0x4249d9, 0xd69d2e, 0x4e49d8, 0xd79f2d, 0x4948d8, 0xe8902e, 0x4b49db, 0xed902f, 0x454ada, 0xef962d, 0x414bd4, 0xef9623, 0x5f48db, 0xed962c, 0x5b76d4, 0xe2942c, 0x5e76db, 0xe0952d, 0x2171d5, 0xe3942d, 0x2573d5, 0xe29b2c, 0x2b73d6, 0xe19a2d, 0x2872d7, 0xe0952e, 0x2573d7, 0xe7962e,
				0x5875d7, 0xe49720, 0x5c77d9, 0xe89621, 0x5a48d8, 0xea9620, 0x444bd7, 0xee9722, 0x464dd7, 0xe29723, 0x434ed7, 0xdf9623, 0x4640d0, 0xd39423, 0x4741d6, 0xd69223, 0x5a42d0, 0xd29324, 0x5743d3, 0xd79326, 0xac5ed3, 0xd49421, 0xa35ed5, 0x22993e, 0x8b4fd5, 0x58a420, 0xa85cda, 0x5ca828, 0xa95bde, 0x5bab2d, 0xa858de, 0x5aaa2c, 0xa858de, 0x5bab2d, 0xa958d8, 0x58aa2c, 0xaa58d8, 0x5eaa2d, 0xad59d8, 0x5eaa2d, 0xad59d8, 0x5eaa2d, 0xad59d8, 0x5eaa2d, 0xad59d8, 0x5eaa2d, 0xad59d8, 0x5eaa2d, 0xad59d8, 0x5eaa2d, 0xad59d8, 0x5eaa2d, 0xad59d8, 0x5eaa2d, 0xad59de, 0x5eaa2d, 0xac58df, 0x5eaa2d, 0xac58df, 0x5eaa2d, 0xaf59df, 0x5eaa2d, 0xaf58db, 0x5eaa2d, 0xb158da, 0x5eaa2d };
		System.arraycopy(aFor, 0, key, 66010, aFor.length);
	}

	private static void init222(int[] key) {
		int[] aFor = { 0xac58d9, 0x5eaa2d, 0xac58d9, 0x5eaa2d, 0xac58d9, 0x5eaa2d, 0xac58d9, 0x5eaa2d, 0xac58d9, 0x5eaa2d, 0xac58d9, 0x5eaa2d, 0xac58d9, 0x5eaa2d, 0xac58d9, 0x5eaa2d, 0xac58d9, 0x5eaa2d, 0xac58d9, 0x5eaa2d, 0xac58d9, 0x5eaa2d, 0xac58d9, 0x5eaa2d, 0xac58d9, 0x5eaa2d, 0xac58d9, 0x5eaa2d, 0xad59d8, 0x5eaa2d, 0xac58d9, 0x5ca829, 0xa85bd8, 0x5fa22e, 0xa95ed4, 0x7bb73b, 0xd862d7, 0xb5db0a, 0xf77cdf, 0xebe816, 0xe07adf, 0xefe00c, 0xf27dd0, 0xd2e10a, 0xf07ade, 0xd4e70a, 0xf047de, 0xd4e70a, 0xf278de, 0xd5e70a, 0xfd47df, 0xd4e609, 0xf847de, 0xd5e506, 0xfa47de, 0xcae407, 0xf840dd, 0xcae407, 0xff40de, 0xc8e504, 0xf043df, 0xc9e403, 0xf543de, 0xc9e405, 0xf74cd9, 0xc8e502, 0x884dd9, 0xcae704, 0x8f4cd8, 0xcae704, 0x8d4cd9, 0xc4e604, 0x884ada, 0xc4e604, 0x8a4adb, 0xc5e73b, 0x8a49e5,
				0xdae63a, 0x8b56da, 0xd9e73b, 0x8f55d8, 0xdae43a, 0x8f55d8, 0xd9e73b, 0x8e54d9, 0xd7e13d, 0x8c57d8, 0xd7e13d, 0x8a54de, 0xd4e23a, 0x8b55df, 0xd4e23a, 0xb55adf, 0xd7e339, 0xb459de, 0xd7e339, 0xb459de, 0xd1e537, 0xb75fde, 0xdfe334, 0xb35cdf, 0xc6952a, 0xa12ec3, 0xec8a1a, 0xdc06d1, 0xc77f6e, 0xc317dd, 0xc3726d, 0xc318d9, 0xc3766f, 0xc318d4, 0xc26969, 0xc218d3, 0xc26a68, 0xc319d4, 0xc26a68, 0xc21ed5, 0xc26a68, 0xc21cd6, 0xc36b69, 0xc113a9, 0xc26a68, 0xc411a9, 0xcd6a6b, 0xc616a9, 0xca6b6a, 0xda14ac, 0xc89564, 0xda14a2, 0xc99665, 0xda14a2, 0xce976a, 0xdb13a3, 0xcd9669, 0xd810a3, 0xce9768, 0xd91fa4, 0xce9768, 0xd71da4, 0xce9768, 0xd41ca5, 0xcf906b, 0xd31da4, 0xce9374, 0xd21ca4, 0xcf8c75, 0xd11da7, 0xcf8c75, 0xd01ea4, 0xf18a77, 0xd51ca3, 0xf08b76, 0xd713a2, 0xff8a77, 0xd310a0,
				0xfe8b78, 0xce16a0, 0xff8879, 0xcc28a2, 0xf88978, 0xcf28a3, 0xf78b78, 0xcd28a4, 0xf68c79, 0xcb29a5, 0xf48e7b, 0xb7269b, 0xf28e44, 0xba27a4, 0xf38d45, 0xb926a5, 0xf28a44, 0xbc24a5, 0xec9446, 0xbd25a2, 0xef9747, 0xb925a2, 0xe0904a, 0xba26a3, 0xe0904a, 0xbc28a3, 0xe0904a, 0xbd28ad, 0xe29244, 0xbd28a3, 0xdc944a, 0xb929a1, 0xdf974d, 0xb928a6, 0xd1e94b, 0xbb2aa4, 0xd1e94b, 0xba2dbb, 0xd6e84a, 0xbb2eba, 0xd5e94b, 0xa521bb, 0xd1e84b, 0xa923b8, 0xd3ef49, 0xae22bb, 0x2cec49, 0xa923bb, 0x21f24f, 0xad22bc, 0x23f049, 0xb122bf, 0x25f648, 0xbd22be, 0x24f44b, 0xba23be, 0x1af44b, 0xb823bd, 0x1efa4b, 0xb620be, 0x1ffb48, 0xb227b0, 0x1cfa49, 0xac24b1, 0x1dfb46, 0xa824be, 0x1fc549, 0xa327b0, 0x1ec446, 0xde27b1, 0x1cc249, 0xd924be, 0x1fc346, 0xd62bbc, 0x1cc247, 0xd62bbc, 0x1ecc45, 0xd82bbf,
				0x1ace47, 0xda2dbe, 0x66cf49, 0xdf2eb3, 0x69ce4b, 0xda11b1, 0x6acf49, 0xc412be, 0x6fcf48, 0xc614be, 0x62ce4a, 0xc014bf, 0x5fcc4c, 0xc519bf, 0x52cd4e, 0xc719bb, 0x56ca4e, 0xdb1bba, 0x52c94f, 0xd418b7, 0x55d742, 0x291cb6, 0x5ed547, 0x271fb2, 0xaed45c, 0x1f0eb0, 0xc7e243, 0x351abb, 0xc1e954, 0x351ba7, 0xc7e953, 0x351ba1, 0xc7e953, 0x351ba1, 0xc7e953, 0x361ba5, 0xc4ea53, 0x371ba7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a1, 0xc4ea53, 0x3618a1, 0xc4ea53, 0x3618a1, 0xc4ea53, 0x3519a1, 0xc4ea53, 0x3518a5, 0xc4ea53, 0x2b18a4, 0xc4ea53 };
		System.arraycopy(aFor, 0, key, 66310, aFor.length);
	}

	private static void init223(int[] key) {
		int[] aFor = { 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3618a7, 0xc4ea53, 0x3719a6, 0xc4ea53, 0x3618a7, 0xd9f748, 0x2d04b9, 0xd8f34d, 0x2e0fb5, 0xf6e247, 0x463fb5, 0x3bfc50, 0x775789, 0x68c340, 0x625186, 0x6cca55, 0x77578e, 0x68cc57, 0x4a5783, 0x6eca57, 0x4d5584, 0x6eca57, 0x485583, 0x6eca57, 0x466a82, 0x6fcb54, 0x436a83, 0x6ec85b, 0x416a83, 0x6ec85b, 0x5c6c81, 0x6ec85b, 0x5b6c82, 0x6ec85b, 0x596d81, 0x61cb5a, 0x5a6d86, 0x66ca5d, 0x586281, 0x66ca5b, 0x266280, 0x67cb5c, 0x236187, 0x66ca5b, 0x216186, 0x68cb5b, 0x236086, 0x6fcc58, 0x216087, 0x6fcc58, 0x2061b8,
				0x6fcc58, 0x3e7cb8, 0x6ccd59, 0x397cbb, 0x6ccd59, 0x387db8, 0x6dcc5a, 0x3a7fb8, 0x62cb5b, 0x397dbe, 0x62cb5b, 0x3f7eb8, 0x61c85c, 0x3e7fb9, 0x61c85c, 0x7fba, 0x62c75d, 0x17dba, 0x63c45c, 0x7ebb, 0x64c553, 0x27fba, 0x6ac350, 0x67cbb, 0x73b54e, 0x140ea7, 0x58ad7f, 0x6821b4, 0x73580b, 0x7730b8, 0x775508, 0x773fbc, 0x77510a, 0x773fb1, 0x764e0c, 0x763eb6, 0x774f0d, 0x773db6, 0x764e0a, 0x763db6, 0x76490b, 0x763fb5, 0x77480a, 0x7530ca, 0x76490b, 0x7333cb, 0x7a4809, 0x7134cb, 0x7d4908, 0x6d36ce, 0x7cb609, 0x6e37c1, 0x7cb609, 0x6f34c0, 0x7bb70a, 0x6f32c3, 0x7bb70a, 0x6e31c0, 0x78b60b, 0x6e31c0, 0x79b90c, 0x6130c1, 0x78ba0f, 0x6231c2, 0x79bd0c, 0x6233c3, 0x7ebc13, 0x6233c3, 0x7fa312, 0x6031c1, 0x7ea013, 0x6132c2, 0x40a611, 0x6430c5, 0x41a710, 0x663fc4, 0x4ea611, 0x623cc6, 0x4fa71e,
				0x603bc9, 0x51a510, 0x633aca, 0x509a13, 0x663ac9, 0x519813, 0x6b3bcf, 0x509f12, 0x6d3bcc, 0x529c12, 0x1134f2, 0x559d13, 0x1035cc, 0x579f2d, 0x1d34cd, 0x579f2d, 0x1b32cf, 0x54822a, 0x533ce, 0x54822a, 0x230cf, 0x5b8527, 0x230cf, 0x588626, 0x331ce, 0x5f8927, 0x231c0, 0x5d8b29, 0x231ce, 0x608c24, 0x531cf, 0x638f23, 0x530c8, 0x6df125, 0x732ca, 0x6df125, 0x435d5, 0x6ef024, 0x336d4, 0x6df125, 0x1d39d5, 0x69f025, 0x113bd6, 0x6bf727, 0x163ad5, 0x94f427, 0x113bd5, 0x99ea21, 0x153ad2, 0x98eb26, 0xa39d0, 0x99ea26, 0x13ed0, 0x98e825, 0x63fd0, 0xa6e825, 0x43fd3, 0xa1e726, 0x93dd3, 0xa0e625, 0xc3dd2, 0xa2e02b, 0x123ed3, 0xa3e124, 0x163edc, 0xa0de2a, 0x1b3fd2, 0xa6dc24, 0x663fd3, 0xa7db24, 0x623ddd, 0xa4da27, 0x6d32dd, 0xa7db26, 0x6d32dd, 0xa5d524, 0x6332de, 0xa1d726, 0x6134df, 0xdcd727,
				0x6536dd, 0xd2d724, 0x6108de, 0xd0d727, 0x7f09df, 0xd4d429, 0x7d0fdf, 0xd8d42a, 0x7a0edf, 0xe5d62c, 0x7e00d8, 0xe6d52a, 0x7301df, 0xe2d22a, 0x6f03de, 0xe6d12b, 0x6e03d2, 0xecd324, 0x9018d0, 0xe6d020, 0x9a1bd4, 0xacb27, 0xb02ad5, 0x6cc520, 0x983dd7, 0x6fce27, 0x9b3cd4, 0x6acd25, 0x983fd7, 0x69cc25, 0x983fd7, 0x69cc25, 0x983ed3, 0x6acf25, 0x993ed1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd7, 0x6acf25, 0x983dd7, 0x6acf25, 0x983dd7, 0x6acf25, 0x9b3cd7, 0x6acf25, 0x9b3dd3, 0x6acf25, 0x853dd2, 0x6acf25 };
		System.arraycopy(aFor, 0, key, 66610, aFor.length);
	}

	private static void init224(int[] key) {
		int[] aFor = { 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x983dd1, 0x6acf25, 0x993cd0, 0x6acf25, 0x983dd1, 0x77d23e, 0x8321cf, 0x74d63a, 0x8c28c0, 0x52d834, 0xed3cc2, 0x63f72a, 0x3a45f6, 0x1cdd3c, 0x154cf9, 0x18d62b, 0x24af3, 0x1dd12a, 0x3d4afc, 0x1fd428, 0x3c4bfd, 0x1ed529, 0x384afd, 0x1ed529, 0x3675fc, 0x1fd42a, 0x3375fd, 0x1ed725, 0x3175fd, 0x1ed725, 0x2c73ff, 0x1ed725, 0x2a74fd, 0x1fd024, 0x2875fe, 0x10d325, 0x2b75f9, 0x17d224, 0x297af8, 0x17d222, 0x577af9, 0x16d325, 0x5479f8, 0x11d224, 0x577ef9, 0x10d524, 0x5a7efa, 0x16d224, 0x5a7efa, 0x14d225, 0x5a7efa,
				0x15d31a, 0x4463fa, 0x16d21b, 0x4363f9, 0x16d21b, 0x4262fa, 0x17d318, 0x4161f9, 0x19d51a, 0x4360fe, 0x18d61b, 0x4563fe, 0x1bd51a, 0x4563fe, 0x1bd51a, 0x7b63ff, 0x19db18, 0x7a61ff, 0x18d819, 0x7a61ff, 0x1eda17, 0x7b63f0, 0x13df1a, 0x7860f1, 0xca805, 0x6913ef, 0x25b037, 0x153cfc, 0xe4543, 0x82df0, 0x84840, 0x822f4, 0x94f4c, 0x921f5, 0x85048, 0x820f2, 0x95149, 0x923f2, 0x8504e, 0x823f2, 0x8574f, 0x821f1, 0x8574f, 0x920f0, 0xb5830, 0xe22f0, 0x95e32, 0x322f1, 0xf5f32, 0x21f7, 0x11a130, 0x320f8, 0x11a130, 0x223f9, 0x16a033, 0x524fb, 0x11a132, 0x427f8, 0x12a033, 0x427f8, 0x13af34, 0xb26f9, 0x12ac37, 0x827fa, 0x13ab34, 0x825fb, 0x14aa2b, 0x825fb, 0x16b429, 0x926fa, 0x17b728, 0x825f9, 0x29b12a, 0xd27fe, 0x28b02b, 0x28fc, 0x28b129, 0x42bfe, 0x29b026, 0x62bff, 0x36b627, 0x728fe,
				0x35b724, 0x317fe, 0x34b524, 0xe16f8, 0x35b225, 0x816fb, 0x37b01b, 0x7418fb, 0x30b11a, 0x7519c5, 0x32b324, 0x7818c4, 0x32b324, 0x7e1ec6, 0x31ae23, 0x601fc7, 0x31ae23, 0x661dc5, 0x3fa82d, 0x661dc5, 0x3fa82d, 0x641fc5, 0x3fa82d, 0x6210ca, 0x2ab20, 0x5d11c9, 0x3fac23, 0x5a11c8, 0x3caf24, 0x5a10cf, 0x32d122, 0x5812cd, 0x32d122, 0x5b15d2, 0x31d023, 0x5c16d3, 0x32d122, 0x4219d2, 0x30d320, 0x4818d3, 0x32d421, 0x4c1ad2, 0xccd420, 0x4a04d5, 0xc2d521, 0x4904d4, 0xc4d520, 0x5407d5, 0xc6d523, 0x5000db, 0xc9d52c, 0x5502db, 0xcada2d, 0x6b02db, 0xc8db2e, 0x6f01d9, 0xc6da2f, 0x6a01d8, 0xc7dd20, 0x7703d8, 0xc6dc2f, 0x7402d8, 0xc1dd2d, 0x783fd5, 0xc5dc2d, 0x7b3fdb, 0xbadb2c, 0x7f3dd5, 0xb9da2f, 0x7032d3, 0xbadb28, 0x7032d3, 0xb9da29, 0x7f3dd3, 0xbadb2a, 0x7b3fd0, 0xc6dc28, 0x7c3fd1,
				0xcbde28, 0x7e01d0, 0xccdf29, 0x7c01d1, 0xd2dc26, 0x7b00d1, 0xdedb24, 0x7a01d2, 0xdbd826, 0x460ed5, 0xdcdb26, 0x4808d2, 0xd9db27, 0x540ad3, 0xd8d825, 0x500ad2, 0xd4c524, 0xae09d0, 0xdbce3f, 0xa404ce, 0x3cd73f, 0xff33cc, 0x1dc23a, 0xe53ac2, 0x12c932, 0xe13ac1, 0x10cb30, 0xe239c2, 0x10cb30, 0xe239c0, 0x10cb32, 0xe139c6, 0x10cb32, 0xe33ac4, 0x10cb30, 0xe33ac4, 0x11c830, 0xe33ac4, 0x11c830, 0xe33ac4, 0x11c830, 0xe33ac4, 0x11c830, 0xe33ac4, 0x11c830, 0xe33ac4, 0x11c830, 0xe33ac4, 0x11c830, 0xe33ac4, 0x11c830, 0xe33ac2, 0x11c830, 0xe33ac2, 0x11c830, 0xe33ac2, 0x11c830, 0xe03bc2, 0x11c936, 0xe03bc0, 0x11c936, 0xfe3bc1, 0x11c936 };
		System.arraycopy(aFor, 0, key, 66910, aFor.length);
	}

	private static void init225(int[] key) {
		int[] aFor = { 0xe238c4, 0x11c936, 0xe238c4, 0x11c936, 0xe238c4, 0x11c936, 0xe238c4, 0x11c936, 0xe238c4, 0x11c936, 0xe238c4, 0x11c936, 0xe238c4, 0x11c936, 0xe238c4, 0x11c936, 0xe33bc4, 0x11c936, 0xe33bc4, 0x11c936, 0xe33bc4, 0x11c936, 0xe33bc4, 0x11c936, 0xe33bc4, 0x11c936, 0xe33bc4, 0x11c936, 0xe33bc4, 0x12ca35, 0xe33bc4, 0x12ca35, 0xe03bd8, 0x16cc2a, 0xe034dd, 0x9c025, 0xda2add, 0x72f232, 0x144aef, 0x3bd423, 0x3644e7, 0x39de36, 0x2e42e2, 0x35de37, 0x2b42e1, 0xbdf36, 0x2942ee, 0xfdd36, 0x2c42e3, 0x8e235, 0x2f42e2, 0x9dd34, 0x217de1, 0xbdf36, 0x267dee, 0xbdf36, 0x257ee1, 0x15dd38, 0x2678e3, 0x15dd38, 0x2079e1, 0x16dc3b, 0x2e7ae0, 0x14d23d, 0x2f74e7, 0x12dc3b, 0x2d75e6, 0x6ddf3a, 0x2d75e6, 0x6ede38, 0x2875e7, 0x6fde3a, 0x2772e4, 0x6dd93a, 0x2473e7, 0x6fd839, 0x2275e6, 0x6dda07,
				0x3d6ae5, 0x6cc507, 0x3f6ae7, 0x6bda06, 0x3e6be4, 0x68d907, 0x3e6be4, 0x68d907, 0x3f6ae3, 0x67de00, 0x3c68e5, 0x67de00, 0x3968e4, 0x67de00, 0x769e4, 0x66d101, 0x468e7, 0x67d200, 0x46be8, 0x60d000, 0x36ae5, 0x66d602, 0x169e5, 0x71ae17, 0x1514fe, 0x59b225, 0x6a3fee, 0x774551, 0x7022e0, 0x704650, 0x712ee5, 0x714252, 0x712fea, 0x715f50, 0x712fea, 0x705e51, 0x712ded, 0x735950, 0x732def, 0x72582f, 0x722eef, 0x72582f, 0x732f90, 0x715750, 0x742e92, 0x735250, 0x7a2992, 0x705551, 0x7d2894, 0x735751, 0x62d796, 0x705650, 0x64d598, 0x705650, 0x64d598, 0x705650, 0x65d299, 0x735753, 0x64d198, 0x7c5654, 0x66dc98, 0x7c5654, 0x65dc98, 0x7c5654, 0x67da9a, 0x7a544a, 0x67db84, 0x794b4b, 0x66da9b, 0x46484a, 0x66da9b, 0x444e48, 0x66db9c, 0x454c48, 0x63d49e, 0x454c48, 0x6cd590, 0x464e47,
				0x6bd59f, 0x444845, 0x75d69c, 0x474946, 0x71e99c, 0x464847, 0x7ceb9b, 0x474f46, 0x7ae999, 0x454f79, 0x7e8a6, 0x444046, 0xe798, 0x464e78, 0xfe4a7, 0x454f47, 0x9e4a6, 0x444844, 0xbe6a0, 0x5a5744, 0xfe6a0, 0x595445, 0x1e0a2, 0x58554a, 0x2e3ad, 0x595445, 0x4edaf, 0x5a5746, 0x3aecac, 0x5b5047, 0x38eeac, 0x5c5140, 0x3aeeab, 0x5d2e47, 0x34eca9, 0x5e2f46, 0x35eba8, 0x592e47, 0x35eba8, 0x582d58, 0x37eab7, 0x472247, 0x31ebb6, 0x482047, 0x35ecb4, 0x4a2147, 0xc9eeb4, 0x4f3e47, 0xc5eeb3, 0x483f45, 0xc6edb0, 0x573e46, 0xc3edb0, 0x5b3946, 0xc0efb0, 0x5e3845, 0xfeefb0, 0x5a3546, 0xfdefb1, 0x553449, 0xffe8be, 0x543546, 0xfbebbe, 0x4a3449, 0xf8eabe, 0x4d354b, 0xfad4bc, 0x43364a, 0xfdd4b2, 0x3d314a, 0xfed7b0, 0x3a304a, 0xfdd8b1, 0x3a304a, 0xf0d9b7, 0x3b3349, 0xf3d4b2, 0x36324b, 0xf7d6b1,
				0x493449, 0xf2d5b1, 0x453448, 0xf0ebbf, 0x423548, 0xf0ebb1, 0x5e3648, 0xf7eab1, 0x523146, 0xf6ebb2, 0x543340, 0xf4e5b0, 0x693343, 0xfce7b6, 0x6e3540, 0xe1e4b4, 0x6d3447, 0xe6e5b2, 0x633447, 0x19f9b2, 0x6f315c, 0xe9fdb2, 0x4c2443, 0x83ceb6, 0x6b3c42, 0x92cbba, 0x653848, 0x94c9bb, 0x7a264a, 0x89d7b8, 0x7c2648, 0x89d7a6, 0x7a2548, 0x8bd6ba, 0x64254e, 0x96d4b8, 0x65254e, 0x96d4ba, 0x652548, 0x96d4ba, 0x652548, 0x96d4ba, 0x652548, 0x96d4ba, 0x652548, 0x96d4ba, 0x652548, 0x96d4ba, 0x652548, 0x96d4ba, 0x652548, 0x96d4ba, 0x652548, 0x97d7bc, 0x652548, 0x97d7ba, 0x652548, 0x97d7b8, 0x652548, 0x94d4b9, 0x65254a, 0x95d4bf, 0x652549, 0x8ad7b0, 0x652549 };
		System.arraycopy(aFor, 0, key, 67210, aFor.length);
	}

	private static void init226(int[] key) {
		int[] aFor = { 0x96d4bb, 0x652549, 0x96d4bb, 0x652549, 0x96d4bb, 0x652549, 0x96d4bb, 0x652549, 0x96d4bb, 0x652549, 0x96d4bb, 0x652549, 0x96d4bb, 0x652549, 0x96d4bb, 0x652549, 0x97d7bb, 0x652549, 0x97d7bb, 0x652549, 0x97d7bb, 0x652549, 0x97d7bb, 0x652549, 0x97d7bb, 0x652549, 0x97d7bb, 0x652549, 0x97d7bb, 0x66264a, 0x97d7bb, 0x662654, 0x92d5bb, 0x652349, 0x90d6bc, 0x7f2244, 0x9fd3bf, 0x24324b, 0x508d94, 0x662d5e, 0x74bc9a, 0x64254a, 0x71be9a, 0x682248, 0x76be9e, 0x692248, 0x49b99e, 0x68254b, 0x4ab89d, 0x6e184b, 0x48879d, 0x6e184b, 0x46b89e, 0x6c1a49, 0x41b891, 0x6c1a49, 0x43b891, 0x731b48, 0x40be93, 0x731b48, 0x46bf91, 0x731b48, 0x44be92, 0x7d194e, 0x47bc97, 0x7b1b4c, 0x44b291, 0x7b1b4c, 0x44b297, 0x5194a, 0x46b294, 0x3184a, 0x44b397, 0x3184a, 0x49b394, 0x21f4b, 0x4fb294, 0x1d75,
				0x4fb294, 0x1d75, 0x53b295, 0x70274, 0x52b396, 0x70274, 0x51b097, 0x70274, 0x50b190, 0x80575, 0x52b091, 0x90674, 0x54b397, 0xa0573, 0x55b390, 0x350474, 0x57bd92, 0x340775, 0x57be9d, 0x330575, 0x51bc91, 0x350075, 0x52bf92, 0x227860, 0x41c38b, 0xd6550, 0x3ee89b, 0x239224, 0x24f595, 0x249125, 0x25f992, 0x25922b, 0x25ff93, 0x258f29, 0x25ff93, 0x248e28, 0x24fc93, 0x258f2f, 0x25fc91, 0x25882e, 0x25feee, 0x25882e, 0x24ff91, 0x268751, 0x23fe93, 0x258450, 0x2cff92, 0x268351, 0x2bfe94, 0x258151, 0x340196, 0x268050, 0x320398, 0x268050, 0x320398, 0x268050, 0x330499, 0x258153, 0x320798, 0x2a8054, 0x33099f, 0x298353, 0x30099f, 0x2a8252, 0x310e9c, 0x2c804c, 0x310f82, 0x2c804c, 0x321083, 0x2d8153, 0xd1382, 0x2c8050, 0xe1584, 0x2d8351, 0x81484, 0x2e8c52, 0x61485, 0x2c8e5c, 0x11584,
				0x2f895d, 0x1e1784, 0x2c885e, 0x191787, 0x2eb65c, 0x171487, 0x2cb05a, 0x111685, 0x2fb165, 0x6f19ba, 0x2cb15a, 0x6f1787, 0x2abf58, 0x631587, 0x29be67, 0x651586, 0x2bb865, 0x7b1780, 0x29a565, 0x7c1580, 0x2aa765, 0x721382, 0x2ba66a, 0x71108d, 0x2aa765, 0x761f8c, 0x28a567, 0x481e8d, 0x29a266, 0x4b1f8c, 0x28a167, 0x4e1e8c, 0x29de60, 0x401c8e, 0x2adf61, 0x411b8f, 0x2adf61, 0x461a8e, 0x2bdc7e, 0x441b91, 0x34d361, 0x411990, 0x36d362, 0x4c1f90, 0x31d262, 0xb31f96, 0x37d165, 0xb00196, 0x3ad162, 0xb70096, 0x27d263, 0xb50096, 0x23d560, 0xb90398, 0x25d46d, 0xba0c9b, 0x18d56c, 0xbf0f9b, 0x18d56c, 0xb10e9a, 0x1bd26d, 0xb50f9a, 0x1ad06c, 0xab0f9b, 0x18ef6c, 0xaf0e9b, 0x15ed6c, 0xa80e94, 0x17ed6d, 0xd50894, 0x11ef6f, 0xd70895, 0x10e06e, 0xd90892, 0x13e16f, 0xdb0694, 0x1ee06d, 0xdd0395,
				0x63e16d, 0xdf0394, 0x67e263, 0xd23d94, 0x66e362, 0xd43d95, 0x7be062, 0xd13d98, 0x77e160, 0xd23a95, 0x77e266, 0xd73496, 0x49e165, 0xd13593, 0x45e16b, 0xd4329d, 0x5ae068, 0xd1319b, 0x55e16f, 0x2f2f9c, 0x56e670, 0xdb289c, 0x74f46d, 0xac189a, 0x40e96e, 0xb81e9b, 0x4eec6a, 0xbe1d9f, 0x50f26c, 0xa5039e, 0x53f270, 0xa5039d, 0x56f170, 0xb90580, 0x56f674, 0xa40782, 0x57f674, 0xa40780, 0x57f672, 0xa40780, 0x57f672, 0xa40780, 0x57f672, 0xa40780, 0x57f672, 0xa40780, 0x57f672, 0xa40780, 0x57f672, 0xa40780, 0x57f672, 0xa40780, 0x57f672, 0xa50486, 0x57f672, 0xa50480, 0x57f672, 0xa50482, 0x57f672, 0xa60783, 0x57f670, 0xa70785, 0x57f673, 0xb8048a, 0x57f673 };
		System.arraycopy(aFor, 0, key, 67510, aFor.length);
	}

	private static void init227(int[] key) {
		int[] aFor = { 0xa40781, 0x57f673, 0xa40781, 0x57f673, 0xa40781, 0x57f673, 0xa40781, 0x57f673, 0xa40781, 0x57f673, 0xa40781, 0x57f673, 0xa40781, 0x57f673, 0xa40781, 0x57f673, 0xa50481, 0x57f673, 0xa50481, 0x57f673, 0xa50481, 0x57f673, 0xa50481, 0x57f673, 0xa50481, 0x57f673, 0xa50481, 0x57f673, 0xa50481, 0x54f570, 0xa50481, 0x54f570, 0xa60780, 0x53f372, 0xa40080, 0x57f478, 0xbb0385, 0x71e87f, 0xf4209a, 0xb08657, 0xac109e, 0xbc8750, 0xae109f, 0xb68b4e, 0xa8169a, 0xb78a4e, 0xa81698, 0x8a8b4e, 0xa81698, 0x8b894d, 0xaf299b, 0x8b894d, 0xac2998, 0x85884e, 0xa92999, 0x848b41, 0xab2999, 0x9b8a40, 0xa92e9a, 0x9a8b41, 0xae2899, 0x9a8b41, 0xac2f98, 0x948943, 0xae2c9a, 0x928b41, 0xaf239d, 0x928b41, 0xac239d, 0xec8943, 0xae239e, 0xeb8940, 0xad239c, 0xea8841, 0xa0239f, 0xeb8f40, 0xa6229f,
				0xe88c7f, 0xa7239e, 0xe98d7e, 0xbb23a1, 0xe88c41, 0xbd3da3, 0xe88c41, 0xbd3da3, 0xeb8f40, 0xbc3ca4, 0xe48841, 0xbd3ca2, 0xe78946, 0xbc3fa5, 0xe78946, 0xb93ea5, 0xe68641, 0x873ea4, 0xe58742, 0x873fa5, 0xe48542, 0x863ca6, 0xe28740, 0x8439a6, 0xf4fe54, 0x9745bf, 0xdbe364, 0xe86ea8, 0xf41716, 0xf370a7, 0xf31417, 0xf27ca0, 0xf21719, 0xf27aa1, 0xf20a1b, 0xf37ba0, 0xf20a1b, 0xf278a0, 0xf20a1b, 0xf279a5, 0xf20d1a, 0xf27bda, 0xf30c1b, 0xf27ba4, 0xf00364, 0xf47ba5, 0xf10267, 0xf978a6, 0xf30465, 0xff78a1, 0xf10764, 0xe178a2, 0xf3f964, 0xe77aac, 0xf3f964, 0xe77aac, 0xf3f964, 0xe67dad, 0xf1fb66, 0xe67dad, 0xfefa61, 0xe773aa, 0xfdf966, 0xe772ab, 0xfcfe65, 0xe073aa, 0xfdfd7a, 0xe173b7, 0xfcfc79, 0xe26cb6, 0xfdfd66, 0xe26fb7, 0xc2fc65, 0xe368b6, 0xc1fd62, 0xe46ab7, 0xc2f261, 0xea6ab6,
				0xc3f36e, 0xee68b6, 0xc0f46f, 0xf16ab6, 0xc3f56c, 0xf66ab5, 0xc0ca6f, 0xf869b4, 0xc2cc69, 0xfe69b7, 0xc0ce57, 0x806688, 0xc3ce68, 0x8068b5, 0xc5c06a, 0x8c6ab5, 0xc6c155, 0x8a6ab4, 0xc4c757, 0x9468b2, 0xc6da57, 0x936ab2, 0xc5d857, 0x9d6cb0, 0xc4d958, 0x9d6cbe, 0xc7da59, 0x9b62b0, 0xc6db5a, 0x9961b3, 0xf8dd58, 0x9a60b2, 0xf9de59, 0x9d61b2, 0xf8a15e, 0x9060b3, 0xfaa35c, 0x9060b1, 0xfba45f, 0x9761b0, 0xfaa740, 0x9560af, 0xe5a85f, 0x9161af, 0xe6ab5d, 0x9f60ac, 0xe3ac5d, 0x6260ae, 0xe6ae5d, 0x6061af, 0xeab15b, 0x6661a8, 0xe9b05c, 0x7b62a9, 0xeeb65c, 0x7763ab, 0xecb55f, 0x7262aa, 0xd3ba5c, 0x7563aa, 0xd2b95d, 0x7a63a8, 0xd0bf5f, 0x7e62a8, 0xd1bd5e, 0x6062a9, 0xd3825e, 0x6463a9, 0xde805e, 0x6363a6, 0xdc8751, 0x1d63a9, 0xde8553, 0x1862a9, 0xdf8a52, 0x1662a8, 0xdf8a52, 0x1662ae,
				0xd08554, 0x1366ac, 0xac8555, 0x1067ac, 0xa98554, 0x1f65ac, 0xabbb5a, 0x1f65ad, 0xafbb55, 0x366ae, 0xabb854, 0xd64ac, 0xa9be58, 0x869a9, 0x96bf58, 0xf6bac, 0x9abf5b, 0x86bac, 0x86b95b, 0xf6bae, 0x8ca45d, 0xf769af, 0x89a343, 0x1c72a8, 0xa5905c, 0x7a61a7, 0x949352, 0x6266a1, 0x979751, 0x6665a7, 0x899553, 0x7a64a1, 0x8f954f, 0x7a67a2, 0x89954c, 0x6661bc, 0x899248, 0x7b63be, 0x889248, 0x7b63bc, 0x88924e, 0x7b63bc, 0x88924e, 0x7b63bc, 0x88924e, 0x7b63bc, 0x88924e, 0x7b63bc, 0x88924e, 0x7b63bc, 0x88924e, 0x7b63bc, 0x88924e, 0x7b63bc, 0x88924e, 0x7a60ba, 0x88924e, 0x7a60bc, 0x88924e, 0x7a60be, 0x88924e, 0x7963bf, 0x88924c, 0x7863b9, 0x88924f, 0x6760b6, 0x88924f };
		System.arraycopy(aFor, 0, key, 67810, aFor.length);
	}

	private static void init228(int[] key) {
		int[] aFor = { 0x7b63bd, 0x88924f, 0x7b63bd, 0x88924f, 0x7b63bd, 0x88924f, 0x7b63bd, 0x88924f, 0x7b63bd, 0x88924f, 0x7b63bd, 0x88924f, 0x7b63bd, 0x88924f, 0x7b63bd, 0x88924f, 0x7a60bd, 0x88924f, 0x7a60bd, 0x88924f, 0x7a60bd, 0x88924f, 0x7a60bd, 0x88924f, 0x7a60bd, 0x88924f, 0x7a60bd, 0x88924f, 0x7a60bd, 0x88924f, 0x7963be, 0x88924f, 0x677da2, 0x958f52, 0x627ea3, 0x948a56, 0x667dad, 0xb38d56, 0x255dbe, 0x7ded6a, 0x5470a4, 0x40e769, 0x4f73a4, 0x58e976, 0x4575a5, 0x5bee74, 0x4472a0, 0x65ec76, 0x4472a0, 0x67ed75, 0x434da3, 0x67ed75, 0x404da0, 0x68ec76, 0x424ea1, 0x6eef76, 0x414dae, 0x71ee77, 0x434aad, 0x71ee77, 0x454daf, 0x71ee77, 0x474aae, 0x70ef74, 0x4a4aaf, 0x76ed74, 0x4b45a8, 0x77e273, 0x494aaf, 0x76e372, 0x3449af, 0x77e271, 0x3249ad, 0x74e371, 0x3d49ac, 0x77e272, 0x3b4eac,
				0x76e373, 0x384d93, 0x76e373, 0x244dac, 0x77e24c, 0x2352ad, 0x76e34f, 0x2352ad, 0x76e34f, 0x2150ab, 0x79e44e, 0x2050ad, 0x7ae549, 0x2050ab, 0x7be648, 0x2551ab, 0x7ae94f, 0x1b51aa, 0x7ae94f, 0x1851a8, 0x7be840, 0x1951a6, 0x7dea40, 0x1b54a6, 0x749257, 0x1729bc, 0x5c8c66, 0x6f01aa, 0x737814, 0x741fa7, 0x747b17, 0x7513a0, 0x757819, 0x7515a1, 0x75651b, 0x7515a1, 0x75651b, 0x7517a0, 0x75651b, 0x7516a5, 0x75621a, 0x7514da, 0x75621a, 0x7415a5, 0x766d65, 0x7215a4, 0x776c66, 0x7f16a7, 0x766d65, 0x7a11a1, 0x746f67, 0x6410a1, 0x769167, 0x6513a0, 0x719068, 0x6513a0, 0x719068, 0x6414a1, 0x73926a, 0x6414a1, 0x73926a, 0x6b1aa0, 0x72936b, 0x6818a6, 0x739468, 0x6f19a7, 0x739468, 0x6f1aa5, 0x72956b, 0x6c05a4, 0x739474, 0x6d05a4, 0x4d9676, 0x6c02a5, 0x4e9771, 0x6b00a4, 0x4d9872, 0x6500a5,
				0x4c997d, 0x6003aa, 0x4d9872, 0x7d05aa, 0x4c9b73, 0x7904aa, 0x4fa470, 0x7707ab, 0x4ea377, 0x7206a9, 0x4fa076, 0x7007a8, 0x30af77, 0x7408a9, 0x32a149, 0x7b0b96, 0x31a076, 0x7d0b97, 0x30a775, 0x7f0991, 0x2fb972, 0x7c0897, 0x2aba72, 0x720e95, 0x2aba72, 0x730f94, 0x29b973, 0x720e9b, 0x2eb672, 0x710c9b, 0x11b771, 0x730a9b, 0x10b470, 0x730a9a, 0x17b571, 0x7f749c, 0x16b672, 0x7c759f, 0x17b171, 0x7b749e, 0x16b26e, 0x787480, 0x8bc70, 0x7c7582, 0xbbf70, 0x727481, 0xfb872, 0x707581, 0xf3ba72, 0x757580, 0xfda474, 0x767587, 0xfba473, 0x6a7786, 0xfea273, 0x677784, 0xfca170, 0x627685, 0xc3ae73, 0x677485, 0xc1ad73, 0x697786, 0xc0ac70, 0x6d7088, 0xc2ae70, 0x737187, 0xc19170, 0x767087, 0xce9371, 0x737089, 0xce937f, 0x717788, 0xb39271, 0x75758b, 0xb29d70, 0x7b758a, 0xb29d70, 0x7b758c,
				0xbd9276, 0x79768f, 0xc69278, 0x7b7180, 0xc29378, 0x747380, 0xc1ac77, 0x757280, 0xc4af76, 0x6a728f, 0xc0af75, 0x66738d, 0xc2a97b, 0x637e88, 0xfda879, 0x647c8b, 0xf1a87e, 0x637c89, 0xeeae70, 0x667c87, 0xe2ac73, 0x9d6182, 0x19aa6b, 0x847980, 0x469f76, 0xa1698b, 0x509b7f, 0xa6698e, 0x529961, 0xa36b97, 0x4c9b63, 0xbf6a91, 0x4a9b61, 0xbf6a8f, 0x4c9861, 0xa36c91, 0x4c9f63, 0xbe6d97, 0x4d9c63, 0xbe6d91, 0x4d9c63, 0xbe6d91, 0x4d9c63, 0xbe6d91, 0x4d9c63, 0xbe6d91, 0x4d9c63, 0xbe6d91, 0x4d9c63, 0xbe6d91, 0x4d9c63, 0xbe6d91, 0x4d9c63, 0xbe6d91, 0x4d9c63, 0xbf6e97, 0x4d9c63, 0xbf6e91, 0x4d9c63, 0xbf6e93, 0x4d9c63, 0xbc6d92, 0x4d9c61, 0xbd6d94, 0x4d9c62, 0xa26e9b, 0x4d9c62 };
		System.arraycopy(aFor, 0, key, 68110, aFor.length);
	}

	private static void init229(int[] key) {
		int[] aFor = { 0xbf6e90, 0x4d9c62, 0xbf6e90, 0x4d9c62, 0xbf6e90, 0x4d9c62, 0xbf6e90, 0x4d9c62, 0xbf6e90, 0x4d9c62, 0xbf6e90, 0x4d9c62, 0xbf6e90, 0x4d9c62, 0xbf6e90, 0x4d9c62, 0xbf6e90, 0x4d9c62, 0xbf6e90, 0x4d9c62, 0xbf6e90, 0x4d9c62, 0xbf6e90, 0x4d9c62, 0xbf6e90, 0x4d9c62, 0xbf6e90, 0x4d9c62, 0xbf6e90, 0x4d9c62, 0xbf6e90, 0x4d9c62, 0xa26d92, 0x509f62, 0xa76d8d, 0x5e997c, 0xa66087, 0x79927e, 0xd14796, 0xbffe4e, 0x855b9d, 0x9fcc50, 0x925e9d, 0x86c749, 0x9b5b9a, 0x87c255, 0x9b5987, 0x87c453, 0xa65a85, 0x87c451, 0xa45b84, 0x80fb52, 0xa75b85, 0x8ffa5d, 0xa5588a, 0x8ffa5d, 0xa15984, 0x91fa5e, 0xa35e84, 0x91fa5e, 0xa55984, 0x91fa5e, 0xa45e85, 0x92fb5f, 0xaa5d84, 0x90f559, 0xac5282, 0x90f559, 0xae5d85, 0x91f458, 0xd35e85, 0x90f55b, 0xd55f85, 0x90f55b, 0xd75e86, 0x90f55b, 0xda5986,
				0x91f458, 0xdf5ab8, 0x90f559, 0xc15887, 0x93f658, 0xc746b9, 0x93f658, 0xc746b9, 0x92f75b, 0xc445b8, 0x93f65c, 0xcb42bf, 0x93f65c, 0xc943be, 0x92f55d, 0xcc43b9, 0x92f55d, 0xcd4db9, 0xadf45c, 0xcc43ba, 0xaefb5d, 0xcf43b8, 0xacf95d, 0xca44b5, 0xa58246, 0xc738aa, 0x8c9c76, 0xbf11ba, 0xa36804, 0xa40fb7, 0xa46c18, 0xa504af, 0xa56f16, 0xa502ac, 0xa56c17, 0xa503ae, 0xa57314, 0xa501af, 0xa47213, 0xa401ad, 0xa47512, 0xa400ad, 0xa47512, 0xa502ad, 0xa47512, 0xa702d2, 0xa37a13, 0xa403d3, 0xad7811, 0xa104d5, 0xac7910, 0xbc06d6, 0xad8611, 0xbe04d6, 0xad8611, 0xbe04d6, 0xaa871e, 0xbf03d7, 0xa9861d, 0xbe00d6, 0xa9861d, 0xb10ed7, 0xa8871c, 0xb20cd1, 0xa9801f, 0xb50dd0, 0xa9801f, 0xb40fd1, 0xa9801f, 0xb710d0, 0xa88100, 0xb713d1, 0x978003, 0xb614d0, 0x948104, 0xb017d1, 0x958007, 0xbd18d0,
				0x948108, 0xbf18de, 0x928306, 0xbc1fd1, 0x8d8108, 0xb91fd0, 0x8c8009, 0xbb21d2, 0x82820f, 0xb926d2, 0x84800d, 0xbb27d3, 0xfb8f0c, 0xbf28d2, 0xfa800d, 0xb32aec, 0xf9810e, 0xb52aef, 0xf8860d, 0xb728e9, 0xe7980a, 0xb429ef, 0xe09b0a, 0xb728ec, 0xef9c0b, 0xb728ec, 0xee9d04, 0xb52aec, 0xe99205, 0xb72bed, 0xd79007, 0xb62cee, 0xd49104, 0xb72fef, 0xd39003, 0xb650ef, 0xd19201, 0xb850ed, 0xd29300, 0xbe56ef, 0xd3901f, 0xbd55ef, 0xcd9d1f, 0xb954ed, 0xcf9d1c, 0xb551ee, 0xc89d1d, 0x4853e9, 0xcb9c1a, 0x4c4ce9, 0xc49d1d, 0x484fe9, 0xc69d1c, 0x564fe8, 0xc29a1d, 0x5b4fea, 0xc0991e, 0x5e4eeb, 0xff961d, 0x5b4ceb, 0xff961d, 0x584cea, 0xf0971c, 0x5b4ae4, 0xf59713, 0x4549e5, 0xf49613, 0x4276e5, 0xfa9513, 0x4776eb, 0xfa951d, 0x4571ea, 0x879413, 0x4173e9, 0x869b12, 0x4f73e8, 0x869b12, 0x4c72e9,
				0x8b9a12, 0x4f7eeb, 0x8f9b13, 0x3278eb, 0x889b1c, 0x3f7aeb, 0x899a1d, 0x3f44ea, 0x8e991c, 0x2044e5, 0x89981c, 0x2c45e4, 0x8f9e12, 0x2e47e6, 0xb19014, 0x2c46e7, 0xb49313, 0x2546e9, 0xa99215, 0x2141ef, 0xa4901a, 0x215ef5, 0xac931d, 0x444f6, 0xc8ae03, 0x2556fd, 0xd6a50e, 0x2054e0, 0xd4a40d, 0x2556f9, 0xcaa60d, 0x3854ff, 0xcba60f, 0x3854e1, 0xcaa70f, 0x3b54ff, 0xcaa70d, 0x3855f9, 0xcba40d, 0x3956ff, 0xcba40d, 0x3956ff, 0xcba40d, 0x3956ff, 0xcba40d, 0x3956ff, 0xcba40d, 0x3956ff, 0xcba40d, 0x3956ff, 0xcba40d, 0x3956ff, 0xcba40d, 0x3956ff, 0xcba40d, 0x3956f9, 0xcba40d, 0x3956ff, 0xcba40d, 0x3956fd, 0xcba40d, 0x3956ff, 0xc8a70c, 0x3856f9, 0xc8a70f, 0x2755f6, 0xc8a70f };
		System.arraycopy(aFor, 0, key, 68410, aFor.length);
	}

	private static void init230(int[] key) {
		int[] aFor = { 0x3a55fd, 0xc8a70f, 0x3a55fd, 0xc8a70f, 0x3a55fd, 0xc8a70f, 0x3a55fd, 0xc8a70f, 0x3a55fd, 0xc8a70f, 0x3a55fd, 0xc8a70f, 0x3a55fd, 0xc8a70f, 0x3a55fd, 0xc8a70f, 0x3a55fd, 0xc8a70f, 0x3a55fd, 0xc8a70f, 0x3a55fd, 0xc8a70f, 0x3a55fd, 0xc8a70f, 0x3a55fd, 0xc8a70f, 0x3a55fd, 0xc8a70f, 0x3a55fd, 0xc8a70f, 0x3a55fd, 0xc8a70f, 0x3a53fc, 0xcba213, 0x3f4dff, 0xc7be0f, 0x3c44f7, 0xd6b10e, 0x6c6de6, 0xeaa93b, 0xa704ec, 0x859320, 0x8e1ee9, 0x9f893d, 0x8215ee, 0x9e8e3e, 0x8512ed, 0x988c38, 0x8712ed, 0xa78f3e, 0x8410eb, 0xa0b03d, 0x8710ea, 0xa0b03d, 0x8911eb, 0xa3b33c, 0x8e11e4, 0xa0b23d, 0x9011e4, 0xa1b23d, 0x9511e7, 0xa1b23d, 0x9416e6, 0xa2b33a, 0x9516e0, 0xacb13c, 0x9016e7, 0xacb13c, 0x9116e7, 0xaebf3a, 0xef16e6, 0xadbc3b, 0xe816e5, 0xadbc3b, 0xeb16e7, 0xadbc3b, 0xe417e7,
				0xaebb3a, 0xe316e5, 0xadb805, 0xe215e5, 0xb0bb3a, 0xe314da, 0xb7a43b, 0xe314da, 0xb7a43b, 0xe215d9, 0xb4a73a, 0xe314d8, 0xbba03b, 0xe115d9, 0xbaa33a, 0xe415de, 0xbaa33a, 0xe51bde, 0x85a338, 0xe414d0, 0x86ac37, 0xe714d2, 0x84ae37, 0xe112d0, 0x8ed423, 0xec6ecf, 0xa7ca13, 0x9546d8, 0x893f66, 0x8f59d4, 0x8f3a7b, 0x8e52cc, 0x8e3975, 0x8f55cf, 0x8f3b74, 0x8f54cd, 0x8f3b74, 0x8f4bce, 0x8e3872, 0x8e4ccd, 0x8e3872, 0x8e4dcd, 0x8e3872, 0x8e4ecc, 0x8f3973, 0x8c4eb3, 0x883672, 0x8f4fb2, 0x863470, 0x8d4fb3, 0x813377, 0x8e4db2, 0x9fcd75, 0x8d4cb3, 0x9ece74, 0x8d4cb3, 0x9ece74, 0x8b4abd, 0x9dcf77, 0x8b4abd, 0x9ccc76, 0x8444bc, 0x9dcd77, 0x8447bb, 0x9ecc76, 0x8540b8, 0x99cd77, 0x8442b9, 0x99cd77, 0x875db8, 0x98cc68, 0x875eb9, 0xa7cd6b, 0x8659b8, 0xa4cc6c, 0x8759b8, 0xa2ce6e, 0x8a56b9,
				0xa2ce6e, 0x8957b8, 0xa5cd6f, 0x8b51b8, 0xa4cc60, 0x9653b8, 0xa3cc61, 0x946dba, 0xaccf66, 0x976bbb, 0xabce65, 0x9568b8, 0xaacf66, 0xe868b9, 0xaccf67, 0xe46687, 0xadcc66, 0xe66686, 0xabca64, 0xe46480, 0xb4cb65, 0xe67b81, 0xb2c964, 0xe57a82, 0xbdce65, 0xe57a82, 0xbccf6a, 0xe6798d, 0xbac164, 0xe4788c, 0xbbc265, 0xda7e8c, 0xb8c366, 0xda7e8c, 0xb9c067, 0xdc008b, 0xbac166, 0xd30388, 0xb9c065, 0xd2048b, 0xbec164, 0xd00494, 0xa0c366, 0xd40a94, 0xa1c067, 0xd80b94, 0xa4c066, 0xdb0d95, 0x58c360, 0xdd0c94, 0x55dd60, 0xde0c95, 0x52de61, 0xc20c95, 0x51df63, 0xc60994, 0x5fdf61, 0xc10894, 0x60d062, 0xc30895, 0x67d263, 0xc00894, 0x68d36c, 0xc30e94, 0x6fd063, 0xdf0e9b, 0x6ed16d, 0xd83195, 0x6fd062, 0xd4349a, 0x69d76c, 0xd6339b, 0x17d562, 0xd2339b, 0x15db60, 0xdc339a, 0x16da61, 0xdc339a,
				0x1bdb63, 0xde3d9a, 0x1ed862, 0xa13b9b, 0x1dd96c, 0xa43b94, 0x12db62, 0xa5049a, 0x11da6c, 0xbe079b, 0x17db6c, 0xb20796, 0x10dc6e, 0xb20599, 0x12dd6a, 0x8d0b9e, 0x14dd6b, 0x850891, 0xfdc6a, 0x890d93, 0xcc267, 0x81128a, 0x18c362, 0xad1f8f, 0x7bf378, 0x8b0b83, 0x78fa71, 0x8e0b9f, 0x7afb72, 0x880887, 0x67f875, 0x950a81, 0x66fb73, 0x950983, 0x67fa6d, 0x96099d, 0x67fa6d, 0x95089f, 0x66f96b, 0x940b99, 0x66f96b, 0x940b99, 0x66f96b, 0x940b99, 0x66f96b, 0x940b99, 0x66f96b, 0x940b99, 0x66f96b, 0x940b99, 0x66f96b, 0x940b99, 0x66f96b, 0x940b99, 0x66f96b, 0x940b9f, 0x66f96b, 0x940b99, 0x66f96b, 0x940b9b, 0x66f96b, 0x940b99, 0x66f96d, 0x960898, 0x66f96e, 0x890b97, 0x66f96e };
		System.arraycopy(aFor, 0, key, 68710, aFor.length);
	}

	private static void init231(int[] key) {
		int[] aFor = { 0x940b9c, 0x66f96e, 0x940b9c, 0x66f96e, 0x940b9c, 0x66f96e, 0x940b9c, 0x66f96e, 0x940b9c, 0x66f96e, 0x940b9c, 0x66f96e, 0x940b9c, 0x66f96e, 0x940b9c, 0x66f96e, 0x940b9c, 0x66f96e, 0x940b9c, 0x66f96e, 0x940b9c, 0x66f96e, 0x940b9c, 0x66f96e, 0x940b9c, 0x66f96e, 0x940b9c, 0x66f96e, 0x940b9c, 0x66f96e, 0x940b9c, 0x66f96e, 0x940d9d, 0x64fd73, 0x961398, 0x61e177, 0x9b1880, 0x6bed78, 0xbb0993, 0x13de7a, 0x7e639a, 0x4ffe54, 0x44759c, 0x4ae348, 0x537f9c, 0x49e44e, 0x527a9a, 0x4fe44f, 0x51799b, 0x4ee54f, 0x6e789c, 0x4ce749, 0x68479f, 0x4ce749, 0x6b479e, 0x42e746, 0x6e4691, 0x42e746, 0x6c4691, 0x43e449, 0x724790, 0x40e34a, 0x754791, 0x40e34a, 0x764793, 0x4ee148, 0x744995, 0x4ee148, 0x724693, 0x4fee4f, 0x704792, 0x30ed4c, 0x724791, 0x37ed4f, 0x714793, 0x36ec4e, 0x714793,
				0x39eb4d, 0x724792, 0x3ce972, 0x6c4793, 0x3de871, 0x6c5891, 0x3ee970, 0x6f5990, 0x3de871, 0x695890, 0x3ce972, 0x6a5b93, 0x3de871, 0x675d95, 0x3ceb70, 0x675d93, 0x3bea77, 0x655c93, 0x3aeb76, 0x655c91, 0x4e578, 0x64539d, 0x7e97a, 0x62559d, 0xd936e, 0x6f2982, 0x248d5e, 0x160195, 0xa782b, 0xc1e99, 0xc7d36, 0xc1a80, 0xc7038, 0xc1b81, 0xc753a, 0xc1b83, 0xc743a, 0xc0480, 0xc763b, 0xc0585, 0xc713a, 0xc0485, 0xc713a, 0xc0784, 0xc713a, 0xe0785, 0xa7f44, 0xd0684, 0x47d46, 0xe0185, 0x57c41, 0x80285, 0x78243, 0x150385, 0x78243, 0x150385, 0x68142, 0x12028a, 0x48740, 0x12028a, 0x58441, 0x1d038d, 0x48b40, 0x1c028b, 0x58847, 0x1f038a, 0x48f44, 0x180189, 0x58e47, 0x1b1e88, 0x58e47, 0x1b1f97, 0x48d46, 0x251995, 0x78c41, 0x251995, 0x18e43, 0x271695, 0x8f42, 0x281697, 0x18c41, 0x2c1799,
				0x38a41, 0x321496, 0x1b44f, 0x371495, 0xfb649, 0x351595, 0x9b04b, 0x371594, 0x8b24a, 0x491494, 0xabc74, 0x4f14ab, 0x8be4a, 0x4215aa, 0x9b94b, 0x4714a8, 0x17bb4d, 0x450ba9, 0x16ba4c, 0x4309aa, 0x15bd4d, 0x4d09aa, 0x14bc42, 0x4e0aa5, 0x12b24c, 0x4f0aab, 0x10b042, 0x700baa, 0x11b743, 0x730aa9, 0x10b442, 0x7574af, 0x13b542, 0x7574af, 0x1db740, 0x7673b0, 0x1ab641, 0x7770b1, 0x7b743, 0x747fb2, 0x1b541, 0x797fb3, 0x5b441, 0x7b78b3, 0xf9b547, 0x7d7bb4, 0xfbab47, 0x737ab3, 0xf8ab40, 0x6879b4, 0xfbaa42, 0x6d7fb4, 0xf4a941, 0x697fb5, 0xc9a840, 0x6a70b7, 0xc9a840, 0x6f71b6, 0xc7aa4e, 0x6d76b9, 0xc1a84e, 0x7176b6, 0xc0a940, 0x7649b8, 0xc1a84f, 0x7b4bb8, 0xc6a840, 0x794cb7, 0xb9a94f, 0x7d4cb7, 0xbbab4d, 0x734cb4, 0xb9a54f, 0x734cb4, 0xbba54e, 0x7e43b7, 0xbfa54f, 0x41b8, 0xbda24e,
				0x440b8, 0xbca14d, 0x57ebb, 0xb0a34d, 0x17eb5, 0xaaa34d, 0xc7eb6, 0xafa24c, 0xd7bbb, 0xadac4e, 0x327bbc, 0xa8ae4f, 0x397bb5, 0xb0a84f, 0x3467b8, 0xb3b74b, 0x2463bb, 0x8db950, 0x495dbf, 0x96ad48, 0x6255b3, 0x97a443, 0x6155ad, 0x95a540, 0x6751b3, 0x97a040, 0x6552b4, 0x97a046, 0x6552b6, 0x97a046, 0x6653b6, 0x97a046, 0x6552b4, 0x96a346, 0x6451b4, 0x96a346, 0x6451b4, 0x96a346, 0x6451b4, 0x96a346, 0x6451b4, 0x96a346, 0x6451b4, 0x96a346, 0x6451b4, 0x96a346, 0x6451b4, 0x96a346, 0x6451b4, 0x96a346, 0x6451b2, 0x96a346, 0x6451b4, 0x96a346, 0x6451b6, 0x96a346, 0x6451b4, 0x96a340, 0x6652b5, 0x96a343, 0x7951ba, 0x96a343 };
		System.arraycopy(aFor, 0, key, 69010, aFor.length);
	}

	private static void init232(int[] key) {
		int[] aFor = { 0x6451b1, 0x96a343, 0x6451b1, 0x96a343, 0x6451b1, 0x96a343, 0x6451b1, 0x96a343, 0x6451b1, 0x96a343, 0x6451b1, 0x96a343, 0x6451b1, 0x96a343, 0x6451b1, 0x96a343, 0x6451b1, 0x96a343, 0x6451b1, 0x96a343, 0x6451b1, 0x96a343, 0x6451b1, 0x96a343, 0x6451b1, 0x96a343, 0x6451b1, 0x96a343, 0x6451b1, 0x96a343, 0x6451b1, 0x96a343, 0x6451b1, 0x95a040, 0x6751af, 0x90a25d, 0x6955a5, 0x9ba352, 0x784da2, 0xb0a551, 0x3c6abd, 0x79cc6e, 0x6940a6, 0x65d375, 0x7049a0, 0x68d273, 0x714ea1, 0x6ad272, 0x774ea1, 0x69d572, 0x4948a1, 0x6bd774, 0x4f77a2, 0x6ce877, 0x4a77a1, 0x6dd776, 0x4577a3, 0x6ed775, 0x4377a3, 0x6dd674, 0x5d74ac, 0x6cd775, 0x5874af, 0x6dd074, 0x5b74ad, 0x63d276, 0x5a75aa, 0x63d276, 0x5f75ad, 0x62dd71, 0x5d74ac, 0x62dd71, 0x2374ad, 0x61de70, 0x2475ac, 0x63de71, 0x2b72af,
				0x63de71, 0x2872ae, 0x64df4e, 0x2b70af, 0x7adf4d, 0x2b6fad, 0x7adf4d, 0x2b6fad, 0x7adf4d, 0x2e6fac, 0x7bde4e, 0x2d6caf, 0x7adf4d, 0x236bae, 0x79de4a, 0x2268a9, 0x79de4a, 0x2768ae, 0x79de4a, 0x2669a3, 0x46d14b, 0x2667ae, 0x44de48, 0x2162af, 0x4fa75d, 0x2d1db1, 0x67be6a, 0x5532a1, 0x494b1f, 0x4f2daf, 0x4f4e00, 0x4f29b6, 0x4f430e, 0x4f28b7, 0x4f460c, 0x4f28b5, 0x4e470f, 0x4e37b5, 0x4e460f, 0x4e37b2, 0x4e440c, 0x4e31b3, 0x4e4773, 0x4e32ce, 0x4e4470, 0x4c32cf, 0x484a0e, 0x4030cf, 0x494b0d, 0x4337ce, 0x494b0d, 0x4435c9, 0x4a4a0c, 0x5bcac9, 0x494b0f, 0x5bcac9, 0x494b0f, 0x5dc8c7, 0x484c0e, 0x5ec9c4, 0x494f0f, 0x51c8c3, 0x48400e, 0x5fc8c4, 0x47410f, 0x5dcac2, 0x46460c, 0x5ac8c1, 0x47470f, 0x5ac8c1, 0x44580e, 0x5ac9de, 0x455b0f, 0x65c8dd, 0x445c0e, 0x66c9da, 0x425e0c, 0x64c6da,
				0x435f0d, 0x6bc6d8, 0x425c0e, 0x6fc7d6, 0x405a0e, 0x71c4d7, 0x435b0f, 0x75fbd5, 0x4d5909, 0x77fad5, 0x4b5f0b, 0x75fad4, 0x4a5c34, 0x8fbeb, 0x4b530b, 0xdfaeb, 0x4a500a, 0x3fad5, 0x495135, 0x4fdd7, 0x4a5034, 0x18e0d0, 0x4b5135, 0x1fe3d0, 0x4a5036, 0x12e4d1, 0x4b5139, 0x11e7de, 0x4d5f37, 0x10e7d0, 0x4f5d39, 0x2fe6d1, 0x4e5a38, 0x2ce7d2, 0x4f5939, 0x2be6d5, 0x4d273b, 0x2be6d6, 0x4c2438, 0x27e0c8, 0x4b2539, 0x26e3c9, 0x482438, 0x39edc9, 0x4c273a, 0x3bedc8, 0x422639, 0x3feaca, 0xbf243e, 0x3cebcd, 0xb92439, 0x31f5cd, 0xba2438, 0x37f5cc, 0xa62639, 0x32f3cc, 0xa42638, 0x3ef3cd, 0xa02438, 0x1fcce, 0xa22439, 0x4fdcf, 0xa32738, 0x9fbcf, 0xa52538, 0x15fbc0, 0xa42437, 0x10c5cf, 0xa82737, 0x11c5c1, 0xab2636, 0x15c2c1, 0xd52739, 0x17c2c1, 0xd22438, 0x1ac3c1, 0xd02a3a, 0x1bc0c6, 0xd2283c,
				0x14cfc6, 0xd62a3e, 0x16cfc6, 0xab2c30, 0x12cec6, 0xaa2f33, 0x12f1c6, 0xa42e33, 0x15f3c5, 0xba2d3f, 0x12f0c2, 0xb62d39, 0x14f4ce, 0xb4233b, 0x14f5c9, 0x89233d, 0x1df5c4, 0x96263f, 0x11e9c8, 0x9f393a, 0x3ce0cb, 0x87023a, 0x55e9c8, 0xbd1a3d, 0x45e2c5, 0xb1122a, 0x47e3c4, 0xb31329, 0x41e7da, 0xae142e, 0x5fe6da, 0xad142e, 0x5fe6dc, 0xad142c, 0x5ce7dc, 0xad142c, 0x5fe6de, 0xac172c, 0x5ee5de, 0xac172c, 0x5ee5de, 0xac172c, 0x5ee5de, 0xac172c, 0x5ee5de, 0xac172c, 0x5ee5de, 0xac172c, 0x5ee5de, 0xac172c, 0x5ee5de, 0xac172c, 0x5ee5de, 0xac172c, 0x5ee5d8, 0xac172c, 0x5ee5de, 0xac172c, 0x5ee5dc, 0xac172c, 0x5ee5de, 0xac172a, 0x5ce6df, 0xac1729, 0x43e5d0, 0xac1729 };
		System.arraycopy(aFor, 0, key, 69310, aFor.length);
	}

	private static void init233(int[] key) {
		int[] aFor = { 0x5ee5db, 0xac1729, 0x5ee5db, 0xac1729, 0x5ee5db, 0xac1729, 0x5ee5db, 0xac1729, 0x5ee5db, 0xac1729, 0x5ee5db, 0xac1729, 0x5ee5db, 0xac1729, 0x5ee5db, 0xac1729, 0x5ee5db, 0xac1729, 0x5ee5db, 0xac1729, 0x5ee5db, 0xac1729, 0x5ee5db, 0xac1729, 0x5ee5db, 0xac1729, 0x5ee5db, 0xac1729, 0x5ee5db, 0xac1729, 0x5ee5db, 0xac1729, 0x5fe4d8, 0xaf1428, 0x5fe4da, 0xad162e, 0x59e2d8, 0xaa162e, 0x45e5dc, 0xa71321, 0x1c9d1, 0x5d6606, 0x44ebc0, 0x4a7814, 0x45efc7, 0x577616, 0x4fedc7, 0x557117, 0x4aefc2, 0x547216, 0x4becc3, 0x6b7315, 0x49ecc0, 0x6a7315, 0x4cecc3, 0x6b4c14, 0x42edc2, 0x6b4c14, 0x47edc3, 0x6a4f1b, 0x45edc2, 0x754e18, 0x47eac2, 0x754e18, 0x40eac1, 0x754e18, 0x43ebc2, 0x744d19, 0x4cebc2, 0x774d1e, 0x4aeac5, 0x744219, 0x34eac2, 0x75431e, 0x31eac3, 0x74401d, 0x32eac1,
				0x75411c, 0x3dedc2, 0x77461c, 0x3aebc3, 0x744523, 0x24ebc2, 0x744523, 0x24eafc, 0x755a1c, 0x21eafd, 0x745b1f, 0x21eaff, 0x745b1f, 0x2ce8fd, 0x755c1e, 0x2fe9fa, 0x745f1f, 0x2fe9fc, 0x735e18, 0x2de8f0, 0x4d5018, 0x2de8fe, 0x735f1d, 0x16e3fa, 0x7a200a, 0x1b99e3, 0x503c39, 0x64b2f5, 0x78cb4b, 0x7eadfb, 0x7ecf55, 0x7fa9e3, 0x7ec25a, 0x7faee0, 0x7fc05b, 0x7faee2, 0x7fc05b, 0x7fb0e1, 0x7fc25a, 0x7fb3e7, 0x7fc059, 0x7fb4e7, 0x7fc158, 0x7fb4e5, 0x7fc25b, 0x7eb5e4, 0x7dcc25, 0x79b59a, 0x7ccf5a, 0x75b498, 0x7ec95c, 0x73b798, 0x7dc85d, 0x72489b, 0x62c95c, 0x714b9b, 0x65c853, 0x704c9a, 0x65c853, 0x704c9a, 0x66c950, 0x714f9b, 0x69c857, 0x73429b, 0x68c956, 0x72429b, 0x69ce55, 0x724399, 0x6ecd54, 0x734384, 0x6dcc55, 0x735d87, 0x6ccf54, 0x4d5b87, 0x6fce53, 0x4c5886, 0x6fce53, 0x4a5986,
				0x6cc150, 0x445885, 0x6ec352, 0x455f8a, 0x68c45c, 0x585984, 0x6ac65c, 0x5c6686, 0x6bc75d, 0x526581, 0x68c65c, 0x556282, 0x6ac462, 0x2b62bc, 0x69c563, 0x2c6dbc, 0x6ac45c, 0x236ebd, 0x68c25e, 0x256cbd, 0x75c358, 0x246cbb, 0x77dd5e, 0x236fb8, 0x77dd5e, 0x2f69b9, 0x77dd5e, 0x2e68b8, 0x75df50, 0x2e68b6, 0x73d15e, 0x136ab4, 0x73d15e, 0x116cb4, 0x72d25f, 0x1712b2, 0x72d25f, 0x1413b2, 0x73d15c, 0x1b12b3, 0x72d643, 0x1e13ac, 0x70d45d, 0x1cad, 0x73d45c, 0x51dad, 0x7dd75d, 0x11caf, 0x7ed15c, 0xfc1fae, 0x78d15d, 0xff01ae, 0x75d15a, 0xf901a9, 0x69d35d, 0xfa07a9, 0x6cd25d, 0xf607a8, 0x68d05d, 0xc908ab, 0x6bd15c, 0xc808a9, 0x6ed15f, 0xc70aa9, 0x6cd75f, 0xc30aa8, 0x73d45e, 0xc034a9, 0x76d45f, 0xce35aa, 0x74d65d, 0xca32aa, 0xad752, 0xc832aa, 0xdd453, 0xc533aa, 0xcdb50, 0xc632ab, 0xcdb50,
				0xc432ac, 0x7d455, 0xc731ad, 0x7ad25b, 0xc031ac, 0x79d35a, 0xc10da9, 0x76ed5f, 0xc00da6, 0x6ed051, 0xc90caa, 0x6cd051, 0xc80ba8, 0x69d35e, 0xc905ac, 0x55d05e, 0xc104a9, 0x4fd65e, 0xc306ab, 0x56d444, 0xe609b6, 0x2fe042, 0xcf12b4, 0x21e640, 0xd415b4, 0x21fa5b, 0xd215b7, 0x21e759, 0xd313aa, 0x3ce05e, 0xcd12aa, 0x3ce05e, 0xce12ac, 0x3ce05c, 0xcd13b2, 0x3ce042, 0xce12b0, 0x3ce042, 0xce12b0, 0x3ce042, 0xce12b0, 0x3ce042, 0xce12b0, 0x3ce042, 0xce12b0, 0x3ce042, 0xce12b0, 0x3ce042, 0xce12b0, 0x3ce042, 0xce12b0, 0x3ce042, 0xce12b0, 0x3ce042, 0xce12b6, 0x3ce042, 0xce12b0, 0x3ce042, 0xce12b2, 0x3ce042, 0xce12b0, 0x3ce044, 0xcc11b1, 0x3ce047, 0xd312be, 0x3ce047 };
		System.arraycopy(aFor, 0, key, 69610, aFor.length);
	}

	private static void init234(int[] key) {
		int[] aFor = { 0xce12b5, 0x3ce047, 0xce12b5, 0x3ce047, 0xce12b5, 0x3ce047, 0xce12b5, 0x3ce047, 0xce12b5, 0x3ce047, 0xce12b5, 0x3ce047, 0xce12b5, 0x3ce047, 0xce12b5, 0x3ce047, 0xce12b5, 0x3ce047, 0xce12b5, 0x3ce047, 0xce12b5, 0x3ce047, 0xce12b5, 0x3ce047, 0xce12b5, 0x3ce047, 0xce12b5, 0x3ce047, 0xce12b5, 0x3ce047, 0xce12b5, 0x3ce047, 0xcf12b7, 0x3fe247, 0xd012b3, 0x3ee046, 0xce14b1, 0x3de047, 0xcb15b4, 0x25ec4f, 0x9b09b9, 0xeeb264, 0xc524ae, 0xd1b27a, 0xdf24a8, 0xcfbc7a, 0xd727a9, 0xccba78, 0xd227ac, 0xccba78, 0xd227ac, 0xf2b87a, 0xd326ae, 0xf2b87a, 0xd127af, 0xf68778, 0xde27ad, 0xf7867b, 0xdb27ac, 0xf68574, 0xd927ad, 0xe98477, 0xdb20ad, 0xe98477, 0xdc20ac, 0xe98475, 0xdf21af, 0xe88774, 0xd021af, 0xe98673, 0xd521a8, 0xeb8974, 0xab21af, 0xea8873, 0xae21ae, 0xea8873, 0xac22af,
				0xeb8972, 0xac22af, 0xe48e71, 0xa923ae, 0xe78d4e, 0xb723af, 0xe78d4e, 0xb72291, 0xe69271, 0xb22290, 0xe79372, 0xb22292, 0xe49073, 0xb32292, 0xea9671, 0xb02395, 0xea9671, 0xb12092, 0xea9677, 0xb4209f, 0xd49877, 0x8b2f92, 0xd59871, 0xb02496, 0xdce766, 0xbd5e8f, 0xf1f854, 0xc47799, 0xd90d26, 0xdf6b96, 0xdf0938, 0xde6f8c, 0xde0534, 0xdf698e, 0xdf0735, 0xdf698c, 0xdf0735, 0xdf778f, 0xdf0735, 0xdf7688, 0xdf0536, 0xdf7188, 0xdf0437, 0xdf718a, 0xdf0734, 0xde708b, 0xdc084b, 0xd871f4, 0xdd0b34, 0xd571f5, 0xde0c31, 0xd372f5, 0xdd0d30, 0xd28df6, 0xc20c31, 0xd18ef6, 0xc50d3e, 0xd18ef6, 0xc40a3f, 0xd18ef6, 0xc70b3c, 0xd08df7, 0xc80a3b, 0xd183f0, 0xcb093c, 0xd182f1, 0xcb093c, 0xd084f0, 0xcc0a3d, 0xd184ed, 0xcf0b3c, 0xd19aee, 0xce083d, 0xee9bef, 0xcf0f3c, 0xec99e9, 0xcf0f3c, 0xea98e9,
				0xcc003f, 0xe499ea, 0xce023d, 0xe59ee5, 0xce023d, 0xfe9fe5, 0xcf0132, 0xf9a1e8, 0xce0033, 0xf7a2ef, 0xcd0132, 0xf0a5ec, 0xce0033, 0x8fa6ed, 0xcd0132, 0x89a6ec, 0xcc0e33, 0x85a4d2, 0xcf0f30, 0x82a1d3, 0xcd1136, 0x9cbed5, 0xcf0f30, 0x9bbdd6, 0xcf0f30, 0x97bbd7, 0xcf0f30, 0x96bad6, 0xcd0d3e, 0x96bad6, 0xcb033e, 0xabb8d4, 0xcb033e, 0xaabfd7, 0xc9013c, 0xacc1d1, 0xc9013c, 0xafc0d1, 0xc8023f, 0xa0c1d0, 0xc90520, 0xa5c0cf, 0xcb073e, 0xbbc0cc, 0xca093d, 0xbec0cd, 0xc90a3f, 0xb3c6cd, 0xcd083e, 0x4fc6cc, 0xcc093f, 0x4ad9cc, 0xc20838, 0x49d9cb, 0xc70a3f, 0x55dec9, 0xc30b3d, 0x5addc8, 0xc10b3c, 0x61dcc9, 0xc3053e, 0x60dccb, 0xc4063d, 0x6cddc5, 0xc7003d, 0x69ddca, 0xd9033c, 0x6ae3cb, 0xde0233, 0x69e3c4, 0xd30033, 0x6ee3cb, 0xd10633, 0x13e3ca, 0xd00533, 0x18e2ca, 0xd10a30, 0x18e2ca,
				0xd20b31, 0x1ae2cd, 0xd90434, 0x18e0cc, 0xa7043b, 0x1be6cc, 0xa2043a, 0x1bdbce, 0xac3b38, 0x19e4cf, 0xa93a37, 0x3e7cd, 0xa63b37, 0x5e1cf, 0xa73b3a, 0x7e3c9, 0x9a353a, 0xfe1cf, 0x9c3239, 0x9e3ca, 0xab363a, 0x17d7cb, 0xc13a3e, 0x29c8ca, 0xd83b38, 0x2ec9cb, 0xda3924, 0x29d6ca, 0xda243a, 0x28d0cb, 0xc72339, 0x36d1cd, 0xc72339, 0x35d1cb, 0xc7233b, 0x36d0d5, 0xc72325, 0x35d1d7, 0xc72325, 0x35d1d7, 0xc72325, 0x35d1d7, 0xc72325, 0x35d1d7, 0xc72325, 0x35d1d7, 0xc72325, 0x35d1d7, 0xc72325, 0x35d1d7, 0xc72325, 0x35d1d7, 0xc72325, 0x35d1d7, 0xc72325, 0x35d1d1, 0xc72325, 0x35d1d7, 0xc72325, 0x35d1d5, 0xc72325, 0x35d1d7, 0xc72323, 0x37d2d6, 0xc72320, 0x28d1d9, 0xc72320 };
		System.arraycopy(aFor, 0, key, 69910, aFor.length);
	}

	private static void init235(int[] key) {
		int[] aFor = { 0x35d1d2, 0xc72320, 0x35d1d2, 0xc72320, 0x35d1d2, 0xc72320, 0x35d1d2, 0xc72320, 0x35d1d2, 0xc72320, 0x35d1d2, 0xc72320, 0x35d1d2, 0xc72320, 0x35d1d2, 0xc72320, 0x36d0d2, 0xc72320, 0x36d0d2, 0xc72320, 0x36d0d2, 0xc72320, 0x36d0d2, 0xc72320, 0x36d0d2, 0xc72320, 0x36d0d2, 0xc72320, 0x36d0d2, 0xc72320, 0x36d0d2, 0xc42220, 0x37d0d0, 0xc62121, 0x2bd0d5, 0xc62223, 0x2bd0d5, 0xd92320, 0x23d5d3, 0xd42e29, 0x4c5df, 0x940f3d, 0xd7aded, 0xc93a3d, 0xc5a8f2, 0xc83d21, 0xdea4f0, 0xc33823, 0xdfa5f7, 0xc33823, 0xdda5f7, 0xc23b22, 0xe2a6f7, 0xc33821, 0xe0a7f4, 0xc50623, 0xe2a6f4, 0xcb062c, 0xe0a6fa, 0xcd0422, 0xe2a6fb, 0xd20521, 0xe2a6fb, 0xd20522, 0xe0a1f8, 0xd30423, 0xe5a1ff, 0xd20722, 0xeaa1f9, 0xd30625, 0xefa1fe, 0xd20922, 0xeda0ff, 0xd20922, 0x93a0fe, 0xd10a23, 0x94a0fd,
				0xd10a23, 0x96a1fe, 0xde0d20, 0x92a1ff, 0xdf0c1f, 0x91a2ff, 0xde0d1e, 0x8ea3ff, 0xde0d1e, 0x8abdff, 0xdf0c1d, 0x8abdfd, 0xdc0f1c, 0x8abdfd, 0xdd0e1f, 0x85bafc, 0xdc0f18, 0x85bafc, 0xde0c19, 0x80baf1, 0xdf0d18, 0x80bafd, 0xdf0219, 0xbabefe, 0xd17c11, 0xb0c5f8, 0xfd6224, 0xcbf2ea, 0xd5892a, 0xddef9a, 0xdd8e34, 0xdce880, 0xdc8238, 0xdce981, 0xdc843b, 0xdcea82, 0xdc843b, 0xdcf481, 0xdc843b, 0xdcf586, 0xdc8638, 0xdcf286, 0xdc8638, 0xdcf385, 0xdc8638, 0xddf187, 0xdf8947, 0xdbf0f8, 0xdf8947, 0xd7f386, 0xdd8f45, 0xd0f181, 0xdd8f45, 0xd20f83, 0xc28e44, 0xd00f8c, 0xc38d45, 0xd70e8d, 0xc38d45, 0xd6098c, 0xc08c46, 0xd70a8d, 0xcf8d41, 0xd6058c, 0xcc8c42, 0xd7078f, 0xcc8c42, 0xd7008c, 0xcc8c42, 0xd0018d, 0xcd8f5d, 0xd01f8c, 0xcf8d5f, 0xef1e8d, 0xce8a5e, 0xec1f8a, 0xcf895f, 0xeb118a,
				0xce885c, 0xe91189, 0xc18b5f, 0xea1787, 0xc18b5f, 0xee1788, 0xdf8951, 0xec2988, 0xd98b53, 0xee2a88, 0xd78955, 0xec2d88, 0xd28857, 0x932e89, 0xd18956, 0x952e88, 0xd08657, 0x982fb7, 0xd28455, 0x9e29b1, 0xd08655, 0x8028b7, 0xd39952, 0x8028b7, 0xd49a51, 0x822eb6, 0xd49a51, 0x8c2eb6, 0xd7995e, 0x8c2eb6, 0xd1975c, 0x8e2db5, 0xee965f, 0x8f2ab6, 0xec945d, 0x882bb1, 0xec945d, 0x8a55b3, 0xed975c, 0x8554b3, 0xec9043, 0x8055b2, 0xed9342, 0x9d54b0, 0xec9d41, 0x9854b1, 0xef9e43, 0x9552b1, 0xe89f43, 0x6a51b1, 0xe99e42, 0x6c51b6, 0xe48042, 0x6f51b1, 0xe28342, 0x7350b7, 0xe68444, 0x7f52b1, 0xe48445, 0x4453b0, 0xe58b46, 0x475cb0, 0xe38646, 0x4b5dbe, 0xe18149, 0x4c5dbf, 0xfc8349, 0x4e5cbf, 0xfabd47, 0x4d5cb0, 0xf4be46, 0x495dbe, 0xf7b949, 0x365db1, 0xf4b849, 0x335eb1, 0xfbb948, 0x3251b2,
				0xf8b849, 0x3051b5, 0xf4b64f, 0x3552b7, 0x8ab640, 0x3755b6, 0x8bb743, 0x3356b6, 0x84b640, 0x3169b7, 0x80b64e, 0x2c6bb5, 0x8ab74d, 0x2e6dbb, 0x8db64d, 0x2d6ebe, 0xb1bb4c, 0x2768be, 0xb0ba4c, 0x2d69a3, 0x82b04c, 0x4856be, 0xaaa748, 0x4553bf, 0xb1a14c, 0x4450be, 0xb1a14c, 0x4350a3, 0xb2a14c, 0x4352bc, 0xb1a64f, 0x4054bb, 0xb1a64f, 0x4354bd, 0xb1a64d, 0x4055a3, 0xb1a653, 0x4055a1, 0xb1a755, 0x4355a7, 0xb1a755, 0x4355a7, 0xb1a755, 0x4355a7, 0xb1a755, 0x4355a7, 0xb1a755, 0x4355a7, 0xb1a755, 0x4355a7, 0xb1a755, 0x4355a7, 0xb1a755, 0x4355a7, 0xb1a755, 0x4355a1, 0xb1a755, 0x4355a7, 0xb1a755, 0x4355a5, 0xb1a755, 0x4355a7, 0xb2a454, 0x4255a1, 0xb2a457, 0x5d56ae, 0xb2a457 };
		System.arraycopy(aFor, 0, key, 70210, aFor.length);
	}

	private static void init236(int[] key) {
		int[] aFor = { 0x4056a5, 0xb2a457, 0x4056a5, 0xb2a457, 0x4056a5, 0xb2a457, 0x4056a5, 0xb2a457, 0x4056a5, 0xb2a457, 0x4056a5, 0xb2a457, 0x4056a5, 0xb2a457, 0x4056a5, 0xb2a457, 0x4357a5, 0xb2a457, 0x4357a5, 0xb2a457, 0x4357a5, 0xb2a457, 0x4357a5, 0xb2a457, 0x4357a5, 0xb2a457, 0x4357a5, 0xb2a457, 0x4357a5, 0xb2a457, 0x4357a5, 0xb1a557, 0x4257a7, 0xb1a557, 0x5e56a1, 0xb5a557, 0x5954a2, 0xa9a551, 0x5350a0, 0xa8ab59, 0x7445ab, 0xda9c41, 0xbb2f99, 0x96b457, 0x983a9c, 0x94ae4e, 0x82369c, 0x9ead4e, 0x85319d, 0x9ead4e, 0x80309a, 0x9ead4e, 0x81319a, 0xa1ac4f, 0x82339a, 0xa7924d, 0x810d9b, 0xa6ad4c, 0x8f0c9a, 0xa3ad4d, 0x8d0c95, 0xa2ae4c, 0x8d0c95, 0xbdaf4f, 0x8f0b95, 0xbcae4e, 0x8a0b92, 0xbcae4e, 0x840895, 0xbdaf49, 0x810892, 0xbdaf49, 0x830795, 0xbcae48, 0xfc0693, 0xbdaf4f, 0xf90692,
				0xbcac4c, 0xfb0791, 0xbcac4c, 0xf70093, 0xbaad73, 0xf40393, 0xbaad73, 0xf50093, 0xa5ae72, 0xf60192, 0xa3b070, 0xf60190, 0xa0b371, 0xf60190, 0xa1b272, 0xf60190, 0xaeb573, 0xf70097, 0xaeb573, 0xf0039b, 0xaeb573, 0xf00397, 0xafbb73, 0xca0794, 0xa0c67a, 0xc17f93, 0x8ed64d, 0xb7459c, 0x97385c, 0x9e5ff3, 0x9e3e5d, 0x9e5bee, 0x9e3156, 0x9e5aef, 0x9e3755, 0x9e59ec, 0x9e3755, 0x9e47ef, 0x9e3755, 0x9e46e8, 0x9e3556, 0x9e46e8, 0x9e3256, 0x9e47eb, 0x9e3256, 0x9e44e8, 0x9c3c28, 0x984597, 0x9c3c28, 0x9446e9, 0x9e3a2a, 0x9247e9, 0x9f392d, 0x9146e8, 0x81c72f, 0x9346e7, 0x80c42e, 0x9447e6, 0x80c42e, 0x9540e7, 0x80c42e, 0x9742e5, 0x8fc529, 0x964de4, 0x8fc529, 0x954fe5, 0x8ec428, 0x944fe5, 0x8fc32b, 0x934ee4, 0x8ec034, 0x9350e5, 0x8dc137, 0x9253e6, 0xb2c034, 0x9055e0, 0xb2c034, 0x9157e0,
				0xb5cf35, 0x9256e0, 0xbacc36, 0x9057e1, 0xbbcb39, 0x9557ee, 0xa4c937, 0x9769ee, 0xa3c834, 0x9469ef, 0xaccb33, 0x976fee, 0xabca30, 0xeb6fed, 0xaac933, 0xee6eed, 0xabc632, 0xe36fd2, 0xaac533, 0xe668d7, 0xabc634, 0xfb68d0, 0xa9d834, 0xfa69d1, 0xa9d834, 0xfc6bd2, 0xaadf35, 0xf26bd2, 0xa9dc38, 0xf26bd0, 0xaed339, 0xf169d0, 0x91d23a, 0xf06ed3, 0x93d038, 0xf76fd4, 0x93d038, 0xf610d5, 0x90d13b, 0xf713d5, 0x9fd03a, 0xf315cb, 0x9ed339, 0xf115c8, 0x81d23a, 0xf51bc8, 0x83d239, 0xfa19c8, 0x87d53b, 0xf818c8, 0x7ad63a, 0xff19ce, 0x79c93d, 0xf118c9, 0x7cc93d, 0xed1ac8, 0x79cf3d, 0xe11ac9, 0x7acc3d, 0xe41bc8, 0x45c33e, 0xe714c8, 0x44cc3f, 0xe316c8, 0x4aca3f, 0xe716c7, 0x49c832, 0xfb16c5, 0x48f632, 0xfe16c4, 0x46f43c, 0xfc17c5, 0x42f33c, 0xfd17cb, 0x3ff232, 0xf917cb, 0x3ef133, 0xf719c9,
				0x3ef133, 0xf618cf, 0x30ff35, 0xf21acc, 0x32ff34, 0x8f1cc2, 0x33fe37, 0x8a1cc1, 0x3cfc37, 0x8e23c1, 0x3ffc38, 0x9022c2, 0x38f93a, 0x9e20cc, 0x3dfb3a, 0x9d22cc, 0x4f63e, 0x9227d1, 0x9f43f, 0xa023d1, 0x1bfc3e, 0xce15cc, 0x26e738, 0xd212cf, 0x26e03c, 0xd410cf, 0x27e13b, 0xd513c9, 0x25e126, 0xd513c9, 0x27e738, 0xd615cc, 0x27e738, 0xd515ca, 0x27e73a, 0xd614ca, 0x27e73a, 0xd614c8, 0x27e63c, 0xd514ce, 0x27e63c, 0xd514ce, 0x27e63c, 0xd514ce, 0x27e63c, 0xd514ce, 0x27e63c, 0xd514ce, 0x27e63c, 0xd514ce, 0x27e63c, 0xd514ce, 0x27e63c, 0xd514ce, 0x27e63c, 0xd514c8, 0x27e63c, 0xd514ce, 0x27e63c, 0xd514cc, 0x27e63c, 0xd617cd, 0x27e63e, 0xd717cb, 0x27e63d, 0xc814c4, 0x27e63d };
		System.arraycopy(aFor, 0, key, 70510, aFor.length);
	}

	private static void init237(int[] key) {
		int[] aFor = { 0xd714cc, 0x27e63d, 0xd714cc, 0x27e63d, 0xd714cc, 0x27e63d, 0xd714cc, 0x27e63d, 0xd714cc, 0x27e63d, 0xd714cc, 0x27e63d, 0xd714cc, 0x27e63d, 0xd714cc, 0x27e63d, 0xd714cc, 0x27e63d, 0xd714cc, 0x27e63d, 0xd714cc, 0x27e63d, 0xd714cc, 0x27e63d, 0xd714cc, 0x27e63d, 0xd714cc, 0x27e63d, 0xd714cc, 0x27e63d, 0xd714cc, 0x26e53d, 0xd414d2, 0x27e622, 0xc815d6, 0x26e620, 0xcb17d4, 0x24e624, 0xd315d4, 0x29ec21, 0xc01dd2, 0xaf727, 0x8832c7, 0xb6ad0d, 0xa523ca, 0xabb71b, 0xb32fce, 0xafb51a, 0xb62fc9, 0xacb41d, 0xb728c8, 0xacb41d, 0xb229c9, 0x92b41c, 0xb12acb, 0x95b513, 0xb32ac5, 0x95b513, 0xbd2ac4, 0x948a1c, 0xb82bcb, 0x958913, 0xba2bca, 0x958913, 0xa42aca, 0x968e10, 0xa52bcb, 0x918d17, 0xa728cd, 0x908e16, 0xa929ca, 0x958e17, 0xab26cb, 0x958e17, 0xd526cc, 0x948f10, 0xd026cd,
				0x958c13, 0xd327cc, 0x948c13, 0xde27cd, 0x958b12, 0xd826f2, 0x968813, 0xd925f3, 0x898b12, 0xd83bf2, 0x8a8a13, 0xdf3bf3, 0x8a8a13, 0xdc38f2, 0x8a8a13, 0xdd39f1, 0x858d12, 0xdd39f1, 0x848c15, 0xda3afd, 0x878f18, 0xd939fc, 0x868118, 0xe53dfe, 0x82fd12, 0xe344f5, 0xb1e815, 0x8f70c1, 0xacf002, 0xa799b3, 0xa7f81d, 0xa79dae, 0xa7f718, 0xa79cae, 0xa7f019, 0xa79ea0, 0xa7f019, 0xa79fa0, 0xa7ef1a, 0xa79ea7, 0xa7ec1a, 0xa79fa4, 0xa7eb1a, 0xa79ea7, 0xa7eb1a, 0xa79da4, 0xa5e564, 0xa69dda, 0xa2e465, 0xa59da5, 0xafe166, 0xa39ca5, 0xafe166, 0xa19ea3, 0xae1e65, 0xbc9fad, 0xaf1d64, 0xbc9fa3, 0xa81c6b, 0xbc9fa3, 0xa91b6a, 0xbf9ea0, 0xa8186b, 0xb09fa7, 0xa9176a, 0xb39ea4, 0xa8146b, 0xb29fa6, 0xa91368, 0xb59ea7, 0xa81077, 0xb580a6, 0xab1174, 0xb682a7, 0xa81673, 0xb783a0, 0x971574, 0xb482a0,
				0x901a75, 0xb682a1, 0x911b74, 0xb880a3, 0x931c7b, 0xbd80ac, 0x8d1d74, 0xbf82ae, 0x8b2372, 0xbc82a9, 0x842075, 0xbf84a8, 0x832176, 0xc384ab, 0x822275, 0xc184aa, 0x85234a, 0xc28b95, 0x8b2174, 0xc08d97, 0x8d2374, 0xc28e97, 0x903e73, 0xc28e97, 0x913f72, 0xc48c95, 0x913f72, 0xc98b95, 0x933d7c, 0xc98b9b, 0x953372, 0xca899b, 0x953372, 0xf58898, 0x973574, 0xf38a98, 0x973574, 0xf2f599, 0x943477, 0xf3f698, 0x9b3568, 0xf2f198, 0x983469, 0xf6f398, 0x86346a, 0xf5fc9b, 0x83356a, 0xfafe9b, 0x873268, 0xf8ff9b, 0x78316f, 0xfbfe9c, 0x7e316e, 0xf6e09a, 0x7a3069, 0xebe39c, 0x783768, 0xe0e29c, 0x7a376f, 0xe4e09a, 0x7b386c, 0xdbef99, 0x78376e, 0xdfed99, 0x77366f, 0xdbed98, 0x75336d, 0xc4ee9b, 0x770e6c, 0xc1ee94, 0x760f63, 0xccec9a, 0x710f62, 0xceeb95, 0xf0f6d, 0xc9ea94, 0xe0c6e, 0xc6eb97,
				0xf036d, 0xc7ea91, 0x26a, 0xc3e490, 0x20269, 0xbce69e, 0x10568, 0xbbe69f, 0xd0669, 0xbfd99f, 0xd3967, 0xbde79f, 0x113c68, 0xb7e59e, 0x143f66, 0x8ae691, 0x133263, 0x8be38d, 0x293766, 0x91ea89, 0x5d0d7b, 0xbde28f, 0x50107a, 0xa6e68c, 0x55177e, 0xa5f88a, 0x55097f, 0xa4fb8b, 0x4b0a7b, 0xa4fb95, 0x550865, 0xa4f996, 0x550865, 0xa4f994, 0x55087b, 0xa4f994, 0x55087b, 0xa5f988, 0x55087b, 0xa5fa8a, 0x55087b, 0xa5fa8a, 0x55087b, 0xa5fa8a, 0x55087b, 0xa5fa8a, 0x55087b, 0xa5fa8a, 0x55087b, 0xa5fa8a, 0x55087b, 0xa5fa8a, 0x55087b, 0xa5fa8a, 0x55087b, 0xa4f988, 0x55087b, 0xa7fa89, 0x55087b, 0xa7fa8b, 0x560b64, 0xa7fa95, 0x560b66, 0xa6fa93, 0x560b65, 0xb9f99c, 0x560b65 };
		System.arraycopy(aFor, 0, key, 70810, aFor.length);
	}

	private static void init238(int[] key) {
		int[] aFor = { 0xa6f994, 0x560b65, 0xa6f994, 0x560b65, 0xa6f994, 0x560b65, 0xa6f994, 0x560b65, 0xa6f994, 0x560b65, 0xa6f994, 0x560b65, 0xa6f994, 0x560b65, 0xa6f994, 0x560b65, 0xa6f994, 0x560b65, 0xa6f994, 0x560b65, 0xa6f994, 0x560b65, 0xa6f994, 0x560b65, 0xa6f994, 0x560b65, 0xa6f994, 0x560b65, 0xa6f994, 0x560b65, 0xa6f994, 0x570865, 0xa6f88b, 0x540964, 0xa5fa96, 0x4a0964, 0xa7f894, 0x480964, 0xbcfa8b, 0x440d78, 0xb7f88a, 0x550f76, 0xc8da90, 0x997d5a, 0x82ed9f, 0x927f4f, 0x86eb9e, 0x917e4e, 0x89e79c, 0x937c48, 0x88e09d, 0x937c48, 0x8ee09b, 0x907d4f, 0xb1e399, 0x927d4e, 0xb7e39b, 0x917c4d, 0xb9e39a, 0x904342, 0xbce295, 0x91404d, 0xbfe195, 0x91404d, 0xa1e295, 0x90414c, 0xa2e596, 0x91404d, 0xa7e597, 0x91404d, 0xa9e696, 0x90414a, 0xace691, 0x91414a, 0xaee690, 0xee4e4b, 0xade697,
				0xe84c49, 0xade697, 0xe84c49, 0xa2e797, 0xe94b48, 0xa4e6a8, 0xe94b48, 0xa6e6a8, 0xe94b48, 0xb8fba8, 0xea4a49, 0xbffba9, 0xea4a49, 0xbffba9, 0xe94948, 0xbffba9, 0xe8484b, 0xb0fca8, 0xe9494c, 0xb2fcab, 0xef494e, 0xb2fcad, 0xed4449, 0x8fffac, 0xea4146, 0x88fbae, 0xdf4a4b, 0x9bd491, 0xbc5056, 0xb13be5, 0xb0584b, 0xb03efa, 0xb0574f, 0xb03df9, 0xb0514e, 0xb03ff7, 0xb0514e, 0xb03ef7, 0xb04e4d, 0xb03ff0, 0xb04d4d, 0xb03ef3, 0xb04a4d, 0xb03ef1, 0xb04b4c, 0xb03df2, 0xb14a4d, 0xb232f3, 0xb14a4d, 0xb6338d, 0xbf484f, 0xb4348d, 0xb8494e, 0xb5378a, 0xbab74c, 0xab378b, 0xb9b643, 0xaa3484, 0xb9b643, 0xad358b, 0xb8b142, 0xae3488, 0xb9b243, 0xa1358f, 0xb9b243, 0xa03a8e, 0xbab340, 0xa0388d, 0xbbb443, 0xa7398c, 0xbbb443, 0xa73b93, 0xbaab42, 0xa63990, 0xbbaa43, 0xa53e91, 0xbaab42, 0x993c96,
				0xbda443, 0x9b3c97, 0xbca542, 0x953e95, 0xbea24d, 0x903e9a, 0xa0a342, 0x923c98, 0xa19c43, 0x973c99, 0xaf9e45, 0x953d99, 0xae9944, 0x903f99, 0xd19947, 0x923f98, 0xd69878, 0x903fa6, 0xd89646, 0x923da4, 0xde9040, 0x913da3, 0xc38d47, 0x913da3, 0xc38d47, 0x973fa1, 0xc28c46, 0x953fa0, 0xcf8949, 0x953fae, 0xc98747, 0x973eaf, 0xc88446, 0xa83fac, 0xca8240, 0xa93cab, 0xcd8347, 0xa843aa, 0xce8244, 0xa940ab, 0xc1835b, 0xa847ab, 0xc2825a, 0xaf44aa, 0xc1835b, 0xb24baa, 0xc7815b, 0xbe4aa8, 0xc4865a, 0xba4aa8, 0xc5875b, 0x4648a8, 0xc3875c, 0x4457af, 0xcf865c, 0x4155a8, 0xd2815c, 0x4755a9, 0xde835c, 0x4355a8, 0xdc8d5e, 0x7c5aab, 0xde835c, 0x7959ab, 0xd1825d, 0x7d59aa, 0xd0855c, 0x6158aa, 0xd3875c, 0x6567a4, 0xd2865d, 0x6865a4, 0xd5865e, 0x6a65a7, 0xab815f, 0x6e65a7, 0xa8805e, 0x6067a7,
				0xa98f5d, 0x6065a0, 0xa78d5b, 0x636aa0, 0xa28c59, 0x6269a1, 0xd98d57, 0x6069a0, 0xd58b57, 0x676baf, 0xd6b458, 0x676baf, 0xc9b759, 0x616dac, 0xc2b754, 0x5e6eac, 0xc9ba5d, 0x5269b3, 0xfeb05d, 0x3853ac, 0xe2be58, 0xa4cac, 0xfbbe58, 0xe4dac, 0xfcbd5d, 0x134da9, 0xfdbc5f, 0x134eaa, 0xfdbc5b, 0x124db5, 0xe2bf5a, 0x134eab, 0xe2bf58, 0x134ea9, 0xe2bf46, 0x134ea9, 0xe2bf46, 0x124eb5, 0xe2bf40, 0x124eb3, 0xe2bc42, 0x124eb3, 0xe2bc42, 0x124eb3, 0xe2bc42, 0x124eb3, 0xe2bc42, 0x124eb3, 0xe2bc42, 0x124eb3, 0xe2bc42, 0x124eb3, 0xe2bc42, 0x124eb3, 0xe2bc42, 0x134db1, 0xe2bc42, 0x134db3, 0xe2bc42, 0x134dad, 0xe2bc42, 0x134db3, 0xe2bc40, 0x124db5, 0xe2bc43, 0xd4eba, 0xe2bc43 };
		System.arraycopy(aFor, 0, key, 71110, aFor.length);
	}

	private static void init239(int[] key) {
		int[] aFor = { 0x124eb2, 0xe2bc43, 0x124eb2, 0xe2bc43, 0x124eb2, 0xe2bc43, 0x124eb2, 0xe2bc43, 0x124eb2, 0xe2bc43, 0x124eb2, 0xe2bc43, 0x124eb2, 0xe2bc43, 0x124eb2, 0xe2bc43, 0x124eb2, 0xe2bc43, 0x124eb2, 0xe2bc43, 0x124eb2, 0xe2bc43, 0x124eb2, 0xe2bc43, 0x124eb2, 0xe2bc43, 0x124eb2, 0xe2bc43, 0x124eb2, 0xe2bc43, 0x124eb2, 0xe3bf43, 0x124fad, 0xe3bf43, 0x134dac, 0xe3bf43, 0x134dac, 0xe3bf43, 0x114db3, 0xe7b840, 0x124caf, 0xfdb152, 0x4951b9, 0x23e66a, 0xc79a5, 0x1bee71, 0xa7fbf, 0x1aef72, 0xc78a3, 0x15e270, 0xe7ea5, 0x15e270, 0x87ea3, 0x16e377, 0x377da1, 0x15e077, 0x307ea2, 0x16e174, 0x317fa2, 0x19e075, 0x3240a3, 0x1ee174, 0x3343ac, 0x1de274, 0x2d40ac, 0x1ce375, 0x2e47af, 0x1ce375, 0x2947ae, 0x1fe272, 0x2744a9, 0x1ee375, 0x2244ae, 0x1fe375, 0x2145ae, 0x1ee272, 0x5f4bae, 0x1de173,
				0x584bad, 0x1de173, 0x544bae, 0x1ee070, 0x554caf, 0x19e14f, 0x544c90, 0x1ae270, 0x4a4daf, 0x18fc4e, 0x4c4c91, 0x18fc4e, 0x4d4dae, 0x18fc4e, 0x4e4eaf, 0x19fd4d, 0x4149ae, 0x18fc4a, 0x4349ad, 0x19fc49, 0x4449aa, 0x1afe49, 0x7a47aa, 0x19fb4c, 0x7b41a4, 0x20f44d, 0x695792, 0x42df59, 0x4cb3ed, 0x4dd043, 0x4db6f2, 0x4ddf47, 0x4db5f1, 0x4dd946, 0x4db4fe, 0x4dda47, 0x4db5fe, 0x4dc544, 0x4db4f9, 0x4dc644, 0x4db5fa, 0x4dc144, 0x4db5f8, 0x4dc144, 0x4db7fa, 0x4cc045, 0x4fb8fb, 0x4cc045, 0x4bb985, 0x42c247, 0x49be85, 0x45c346, 0x48bd82, 0x473d44, 0x56bd83, 0x443c4b, 0x57be8c, 0x443c4b, 0x57be8c, 0x423a45, 0x54bf8f, 0x433944, 0x54bf8f, 0x4c3843, 0x55b08e, 0x4f3940, 0x55b28d, 0x4f3940, 0x54b58e, 0x483841, 0x54b791, 0x492740, 0x55b592, 0x482641, 0x56b293, 0x492740, 0x6ab094, 0x4e2841,
				0x6bbf92, 0x4c2647, 0x64bc91, 0x4f2049, 0x62bb9f, 0x522647, 0x63b89e, 0x501845, 0x66b89f, 0x5e1a43, 0x64b99f, 0x5f1d42, 0x62b99c, 0x221d43, 0x61bb9c, 0x221d43, 0x66ba9d, 0x20137d, 0x6ab89f, 0x21147c, 0x6eb99f, 0x3f167a, 0x6da69e, 0x3f167a, 0x6ba49c, 0x3f167a, 0x68a59c, 0x311074, 0x6ba693, 0x371e7a, 0x6aa792, 0x341d7b, 0x54a691, 0x361b7d, 0x55a596, 0x361b7d, 0x53db90, 0x361b7d, 0x50da93, 0x37187c, 0x5fdb93, 0x351e62, 0x58d892, 0x361f63, 0x45d792, 0x311e62, 0x49d490, 0x331862, 0x4dd490, 0x321963, 0xb0d791, 0x351865, 0xb2c896, 0x391965, 0xb7ca91, 0x241e65, 0xb1ca90, 0x291f64, 0xb4c990, 0x2a1e65, 0x8ac990, 0x2b1166, 0x8dc890, 0x251366, 0x89c891, 0x241467, 0x95c991, 0x271766, 0x91f79e, 0x261667, 0x9cf59e, 0x211664, 0x9ef59d, 0x5f1165, 0x9af59d, 0x5c1064, 0x9bf69e, 0x521e62,
				0x9bf49f, 0x531d63, 0x97fa98, 0x551d62, 0x95f998, 0x2e1d60, 0x97fe99, 0x211d61, 0x93fd99, 0x22226e, 0x93ff98, 0x3c226d, 0x95f99b, 0x37206c, 0xacf89b, 0x352e6e, 0x95f89e, 0x23276d, 0xeccd98, 0x83c6f, 0xe7cf99, 0x163e68, 0xe3cf98, 0x113f69, 0xfecf9c, 0x133d64, 0xfecf91, 0x103d60, 0xe0cf8d, 0xf3e61, 0xfecf90, 0xf3e63, 0xfecf92, 0xf3e7d, 0xfecf92, 0xf3e7d, 0xffcf88, 0x113d7d, 0xe1cc8e, 0x113e7f, 0xe1cc8e, 0x113e7f, 0xe1cc8e, 0x113e7f, 0xe1cc8e, 0x113e7f, 0xe1cc8e, 0x113e7f, 0xe1cc8e, 0x113e7f, 0xe1cc8e, 0x113e7f, 0xe1cc8e, 0x113e7f, 0xe0cf8c, 0x113e7f, 0xe0cf8e, 0x113e7f, 0xe0cf90, 0x113e7f, 0xe0cf8e, 0x113e7d, 0xe1cf88, 0x113e7e, 0xfecc87, 0x113e7e };
		System.arraycopy(aFor, 0, key, 71410, aFor.length);
	}

	private static void init240(int[] key) {
		int[] aFor = { 0xe1cc8f, 0x113e7e, 0xe1cc8f, 0x113e7e, 0xe1cc8f, 0x113e7e, 0xe1cc8f, 0x113e7e, 0xe1cc8f, 0x113e7e, 0xe1cc8f, 0x113e7e, 0xe1cc8f, 0x113e7e, 0xe1cc8f, 0x113e7e, 0xe1cc8f, 0x113e7e, 0xe1cc8f, 0x113e7e, 0xe1cc8f, 0x113e7e, 0xe1cc8f, 0x113e7e, 0xe1cc8f, 0x113e7e, 0xe1cc8f, 0x113e7e, 0xe1cc8f, 0x113e7e, 0xe1cc8f, 0x103d7e, 0xe3cc8c, 0x113c7d, 0xe3cd92, 0x123f7f, 0xe3ce90, 0x123f7f, 0xe0cd8d, 0x133e7c, 0xe6ca93, 0x1e356d, 0xd6dc83, 0x5e1b5a, 0x13b582, 0x3a1454, 0x2f879a, 0x201657, 0x348087, 0x2d1a54, 0x368681, 0x2b1d54, 0x368681, 0x281a57, 0x378482, 0x161a54, 0x338481, 0x161a52, 0x318484, 0x191b53, 0x30bb8b, 0x1a1a52, 0x36bb85, 0x181a52, 0x36bb85, 0x6195d, 0x37ba84, 0x51e5e, 0x30ba85, 0x51e5e, 0x32bb84, 0xa1d5f, 0x31bb83, 0xa1d59, 0x37ba82, 0x81d5e, 0x49b480, 0xb1e5d,
				0x4eb483, 0xb1e5d, 0x4cb580, 0x61e5e, 0x4db281, 0x11f61, 0x4cb2be, 0x21c5e, 0x52b2bf, 0x3025f, 0x57b2be, 0x30261, 0x57b2be, 0x2035e, 0x54b1bf, 0x3025d, 0x5bb6be, 0x2035a, 0x59b6bd, 0x30359, 0x5eb6ba, 0x159, 0x5fb9bb, 0x3d025e, 0x5ebeb6, 0x1095f, 0x4daebf, 0x632474, 0x734ac0, 0x72296e, 0x734cdd, 0x722468, 0x724ede, 0x72226b, 0x734fd3, 0x73216a, 0x734fd3, 0x733f69, 0x724ed4, 0x723f69, 0x724cd7, 0x723869, 0x724cd5, 0x723869, 0x724dd4, 0x733a6b, 0x714cd4, 0x72346a, 0x744cab, 0x7d3769, 0x764bab, 0x7a3668, 0x7748ac, 0x793769, 0x68b7ae, 0x7a3666, 0x69b4a1, 0x7a3666, 0x69b4a1, 0x7c3068, 0x6ab5a2, 0x7d3369, 0x6ab5a2, 0x72326e, 0x6bbaa3, 0x71306f, 0x6bbba2, 0x71306f, 0x6abca1, 0x76316e, 0x6abebe, 0x772e6f, 0x6bbcbd, 0x762f6e, 0x68bbbc, 0x772e6f, 0x54b9bb, 0x70216e, 0x55b6bd,
				0x732e69, 0x5bb4bf, 0x702867, 0x5db3b1, 0x722f66, 0x43b1bf, 0x701164, 0x46b1be, 0x7e1362, 0x44b0bf, 0x7f1462, 0x42b0bc, 0x7c1563, 0x3db3bd, 0x7e1562, 0x3ab2bc, 0x7f1a63, 0x35b181, 0x7e1d62, 0x30b081, 0x611f64, 0x33af80, 0x611f64, 0x35ad82, 0x611f64, 0x36ac82, 0x6f196a, 0x35af8d, 0x6e1865, 0x33a18d, 0x6d1b64, 0xda08e, 0x6f1d62, 0xca389, 0x6f1d62, 0xba28e, 0x6e6263, 0x8a38d, 0x6f6162, 0x7a28d, 0x6e667d, 0x3a08d, 0x6d677c, 0x1cae8d, 0x68677f, 0x1fad8d, 0x65617f, 0x18ac8d, 0x67617e, 0xe5af8c, 0x66607f, 0xe1b08c, 0x6a617f, 0xe4b38a, 0x75607f, 0xe0b48a, 0x78617e, 0xe3b788, 0x7d607d, 0xe2b888, 0x43607e, 0xe7ba88, 0x40607f, 0xe9bb89, 0x44677f, 0xebba88, 0x59647f, 0xef8486, 0x58657f, 0xe28784, 0x59637e, 0xe68087, 0x266370, 0xe28789, 0x246270, 0xe3848a, 0x2a6c76, 0xe3868b, 0x2b6f77,
				0xec888b, 0x2f6e71, 0xef8b89, 0x526871, 0xe88b88, 0x506972, 0xe4898b, 0x55547d, 0xe4898b, 0x54577d, 0xfd8b8a, 0x5c527e, 0xfd8886, 0x5c5070, 0xf18a81, 0x336975, 0xe88780, 0x47377, 0xf68082, 0x57170, 0xf49e80, 0x66e73, 0xf69f85, 0x186e73, 0xf79d85, 0x186e77, 0xe89c98, 0x76d76, 0xf69c87, 0x76d74, 0xf69c85, 0x76d74, 0xf69c9b, 0x76d6a, 0xf79c9f, 0x76d6a, 0xf79c99, 0x76e68, 0xf79c99, 0x76e68, 0xf79c99, 0x76e68, 0xf79c99, 0x76e68, 0xf79c99, 0x76e68, 0xf79c99, 0x76e68, 0xf79c99, 0x76e68, 0xf79c99, 0x76e68, 0xf69f9b, 0x76e68, 0xf69f99, 0x76e68, 0xf69f87, 0x76e68, 0xf69f99, 0x76e6a, 0xf79f9f, 0x76e69, 0xe89c90, 0x76e69 };
		System.arraycopy(aFor, 0, key, 71710, aFor.length);
	}

	private static void init241(int[] key) {
		int[] aFor = { 0xf69f9a, 0x76e69, 0xf69f9a, 0x76e69, 0xf69f9a, 0x76e69, 0xf69f9a, 0x76e69, 0xf69f9a, 0x76e69, 0xf69f9a, 0x76e69, 0xf69f9a, 0x76e69, 0xf69f9a, 0x76e69, 0xf69f9a, 0x76e69, 0xf69f9a, 0x76e69, 0xf69f9a, 0x76e69, 0xf69f9a, 0x76e69, 0xf69f9a, 0x76e69, 0xf69f9a, 0x76e69, 0xf69f9a, 0x76e69, 0xf69f9a, 0x76e69, 0xf59e9c, 0x1716f, 0xf4809d, 0x7072, 0xf28083, 0x37172, 0xf28081, 0x37170, 0xf68582, 0xe7979, 0xd39696, 0x7e4e77, 0xaf0ae, 0x4e5a7c, 0x5bc8b4, 0x525979, 0x42cca9, 0x5b577c, 0x42c0ae, 0x5f5b78, 0x41c7a1, 0x595e72, 0x44c0a5, 0x5b5e70, 0x7ec0a3, 0x585e71, 0x7fc0a7, 0x575f7e, 0x7fffa2, 0x575e78, 0x7bffaf, 0x565f79, 0x79fda1, 0x565f78, 0x66fca2, 0x575879, 0x64fda2, 0x505b7e, 0x67fda3, 0x505b78, 0x69fca4, 0x555b79, 0x69fca4, 0x545b7f, 0x6af3a3, 0x555a7e, 0x17f0a1, 0x525a7f,
				0x15f1a2, 0x5d5d7c, 0x17f6a2, 0x5c5a7d, 0x17f6a2, 0x5b587d, 0x14f79c, 0x44477e, 0x15e89c, 0x47597d, 0x15e89c, 0x465a7e, 0x10e89d, 0x475b79, 0x1fef9a, 0x465a7e, 0x1fef98, 0x45597f, 0x1eef9a, 0x435a79, 0x1ded9a, 0x7c5579, 0x1fef9c, 0x7b5376, 0x2ffd95, 0x1a7258, 0xf00e0, 0x86753, 0xb03e0, 0x96455, 0x90ee1, 0x96552, 0x909e5, 0x9645f, 0x90ae6, 0x97a5c, 0x80be7, 0x8795c, 0x80be7, 0x8795c, 0x80de1, 0x8795c, 0x80de3, 0x97823, 0x80de3, 0xb7a23, 0xe03e7, 0x77823, 0xc03e0, 0x17f23, 0xe01e6, 0x1e7e20, 0xe01e6, 0x1f8121, 0xd00e7, 0x1f8121, 0xb02e9, 0x1e8620, 0x800e8, 0x1e8620, 0x901e9, 0x108822, 0xa02ee, 0x138b25, 0xa01e9, 0x108a26, 0x906eb, 0x138b25, 0x805ea, 0x15953b, 0x805ea, 0x169438, 0x906e9, 0x29953b, 0xb01e9, 0x28943a, 0xd01ee, 0x2b973b, 0xc00ed, 0x259a3b, 0xf01ee, 0x219d39,
				0x1003e0, 0x229c3a, 0x1703e1, 0x20a23a, 0x1a01e7, 0x21a539, 0x1d00e7, 0x23a538, 0x1c02e6, 0x5ea539, 0x1b0dd8, 0x5da43a, 0x170fd8, 0x5ca33b, 0x110fd9, 0x5fa138, 0xf11db, 0x5da33e, 0xe12db, 0x5aa03d, 0xf13db, 0x59a73c, 0x12da, 0x5aa43d, 0x61cda, 0x58a633, 0x381dd9, 0x59a132, 0x3a1fd9, 0x5ea035, 0x3b1dde, 0x5ca233, 0x3563dc, 0x5fa12c, 0x3465dc, 0x5fa12c, 0x3364c3, 0x5ea233, 0x316ac3, 0x40a332, 0x3368c3, 0x45a333, 0x3f6fc2, 0x42a230, 0xc36dc5, 0x47bd31, 0xc172c3, 0x4ba231, 0xc673c5, 0x57a030, 0xc375c5, 0x55a031, 0xcf77c7, 0x53a032, 0xce76c1, 0x6ea134, 0xcc7bc1, 0x69a036, 0xc07bc0, 0x6ca035, 0xc37dc2, 0x73a334, 0xc743cd, 0x73a235, 0xc443cc, 0x7ea035, 0xc343cd, 0x7ca73a, 0xb843c3, 0x7ea439, 0xb643c2, 0x7fab3e, 0xb542c5, 0x7dab3f, 0xba43c4, 0x7ea43e, 0xbc41c6, 0x3a531, 0xbe47cd,
				0x3a531, 0xbb45c8, 0x99a3e, 0xa645c8, 0xaa530, 0xac79c8, 0xea13c, 0xab79cf, 0x1aa23c, 0xdb42ce, 0xfa43c, 0xe94bc8, 0x1abf30, 0xef4ac7, 0x1ebb34, 0xef4ac7, 0x1ebb34, 0xef4bc1, 0x1eb937, 0xef4bc3, 0x1eb937, 0xec4bc5, 0x1eb937, 0xef48c4, 0x1eb937, 0xef48c4, 0x1eb937, 0xef48c6, 0x1eb935, 0xef48c6, 0x1eb935, 0xef48c6, 0x1eb935, 0xef48c6, 0x1eb935, 0xef48c6, 0x1eb935, 0xef48c6, 0x1eb935, 0xef48c6, 0x1eb935, 0xef48c6, 0x1eb935, 0xef48c6, 0x1eb935, 0xef48c6, 0x1eb935, 0xec4bc1, 0x1eb935, 0xec4bc7, 0x1eb935, 0xec4bc5, 0x1eb935, 0xef48c4, 0x1eb937, 0xee48c2, 0x1fba35, 0xf048cc, 0x1fba35 };
		System.arraycopy(aFor, 0, key, 72010, aFor.length);
	}

	private static void init242(int[] key) {
		int[] aFor = { 0xee4bc6, 0x1fba35, 0xee4bc6, 0x1fba35, 0xee4bc6, 0x1fba35, 0xee4bc6, 0x1fba35, 0xee4bc6, 0x1fba35, 0xee4bc6, 0x1fba35, 0xee4bc6, 0x1fba35, 0xee4bc6, 0x1fba35, 0xee4bc6, 0x1fba35, 0xee4bc6, 0x1fba35, 0xee4bc6, 0x1fba35, 0xee4bc6, 0x1fba35, 0xee4bc6, 0x1fba35, 0xee4bc6, 0x1fba35, 0xee4bc6, 0x1fba35, 0xee4bc6, 0x1fba35, 0xed4ac0, 0x1fba35, 0xeb4ac4, 0x1fba2b, 0xed4ada, 0x1cbb2b, 0xed4ad8, 0x1cbb2b, 0xee4bda, 0x18b32d, 0xf240df, 0x3ea833, 0xa47ad0, 0xc0cd07, 0xea57cf, 0xfac605, 0xf552c8, 0xe7c51a, 0xf152cb, 0xeace1d, 0xf652c4, 0xedc91c, 0xf356c5, 0xecc810, 0xce56c2, 0xebc811, 0xcd57c7, 0xebc81f, 0xce68c4, 0xe9c81d, 0xc069cb, 0xecc81d, 0xc269c5, 0xecc81d, 0xc36ac4, 0xf3c91e, 0xc16dc4, 0xf2c81f, 0xc46dc3, 0xf2c81f, 0xca6ec4, 0xf3c918, 0xcf6ec5, 0xf2c61b, 0xcd6fc6,
				0xf2c61b, 0xb36fc5, 0xf1c518, 0xb46fc6, 0xf3c41b, 0xb96fc5, 0xf2c31a, 0xb96fc5, 0xf5c225, 0xbb6cc5, 0xf4c324, 0xa46dc5, 0xf5c227, 0xa472c7, 0xf6c326, 0xa273c7, 0xf7c225, 0xa071c7, 0xf8c524, 0xa170c2, 0xfbc625, 0xa073c2, 0xfbc527, 0xa473c4, 0xc5cb27, 0xa177c3, 0xc4c929, 0x9e78cf, 0xa5ed1e, 0xb99aa0, 0xb5f316, 0xb697a5, 0xb6f216, 0xb79ba4, 0xb6f710, 0xb69ba7, 0xb7f71d, 0xb799a4, 0xb6f61e, 0xb686a4, 0xb7f71f, 0xb785a4, 0xb6f618, 0xb682a5, 0xb6f618, 0xb682a7, 0xb7f767, 0xb682a7, 0xb5f565, 0xb08ca1, 0xb8f662, 0xb38da1, 0xbef162, 0xb18fa7, 0xa1f061, 0xb18fa7, 0xa1f061, 0xb371a7, 0xa1f061, 0xb272a6, 0xa7f66f, 0xb273a8, 0xa7f66f, 0xb071a6, 0xa9f86d, 0xb372a7, 0xa9f86b, 0xb072a5, 0xaaf96a, 0xb375a7, 0xa9f869, 0xb276a6, 0xaef976, 0xb369a7, 0xadf875, 0xb26aa4, 0x92f976, 0xb16ca5,
				0x92f976, 0xb76ca2, 0x91fa77, 0xb66da1, 0x9ff479, 0xb56fae, 0x99f279, 0xa86ca0, 0x9af37a, 0xaf6ca1, 0x98cd7c, 0xa16fa0, 0x9acb7e, 0xa16fa3, 0x9dca7d, 0xa26da3, 0xe2c57c, 0xa76d9d, 0xe1c47f, 0xab6f9d, 0xe0c37e, 0xad6f9c, 0xe3c17d, 0xb3719e, 0xe2c07a, 0xb1719f, 0xe5c379, 0xb0709f, 0xe6c478, 0xbf719e, 0xe5c779, 0xb97f9e, 0xe7c577, 0x877e9d, 0xe6c276, 0x857c9d, 0xe1c371, 0x847e9a, 0xe3c177, 0x8b0199, 0xe2c076, 0x880399, 0xe3c769, 0x8e0199, 0xe0c668, 0x8f0e98, 0xffc769, 0x8c0c98, 0xfac76a, 0x820b9b, 0xffc669, 0x7f089d, 0xfbd869, 0x7d179b, 0xf5c669, 0x78179d, 0xf7c46b, 0x64179d, 0xf1c16b, 0x68179e, 0xf3cf69, 0x6f189c, 0xf0c069, 0x521a9c, 0xf6c06a, 0x511a9f, 0xfbc668, 0x541b9f, 0xe5c466, 0x51249f, 0xe5c567, 0x52249e, 0xebc767, 0x56249f, 0xe9c766, 0x28239e, 0xedc567, 0x2a239d,
				0xe3cb61, 0x29229a, 0xe0ca60, 0x27229b, 0xe1c561, 0x232099, 0xe3c36e, 0x5c2294, 0xe2c068, 0x5b2192, 0xe8c165, 0x46219c, 0xedff65, 0x482492, 0xecf360, 0x402a90, 0xfdf461, 0x2c1093, 0xcdfc61, 0x200d95, 0xd4f963, 0x270a96, 0xd6fb65, 0x270a96, 0xd6fb65, 0x270a96, 0xd6fb65, 0x240991, 0xd6fb65, 0x240991, 0xd5f862, 0x240991, 0xd5f862, 0x240991, 0xd5f862, 0x240991, 0xd5f862, 0x240991, 0xd5f862, 0x240991, 0xd5f862, 0x240991, 0xd5f862, 0x240991, 0xd5f862, 0x240991, 0xd5f862, 0x240991, 0xd5f862, 0x240991, 0xd5f862, 0x240991, 0xd5f862, 0x240991, 0xd5f862, 0x240991, 0xd6fb65, 0x240997, 0xd6fb65, 0x240995, 0xd5f87a, 0x24098b, 0xd5f878, 0x25098d, 0xd4fb7a, 0x3b0983, 0xd4fb7a };
		System.arraycopy(aFor, 0, key, 72310, aFor.length);
	}

	private static void init243(int[] key) {
		int[] aFor = { 0x250a89, 0xd4fb7a, 0x250a89, 0xd4fb7a, 0x250a89, 0xd4fb7a, 0x250a89, 0xd4fb7a, 0x250a89, 0xd4fb7a, 0x250a89, 0xd4fb7a, 0x250a89, 0xd4fb7a, 0x250a89, 0xd4fb7a, 0x250a89, 0xd4fb7a, 0x250a89, 0xd4fb7a, 0x250a89, 0xd4fb7a, 0x250a89, 0xd4fb7a, 0x250a89, 0xd4fb7a, 0x250a89, 0xd4fb7a, 0x250a89, 0xd4fb7a, 0x250a89, 0xd4fb7a, 0x240a8f, 0xd4fb7c, 0x250a8d, 0xd4fb62, 0x240993, 0xcafb60, 0x240995, 0xd4f860, 0x250991, 0xd6fa62, 0x240c97, 0xc2f46b, 0x2139d, 0x89d87b, 0xd971aa, 0xfee46c, 0xeb72a1, 0xe2e36a, 0xed75a4, 0xf8ef77, 0xe075a3, 0xfdeb7b, 0xdd75a2, 0xc3ee77, 0xdc72a1, 0xfeef77, 0xda70af, 0xfed079, 0xda70af, 0xfed07b, 0xd872ad, 0xf1d07a, 0xdc72a2, 0xf2d37a, 0xdd71a3, 0xedd279, 0xdf76a3, 0xecd378, 0xda76a4, 0xecd378, 0xdb76a2, 0xe3d079, 0xdf77a4, 0xe2df7a, 0xdd76a7,
				0xe2df7a, 0xa275a4, 0xe3dc78, 0xa775a5, 0xe1df79, 0xa674a4, 0xefd97b, 0xa475a4, 0xe8d844, 0xa5759b, 0xebdb7b, 0xa5759b, 0xebdb7b, 0xbb74a4, 0xeac444, 0xb96ba4, 0xeddb45, 0xb86aa7, 0xeed844, 0xb66ca7, 0xefd943, 0xb46ca4, 0xefda41, 0xb16ea2, 0xd1d940, 0xb565a4, 0xd2a548, 0x8c13a0, 0xcf8d77, 0xe80eb1, 0xfc7c0d, 0xfa1bb9, 0xfa7808, 0xfa1eb9, 0xfa770a, 0xfa1bbd, 0xfb7707, 0xfb19bc, 0xfb7707, 0xfb07bb, 0xfb7707, 0xfb05bc, 0xfb7600, 0xfb05bc, 0xfb7101, 0xfb05be, 0xfb7101, 0xfa04c1, 0xf97303, 0xfc0ac7, 0xf47004, 0xfe0ac6, 0xf37605, 0xfd0bc1, 0xf27504, 0xe20ac2, 0xf27504, 0xe3f5c1, 0xf17407, 0xe2f6c0, 0xf67508, 0xe3f0cf, 0xf67508, 0xe1f2c1, 0xf87b0a, 0xe2f1c6, 0xf87b0a, 0xe1f1c4, 0xf87b0a, 0xe1f7c7, 0xfb7a09, 0xe0f4c6, 0xfc7b16, 0xe1ebc7, 0xff7a15, 0xe0e8c4, 0xc07b16, 0xe3eec5,
				0xc77811, 0xe3eec5, 0xc67910, 0xe1eec6, 0xc8771e, 0xe2ecc9, 0xc97011, 0xf9edc9, 0xcb7213, 0xfeedc8, 0xc84d14, 0xf1efc8, 0xcb4c15, 0xf0e8c8, 0xcc4d16, 0xf2ebcb, 0xb24314, 0xf6e4f4, 0xb04d16, 0xf9e7f7, 0xb24b14, 0xffe7f6, 0xb14a15, 0xe1faf6, 0xb04b12, 0xe2fbf6, 0xb14a13, 0xe4f9f5, 0xb24d12, 0xeaf9f7, 0xb04f10, 0xecf7f7, 0xb14e1f, 0xeef4f6, 0x8e4f1c, 0xecf2f6, 0x8f4c1d, 0xebf3f1, 0x8f4c1d, 0xe78cf3, 0x8f4c1d, 0xe68ef3, 0x8c4d1c, 0xe088ed, 0x8e4f1c, 0xe088f3, 0x904102, 0xe38af3, 0x954101, 0xed8df0, 0x904103, 0x108ff7, 0x934004, 0x158ff6, 0x925f07, 0x1f8ef3, 0x905d05, 0x38ef3, 0x975b06, 0xe8df3, 0x945a05, 0x88df0, 0x975505, 0x368cf1, 0x955504, 0x338cf0, 0x9a5706, 0x358af1, 0x845508, 0x378af0, 0x846a07, 0x328aff, 0x8a6807, 0x368af0, 0x886808, 0x498cf0, 0x8b6909, 0x4d8ef3,
				0x8a6608, 0x428ff4, 0x8a6608, 0x428ff4, 0x85670f, 0x4681f6, 0x87650e, 0x4786f7, 0xf9640d, 0x4085f7, 0xf5670e, 0x5a86f4, 0xf05b0c, 0x5980f8, 0xf55a09, 0x4c84f8, 0x86600b, 0x598dfd, 0xb37f08, 0x428dfc, 0xb17e0f, 0x438cfb, 0xac7c09, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cfb, 0xad7d08, 0x5c8cf9, 0xad7d08, 0x5c8ce7, 0xad7d08, 0x5c8cf9, 0xad7d0a, 0x5d8cff, 0xad7d09, 0x428ff0, 0xad7d09 };
		System.arraycopy(aFor, 0, key, 72610, aFor.length);
	}

	private static void init244(int[] key) {
		int[] aFor = { 0x5c8cfa, 0xad7d09, 0x5c8cfa, 0xad7d09, 0x5c8cfa, 0xad7d09, 0x5c8cfa, 0xad7d09, 0x5c8cfa, 0xad7d09, 0x5c8cfa, 0xad7d09, 0x5c8cfa, 0xad7d09, 0x5c8cfa, 0xad7d09, 0x5c8cfa, 0xad7d09, 0x5c8cfa, 0xad7d09, 0x5c8cfa, 0xad7d09, 0x5c8cfa, 0xad7d09, 0x5c8cfa, 0xad7d09, 0x5c8cfa, 0xad7d09, 0x5c8cfa, 0xad7d09, 0x5c8cfa, 0xac7d09, 0x5c8cfc, 0xb27e0f, 0x438ffe, 0xb37d11, 0x438fe0, 0xad7d13, 0x408fe6, 0xae7e10, 0x5c8ce4, 0xad6314, 0x5997e0, 0xad6b1f, 0x7698e0, 0xc24712, 0x4183f0, 0x102924, 0x38b7f4, 0x303a31, 0x3ba8fb, 0x2a302b, 0x39a8fa, 0x22352d, 0x3faef8, 0x21352d, 0x3fa9fa, 0x20342d, 0x2abfa, 0x210a2e, 0x295fc, 0x26352f, 0x394fa, 0x2a362d, 0x794f5, 0x29352d, 0x697f4, 0x36342e, 0x490f4, 0x37352f, 0x190f3, 0x37352f, 0x90f5, 0x38362e, 0x390f2, 0x3f372f, 0x19ff3, 0x3f372f, 0x9ef2,
				0x41372e, 0x59ef3, 0x403728, 0x79cf5, 0x403728, 0xa9cf6, 0x413029, 0xd9cf7, 0x403128, 0xd9cf7, 0x433217, 0x139dc8, 0x422d28, 0x1182c8, 0x453229, 0x1083cb, 0x463128, 0x1182ca, 0x493629, 0x1382cf, 0x49372b, 0x1284ca, 0x4c3128, 0x2f8bcd, 0x484b27, 0x29f2ce, 0x625413, 0x54c6c2, 0x4bbb01, 0x40d6b9, 0x40b417, 0x40d0a5, 0x40b711, 0x41dca8, 0x40b012, 0x40dda8, 0x40b313, 0x40dca8, 0x40ac14, 0x40deaf, 0x40ad13, 0x40deaf, 0x40ad13, 0x40d9ac, 0x40ad13, 0x41d8d3, 0x43ae12, 0x47d6d1, 0x40af13, 0x4ad5d1, 0x46ae13, 0x48d3d7, 0x47ad12, 0x48d3d7, 0x58ac11, 0x492cd4, 0x5aae13, 0x492cd4, 0x5daf1c, 0x482adb, 0x5eac13, 0x492bda, 0x51a310, 0x482adb, 0x51a310, 0x4829de, 0x51a310, 0x482fdd, 0x52a213, 0x492cdc, 0x55a30c, 0x4833dd, 0x55a30c, 0x4a31dd, 0x6aa20f, 0x4937dc, 0x6aa20f, 0x4e34db,
				0x6ba30e, 0x4c34d8, 0x65ad00, 0x4f36d7, 0x64aa0f, 0x4b37d7, 0x7aa90e, 0x4e37d4, 0x789708, 0x4036d3, 0x7a950e, 0x4131d3, 0x7d940d, 0x4332d0, 0x7c950e, 0x3f3dee, 0x7a950f, 0x333fee, 0x79940c, 0x353fed, 0x7b920e, 0x343dec, 0x648d0f, 0x363deb, 0x658c0e, 0x303fe8, 0x668b0f, 0x3e3fea, 0x64890d, 0x3831ea, 0x658802, 0x3a32eb, 0x5a8901, 0x3834eb, 0x5b8a00, 0x3834eb, 0x5c8b07, 0x3b34ea, 0x53f404, 0x3a36ea, 0x50f505, 0x3c30f4, 0x51f606, 0x3f31f7, 0x50f907, 0x2233f7, 0x54f805, 0x2c34f4, 0x50ff06, 0x2f32f5, 0xacfd06, 0x2833f7, 0xafe306, 0x2432f5, 0xaae000, 0x3834f6, 0xace001, 0x3535f6, 0xafe200, 0x3434f4, 0xa8ec00, 0x934f6, 0xaaed03, 0xc34f7, 0xa5ef01, 0x833f7, 0xb8ed0f, 0xb32f7, 0xb9ed01, 0xc32f4, 0xbbd303, 0x731f4, 0xbad20c, 0x536fb, 0xc7d302, 0x235fb, 0xc5dd00, 0xd34fc, 0xc5dd00,
				0xd34fc, 0xcadc07, 0x93afe, 0xc8de09, 0xa3cfe, 0xb5de06, 0xf3cfd, 0xb9de06, 0x901ff, 0xa4dd09, 0xb00fd, 0xb1e00e, 0x7805fd, 0xa1ee08, 0x481cff, 0xb9e909, 0x4a1afa, 0xbbeb0b, 0x4a1af8, 0xa5ea0a, 0x551af8, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bf9, 0xa5ea0a, 0x541bfb, 0xa5ea0a, 0x541be5, 0xa5ea0a, 0x541bfb, 0xa4eb09, 0x541afc, 0xa4eb0a, 0x4b19f3, 0xa4eb0a };
		System.arraycopy(aFor, 0, key, 72910, aFor.length);
	}

	private static void init245(int[] key) {
		int[] aFor = { 0x551afb, 0xa4eb0a, 0x551afb, 0xa4eb0a, 0x551afb, 0xa4eb0a, 0x551afb, 0xa4eb0a, 0x551afb, 0xa4eb0a, 0x551afb, 0xa4eb0a, 0x551afb, 0xa4eb0a, 0x551afb, 0xa4eb0a, 0x551afb, 0xa4eb0a, 0x551afb, 0xa4eb0a, 0x551afb, 0xa4eb0a, 0x551afb, 0xa4eb0a, 0x551afb, 0xa4eb0a, 0x551afb, 0xa4eb0a, 0x551afb, 0xa4eb0a, 0x551afb, 0xa5e80a, 0x5519f9, 0xbbeb08, 0x4a1ae7, 0xbae808, 0x4a1af9, 0xa4e80a, 0x491afc, 0xa4e80a, 0x551afc, 0xbaf70c, 0x4f06fc, 0xb6ff07, 0x5a08fa, 0x8de701, 0x3438f5, 0xb7fc11, 0xf25bc7, 0xe7d502, 0xea5acb, 0xe5cc1b, 0xf55bd4, 0xedc601, 0xf15dd3, 0xefc007, 0xf45cd2, 0xe9c205, 0xf662d2, 0xd4c306, 0xf75cd4, 0xd0c307, 0xf85cd0, 0xd2fd09, 0xf95ddf, 0xd5fc08, 0xf85cdf, 0xd6fd07, 0xe65ede, 0xd7fa04, 0xe55ede, 0xd0fa05, 0xe75fdf, 0xd0fa05, 0xea5fde, 0xd1f902, 0xea5fd8,
				0xd6f803, 0xe951de, 0xa8f802, 0xec51df, 0xa8fb04, 0xed50d8, 0xa8fb04, 0xef50d9, 0xa7fc07, 0xec51d9, 0xa0ff06, 0xed52d9, 0xa3fc39, 0xf353e6, 0xa2e306, 0xf052e7, 0xa2e306, 0xf752e4, 0xa1e007, 0xf752e6, 0xa0e104, 0xf952e1, 0xa0e104, 0xfb52e7, 0xa7e605, 0xc55fe1, 0xa3e008, 0xc05be1, 0x93f403, 0xd054d8, 0xf9dc12, 0xebaeae, 0xebcd01, 0xeba9b3, 0xeac104, 0xebaabd, 0xebc104, 0xebacbe, 0xebc205, 0xebadbe, 0xebdd02, 0xebacbf, 0xebdf01, 0xebacbd, 0xebdf01, 0xebabbc, 0xebdf01, 0xeaaabf, 0xe8dc00, 0xebabc0, 0xedd301, 0xe4aac0, 0xeed101, 0xe2acc2, 0xefd206, 0xe0acc3, 0xf0d305, 0xe153c0, 0xf2d107, 0xe153c0, 0xf5d008, 0xe154ce, 0xf7d206, 0xe055cf, 0xf7d206, 0xef5acc, 0xf7d206, 0xef5bcb, 0xf6d105, 0xec5ac8, 0xf7d606, 0xec58c9, 0xf0d719, 0xed47c8, 0xf0d719, 0xef45c8, 0xcfd61a, 0xed42c8,
				0xced71b, 0xea41cf, 0xcfd61a, 0xe841cc, 0xc0d91b, 0xe943cd, 0xc2df15, 0xec43c2, 0xdddd1b, 0xe943c1, 0xdcdc1a, 0xe47dc1, 0xdddf1d, 0xe77cc1, 0xdcd81c, 0xe27ec1, 0xddd91f, 0x9f7ec0, 0xdad621, 0x927ec3, 0xdbd422, 0x977fc3, 0xdad321, 0x947dc0, 0xdbd222, 0x8a7dc1, 0xd8cd25, 0x8c7fc0, 0xdacb27, 0x827fc2, 0xdbca24, 0x807dc2, 0xddc42a, 0x837dc2, 0xdcc72b, 0xbd7bc0, 0xdfc62c, 0xbe7ac5, 0xddc42e, 0xba7bc3, 0xd2bb2d, 0xbb79c3, 0xd1ba2c, 0xba7edc, 0xd6bb2d, 0xb87cdc, 0xd7b42c, 0xa57edc, 0xd0b42d, 0xa77fdd, 0xdbb42f, 0xa479dc, 0x26b72e, 0xa279df, 0x25a92c, 0xae78df, 0x20aa2a, 0xb179df, 0x22aa29, 0xba7edf, 0x23a82a, 0xb97dd9, 0x25a52d, 0x847ddb, 0x27a42e, 0x807edb, 0x29a52d, 0x8479d5, 0x2aa422, 0x9b7bd5, 0x29a423, 0x9c7bd6, 0x2b9a21, 0x907bd7, 0x2c9920, 0x937dd7, 0x52992f, 0x977fd6,
				0x51982c, 0x9971d0, 0x51982c, 0x9971d0, 0x5e992b, 0x987ed1, 0x5c9b29, 0x9f7fde, 0x5f9c29, 0xe47fd5, 0x519e2f, 0xe140d7, 0x4f9a24, 0xf645d6, 0x3fa322, 0xe648d7, 0xa723, 0xf155d7, 0x5a626, 0xf757c9, 0x7a739, 0xf757cb, 0x18a739, 0xe857c9, 0x18a739, 0xe956c8, 0x18a739, 0xe956c8, 0x18a739, 0xe956c8, 0x18a739, 0xe956c8, 0x18a739, 0xe956c8, 0x18a739, 0xe956c8, 0x18a739, 0xe956c8, 0x18a739, 0xe956c8, 0x18a739, 0xe956c8, 0x18a739, 0xe956c8, 0x18a739, 0xe956c8, 0x18a739, 0xe956c8, 0x18a739, 0xe956c8, 0x18a739, 0xe956c8, 0x18a739, 0xe956c8, 0x18a739, 0xe956ca, 0x18a739, 0xe956c8, 0x18a739, 0xe956d6, 0x18a739, 0xe857c9, 0x18a73b, 0xe856ce, 0x18a738, 0xf755c1, 0x18a738 };
		System.arraycopy(aFor, 0, key, 73210, aFor.length);
	}

	private static void init246(int[] key) {
		int[] aFor = { 0xe956c9, 0x18a738, 0xe956c9, 0x18a738, 0xe956c9, 0x18a738, 0xe956c9, 0x18a738, 0xe956c9, 0x18a738, 0xe956c9, 0x18a738, 0xe956c9, 0x18a738, 0xe956c9, 0x18a738, 0xe956c9, 0x18a738, 0xe956c9, 0x18a738, 0xe956c9, 0x18a738, 0xe956c9, 0x18a738, 0xe956c9, 0x18a738, 0xe956c9, 0x18a738, 0xe956c9, 0x18a738, 0xe956c9, 0x18a738, 0xe856cb, 0x18a43a, 0xe955d5, 0x18a738, 0xe855d7, 0x6a726, 0xeb55d0, 0x6a726, 0xf656d3, 0x19b922, 0xec56cd, 0x14a23e, 0xe654c9, 0xfa235, 0xd552ce, 0x7d8722, 0x1833ff, 0x28ab34, 0x3238fe, 0x20ac30, 0x2e39fd, 0x3ba32e, 0x2039ff, 0x3ea22e, 0x203ffa, 0x3da12f, 0x2300f8, 0x3ca12d, 0x1f3efe, 0x38a12a, 0x123ffd, 0x3ea025, 0x153ffd, 0x3e9f2b, 0x133ffc, 0x3d9e24, 0x123cfc, 0x229f25, 0x103bff, 0x239e24, 0x153bfe, 0x229e24, 0x1b3afe, 0x219f25, 0x1b3afc, 0x279d27,
				0x1935fb, 0x269c26, 0x6436fb, 0x209c20, 0x6436fb, 0x209c20, 0x6636fc, 0x219d21, 0x6a30ff, 0x269e20, 0x6b33ff, 0x259d1f, 0x7532c0, 0x248220, 0x7633c1, 0x248220, 0x7133c2, 0x278123, 0x7133c2, 0x27801d, 0x7f32f9, 0x26811c, 0x7d32ff, 0x21861d, 0x403ef8, 0x248311, 0x453ff9, 0x1d8b1a, 0x5020fb, 0x61b135, 0x77c689, 0x77a424, 0x77c096, 0x75a721, 0x75cd99, 0x75a620, 0x75cb9a, 0x75a521, 0x75ca9a, 0x75ba26, 0x75cb9b, 0x75b825, 0x75cb99, 0x75b825, 0x75cc98, 0x75b825, 0x74cd9b, 0x76bb24, 0x75cce4, 0x71b55b, 0x78cc9a, 0x72b75b, 0x79cb99, 0x75b65a, 0x7bcb9e, 0x74b55b, 0x65359e, 0x76b759, 0x65359e, 0x76b759, 0x62339f, 0x74b557, 0x63329e, 0x74b557, 0x63329e, 0x7bba54, 0x633399, 0x7ab957, 0x60329a, 0x7bbe54, 0x60309b, 0x7cbf4b, 0x60309b, 0x7cbf4b, 0x622e9b, 0x7dbc4a, 0x5f2898, 0x7cbd4b,
				0x5f2898, 0x7bbe4c, 0x5c299a, 0x74b14d, 0x5d2b9b, 0x77b04c, 0x592c9b, 0x76b143, 0x452c9a, 0x70b341, 0x47139b, 0x7eb147, 0x44129b, 0x7fb646, 0x42139a, 0x7cb547, 0x3e1298, 0x7dba78, 0x35129a, 0x7cb87b, 0x371299, 0x7bb978, 0x351799, 0x7ab87b, 0x2b1798, 0x79a77c, 0x2d1599, 0x78a67f, 0x20129a, 0x79a77c, 0x22109a, 0x7ea87d, 0x201195, 0x7fab7c, 0x1f1096, 0x7dad7a, 0x1c1193, 0x7eac79, 0x191394, 0x71d37a, 0x181194, 0x72d27b, 0x19168b, 0x75d37a, 0x18158a, 0x77dd78, 0x61489, 0x75df78, 0x21488, 0x7bdf79, 0x6128b, 0x79df78, 0xfb118a, 0x7ede78, 0xf40e8a, 0x79df7e, 0xe80c88, 0x7bdf7e, 0xed0a88, 0x74dc7d, 0xed0889, 0x76de7d, 0xe90688, 0x4bdc7d, 0xef068b, 0x47dd7d, 0xeb068a, 0x46da7c, 0xf7058b, 0x47db7e, 0xf5048a, 0x43e47c, 0xfa068a, 0x46e47d, 0xf8078b, 0x38e273, 0xfa078b, 0x3ce071,
				0xf4098d, 0x3ce071, 0xf4098d, 0x3ce071, 0xfa078b, 0x3fe172, 0xfb0484, 0x44e073, 0xfe038a, 0x4ae373, 0xfa3f86, 0x4fe474, 0x8c0786, 0x58ed73, 0xbf1d86, 0x50ed74, 0xa21c9b, 0x56ec76, 0xa71c98, 0x57ec68, 0xa71c98, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d99, 0x48ec6a, 0xb91d9b, 0x48ec6a, 0xb91d85, 0x48ec6a, 0xb81c9a, 0x48ec68, 0xa71c9c, 0x57ed6a, 0xb81f93, 0x57ed6a };
		System.arraycopy(aFor, 0, key, 73510, aFor.length);
	}

	private static void init247(int[] key) {
		int[] aFor = { 0xa61c9b, 0x57ed6a, 0xa61c9b, 0x57ed6a, 0xa61c9b, 0x57ed6a, 0xa61c9b, 0x57ed6a, 0xa61c9b, 0x57ed6a, 0xa61c9b, 0x57ed6a, 0xa61c9b, 0x57ed6a, 0xa61c9b, 0x57ed6a, 0xa61c9b, 0x57ed6a, 0xa61c9b, 0x57ed6a, 0xa61c9b, 0x57ed6a, 0xa61c9b, 0x57ed6a, 0xa61c9b, 0x57ed6a, 0xa61c9b, 0x57ed6a, 0xa61c9b, 0x57ed6a, 0xa61c9b, 0x57ed6a, 0xa51d99, 0x57ed6a, 0xa31d85, 0x57ed68, 0xa51c85, 0x55ee6a, 0xbb1c9f, 0x56ee6a, 0xb81c9f, 0x57ec6d, 0xa31c82, 0x56ed6c, 0xa51e9d, 0x55e86b, 0xb81097, 0x7bf079, 0xeb3b92, 0xb09449, 0x86349d, 0x9aa153, 0x942f98, 0x80b94a, 0x9b239b, 0x86ba56, 0x992786, 0x86b955, 0x982683, 0x878654, 0xa51983, 0x838454, 0xa9188c, 0x85855b, 0xa91a83, 0x85bb54, 0xa8198c, 0x86ba55, 0xb6198f, 0x87bd54, 0xb5198e, 0x86bc55, 0xb3188e, 0x86bc55, 0xb1198f, 0x89bf54, 0xb31a8f,
				0x88bc53, 0xb5148f, 0x8bbc53, 0xca158f, 0x8bbc53, 0xcf158e, 0x8abf50, 0xcf148c, 0x89b851, 0xc1148f, 0x88b950, 0xc4178f, 0x89b86f, 0xc6178e, 0x96a76c, 0xc7178c, 0x95a66d, 0xc6148f, 0x95a66f, 0xc1158e, 0x92a750, 0xc514b4, 0x9ca751, 0xc013b7, 0x9ba054, 0xc516b0, 0xa7ad57, 0xc716b0, 0x9baf55, 0xcc1abd, 0xf7806f, 0xd7ffae, 0xd49a02, 0xd7feb1, 0xd69807, 0xd6f1b2, 0xd69a04, 0xd6f7be, 0xd69905, 0xd6e9b9, 0xd69905, 0xd6e8b8, 0xd69b06, 0xd6e9bb, 0xd69a05, 0xd6eeb8, 0xd69a05, 0xd6eeb8, 0xd79b06, 0xd5ecbb, 0xd69405, 0xdeecc5, 0xd79504, 0xdceec7, 0xd09203, 0xddecc7, 0xd39302, 0xc213c5, 0xd1910c, 0xc213cb, 0xd1910c, 0xc512c4, 0xd3970e, 0xc410c7, 0xd2960f, 0xc511c6, 0xdd990c, 0xc510c1, 0xdd990c, 0xc712c1, 0xdc9e0f, 0xc710c0, 0xdb9f10, 0xc710c0, 0xdb9f10, 0xc50ec0, 0xda9c11, 0xfb0fc0,
				0xd99b12, 0xfa0ec1, 0xde9815, 0xfb0fc0, 0xdd9716, 0xf40dc0, 0xde9617, 0xf00ace, 0xdf9714, 0xec0acd, 0xd89417, 0xef34cd, 0xd79516, 0xed36ca, 0xd69217, 0xea37c9, 0xd49216, 0x9534c8, 0xd69c28, 0x913bc9, 0xd89128, 0x9238c9, 0xde9328, 0x903ecb, 0xdf902f, 0x8e3fcc, 0xdc8f28, 0x8f3ecc, 0xdb8c29, 0x8338cc, 0xda8d2a, 0x813ac2, 0xdd822b, 0x803bc3, 0xde812a, 0xbe3ac0, 0xdf862b, 0xbe3ac2, 0xdc8728, 0xb838c4, 0xddf829, 0xb539c4, 0xdcfb2a, 0xb73fda, 0xdbfa2b, 0xb03ddb, 0xddf429, 0xad3dd8, 0xdff728, 0xa93dc7, 0xd0f636, 0xad3ac5, 0xd2f736, 0x5039c4, 0xd5f636, 0x5f26c2, 0xd2f736, 0x4225c3, 0xd1f635, 0x4422c0, 0xd3f435, 0x4a22c0, 0xd1f434, 0x4e2cc1, 0xeff535, 0x4b2fc3, 0xecf534, 0x402ec3, 0xedf235, 0x5c2dc2, 0xecf337, 0x5e2cc1, 0xe8cc37, 0x512ec1, 0xedcc36, 0x532fc0, 0xeccb37, 0x2e2ecf,
				0xeac935, 0x2d21ce, 0xe5c832, 0x2c20ce, 0xe5c832, 0x2d2fc9, 0xe8c930, 0x2a2cc8, 0x95c83f, 0x2c2ac7, 0x99f530, 0x2e28c4, 0x91c837, 0x412ec4, 0xa1c331, 0x4e30c5, 0xbcc12a, 0x4f2ec6, 0xbcc12a, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31c6, 0xbcc035, 0x4d31c4, 0xbcc035, 0x4d31da, 0xbcc035, 0x4d31c4, 0xbcc037, 0x5330c3, 0xa3c135, 0x4c33cc, 0xa3c135 };
		System.arraycopy(aFor, 0, key, 73810, aFor.length);
	}

	private static void init248(int[] key) {
		int[] aFor = { 0x5230c4, 0xa3c135, 0x5230c4, 0xa3c135, 0x5230c4, 0xa3c135, 0x5230c4, 0xa3c135, 0x5230c4, 0xa3c135, 0x5230c4, 0xa3c135, 0x5230c4, 0xa3c135, 0x5230c4, 0xa3c135, 0x5230c4, 0xa3c135, 0x5230c4, 0xa3c135, 0x5230c4, 0xa3c135, 0x5230c4, 0xa3c135, 0x5230c4, 0xa3c135, 0x5230c4, 0xa3c135, 0x5230c4, 0xa3c135, 0x5230c4, 0xa3c137, 0x5131c2, 0xa5de31, 0x5031de, 0xa5c133, 0x5131de, 0xa3c031, 0x5332c0, 0xbdc033, 0x5233c7, 0xa2c234, 0x5232da, 0xa3c236, 0x5131d8, 0xa5c72b, 0x5d39d7, 0x8ad225, 0x3c33d1, 0xb8f537, 0xeb59ef, 0xc1cd27, 0xd347e1, 0xc6d431, 0xdb4ee5, 0xc7d72a, 0xe74bfa, 0xf8d62a, 0xe748ff, 0xc7d627, 0xe648ff, 0xc3d526, 0xeb49f1, 0xc1d427, 0xeb4af0, 0xc0ea26, 0xec4bf1, 0xc1e929, 0xee4bf0, 0xdee82a, 0xef4bf3, 0xddef29, 0xe94cf3, 0xdce828, 0xeb4df2, 0xd3eb29, 0xe84df5,
				0xd3eb29, 0xef4cf2, 0xd3eb29, 0xec42f2, 0xadeb2e, 0xe942f3, 0xace82d, 0xea44f0, 0xace82d, 0xe444f3, 0xace82d, 0xe745f3, 0xabeb2c, 0xe545cc, 0xaaea2d, 0xfb5acd, 0xaaea2d, 0xf85bcc, 0xaaea13, 0xf958f3, 0xaaea2d, 0xfc58ce, 0xa4ec2b, 0xfd5fce, 0xa7ed2a, 0xfb59c8, 0xa4e12c, 0xc45dc9, 0xa5e121, 0xc45ccd, 0x81ff1a, 0xa977df, 0xa01d70, 0xa67bc3, 0xa41d77, 0xa575c2, 0xa51e74, 0xa472ce, 0xa41c75, 0xa46cc9, 0xa41c75, 0xa46dc8, 0xa41f75, 0xa46dc8, 0xa41e76, 0xa46dca, 0xa41977, 0xa46dca, 0xa51874, 0xa76fc9, 0xa41777, 0xa36eb7, 0xaa1776, 0xa16cb5, 0xad1071, 0xa16db2, 0xaf1277, 0xbe92b0, 0xad1079, 0xbf91bf, 0xad1079, 0xbe92be, 0xa81774, 0xbf90bd, 0xa81774, 0xbf90bd, 0xa71877, 0xb090bb, 0xa81976, 0xb292bb, 0xa91e75, 0xb290ba, 0xae1f6a, 0xb290ba, 0xae1f6a, 0xb38fa5, 0xac1d74, 0x8d8ea5,
				0xaf1a77, 0x8d8ea5, 0xae1b76, 0x8b8ca3, 0xad1475, 0x858da0, 0xaf1677, 0x818aae, 0xae1774, 0x9d8aad, 0xa91477, 0x9eb4ad, 0xa61576, 0x9cb6ab, 0xa61577, 0x9ab0a9, 0xa71676, 0xe6b0a8, 0xa51848, 0xe0b0a9, 0xa81949, 0xe2b0a8, 0xa91a48, 0xe7b7ab, 0xa8194f, 0xf9b6ac, 0xab0648, 0xf8b7ac, 0xac0549, 0xf4b1ae, 0xad0448, 0xf6b3a0, 0xaa0b49, 0xf6b3ae, 0xab0a46, 0xcbb1ac, 0xaa0d47, 0xcbb1ae, 0xa90c44, 0xcab2af, 0xae0d43, 0xc9cdaf, 0xa00f41, 0xcbcbb1, 0xa60d43, 0xcdcab3, 0xa10242, 0xd1cbb3, 0xa30141, 0xd6cbb0, 0xa10040, 0xdbccb2, 0xa50241, 0x27ccb3, 0xa20341, 0x2ad2b5, 0xa60043, 0x28d2b6, 0xb90140, 0x2cd5b7, 0xba0041, 0x23d6b4, 0xb90140, 0x27d6b4, 0x870141, 0x24d8b4, 0x830243, 0x29deb4, 0x870343, 0x36dcb4, 0x860241, 0x34ddb7, 0x803c4f, 0x38deb7, 0x823d40, 0x3fdeb8, 0x803a4f, 0x42dfb6,
				0x81394f, 0x46d1b4, 0x8e3848, 0x47d0b4, 0x8e3848, 0x46dfb3, 0x83394a, 0x42dfb2, 0xff3c44, 0x47ddb3, 0xff0340, 0x42ddb1, 0x8b3e43, 0x57d4b0, 0xbc2444, 0x4fd7b7, 0xbb275a, 0x48c8b4, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8a8, 0xba395b, 0x4bc8aa, 0xba395b, 0x4bc8b4, 0xba395b, 0x4bc8aa, 0xba3959, 0x55c9ad, 0xa5385b, 0x4acaa2, 0xa5385b };
		System.arraycopy(aFor, 0, key, 74110, aFor.length);
	}

	private static void init249(int[] key) {
		int[] aFor = { 0x54c9aa, 0xa5385b, 0x54c9aa, 0xa5385b, 0x54c9aa, 0xa5385b, 0x54c9aa, 0xa5385b, 0x54c9aa, 0xa5385b, 0x54c9aa, 0xa5385b, 0x54c9aa, 0xa5385b, 0x54c9aa, 0xa5385b, 0x54c9aa, 0xa5385b, 0x54c9aa, 0xa5385b, 0x54c9aa, 0xa5385b, 0x54c9aa, 0xa5385b, 0x54c9aa, 0xa5385b, 0x54c9aa, 0xa5385b, 0x54c9aa, 0xa5385b, 0x54c9aa, 0xa53859, 0x54c8ac, 0xa63859, 0x52c8a8, 0xa73845, 0x52c8a8, 0xa63845, 0x57c9aa, 0xa73b5b, 0x48c8a9, 0xa73b5b, 0x48cab5, 0xa72558, 0x57d7b5, 0xa22047, 0x53d7b4, 0xb52142, 0x64d3bb, 0xca3249, 0xb6f3a9, 0xe7597d, 0xc9c0ac, 0xd2537c, 0xc6c1b1, 0xdc5963, 0xc2c2b0, 0xe35f63, 0xc2c1b5, 0xe35f6d, 0xfcc2b5, 0xdc5f62, 0xf8c2b4, 0xdf5c62, 0xf8c2b4, 0xd05d63, 0xf9fcb5, 0xd35e62, 0xffffb5, 0xd25d6d, 0xfdffb5, 0xcd5c6c, 0xfcffb5, 0xce5b6f, 0xfbffb6, 0xcd5a6c, 0xf5fcb7,
				0xcc5b6b, 0xf6f3b6, 0xcb5b6a, 0xf5f3b0, 0xca5a6b, 0x88f0b6, 0xca5a6b, 0x89f6b7, 0xcc5d6b, 0x8af7b7, 0xcd5c6a, 0x86f1b4, 0xca5f6b, 0x84f18b, 0xcb5e6a, 0x9bf1b5, 0xcb5e6a, 0x9aee8a, 0xcb5e54, 0x98ecb4, 0xcb5e6a, 0x9dec89, 0xca5f6d, 0x93ec8a, 0xca5f6f, 0x96eb8b, 0xca5f69, 0x95e58f, 0xf75866, 0x95e78d, 0xd84c53, 0xefda83, 0xf2a63d, 0xfdcb8a, 0xfeaf39, 0xfecc89, 0xfea73f, 0xffca87, 0xffa630, 0xffc88a, 0xffa731, 0xffc88a, 0xffb836, 0xffca8b, 0xffb836, 0xffca8d, 0xffb931, 0xffcd8c, 0xfeb832, 0xfccf8f, 0xffb731, 0xf9cf8e, 0xf1b54f, 0xf9cf8e, 0xf5b14b, 0xfecd89, 0xf14d4f, 0xe13289, 0xf2b040, 0xe13287, 0xf2b040, 0xe13287, 0xf5b14f, 0xe03488, 0xf6b240, 0xee3a8a, 0xf6b240, 0xee3b8d, 0xf6b240, 0xef388c, 0xf5b341, 0xee3f8f, 0xf2b240, 0xee3d90, 0xf3ad41, 0xee3d8e, 0xf0ac5e, 0xef3f8e,
				0xcfab5f, 0xed3f8d, 0xc9a959, 0xec3e8c, 0xcaa65a, 0xec3e8e, 0xc5a458, 0xe83f80, 0xc7a25a, 0xf43f83, 0xc0a159, 0xf60185, 0xc1a05e, 0xf60185, 0xcea359, 0xf40085, 0xcfa458, 0xf00084, 0xb2a75b, 0xf70fba, 0xbfa65a, 0xf60eba, 0xbda45a, 0xf10fbb, 0xa1a05e, 0xee0fbc, 0xbcbd59, 0xee0dbd, 0xbdbc59, 0xe80fbf, 0xbebb58, 0xe40dbf, 0xbebb58, 0xe50cbe, 0xb8b556, 0xe70fbf, 0xb8b556, 0xd808bf, 0xb9b655, 0xdb0bbf, 0xbfb453, 0xd80bbe, 0xb1ca51, 0xdb09be, 0xb0cd4e, 0xda0ba1, 0xb1cc51, 0xde04a1, 0xafcd50, 0xdb04a0, 0xadcd51, 0xd406a0, 0xa9cb52, 0x2b05a0, 0xafcb53, 0x281ba0, 0xa2cb54, 0x2f1aa0, 0xbec956, 0x2a1aa0, 0xbfce55, 0x2618a0, 0xbccf54, 0x2218a0, 0x82cf55, 0x2017a1, 0x86ce57, 0x2f14af, 0x83cf58, 0x2d13ae, 0x9dcd58, 0x2f2daf, 0x9bcc57, 0x2c2da0, 0x95cf56, 0x292da1, 0x94ce57, 0x542baf,
				0x96ce56, 0x5328af, 0x94c054, 0x5d28ae, 0x94c054, 0x5d26ac, 0x98c055, 0x5825ad, 0xe4c75a, 0x5a25a2, 0x98c654, 0x5024a7, 0x87cd52, 0x6e3da4, 0x9ecc57, 0x6a3cb8, 0x9ecc57, 0x6c3ca6, 0x83cc54, 0x6c3ca6, 0x9ccd55, 0x6d3cba, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fb9, 0x9ece4a, 0x6f3fbb, 0x9ece4a, 0x6f3fa5, 0x9ece4a, 0x6f3fbb, 0x9ece48, 0x713ebc, 0x81cf4a, 0x6e3db3, 0x81cf4a };
		System.arraycopy(aFor, 0, key, 74410, aFor.length);
	}

	private static void init250(int[] key) {
		int[] aFor = { 0x703ebb, 0x81cf4a, 0x703ebb, 0x81cf4a, 0x703ebb, 0x81cf4a, 0x703ebb, 0x81cf4a, 0x703ebb, 0x81cf4a, 0x703ebb, 0x81cf4a, 0x703ebb, 0x81cf4a, 0x703ebb, 0x81cf4a, 0x703ebb, 0x81cf4a, 0x703ebb, 0x81cf4a, 0x703ebb, 0x81cf4a, 0x703ebb, 0x81cf4a, 0x703ebb, 0x81cf4a, 0x703ebb, 0x81cf4a, 0x703ebb, 0x81cf4a, 0x703ebb, 0x81cf48, 0x713ebd, 0x80ce48, 0x723eb9, 0x86ce56, 0x723ebb, 0x86ce56, 0x743fbb, 0x85ce54, 0x743da6, 0x9bce54, 0x6b3cbb, 0x85cc56, 0x6a3db8, 0x98c949, 0x693fbb, 0x85c848, 0x6730bd, 0xabdf4e, 0xf0aa8, 0x78b673, 0x3f15a1, 0x1a816d, 0xb0ea7, 0x1f9773, 0x60da7, 0x1a9773, 0x70da7, 0x199672, 0x60baa, 0x279473, 0x434a5, 0x209471, 0x60ba7, 0x2e9470, 0x735a6, 0x2d9771, 0x136a6, 0x2c947e, 0x336a6, 0x33957f, 0x131a5, 0x33957f, 0x631a6, 0x30947c, 0x832a7, 0x31957b, 0x832a7,
				0x329a7c, 0xe3da7, 0x31947c, 0x703da0, 0x32977d, 0x703ca6, 0x32977d, 0x773ca1, 0x30977c, 0x7a3ba1, 0x31967f, 0x7c3ba0, 0x329540, 0x623a9f, 0x329540, 0x623a9f, 0x338a7f, 0x60389f, 0x338a7f, 0x663b9f, 0x30897c, 0x683b9a, 0x31887f, 0x6d3c99, 0x31887b, 0x6c309f, 0xe8d76, 0x6a4c9a, 0x3ffd7a, 0x7c5cad, 0x56d46b, 0x4fa1d5, 0x47c961, 0x47aacf, 0x47c37a, 0x45afc2, 0x44c27a, 0x44acc1, 0x44dc7d, 0x44acc1, 0x44dd7c, 0x44acc0, 0x44dd7c, 0x44afc7, 0x44dc7b, 0x44a8c6, 0x45dd78, 0x47aac5, 0x45dd78, 0x40aac6, 0x48d007, 0x40aac6, 0x4bd702, 0x40abc0, 0x4ed405, 0x41aac0, 0x532b08, 0x40a9cf, 0x532b08, 0x47a8c0, 0x532b08, 0x45adc0, 0x522a09, 0x4aa2c3, 0x522a09, 0x4aa3c4, 0x522a09, 0x4ba0c5, 0x512b08, 0x4aa7c6, 0x562a09, 0x4aa5d9, 0x573508, 0x4aa5c7, 0x543417, 0x4ba7c7, 0x6b3316, 0x49a7c4,
				0x6a3217, 0x4ea4c3, 0x6b3316, 0x4dabc2, 0x653114, 0x48aacc, 0x663615, 0x56abcd, 0x623517, 0x57aacc, 0x600b11, 0x57aaca, 0x600b11, 0x5aa8cd, 0x610c10, 0x5ea8cc, 0x1f0e12, 0x5aa6f3, 0x1c0f13, 0x56a6f2, 0x1a0d13, 0x51a7f3, 0x1e0917, 0x50a7f6, 0x11612, 0x53a6f6, 0x71410, 0x52a7f6, 0x41311, 0x5ea5f6, 0x41311, 0x5fa4f7, 0x21d1f, 0x5da7f6, 0x21d1f, 0x62a0f6, 0x21d1f, 0x60a0f5, 0x41f19, 0x63a0f4, 0xa611b, 0x60a2f4, 0xb6604, 0x61a0eb, 0xa671b, 0x64a0f4, 0xb6804, 0x7aa1eb, 0xf6b1a, 0x77a7eb, 0xa6b18, 0x8aa5ec, 0x96a1f, 0x8ebaec, 0x46a18, 0x89bbee, 0x19691b, 0x8abaed, 0x1f6e18, 0x86bbef, 0x1c6c19, 0x80bbec, 0x1f6319, 0xbebbef, 0x1a6119, 0xb3bbe1, 0x196716, 0xb7bae1, 0x76417, 0xb584e0, 0x66518, 0xb284e0, 0x56517, 0xbc87e1, 0x6516, 0xbf81e1, 0x7f6419, 0xba82e0, 0x7d6a1b, 0xb482e1,
				0x7d6a1b, 0xb48ce3, 0x736a1b, 0xcc8eec, 0x716c19, 0xb38fef, 0x7a6b1a, 0xa98ee9, 0x4b621c, 0xba90ea, 0x49621a, 0xbd92f5, 0x4f631a, 0xbe92e9, 0x50601c, 0xbe92e9, 0x4e631a, 0xbf92f5, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91e8, 0x4c601b, 0xbd91ea, 0x4c601b, 0xbd91f4, 0x4c601b, 0xbd91ea, 0x4c6019, 0xa390ed, 0x53611b, 0xbc93e2, 0x53611b };
		System.arraycopy(aFor, 0, key, 74710, aFor.length);
	}

	private static void init251(int[] key) {
		int[] aFor = { 0xa290ea, 0x53611b, 0xa290ea, 0x53611b, 0xa290ea, 0x53611b, 0xa290ea, 0x53611b, 0xa290ea, 0x53611b, 0xa290ea, 0x53611b, 0xa290ea, 0x53611b, 0xa290ea, 0x53611b, 0xa290ea, 0x53611b, 0xa290ea, 0x53611b, 0xa290ea, 0x53611b, 0xa290ea, 0x53611b, 0xa290ea, 0x53611b, 0xa290ea, 0x53611b, 0xa290ea, 0x53611b, 0xa290ea, 0x526119, 0xbc93ec, 0x526119, 0xa290ea, 0x536105, 0xa190e8, 0x536105, 0xa293e8, 0x536105, 0xa292f5, 0x52601a, 0xa292eb, 0x4d631b, 0xa393f4, 0x4c6204, 0xbd91f6, 0x4c6402, 0xbd98f6, 0x596f05, 0x9e8bed, 0x3d5f08, 0x4de3d6, 0x704005, 0x66d3c8, 0x6b441d, 0x7ad8ca, 0x6d4612, 0x73dac4, 0x6c4610, 0x73dac6, 0x534510, 0x73dac4, 0x524516, 0x76e5c0, 0x507a16, 0x78e5c1, 0x514519, 0x7be7ce, 0x504416, 0x7ee7cf, 0x514516, 0x63e1cc, 0x514516, 0x64e1cd, 0x524411, 0x64e1cb,
				0x534710, 0x6ae0cc, 0x534716, 0x6fe0cd, 0x524917, 0x12e3cb, 0x524917, 0x10e3ca, 0x524917, 0x17e2cb, 0x524917, 0x15e2ca, 0x5d4e14, 0x11e0cb, 0x5c4f2b, 0x12e1cb, 0x5c4f2b, 0xce1ca, 0x5c4e15, 0xffcf5, 0x5c4e15, 0xffcf5, 0x5b4f14, 0xcfcf0, 0x544815, 0xefcf3, 0x554a16, 0x9fdf2, 0x68411a, 0xb81f1, 0x503915, 0x97f4, 0x3c0e20, 0x198fe4, 0x16e251, 0x1686ff, 0x16ee4d, 0x1785f8, 0x15eb4f, 0x1785f6, 0x17eb4f, 0x1784f4, 0x17f448, 0x1784f3, 0x17f54f, 0x1786f1, 0x17f24e, 0x1687f0, 0x17f24e, 0x1584f1, 0x17f24e, 0x148af0, 0x11f030, 0x1689f0, 0x1cf533, 0x168ff1, 0x18f137, 0x178ff2, 0x60f35, 0x158dfc, 0x60f35, 0x128cfd, 0x60f35, 0x138bfc, 0x40d37, 0x1c8afb, 0x40d37, 0x1d85fa, 0x40d37, 0x1d87fb, 0x40d37, 0x1e86fa, 0x20b35, 0x1e84e5, 0x20b35, 0x1f9bfa, 0x10a2a, 0x1e99fa, 0x3e0d2b, 0x1c99f9,
				0x3f0c2a, 0x1b9afe, 0x3e0d2b, 0x1895ff, 0x3f0c2a, 0x1396fd, 0x3d0a24, 0xd96fe, 0x3c0b25, 0x994fe, 0x3f3422, 0x994f8, 0x3e3523, 0x797f8, 0x3c3325, 0x390fb, 0x42351b, 0x692fb, 0x403b1b, 0xa92fa, 0x46391b, 0xd93fb, 0x433e18, 0xe92fa, 0x5f221c, 0xd92f8, 0x58211f, 0xc93fa, 0x5a271d, 0x392fb, 0x59241c, 0x293f4, 0x5f2a1e, 0x190f7, 0x5f2a1e, 0x3f97f7, 0x5f2a1e, 0x3d97f4, 0x5e291f, 0x3996f2, 0x51561c, 0x3b95f3, 0x51561c, 0x3b90f3, 0x505703, 0x3e90ec, 0x51581c, 0x2091f3, 0x555b02, 0x2d90f1, 0x575c03, 0x2891f0, 0xab5e03, 0x2c91f6, 0xa64102, 0x2a91f7, 0xba4302, 0x2990f4, 0xbd4501, 0x2b90f7, 0xb14701, 0x2d90f4, 0xb34700, 0x129ff6, 0xb6460e, 0x1f9cf6, 0xb54001, 0x1b9df6, 0xb44200, 0x6a2f8, 0xb54300, 0x1a2f8, 0xb6430f, 0xfa1f9, 0xb3430e, 0xca7f9, 0xcc4201, 0xaa5fb, 0xc24c07, 0xba4fd,
				0xc24c07, 0x8abf0, 0xcf4d08, 0xea9ff, 0xcc4a09, 0x5aefc, 0xd7460a, 0x9adfe, 0xe55c09, 0x11aefc, 0xe45f0c, 0x10afe3, 0xe15e12, 0x11afe7, 0xff5e11, 0x11ace4, 0xe15d17, 0x13acf8, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace4, 0xe15d15, 0x10ace6, 0xe15d15, 0x10ace4, 0xe15d15, 0x10acfa, 0xe15d15, 0x10ace4, 0xe15d17, 0xeade3, 0xfe5c15, 0x11aeec, 0xfe5c15 };
		System.arraycopy(aFor, 0, key, 75010, aFor.length);
	}

	private static void init252(int[] key) {
		int[] aFor = { 0xfade4, 0xfe5c15, 0xfade4, 0xfe5c15, 0xfade4, 0xfe5c15, 0xfade4, 0xfe5c15, 0xfade4, 0xfe5c15, 0xfade4, 0xfe5c15, 0xfade4, 0xfe5c15, 0xfade4, 0xfe5c15, 0xfade4, 0xfe5c15, 0xfade4, 0xfe5c15, 0xfade4, 0xfe5c15, 0xfade4, 0xfe5c15, 0xfade4, 0xfe5c15, 0xfade4, 0xfe5c15, 0xfade4, 0xfe5c15, 0xfade4, 0xff5c17, 0x12aee2, 0xff5c17, 0x11aee4, 0xe15c15, 0x10adfa, 0xe15f17, 0x10adfa, 0xe15f17, 0x11adf8, 0xfe5c16, 0x11ade6, 0xe15f17, 0xfb0e6, 0xe15e16, 0x11aee4, 0xe25d17, 0x16aae7, 0xe75216, 0x38bcfd, 0xf05a13, 0x6a8eff, 0xa3b25, 0x2ca1e8, 0x3c3426, 0x36a6e8, 0x273f3b, 0x3ca3ee, 0x233f3a, 0x3da4e9, 0x22383b, 0x2a7ef, 0x200639, 0x4a6ef, 0x223939, 0x5a7ef, 0x2d3838, 0x79aef, 0x2c3937, 0x29aee, 0x2f3836, 0x1f9bef, 0x2e3836, 0x1a9bec, 0x2f3f37, 0x199aed, 0x2e3c36, 0x169aed, 0x2f3d37,
				0x139aec, 0x2e3336, 0x119aed, 0x513031, 0x1099ed, 0x523330, 0x1798ec, 0x523330, 0x1598ed, 0x5d3433, 0x1699ed, 0x5a3732, 0x1499d2, 0x5a3732, 0xa99d3, 0x5a3732, 0x985d0, 0x5b340f, 0x886ef, 0x5b340f, 0xd86ec, 0x5a3508, 0x81ee, 0x5a3508, 0x682ec, 0x59380a, 0x3985ec, 0x643f09, 0x3e89ee, 0x752031, 0x45acfa, 0x50de4d, 0x54b7fc, 0x54d04e, 0x55b8fd, 0x57d44b, 0x55b8f3, 0x54d54b, 0x54bbf0, 0x54cb4c, 0x54bbf0, 0x54ca4c, 0x54b8f1, 0x54cb4f, 0x54bff2, 0x55ca4c, 0x54bff2, 0x56c94d, 0x55b1f3, 0x50cb33, 0x57b2f3, 0x5dce30, 0x57b4f2, 0x5ac937, 0x54b4f3, 0x44cb35, 0x554bf2, 0x47ca3a, 0x5448fd, 0x40cb35, 0x554ffc, 0x43ca36, 0x544cfd, 0x43ca36, 0x5b4dfa, 0x42c537, 0x5a4cfc, 0x43c630, 0x594dfd, 0x42c133, 0x594ffc, 0x45c02c, 0x5850e3, 0x46c133, 0x5952e3, 0x79c632, 0x5855e3, 0x7ac131, 0x5954e2,
				0x7dc236, 0x5b5ae2, 0x7cc337, 0x5658e0, 0x78c439, 0x4858e3, 0x79c538, 0x4c5ae3, 0x7afa3f, 0x4c5ae5, 0x7bfb3e, 0x4259e5, 0x78fa39, 0x455ee7, 0x4fb07, 0x405ce7, 0x5f406, 0x4f5de7, 0x3f606, 0x485ce6, 0x6f105, 0x4b5de7, 0x1aed01, 0x485de5, 0x1cef03, 0x485de6, 0x1ee901, 0x475ce7, 0x1dea00, 0x465de8, 0x1be402, 0x455eeb, 0x1be402, 0x4458ea, 0x24e503, 0x4658e9, 0x25e602, 0x4259ef, 0x2a9901, 0x435bef, 0x299800, 0x435eef, 0x28991f, 0x465eee, 0x29961e, 0x585fef, 0x2a951f, 0x5c5eed, 0x26921f, 0x585eed, 0xda901f, 0x5c40ea, 0xd4901c, 0x5f41e9, 0xd2901d, 0x4042eb, 0xd4961c, 0x4142e9, 0xd6941c, 0x4d42e8, 0xd3951d, 0x7342e8, 0xd79b10, 0x7f40e8, 0xd69b1e, 0x7b47e8, 0xd5991d, 0x6446ea, 0xd6a612, 0x6247ea, 0xd7a513, 0x6f47eb, 0xd5a41c, 0x6b40eb, 0xaaa612, 0x6e41e8, 0xa6a812, 0x6f40e8,
				0xa7a81f, 0x6e4ee9, 0xa7a81f, 0x614eea, 0xaaa91f, 0x7940e9, 0xa7ac1e, 0x4f43e9, 0xbeb11f, 0x4d40ed, 0xbeaf03, 0x4c5ff2, 0xbdae03, 0x535cf6, 0xbdae03, 0x535cf0, 0xa3ad03, 0x515cec, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cf0, 0xa3ad03, 0x525cf2, 0xa3ad03, 0x525cec, 0xa3ad03, 0x525cf2, 0xa3ad01, 0x4c5df5, 0xbcac03, 0x535efa, 0xbcac03 };
		System.arraycopy(aFor, 0, key, 75310, aFor.length);
	}

	private static void init253(int[] key) {
		int[] aFor = { 0x4d5df2, 0xbcac03, 0x4d5df2, 0xbcac03, 0x4d5df2, 0xbcac03, 0x4d5df2, 0xbcac03, 0x4d5df2, 0xbcac03, 0x4d5df2, 0xbcac03, 0x4d5df2, 0xbcac03, 0x4d5df2, 0xbcac03, 0x4d5df2, 0xbcac03, 0x4d5df2, 0xbcac03, 0x4d5df2, 0xbcac03, 0x4d5df2, 0xbcac03, 0x4d5df2, 0xbcac03, 0x4d5df2, 0xbcac03, 0x4d5df2, 0xbcac03, 0x4d5df2, 0xbdaf03, 0x535df0, 0xbeae03, 0x505cf0, 0xa0ae01, 0x505cf0, 0xa1ad1f, 0x505cf0, 0xa1ad1f, 0x505cee, 0xa0ac1e, 0x505cec, 0xa2ae18, 0x535feb, 0xa3b11a, 0x535feb, 0xa1af1a, 0x5240f6, 0xa5b604, 0x5643f6, 0xb3b701, 0xc50f2, 0x8a9812, 0xce3cde, 0xefab17, 0xfe39de, 0xecae0e, 0xf635da, 0xe9a90e, 0xc935dc, 0xe8a80f, 0xc936d9, 0xea9601, 0xce09d9, 0xeb970c, 0xcd08da, 0xeaa80d, 0xc00ada, 0xeba902, 0xc60bda, 0xeba902, 0xc40bda, 0xf4a803, 0xc50bda, 0xf7af00, 0xc10ada,
				0xf6ac01, 0xc10ada, 0xf8ad00, 0xc40adb, 0xf9a301, 0xc709da, 0xf8a206, 0xb808da, 0xf8a206, 0xbb0eda, 0xfda207, 0xba09da, 0xf2a504, 0xb908da, 0xf5a605, 0xbb08e5, 0xf5a605, 0xba09e4, 0xf5a605, 0xa716e6, 0xf5a707, 0xa716d8, 0xf4a406, 0xa216e7, 0xf5a503, 0xac16e6, 0xf6a200, 0xad17e7, 0xf0af02, 0xae16e7, 0xf1aa00, 0xae11ea, 0xf9a20c, 0xc535dc, 0xda4861, 0xd727d7, 0xd64066, 0xd626d6, 0xd24d60, 0xd120d9, 0xd34e60, 0xd13edd, 0xd14e61, 0xd13fdc, 0xd14e61, 0xd13cdc, 0xd14f62, 0xd13cdc, 0xd14863, 0xd03ddd, 0xd24b62, 0xd133dc, 0xd4491c, 0xd330dc, 0xd94c1f, 0xd035de, 0xdd481b, 0xd335df, 0xc34a19, 0xd035de, 0xc4b516, 0xd737d1, 0xc3b419, 0xd737d1, 0xc2b318, 0xd735d2, 0xc1b219, 0xd935d5, 0xc1b219, 0xd93bd2, 0xc0b11e, 0xda3ad3, 0xc1b61d, 0xda38d2, 0xc6b702, 0xdb27cd, 0xc5b61d, 0xda25cd,
				0xfab11c, 0xda25cd, 0xfbb01f, 0xd825cc, 0xfcb318, 0xda2bce, 0xfdb219, 0xd729ce, 0xf9b517, 0xc929cd, 0xf8b416, 0xcd2bcd, 0xfb8b11, 0xcd2bcb, 0xfa8a10, 0xc328cb, 0xf98b17, 0xc42fc9, 0x848b16, 0xc72dc9, 0x838a29, 0xca22c9, 0x81882b, 0xca22cb, 0x848f28, 0xc923ca, 0x98932c, 0xc93ccf, 0x9a8d2a, 0xc93cce, 0x9c8f28, 0xc53ace, 0x9c8f28, 0xc639cf, 0x9a8126, 0xc43bcf, 0x9a8126, 0xc53dce, 0xa58027, 0xc73dcd, 0xa48326, 0xc23dca, 0xaafd24, 0xc33fca, 0xa9fc25, 0xc038d5, 0xaafe3a, 0xc636cb, 0xa8f124, 0xd839d4, 0xa9f025, 0xdf3bd7, 0xa7f726, 0xda3ad4, 0x58f720, 0xdd38d4, 0x55e822, 0xdf38d6, 0x53e825, 0xc13ad3, 0x55ee24, 0xc03ad1, 0x56ef25, 0xcd39d1, 0x50ef25, 0xf038d0, 0x53e027, 0xf43ade, 0x5de026, 0xf13bd1, 0x5ce727, 0xec39df, 0x5ed927, 0xea38df, 0x5ed927, 0xe63bdf, 0x5cd828, 0xe23cdf,
				0x23da26, 0xe73ddc, 0x20d525, 0xe733dd, 0x2ed52b, 0xe430dd, 0x2ed629, 0xe331dd, 0x35db28, 0xeb37dd, 0xdd82b, 0xe228de, 0x10da2a, 0xe22adb, 0x13c52b, 0xe234da, 0x12c62b, 0xe234da, 0x12c62b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234da, 0x13c52b, 0xe234d8, 0x13c52b, 0xe234da, 0x13c52b, 0xe234c4, 0x13c52b, 0xe234da, 0x13c529, 0xfc35dd, 0xcc42b, 0xe336d2, 0xcc42b };
		System.arraycopy(aFor, 0, key, 75610, aFor.length);
	}

	private static void init254(int[] key) {
		int[] aFor = { 0xfd35da, 0xcc42b, 0xfd35da, 0xcc42b, 0xfd35da, 0xcc42b, 0xfd35da, 0xcc42b, 0xfd35da, 0xcc42b, 0xfd35da, 0xcc42b, 0xfd35da, 0xcc42b, 0xfd35da, 0xcc42b, 0xfd35da, 0xcc42b, 0xfd35da, 0xcc42b, 0xfd35da, 0xcc42b, 0xfd35da, 0xcc42b, 0xfd35da, 0xcc42b, 0xfd35da, 0xcc42b, 0xfd35da, 0xcc42b, 0xfd35da, 0xcc42b, 0xfc36da, 0xcc42b, 0xfc35d8, 0xcc42b, 0xfc35d8, 0xcc729, 0xfd36d8, 0xcc729, 0xfd36d8, 0xdc628, 0xfd36da, 0xfc42e, 0xfc35da, 0xdda28, 0xff37d9, 0xcd829, 0xfe36c6, 0x9c534, 0xff30c5, 0xbca3d, 0xd73ec5, 0x62df2b, 0x1763f3, 0x50c73e, 0x785ff4, 0x62ca3a, 0x7459f1, 0x6ccc3c, 0x7256ec, 0x53ca39, 0x7257e0, 0x50c93a, 0x7357ed, 0x56c938, 0x7056ee, 0x57f639, 0x7e57ef, 0x54f538, 0x7957e0, 0x54f538, 0x7a54ef, 0x55f637, 0x6455ee, 0x56f134, 0x6355ed, 0x55f037, 0x6256ec, 0x5af130,
				0x6356ea, 0x5ffe33, 0x6257e9, 0x5cfd32, 0x6354e9, 0x23fe35, 0x6155ee, 0x22f932, 0x6752ee, 0x20f933, 0x6b54ed, 0x27fa32, 0x6a57ed, 0x24f90d, 0x6b56ec, 0x24f90d, 0x7556ef, 0x27e70e, 0x7556d1, 0x27e70c, 0x7256ec, 0x25e50e, 0x7c56e9, 0x25e50e, 0x7f51e6, 0x23e600, 0x7f51e3, 0x1eed0b, 0x7c52e0, 0x22e80b, 0x6b4cd2, 0x59c31e, 0x40b9a1, 0x46d314, 0x46b0ba, 0x45d909, 0x41b2bf, 0x42df06, 0x46b0bb, 0x46df00, 0x47aebd, 0x47df00, 0x47adbd, 0x47df00, 0x47acbe, 0x47d801, 0x46adbf, 0x44db00, 0x47a3be, 0x42d97e, 0x45a0be, 0x4fdc7d, 0x46a5bc, 0x4ad978, 0x47a5bb, 0x57da7d, 0x44a5ba, 0x502572, 0x43a7b5, 0x57247d, 0x42a0b4, 0x57247d, 0x42a2b7, 0x54257c, 0x43a3b7, 0x5b247b, 0x4cacb1, 0x54257a, 0x4eaeb7, 0x552279, 0x4eacb6, 0x522366, 0x4fb3a9, 0x522366, 0x4cb1a9, 0x532279, 0x73b6a8, 0x52237a,
				0x71b6a9, 0x52237a, 0x77b4af, 0x502d78, 0x7ab6af, 0x512a77, 0x7eb1ae, 0x4e2d74, 0x7ab3ae, 0x4f2c75, 0x7ab3ac, 0x4c1376, 0x75b1ad, 0x4f1271, 0x72b6af, 0x4c1370, 0xfb5af, 0x4b124f, 0x3b590, 0x491c71, 0x3b5ae, 0x4d184d, 0xb4af, 0x501b4a, 0xb5a8, 0x52054c, 0x1b4a8, 0x54074e, 0xcb3ab, 0x55064d, 0xfb0aa, 0x530843, 0xeb1ab, 0x530843, 0xcb4ab, 0x530843, 0x32b4aa, 0x510a41, 0x37b4ad, 0x5f7443, 0x36b6ad, 0x5c7542, 0x35b1b2, 0x5f7443, 0x34b3b3, 0x587b42, 0x28b3b2, 0x597a43, 0x2cb0b2, 0x547b41, 0x28b0b3, 0x577d40, 0xd2b2b4, 0x557d41, 0xdfadb5, 0x537d40, 0xc3afb5, 0x507c43, 0xc4afb7, 0x527a41, 0xc8afb4, 0x537940, 0xccafb4, 0x6e7643, 0xc9acba, 0x617742, 0xcaadb4, 0x677142, 0xd7afba, 0x667043, 0xd5afbb, 0x614e43, 0xd9acbb, 0x60484c, 0xddabb4, 0x1d4e43, 0xdfabbb, 0x1a4d4c, 0xd2a8b9,
				0x1b4e4d, 0xd7a6bb, 0x194e4e, 0xcea7bb, 0x2e4a4e, 0xc9a4ba, 0x255449, 0xd7a4ba, 0x255449, 0xd4bbbb, 0x254a4a, 0xd5b8bb, 0x254a54, 0xd4bbbb, 0x254956, 0xd4bbbb, 0x254a54, 0xd4bba5, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bba5, 0x254a56, 0xd4bba7, 0x254a56, 0xd4bbb9, 0x254a56, 0xd4bba7, 0x254a54, 0xcabaa0, 0x3a4b56, 0xd5b9af, 0x3a4b56 };
		System.arraycopy(aFor, 0, key, 75910, aFor.length);
	}

	private static void init255(int[] key) {
		int[] aFor = { 0xcbbaa7, 0x3a4b56, 0xcbbaa7, 0x3a4b56, 0xcbbaa7, 0x3a4b56, 0xcbbaa7, 0x3a4b56, 0xcbbaa7, 0x3a4b56, 0xcbbaa7, 0x3a4b56, 0xcbbaa7, 0x3a4b56, 0xcbbaa7, 0x3a4b56, 0xcbbaa7, 0x3a4b56, 0xcbbaa7, 0x3a4b56, 0xcbbaa7, 0x3a4b56, 0xcbbaa7, 0x3a4b56, 0xcbbaa7, 0x3a4b56, 0xcbbaa7, 0x3a4b56, 0xcbbaa7, 0x3a4b56, 0xcbbaa7, 0x3a4b56, 0xc8bab9, 0x3a4b56, 0xc8bba7, 0x394a54, 0xc8bba7, 0x394a54, 0xc8bba7, 0x394a54, 0xc8bba7, 0x394a54, 0xc8bba7, 0x3a4953, 0xcbb8a2, 0x394853, 0xcaa7a3, 0x3b4851, 0xc9a7a7, 0x385751, 0xc9b8a1, 0x3d4e52, 0xd2b6a7, 0x33405c, 0x809db1, 0x25c51, 0x52fa84, 0x616657, 0x7cf79d, 0x696756, 0x70f39b, 0x6b6b49, 0x70f093, 0x506e48, 0x71f090, 0x526f45, 0x74f093, 0x535044, 0x7bf091, 0x525147, 0x7ef090, 0x535248, 0x7cf090, 0x535248, 0x62f191, 0x50554b, 0x65f190,
				0x53544c, 0x64f297, 0x53544c, 0x6bf295, 0x52554f, 0x6efd96, 0x53544c, 0x6dfc96, 0x52554d, 0x13ff97, 0x50534b, 0x14f990, 0x53524d, 0x19fe90, 0x52534e, 0x1ffe91, 0x515071, 0x1ffe91, 0x505170, 0xe193, 0x505171, 0x2e0ae, 0x505173, 0x5e3ad, 0x53514c, 0xbe3aa, 0x52504d, 0xbe3aa, 0x50564d, 0xae3af, 0x555949, 0x35e2ae, 0x575f42, 0xeea7, 0x4b4644, 0x7bd791, 0x68af51, 0x6ac9e0, 0x6bae51, 0x6ac6e2, 0x6bad55, 0x68c3e9, 0x68ad53, 0x69dcee, 0x69ad53, 0x69dfee, 0x69ac50, 0x69dfee, 0x69ab51, 0x69ddef, 0x69ab51, 0x6adc91, 0x6fa553, 0x6bdcec, 0x62a72e, 0x6adfee, 0x66a32a, 0x6bdfe9, 0x64a12c, 0x76dfea, 0x625f22, 0x71dde5, 0x655e2d, 0x70dae4, 0x655e2d, 0x70d8e7, 0x665f2c, 0x71d9e7, 0x665f2c, 0x7ed7e6, 0x675e2d, 0x7ed4e1, 0x65582f, 0x7ed6e0, 0x65582f, 0x79d7e1, 0x64472e, 0x7ad5e1, 0x654631,
				0x45d2e0, 0x644732, 0x47d2e1, 0x644732, 0x41d0e7, 0x674831, 0x4ed2e7, 0x644930, 0x4ad3e8, 0x654831, 0x56d5e8, 0x624b32, 0x57d4eb, 0x617431, 0x58d6ed, 0x627530, 0x5fd1ee, 0x617431, 0x23d1d1, 0x60770e, 0x28d0d1, 0x627930, 0x2bd1ee, 0x667d0c, 0x2dd7ec, 0x627908, 0x32d7ea, 0x60670e, 0x33d6ea, 0x66650c, 0x3ed1eb, 0x676403, 0x3dd2e4, 0x616a0d, 0x3cd3e7, 0x616a0f, 0x3ed6e7, 0x616a0f, 0xd6e6, 0x626b0c, 0x4d5e0, 0x6c150e, 0xbd7e1, 0x6c150e, 0x5d1fe, 0x6f140f, 0x4d3ff, 0x681b0e, 0x7dce1, 0x761510, 0x3dfe3, 0x741511, 0x9d9e2, 0x761411, 0xf2dae2, 0x741416, 0xfec4e2, 0x721417, 0xe2c6e2, 0x701417, 0xe4c7e3, 0x711316, 0xebc6e3, 0x711310, 0xeec5e4, 0x4c1c13, 0xebc6ea, 0x4c1c1d, 0xe7c6eb, 0x4a1a13, 0xe5c4eb, 0x551b12, 0xe7fbea, 0x531a12, 0xe4fbe5, 0x5c1813, 0xe0fae4, 0x5f1e12, 0x9dfbea,
				0x581d1d, 0x90f8e8, 0x5b101e, 0x8bfce4, 0x5d121e, 0xbcfce8, 0x560d1f, 0xa6fcea, 0x571318, 0xa2e2ea, 0x560d19, 0xa6fdeb, 0x570f1f, 0xa7fdee, 0x560c01, 0xa4fded, 0x560f07, 0xa4feeb, 0x560f04, 0xa6fef7, 0x570c01, 0xa6fdf2, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdf0, 0x570c03, 0xa6fdf2, 0x570c03, 0xa6fdec, 0x570c03, 0xa6fdf2, 0x570c01, 0xb8fcf5, 0x480d03, 0xa7fffa, 0x480d03 };
		System.arraycopy(aFor, 0, key, 76210, aFor.length);
	}

	private static void init256(int[] key) {
		int[] aFor = { 0xb9fcf2, 0x480d03, 0xb9fcf2, 0x480d03, 0xb9fcf2, 0x480d03, 0xb9fcf2, 0x480d03, 0xb9fcf2, 0x480d03, 0xb9fcf2, 0x480d03, 0xb9fcf2, 0x480d03, 0xb9fcf2, 0x480d03, 0xb9fcf2, 0x480d03, 0xb9fcf2, 0x480d03, 0xb9fcf2, 0x480d03, 0xb9fcf2, 0x480d03, 0xb9fcf2, 0x480d03, 0xb9fcf2, 0x480d03, 0xb9fcf2, 0x480d03, 0xb9fcf2, 0x4b0c03, 0xbffcec, 0x4b0c03, 0xb9fcf2, 0x4b0c01, 0xbafcf4, 0x4b0c01, 0xbafcf4, 0x4b0c01, 0xbafdf2, 0x480f06, 0xbafdf2, 0x4b0c01, 0xbafdf0, 0x4b0c01, 0xb9fcf0, 0x4b0c03, 0xa5e3f7, 0x4a1302, 0xbae3f2, 0x48101c, 0xbae3f2, 0x4d1e09, 0xadedf3, 0x143302, 0x9af9ee, 0xfd410b, 0xbde5de, 0x977c10, 0x89eadb, 0x9f7916, 0x8aecc2, 0x90761b, 0xb1e8c3, 0x927716, 0xb6d7c2, 0x937617, 0xb4d7c3, 0x9c7615, 0xb6d7cc, 0x9d7516, 0xb3d6cf, 0x9c7417, 0xadd7c0, 0x997418, 0xacd7ce,
				0x9a7319, 0xacd6c3, 0x9a7319, 0xa2d5c2, 0x9b7218, 0xa7d5c3, 0x9b7d1a, 0xa6dac1, 0x98721b, 0xd9dbc7, 0x9b701c, 0xdfdac7, 0x9a711b, 0xd3dbc6, 0x987618, 0xd4dac6, 0x997719, 0xd6daf9, 0x997719, 0xd6d8f8, 0x86681a, 0xd4d9c5, 0x876b1b, 0xd1d9fa, 0x876b1b, 0xdfd9fd, 0x876b1b, 0xdfd9fd, 0x856d1b, 0xdddefb, 0x816918, 0xdadffa, 0xb86210, 0xd8d8fc, 0x86610c, 0xcdc8e5, 0xe84e2e, 0xe3239a, 0xe04b2a, 0xe12c9b, 0xe3452f, 0xe02b93, 0xe04428, 0xe03494, 0xe04528, 0xe03795, 0xe0442b, 0xe03094, 0xe0442b, 0xe03194, 0xe0442b, 0xe133ea, 0xe54b2b, 0xe133ea, 0xe64f28, 0xe136e8, 0xea4d2b, 0xe636e8, 0xe84b2c, 0xfa35ea, 0xe94a2d, 0xfac8ea, 0xee4b22, 0xfac8ea, 0xee4b22, 0xfbcde8, 0xed4a23, 0xfacce8, 0xed4a23, 0xf5c2e9, 0xec4b22, 0xf6c1ee, 0xed4d20, 0xf1c0ef, 0xea4e20, 0xf6c1ee, 0xeb5121, 0xf5c3ee,
				0xea503e, 0xcac4ef, 0xeb513d, 0xc8c4ee, 0xec523a, 0xc8c4ee, 0xed533b, 0xcacaee, 0xe05139, 0xcdcae1, 0xe35636, 0xd3cbee, 0xe15434, 0xd2f4ed, 0xe45437, 0xdcf6eb, 0xe65537, 0xddf1ea, 0xe35435, 0xa2f1d5, 0xe1570a, 0xa9feea, 0xe3570b, 0xaaffd5, 0xe15535, 0xabfcea, 0xe55109, 0xb5ffeb, 0xe74f0f, 0xb5ffec, 0xe14d09, 0xb9f9ee, 0xe04c06, 0xbafae1, 0xe64208, 0xbbfbe2, 0xe64208, 0xb9f9e2, 0xe6450a, 0x87f9e3, 0xe54409, 0x83fae5, 0xe44508, 0x8387e7, 0xe44508, 0x8d81f8, 0xe74409, 0x8a82f9, 0xe44508, 0x8a82e7, 0xfa4a17, 0x8880e5, 0xfe4b17, 0x8586e4, 0xfa4b17, 0x7885e5, 0xfd4a11, 0x779ae5, 0xfa4b11, 0x6a99e4, 0xfa4b10, 0x6999e3, 0xfc4d16, 0x6599e2, 0xff4c11, 0x609ae4, 0xc24313, 0x6599ea, 0xc2431d, 0x689fea, 0xc54312, 0x6a9dea, 0xdb4213, 0x69a2e9, 0xda7d11, 0x6d9ce8, 0xd57e10, 0x6f9de5,
				0xd17813, 0x139ee5, 0xd57810, 0x1e9fe3, 0xcf7616, 0x159bed, 0xf76b14, 0x1d9ae3, 0xee6e1b, 0x1a9cee, 0xee6c1f, 0x1b9ded, 0xef6d1c, 0x1f9dee, 0xee6f1a, 0x1f9eeb, 0xee6f04, 0x1c9ee8, 0xef6e03, 0x1c9ee8, 0xee6f07, 0x1f9ef4, 0xee6c02, 0x1f9df1, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9df3, 0xee6c00, 0x1f9df1, 0xee6c00, 0x1f9def, 0xee6c00, 0x1f9df1, 0xee6c02, 0x19cf6, 0xf16d00, 0x1e9ff9, 0xf16d00 };
		System.arraycopy(aFor, 0, key, 76510, aFor.length);
	}

	private static void init257(int[] key) {
		int[] aFor = { 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x39df1, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x9cf3, 0xf16d00, 0x1f9ff5, 0xf16b01, 0x1f99f0, 0xf0681c, 0x29bf2, 0xf06f03, 0x1e9cf5, 0xfc6f0e, 0x3e89f8, 0xa35a13, 0xda9ef0, 0x943220, 0xa5afeb, 0xb6222b, 0xa6b3e0, 0xb42730, 0xaeb1e2, 0x8e2c31, 0xad8de2, 0x892933, 0xab89e3, 0x8d2b36, 0xaa8bef, 0x822b33, 0xab89e8, 0x802a30, 0xb088e4, 0x842b35, 0xb289e5, 0x852a37, 0xb08eee, 0x862b34, 0xb18eee, 0x882932,
				0xb281ef, 0x892833, 0xb58fee, 0x892835, 0xb681e8, 0xf42b35, 0xb082e8, 0xf72f36, 0xbd84e8, 0xf42e35, 0xbe84e9, 0xf02836, 0xa185e8, 0xf02836, 0xbf86e8, 0xef2937, 0xbf86e8, 0xed3737, 0xb886d5, 0xee3436, 0xb985d5, 0xee3436, 0xb787d3, 0xed3237, 0xb087d4, 0xed3237, 0xb087d4, 0xef3031, 0x8c8bda, 0xe9342b, 0xbf85c3, 0xfd1a1f, 0xdc65a0, 0xd00811, 0xd06cbd, 0xd1040e, 0xd068b4, 0xd0070a, 0xd069b6, 0xd01b09, 0xd069b4, 0xd01b08, 0xd06fc9, 0xd01a0b, 0xd06eca, 0xd01a0b, 0xd06fc9, 0xd2170b, 0xd66fc8, 0xd0150b, 0xd86fc8, 0xd2150a, 0xdf69ce, 0xd1140b, 0xc168cf, 0xd21708, 0xc696ce, 0xd31409, 0xc096ce, 0xd41506, 0xc090cd, 0xd51607, 0xc290cc, 0xdb1605, 0xc191cf, 0xdb1b03, 0xc090ce, 0xdb1b03, 0xc090c8, 0xdb1d04, 0xc692ca, 0xd80205, 0xc793d5, 0xd80205, 0xc693d5, 0xd90104, 0xf992d6, 0xdb0405,
				0xf893d1, 0xdc0b02, 0xfa91d7, 0xd30a00, 0xf894d7, 0xd50a0f, 0xe594d6, 0xd50b01, 0xe7aad8, 0xd30b02, 0xe6a9d8, 0xde0a03, 0xe7aedf, 0xdb0b03, 0xe6adde, 0xa60501, 0xe2a2df, 0xaa0b3f, 0xe3a1e0, 0xa80d01, 0xe5a1e3, 0xab0c00, 0xfba2e2, 0xaa0d01, 0xf8bde2, 0xab0c06, 0xfcbfe2, 0xa40b07, 0xfdbee1, 0xa70806, 0xfbb0ef, 0xa60905, 0xfbb0ed, 0xa50a04, 0xfab1ee, 0x9b0c02, 0xffb3ee, 0x9a7303, 0xf3b2ec, 0x99701c, 0xf3b3f3, 0x9f7602, 0xf1b3f2, 0x9f7403, 0xf1b3ec, 0x9e7b1c, 0xefb1ee, 0x9c7a1f, 0xe4b6ee, 0x9e7a1f, 0x1eb4ed, 0x9a6419, 0x1db4ea, 0x967b18, 0x19aaeb, 0x887918, 0x1aa8ea, 0x8e7b1e, 0x17afea, 0x8c791e, 0x13afeb, 0xb2771d, 0x14aeeb, 0xbc7513, 0x15aee5, 0xb8721d, 0x17aee4, 0xa6731c, 0x12aee5, 0xa67012, 0x13afe5, 0xa54f13, 0x12ade0, 0xa84912, 0x69ace1, 0xa24515, 0x75aee3, 0x94431a,
				0x7face0, 0x8f5c18, 0x7eaced, 0x8f5d1e, 0x7dadef, 0x8f5d1e, 0x7dadef, 0x8f5d1e, 0x7dadef, 0x8c5c1e, 0x7eacef, 0x8c5c1e, 0x7eadf1, 0x8c5c1e, 0x7eadf1, 0x8c5d00, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7eadf1, 0x8f5c02, 0x7dacf1, 0x8f5c02, 0x7dacf3, 0x8f5c02, 0x7eaded, 0x8f5c02, 0x7eadf3, 0x8f5c00, 0x60acf4, 0x905d02, 0x7faffb, 0x905d00 };
		System.arraycopy(aFor, 0, key, 76810, aFor.length);
	}

	private static void init258(int[] key) {
		int[] aFor = { 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x905d00, 0x61acf3, 0x915d00, 0x7cacf0, 0x915d00, 0x7cacf0, 0x925c1d, 0x63aef0, 0x905a1f, 0x65afea, 0x8a5813, 0x6da1ee, 0xa5491d, 0x390f1, 0x7a512b, 0x29feff, 0x196536, 0x3afef9, 0x21662b, 0x3af1f8, 0x276a2d, 0x3af5fc, 0x1a562d, 0x38f6fd, 0x1e5428, 0x38f5f2, 0x12572c, 0x38f4f0, 0x14572b, 0x3bf4ff, 0x8572e, 0x3ff4fc, 0x75029,
				0x34f5f2, 0x75029, 0x30f5f3, 0x95229, 0x35f5f2, 0x95229, 0x35f5f2, 0x95229, 0x36fbf4, 0x765128, 0x34fbf5, 0x72502a, 0x3afcf4, 0x735629, 0x39fcf5, 0x75502b, 0x3afdcb, 0x745016, 0x3bfec8, 0x6b5117, 0x3bfec8, 0x6a4e28, 0x3efec9, 0x6b4f2b, 0x3cfec8, 0x6b4c29, 0x33ffcb, 0x6a4b28, 0x36ffcc, 0x6b4a2f, 0x37fecd, 0x694829, 0xbf2c1, 0x6e4f2c, 0xcf5c0, 0x595a24, 0x6cc8e9, 0x72b453, 0x78dfe3, 0x7cb652, 0x7cdfe7, 0x7cb45f, 0x7cd8e4, 0x7ca85a, 0x7cdbe4, 0x7ca959, 0x7cdae7, 0x7cae26, 0x7cdae7, 0x7cae26, 0x7cd9e5, 0x7ca027, 0x78dae3, 0x7ea020, 0x76dae3, 0x7fa121, 0x74dae2, 0x79a621, 0x69dae5, 0x7ba423, 0x6f25e5, 0x7ba423, 0x6826e4, 0x7ca52c, 0x6820e7, 0x7ea52b, 0x6923e0, 0x70a529, 0x6a22e3, 0x70a82f, 0x6b23e2, 0x70a82f, 0x6b23e4, 0x76ae29, 0x6b21e7, 0x75b128, 0x6a20f8, 0x75b128, 0x6b20f8,
				0x74b229, 0x5421fb, 0x76b42f, 0x5523fb, 0x71bb28, 0x5721fd, 0x7eba2a, 0x5527f3, 0x78b92b, 0x5626f2, 0x66b925, 0x5719fd, 0x63b827, 0x541afd, 0x6cb926, 0x561afa, 0x6dbe21, 0x5018fc, 0x10b023, 0x5318fd, 0x16b022, 0x5f1afd, 0x14b61c, 0x591afe, 0x17b71d, 0x4719f9, 0x16b61a, 0x4406fe, 0x17b71a, 0x4105ff, 0x19b11a, 0x4004fc, 0x1ab21b, 0x460af2, 0x1bb318, 0x460af0, 0x18b019, 0x780cf2, 0x19b11e, 0x7a0ff5, 0x1eb019, 0x7670f7, 0x1eb019, 0x7572f6, 0x19b106, 0x7774f6, 0x18b207, 0x7675e8, 0x19bd18, 0x6877ea, 0x1bbc1b, 0x6d77eb, 0x14ba1a, 0x6a74e9, 0xebbb1a, 0x6d6be9, 0xe7bb1b, 0x6a69e8, 0xfabb1c, 0x6b6ae8, 0xf8b81d, 0x6f6be8, 0xf5be1d, 0x6868e9, 0xc9be1c, 0x6c66eb, 0xc4bf1c, 0x6e63eb, 0xc3bf13, 0x6c63ea, 0xdcbe10, 0x6d63e8, 0xdfbd11, 0x6c62e9, 0xda821f, 0x6263ec, 0xdc801f, 0x1b67ed,
				0xc88c18, 0x1761ee, 0xf08f18, 0x60ed, 0xf5901b, 0x760e8, 0xf59019, 0x760e8, 0xf59019, 0x760e8, 0xf59019, 0x760e8, 0xf59019, 0x760e8, 0xf59019, 0x760e8, 0xf59019, 0x760e8, 0xf59019, 0x760e8, 0xf59019, 0x461ea, 0xf59019, 0x461ea, 0xf59019, 0x461ea, 0xf59019, 0x461ea, 0xf59019, 0x461ea, 0xf59019, 0x461ea, 0xf59019, 0x461ea, 0xf59019, 0x461ea, 0xf59019, 0x461ea, 0xf59019, 0x461ea, 0xf59019, 0x461ea, 0xf59019, 0x461ea, 0xf59019, 0x461ea, 0xf59019, 0x461ea, 0xf59019, 0x461ea, 0xf59019, 0x461ea, 0xf59019, 0x760ea, 0xf59019, 0x760e8, 0xf59019, 0x461f6, 0xf59019, 0x461ea, 0xf59019, 0x1a60ec, 0xea911a, 0x563e1, 0xea911a };
		System.arraycopy(aFor, 0, key, 77110, aFor.length);
	}

	private static void init259(int[] key) {
		int[] aFor = { 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea911a, 0x1b60e9, 0xea9118, 0x1963e8, 0xeb9207, 0x1a63f6, 0xea9306, 0x562f6, 0xe89306, 0x1867f5, 0xea9f0d, 0x6bf8, 0xdc860c, 0x106cf9, 0xbabb15, 0x3d73f3, 0x63c124, 0x2267f6, 0x4fd3b, 0x1269ea, 0xff3d, 0x1367ee, 0xff839, 0x2e66ed, 0xac639, 0x2f5aed, 0x7c53a, 0x2c67e0, 0x6c537, 0x2b65e0, 0x1bc738, 0x2f64e2, 0x1ac03e,
				0x2865e0, 0x1ac03c, 0x2d65e4, 0x17c333, 0x2a64ea, 0x17c333, 0x2a64ea, 0x17c333, 0x296be9, 0x69c133, 0x296be9, 0x6ac735, 0x2e6ae8, 0x68c635, 0x2f6de8, 0x66c037, 0x2c6ed7, 0x60c008, 0x2e6ee8, 0x60c008, 0x306ee9, 0x61c10b, 0x3371e8, 0x60c30a, 0x3572e8, 0x60c30a, 0x3673e8, 0x6ec00a, 0x3475ee, 0x6ec00a, 0x3475ee, 0x6fc30b, 0x317aed, 0x53c005, 0x3378ed, 0x6ccf04, 0x2b6ed2, 0x6e417, 0x1e92a3, 0x14f90c, 0x169ea3, 0x16f911, 0x1690a6, 0x16fe1d, 0x178ea2, 0x16fc1c, 0x168da1, 0x16fe1d, 0x148aa0, 0x15ff1e, 0x1589a0, 0x15f060, 0x1689a1, 0x13f063, 0x1b8aa0, 0x12f162, 0x198aa1, 0x15f762, 0x1b8aa6, 0xbf562, 0x1974a4, 0xbf562, 0x1877ab, 0xcf461, 0x1970aa, 0xcf461, 0x1a71ab, 0xcf461, 0x1473ad, 0xefa63, 0x1571ae, 0xffa63, 0x1476ad, 0x8fb62, 0x1575b2, 0xbfa63, 0x156bb1, 0xbfa63, 0x156bb3,
				0xaf962, 0x2a6ab0, 0xbfe63, 0x2f68b7, 0xaff62, 0x2c67b4, 0x5fd62, 0x2e61ba, 0x1fc62, 0x2e61ba, 0x1fff63, 0x2b61bb, 0x1efe62, 0x265fb9, 0x1ffd62, 0x245fbe, 0x18fc63, 0x2659bc, 0x64fe63, 0x2059bd, 0x65f162, 0x225b83, 0x6af061, 0x215c82, 0x6df160, 0x225f84, 0x72ef67, 0x205f83, 0x73ee67, 0x275c82, 0x72ef64, 0x255a8c, 0x7dec65, 0x24548d, 0x7eed64, 0x23548c, 0x7dee65, 0x1d558d, 0x7fe867, 0x1c568c, 0x78e960, 0x1f298c, 0x77e861, 0x1d2b8e, 0x76ef7e, 0x1b2b91, 0x75ee61, 0x1b2990, 0x74e162, 0x52b90, 0x76e061, 0x2b91, 0x79e660, 0x52893, 0x85f860, 0x12894, 0x86f960, 0xc2a96, 0x81f961, 0xf2b96, 0x9df86f, 0xb2c96, 0x92f96f, 0xf2c99, 0xaefa6f, 0xb2298, 0xa3fb6f, 0x82199, 0xa4fa6e, 0x82497, 0xa4fa6e, 0x82497, 0xa5fb6f, 0x152599, 0xa1fb6d, 0x1a1b9f, 0xdcf86c, 0xf119a, 0xd0fc6c, 0x370c99,
				0xdafd6d, 0x2b0c9c, 0xd8fe6c, 0x290f9d, 0xd8fe6c, 0x290f9d, 0xd8fe6c, 0x290f9d, 0xd8fe6c, 0x290f9d, 0xd8fe6c, 0x290f9d, 0xd8fe6c, 0x290f9d, 0xd8fe6c, 0x290f9d, 0xd8fe6c, 0x290f9d, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x290f9d, 0xd8fe6c, 0x290f83, 0xd8fe6c, 0x290f9f, 0xd8fe6c, 0x370e99, 0xc7ff6f, 0x280d94, 0xc7ff6f };
		System.arraycopy(aFor, 0, key, 77410, aFor.length);
	}

	private static void init260(int[] key) {
		int[] aFor = { 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc7ff6f, 0x360e9c, 0xc4fe6d, 0x300e82, 0xc4fe6d, 0x300e9c, 0xc3ff6e, 0x330f9c, 0xdee16c, 0x350e82, 0xdbfc73, 0x290a86, 0xd9f27c, 0x370983, 0xe1f97e, 0x5b1d84, 0xcad36e, 0xa36bb7, 0xe1c97b, 0xc25bb1, 0xd7cb7d, 0xc75ab6, 0xdec163, 0xff5eba, 0xd8fc61, 0xf15cb9, 0xdefe62, 0xf560b7, 0xdffe60, 0xf461b8, 0xd8c163, 0xf760be,
				0xc6c361, 0xf667be, 0xc7c363, 0xf066b9, 0xcbc36e, 0xf765b6, 0xcbc36e, 0xf765b6, 0xcac26f, 0xf46ab5, 0xcbc36c, 0x8a69b6, 0xc9c56a, 0x8f69b7, 0xcac26b, 0x8c68b7, 0xc4c469, 0x8d69b6, 0xc4c469, 0x896a88, 0xc7c468, 0x976a89, 0xc6c56b, 0x976a89, 0xc5da6a, 0x916a8b, 0xc5da6a, 0x90758b, 0xc7c468, 0x9e708b, 0xc4c56f, 0x9e708b, 0xc5c66e, 0x99718a, 0xc4c96f, 0xa27584, 0xceb777, 0x950492, 0xd69940, 0xfd1181, 0xe56735, 0xec0d9b, 0xec6836, 0xe80181, 0xea6d3b, 0xeb0285, 0xe97345, 0xeb01fb, 0xea7241, 0xe806fb, 0xe87341, 0xe806fa, 0xe87144, 0xea0984, 0xee7344, 0xe80885, 0xe17347, 0xed0e84, 0xe07040, 0xee0d82, 0xfe7246, 0xeff283, 0xfd7345, 0xeff28d, 0xfb7147, 0xeef58c, 0xfb7147, 0xeef58e, 0xf87044, 0xeff68f, 0xf67e42, 0xeff48e, 0xf57f43, 0xeef38d, 0xf27e42, 0xeff092, 0xf17f43, 0xecef92,
				0xf27e40, 0xecef90, 0xf37d41, 0xd3ee93, 0xf27a40, 0xd6ee94, 0xf37b40, 0xd4ec96, 0xfd754e, 0xd0ee96, 0xfe724f, 0xceee95, 0xfe734d, 0xcdee94, 0xfb714d, 0xc3ee97, 0xf94f4b, 0xc5ef90, 0xfb4d4d, 0xbbe992, 0xfa4c72, 0xbeeb92, 0xfb434d, 0xbdeaad, 0xfa404c, 0xb0ebae, 0xfc464a, 0xb2eba9, 0xe2444c, 0xb0f4a8, 0xe3454d, 0xb7f7a8, 0xe2444e, 0xb4f0a9, 0xe34541, 0xbbf2a6, 0xe24a4e, 0xbef2a9, 0xe34b41, 0xbcf1a6, 0xdd4d4f, 0xbff0a5, 0xdb4f49, 0xb38ea4, 0xda4c4a, 0xb38ea4, 0xd94d4b, 0xb489a4, 0xda4c54, 0xb78aa4, 0xd94d55, 0xa984a4, 0xdb4e56, 0xae84a7, 0xd64856, 0xaa86a2, 0xd54956, 0x5186a0, 0xd75655, 0x5e87a2, 0xd2565a, 0x5d85a0, 0xcf5659, 0x5a83a0, 0xcd5559, 0x5683af, 0xc95b59, 0x6a83ae, 0xcc5a58, 0x6b82ae, 0xc25958, 0x6884a0, 0xc15b59, 0x6a84ae, 0xc65a5b, 0x7784ae, 0xc0595e, 0x4b8ad,
				0xd65d59, 0x9b6ae, 0xe15959, 0xfabac, 0xff5943, 0xfaaaf, 0xe05844, 0x11a9ab, 0xe0585a, 0x11a9ab, 0xe1595b, 0x11a9ab, 0xe1595b, 0x10a8aa, 0xe1595b, 0x10a8aa, 0xe1595b, 0x10a8aa, 0xe1595b, 0x10a8aa, 0xe1595b, 0x10a8aa, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8a8, 0xe1595b, 0x10a8aa, 0xe1595b, 0x10a8b4, 0xe1595b, 0x11a9a9, 0xfe595b, 0x11a9ae, 0xff5858, 0x10aaa3, 0xff5858 };
		System.arraycopy(aFor, 0, key, 77710, aFor.length);
	}

	private static void init261(int[] key) {
		int[] aFor = { 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff5858, 0xfa8aa, 0xff585a, 0xea8b4, 0xfe4759, 0xca9b6, 0xf84645, 0xab6b0, 0xfa5841, 0x14b6af, 0xe44641, 0x16b7ac, 0xe2425c, 0x17bba4, 0xfc4d5e, 0x27bea3, 0xe3565b, 0x4481b6, 0xc74556, 0xa7f68d, 0xe65e58, 0xc4c494, 0xdd5f5b, 0xcac688, 0xd65c5f, 0xf4c98b, 0xde515e, 0xf0cd89, 0xdd5351, 0xf7f28a, 0xdd5054, 0xf7f28a, 0xdb5157, 0xebf28b, 0xd95150,
				0xeef58d, 0xd75151, 0xedf48c, 0xd65252, 0xeaf78e, 0xd65252, 0xe8f489, 0xd75353, 0x95f488, 0xd15d55, 0x97f78b, 0xd15d55, 0x99f48b, 0xd05e54, 0x9af5b4, 0xd1596b, 0x9df48b, 0xd05a6a, 0x9ef48b, 0xd15b69, 0x80f48b, 0xd15b69, 0x85eb8a, 0xd15b69, 0x85eb88, 0xd05a6a, 0x88e88e, 0xd15b6b, 0x8bee8f, 0xd15b6b, 0x8aed8e, 0xd15b6d, 0x8fef8e, 0xe95365, 0x88ea8c, 0xdb4753, 0x9fd887, 0xaf5541, 0xb02bff, 0xbf5949, 0xb832fe, 0xba5b46, 0xba30fd, 0xb84042, 0xb931ff, 0xb84245, 0xba36ff, 0xba4346, 0xba35fd, 0xba4d41, 0xba34ff, 0xbe4e3f, 0xb835fe, 0xbf493f, 0xb535fd, 0xb94b39, 0xb536f8, 0xbb493b, 0xaac9fe, 0xbb493b, 0xafc8fd, 0xb94b35, 0xaecffc, 0xbb4b35, 0xaecffc, 0xba4a35, 0xaccdfe, 0xb44433, 0xadcefd, 0xb44433, 0xaecffe, 0xb24231, 0xa9ccfe, 0xb5432e, 0xa8d3ff, 0xb5432e, 0xabd2fc, 0xb5432e,
				0x95d0fa, 0xb44429, 0x90d0fd, 0xb54528, 0x93d3fd, 0xbb4b2a, 0x97d1f3, 0xb94d2a, 0x89d1f0, 0xb94c28, 0x8ad1f1, 0xbf4c2b, 0x87d3f1, 0xbe732a, 0x84d2f6, 0xb87128, 0x87d2f6, 0xc67716, 0x84d0c9, 0xc77829, 0x81d1cb, 0xc67b28, 0x8cd0ca, 0xc77c29, 0x89d1ca, 0xc67f2e, 0x97d0cd, 0xc56029, 0x91d2cf, 0xc46128, 0x92d5cf, 0xc56027, 0x9dd6ce, 0xc46e26, 0x98d6c1, 0xc66f27, 0x99d5c0, 0xf96e28, 0x9dd2c2, 0xf86f29, 0x9fafc5, 0xf76e28, 0x9eacc6, 0xf46f29, 0x9fabc7, 0xf36e28, 0x9ea8d8, 0xf06f29, 0x80a6da, 0xf26f2e, 0x84a6db, 0xff6c2e, 0x81a7d9, 0x36a2e, 0x87a4db, 0x6b2c, 0x89badb, 0x56b23, 0x88bad5, 0x76923, 0x95bdd5, 0x16b23, 0x96bcd0, 0xc6b23, 0x91b2d0, 0x306825, 0x93b1d0, 0x356826, 0x90b3d3, 0x366f27, 0x9cb1d3, 0x2e5124, 0x95b0d0, 0x505224, 0x83b4d1, 0x5c5d24, 0xb7b3d3, 0x464326, 0xb7b2c9,
				0x464025, 0xa8b4cf, 0x444627, 0xb4b4c8, 0x454539, 0xb5b5c9, 0x454539, 0xb5b5c9, 0x454539, 0xb5b5c9, 0x454539, 0xb5b5c9, 0x454539, 0xb5b5c9, 0x454539, 0xb5b5c9, 0x454539, 0xb5b5c9, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb5b5cb, 0x454539, 0xb4b4c8, 0x454539, 0xb5b5d7, 0x454539, 0xaab5cb, 0x454539, 0xaab5cc, 0x44443a, 0xabb6c1, 0x45443a };
		System.arraycopy(aFor, 0, key, 78010, aFor.length);
	}

	private static void init262(int[] key) {
		int[] aFor = { 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x45443a, 0xb5b4c8, 0x454438, 0xb5b6c9, 0x5b4626, 0xb4a9d7, 0x454625, 0xb6a8d7, 0x454625, 0xb6a9cb, 0x475927, 0xb2abca, 0x415927, 0xb2adc8, 0x5c593a, 0xb4aacf, 0x6b5837, 0xbbb0c5, 0xc6c2b, 0x9fa0cc, 0xf71815, 0xc086d2, 0xdf1317, 0xcd82df, 0xdb1610, 0xc483c3, 0xed1814, 0xc185c3, 0xed1a1b, 0xc4b8c0, 0xec1b1c, 0xc6b8c0,
				0xe81a1b, 0xd9b8c1, 0xed1b1a, 0xd8b8c4, 0xee1c1b, 0xd6b9fb, 0xee1c25, 0xd4b9f8, 0xef1f26, 0xd3bafa, 0xee1d21, 0xafbbfb, 0xec1327, 0xa9bafa, 0xef1024, 0xa7b9fa, 0xef1024, 0xa6bafb, 0xec111b, 0xa7bdc4, 0xeb1024, 0xa5bec5, 0xeb1024, 0xbbbec5, 0xea1127, 0xb9bec5, 0xed0e26, 0xb9bec7, 0xec0f25, 0xbbbec6, 0xe30c22, 0xbab8c1, 0xe30c22, 0xb9b9c6, 0xe30c22, 0xbeb9c1, 0xdd0228, 0xb8bfc3, 0xe6062b, 0xb3b7c9, 0xf2281a, 0xdca4d3, 0xc4de68, 0xc8b0df, 0xc9d66b, 0xc9b1de, 0xc9da65, 0xc9b7df, 0xc9c564, 0xc8b3d8, 0xc8c562, 0xc8b2de, 0xc8cb63, 0xc9b1dc, 0xcbca1c, 0xcfb0dc, 0xc9cb1c, 0xc0b0dd, 0xcacc1f, 0xc6b1dc, 0xc8ce1f, 0xd8b1db, 0xc9311e, 0xddb0d8, 0xcb3310, 0xdcb7d9, 0xcb3310, 0xdeb7d9, 0xca3210, 0xdcb5db, 0xc43c16, 0xddb6d8, 0xc43c16, 0xdeb7db, 0xc53b15, 0xdeb5da, 0xc23a0a, 0xdfaadb,
				0xc23a0a, 0xdfaadb, 0xc13b09, 0xe1a8dd, 0xc03c0e, 0xe2a8dd, 0xc13d09, 0xe4aadc, 0xc33d0a, 0xeaa4d2, 0xc73f08, 0xe9a3d1, 0xd93f0b, 0xe8a1d2, 0xdc3f08, 0xeaa0d1, 0xd2010a, 0xeba3d6, 0xd0010b, 0xeda5d5, 0xd20335, 0x93a5eb, 0xd00d0b, 0x96a4e9, 0xd10e0a, 0x98a4eb, 0xd20f09, 0x9fa3eb, 0xd00d0f, 0x80a3ed, 0xd10c0e, 0x82bdeb, 0xd60f0d, 0x80bbea, 0xd70e02, 0x8eb9e8, 0xd20101, 0x8cb8e9, 0xd2010f, 0x8dbbe8, 0xed0000, 0x8ebbe9, 0xea0703, 0x8cb8e8, 0xeb7804, 0x83b9e9, 0xe97a06, 0x82bee8, 0xee7b07, 0x82bee8, 0xef7818, 0x80b0ea, 0xf2791e, 0x87bee8, 0xff771e, 0x83bce8, 0x2701e, 0x86beeb, 0x701f, 0x8aa0eb, 0x6701e, 0x8ba1ea, 0x1b731e, 0x89a7ea, 0x1a7119, 0x8fa7eb, 0x187019, 0x83a9eb, 0x1d731f, 0xbda4ea, 0x1f7c1e, 0xbca5ed, 0x147f1c, 0xa4a2ee, 0x1f431a, 0xd6a5ec, 0x34d1a, 0xe1a1ec, 0xa4f1b,
				0xf8bfee, 0xc4f1f, 0xfebef2, 0xf4c1e, 0xe1b8f4, 0xd491e, 0xfdbbf1, 0xc4a00, 0xfcbaf0, 0xc4a00, 0xfcbaf0, 0xc4a00, 0xfcbaf0, 0xc4a00, 0xfcbaf0, 0xc4a00, 0xfcbaf0, 0xc4a00, 0xfcbaf0, 0xc4a00, 0xfcbaf0, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf2, 0xc4a00, 0xfcbaf0, 0xc4a00, 0xfcbaee, 0xc4a00, 0xe3baf2, 0xc4a00, 0xe1baf5, 0xf4b03, 0xe1b9f8, 0xf4b03 };
		System.arraycopy(aFor, 0, key, 78310, aFor.length);
	}

	private static void init263(int[] key) {
		int[] aFor = { 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe0baf3, 0xf4b03, 0xe1b9f0, 0xc4a03, 0xe1bbf1, 0xf4b1e, 0xffa5f1, 0xc4a1f, 0xffa5f1, 0xd4b1a, 0xfda4f1, 0x134b1b, 0xfeb9f7, 0xe4f05, 0xffb5f2, 0xb480e, 0xf8b0f5, 0x1e4509, 0xdea1fd, 0x487115, 0x2bc2c3, 0x6b670c, 0x43fdc2, 0x636412, 0x78f3df, 0x666911, 0x47f4c1, 0x656a10, 0x46cac6, 0x616a11, 0x4dcac8, 0x626a10, 0x56c8c7, 0x636b1f,
				0x51cec1, 0x63681e, 0x50cec1, 0x64691f, 0x51cec2, 0x66681f, 0x5fcfc3, 0x666819, 0x58c0c3, 0x676918, 0x25c3c5, 0x616a18, 0x27c0c6, 0x616a18, 0x26c1c7, 0x6e6d27, 0x25c1f8, 0x6e6d27, 0x23c0f8, 0x6d6e18, 0x3dc0f9, 0x6c6f1b, 0x3fc0fb, 0x6b701a, 0x3dc0f8, 0x6a711b, 0x3dc3fa, 0x657018, 0x3cc4fb, 0x657018, 0x3fc5fc, 0x657018, 0x3fc5fc, 0x647319, 0x6cef5, 0x62711b, 0x3ccf5, 0x507d10, 0x18dacf, 0x2b491f, 0x3637dc, 0x3a4665, 0x3e2dd3, 0x3f406b, 0x3f2bd3, 0x3f4468, 0x3e31a8, 0x3e4716, 0x3e30a8, 0x3e4817, 0x3f32d6, 0x3e4817, 0x3a32d5, 0x3e4815, 0x3833d4, 0x314815, 0x3d35d6, 0x304b12, 0x2034d4, 0x31b413, 0x2535d5, 0x33b61d, 0x2432da, 0x33b61d, 0x2632d4, 0x33b61d, 0x2431d4, 0x3db81f, 0x2432d3, 0x3db81f, 0x2733d2, 0x3cbf1c, 0x2032d3, 0x3dbc03, 0x232ccc, 0x3dbc03, 0x232ccc, 0x3cbd1c,
				0x1d2ece, 0x3cba1d, 0x1d2ece, 0x3fb81d, 0x1c2fc9, 0x3ab71f, 0x122dc9, 0x38b111, 0x142cc8, 0x3bb112, 0x142cca, 0x25b213, 0x1612ca, 0x20b210, 0x1710ca, 0x2db316, 0x1116c8, 0x2cb017, 0x1216ca, 0x50b115, 0x1618f5, 0x51b214, 0x1818f5, 0x52b317, 0x1f1ff5, 0x51b216, 0x11cf4, 0x50b317, 0x502f3, 0x53b016, 0xb04f1, 0x52b119, 0x906f1, 0x55be18, 0xb07f0, 0x55be16, 0xa04f1, 0x55be16, 0x3505fe, 0x57b814, 0x3206fe, 0x55c612, 0x3d07ff, 0x54c511, 0x3f01e1, 0x53c410, 0x3f01ff, 0x52c70f, 0x3d0ffd, 0x4dc60e, 0x3f0ffa, 0x49c50c, 0x3009f8, 0x4ec40c, 0xcc0afe, 0x4ac50e, 0xc115ff, 0x4fc50d, 0xc014fc, 0x52c70f, 0xc113fd, 0x54c70e, 0xc212fa, 0x5bc409, 0xc01cfc, 0x5dc509, 0xc21dfc, 0x61c40f, 0xca1ffd, 0x78c20d, 0xc722fe, 0xac60c, 0xd32cf8, 0x30c00b, 0xde2fff, 0x2cdf0c, 0xd92efe, 0x2bdf11, 0xdb2fff,
				0x2bdd10, 0xc52eff, 0x29df12, 0xd92de3, 0x28dc12, 0xd82ce2, 0x28dc12, 0xd82ce2, 0x28dc12, 0xd82ce2, 0x28dc12, 0xd82ce2, 0x28dc12, 0xd82ce2, 0x28dc12, 0xd82ce2, 0x28dc12, 0xd82ce2, 0x28dc12, 0xc72de2, 0x28dc12, 0xc72de2, 0x28dc12, 0xc72de2, 0x28dc12, 0xc72de2, 0x28dc12, 0xc72de2, 0x28dc12, 0xc72de2, 0x28dc12, 0xc72de2, 0x28dc12, 0xc72de2, 0x28dc12, 0xc72de2, 0x28dc12, 0xc72de2, 0x28dc12, 0xc72de2, 0x28dc12, 0xc72de2, 0x28dc12, 0xc72de2, 0x28dc12, 0xc72de2, 0x28dc12, 0xc72de2, 0x28dc12, 0xc72de2, 0x28dc12, 0xd82ce0, 0x28dc12, 0xd82ce2, 0x28dc12, 0xc72dfc, 0x28dc12, 0xc72ce0, 0x28dc12, 0xc52ce7, 0x2bdd11, 0xc52fea, 0x2bdd11 };
		System.arraycopy(aFor, 0, key, 78610, aFor.length);
	}

	private static void init264(int[] key) {
		int[] aFor = { 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc42ce1, 0x2bdd11, 0xc72de0, 0x2bdf12, 0xc62ce3, 0x2ddd0c, 0xc22ce2, 0x33dd0d, 0xc12ce2, 0x31c30f, 0xc133e1, 0x2ddd0a, 0xc732e1, 0x2bc00f, 0xc533e2, 0x31c612, 0xcb33e0, 0x3ec617, 0xde37ee, 0x60d51c, 0xf419f9, 0x87a626, 0xd214fd, 0xedbe25, 0xc11eea, 0xe58027, 0xfe1beb, 0xe78026, 0xfc1cf5, 0xde8123, 0xf41ffa,
				0xc5bf22, 0xf11df5, 0xc5bf20, 0xf71afc, 0xc5bd21, 0xf71afc, 0xc4bc20, 0xf01bfd, 0xc5bc26, 0xfd1bfa, 0xc4bc20, 0xf915fa, 0xc7bf21, 0x8715fd, 0xc5bf20, 0x8116fd, 0xc5bf20, 0x8015fe, 0xc6be21, 0x8c15ff, 0xc7b920, 0x8a14ff, 0xc4ba1f, 0x9414fe, 0xc5bb1c, 0x9614fc, 0xc2a41d, 0x9515fe, 0xc2a41d, 0x9516fc, 0xc2a41d, 0x9a17ff, 0xc3a31c, 0x9916f8, 0xc3a31c, 0x9e1bfb, 0xc7af18, 0xa714f2, 0xc3ab1c, 0xa016f3, 0xfba119, 0xae12f0, 0xefb22a, 0xdb26fb, 0xfba53f, 0xe9dc83, 0xe0a839, 0xe1c58f, 0xe1ab35, 0xe0d9f5, 0xe0aa35, 0xe0df8a, 0xe1a835, 0xe3d0f5, 0xe0a934, 0xe4d3f6, 0xe1a835, 0xe6d3f1, 0xeeae32, 0xe5d3f6, 0xe8ad32, 0xe7d3f7, 0xf7ac31, 0xe32df7, 0xf5ae3f, 0xe22af8, 0xf4a93e, 0xe12df7, 0xf4a93e, 0xe32ef7, 0xfaa73c, 0xe32ef7, 0xfba73c, 0xe22df0, 0xf9a13e, 0xe52cf1, 0xf9a13e, 0xe42ef0,
				0xfabe3f, 0xe42ef0, 0xfbbf20, 0xdb2df1, 0xf9b922, 0xd82cf0, 0xf8ba23, 0xdb2df7, 0xfeb421, 0xd92ff7, 0xf3b32f, 0xdf2ef6, 0xf2b02e, 0xdd2df6, 0xedb32f, 0xde13f6, 0xeab22c, 0xdd10f6, 0xe4b42a, 0xdf12f4, 0xe2b42b, 0xa211f6, 0xe0b629, 0xa61fc9, 0xe1b528, 0xa81fc9, 0xe2b429, 0xae1fc8, 0xe0b22b, 0xb11dc8, 0xe3ad2c, 0xb61cc8, 0xe0ae2d, 0xb71dcb, 0xefa92c, 0xb61cca, 0xecaa2d, 0xb112ca, 0xecaa2f, 0xb213c9, 0xeda92e, 0x8d12c6, 0xefaf2c, 0x8911c0, 0xe1d02d, 0x8911c0, 0xe0d32e, 0x8a10c1, 0xe1d431, 0x8d11de, 0xe0d72e, 0x8f1fdc, 0xffd62f, 0x8e1cdd, 0xfad02f, 0x821ddd, 0xfed22c, 0x7e1ddc, 0xfbcd2c, 0x721ddc, 0xfecc2e, 0x701cde, 0xe0cd2f, 0x721edc, 0xe6cd28, 0x7119db, 0xe9cc2f, 0x7319dc, 0xedce28, 0x4914dc, 0xe5c82e, 0x5317dd, 0x90f529, 0x5f10da, 0x83f82e, 0x6414dc, 0x89fa2e, 0x7b0adf,
				0x8efb31, 0x7d09df, 0x92e632, 0x7c16dd, 0x92e42c, 0x7c16d9, 0x90e628, 0x6017db, 0x91e62a, 0x6116da, 0x91e62a, 0x6116da, 0x91e62a, 0x6116da, 0x91e62a, 0x6116da, 0x91e62a, 0x6116da, 0x91e62a, 0x6116da, 0x91e62a, 0x6116da, 0x91e62a, 0x7e17da, 0x91e62a, 0x7e17da, 0x91e62a, 0x7e17da, 0x91e62a, 0x7e17da, 0x91e62a, 0x7e17da, 0x91e62a, 0x7e17da, 0x91e62a, 0x7e17da, 0x91e62a, 0x7e17da, 0x91e62a, 0x7e17da, 0x91e62a, 0x7e17da, 0x91e62a, 0x7e17da, 0x91e62a, 0x7e17da, 0x91e62a, 0x7e17da, 0x91e62a, 0x7e17da, 0x91e62a, 0x7e17da, 0x91e62a, 0x7e17da, 0x91e62a, 0x6116d8, 0x91e62a, 0x6116da, 0x91e62a, 0x7e17c4, 0x91e62a, 0x7e16d8, 0x90f929, 0x7d09dc, 0x93f82a, 0x7d0ad1, 0x93f82a };
		System.arraycopy(aFor, 0, key, 78910, aFor.length);
	}

	private static void init265(int[] key) {
		int[] aFor = { 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x7c09da, 0x93f82a, 0x6308d8, 0x8cf82a, 0x600ada, 0x8af92a, 0x600ada, 0x8cf82a, 0x6309da, 0x8cf82a, 0x7d09d9, 0x92e628, 0x7f08d8, 0x93e635, 0x7d08d9, 0x8cf835, 0x7b0ada, 0x83fe2b, 0x770bdc, 0x9ffe27, 0x4f10df, 0xe1cd30, 0x6b07d3, 0x2bd0b, 0x4415c6, 0x688801, 0x7210cb, 0x638707, 0x7110d5, 0x6b8a0c, 0x4d14d7,
				0x63b40b, 0x5217d2, 0x66b304, 0x5417dc, 0x66b10b, 0x5516d3, 0x66b304, 0x5215dc, 0x6abd06, 0x5314dd, 0x6bb20a, 0x5015d2, 0x6dbc08, 0x5215d3, 0x12bd08, 0x5115d4, 0x14bf0a, 0x5214d5, 0x14bf0a, 0x5e14d4, 0x15b90a, 0x5915d4, 0x14b80b, 0x5b15eb, 0xbbb0a, 0x5814ea, 0xca40b, 0x5a14e9, 0xda50a, 0x5516e8, 0xda50a, 0x5717e8, 0xda50a, 0x5616eb, 0xaa209, 0x5616ed, 0x8a00b, 0x5717ec, 0x8a00b, 0x6b1be0, 0xea411, 0x6d19fe, 0x31a115, 0x7a08c8, 0x40931a, 0x6215db, 0x6d626d, 0x690fdc, 0x69656f, 0x6908d3, 0x6a7a12, 0x690ed2, 0x6b7813, 0x680fd1, 0x697a11, 0x6b0cd0, 0x6e7514, 0x690ed2, 0x6f7411, 0x660fd5, 0x6a7110, 0x7af0d7, 0x68731e, 0x7bf1d9, 0x68731e, 0x7ef0d8, 0x69741f, 0x71f1d7, 0x69741f, 0x70f2d6, 0x687a1c, 0x70f2d6, 0x697b1d, 0x73f1d7, 0x687a1c, 0x73f1d7, 0x6e7c1a, 0x70ecd5, 0x6e7c1a,
				0x70ecd5, 0x6e7c1a, 0x4eeecb, 0x6c7a18, 0x4defca, 0x6f7919, 0x4be1cc, 0x6e781a, 0x49e1cf, 0x617b19, 0x4ae7cf, 0x667a18, 0x48e6cf, 0x677819, 0x55e7c1, 0x664718, 0x51e5c2, 0x68411e, 0x54e4c0, 0x69421f, 0x29e7c2, 0x6b421e, 0x2fe5c0, 0x6a4d1f, 0x22e4c1, 0x684f21, 0x25e3c3, 0x6a4e22, 0x38e3c0, 0x6c4c24, 0x3afec1, 0x6d4d27, 0x35ffc3, 0x6c4c26, 0x37f9c1, 0x6b4f29, 0x36f7ce, 0x684e26, 0x37f4cf, 0x574f25, 0x36f3ce, 0x544e24, 0x30f1c8, 0x553125, 0x33f0c8, 0x543226, 0x3ef1c9, 0x553539, 0x39f0d6, 0x543626, 0x3af1d7, 0x553927, 0x24f0ca, 0x513b24, 0x28f6cb, 0x533825, 0x2cf6ca, 0xa82638, 0x2ff4ca, 0xa72538, 0x2cf4cb, 0xa2263e, 0x30f2c8, 0xa3213e, 0x30f3cd, 0xa6223c, 0x3df6ce, 0x9f233c, 0x32f9d3, 0x88273d, 0x4fc4cc, 0x9a2c3a, 0x79c1cd, 0x94313a, 0x65c1cf, 0x942e3f, 0x65ded3, 0x942e3f,
				0x64dfd3, 0x8b2e23, 0x66dfd1, 0x8b2e25, 0x7bdedd, 0x8b2f2b, 0x7bdfd9, 0x8b2f29, 0x7bdfd9, 0x8b2f29, 0x7bdfd9, 0x8b2f29, 0x7bdfd9, 0x8b2f29, 0x7bdfd9, 0x8b2f29, 0x7bdfd9, 0x8b2f29, 0x7bdfd9, 0x8b2f29, 0x7bdfd9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x64ded9, 0x8b2f29, 0x7adeda, 0x8b2f29, 0x7aded8, 0x8a2e28, 0x65dfc6, 0x8a2e28, 0x65deda, 0x8b312b, 0x66c1de, 0x883028, 0x66c2d3, 0x883028 };
		System.arraycopy(aFor, 0, key, 79210, aFor.length);
	}

	private static void init266(int[] key) {
		int[] aFor = { 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x883028, 0x67c1d8, 0x973128, 0x66ded8, 0x962e28, 0x79dfd8, 0x952d28, 0x7fdeda, 0x952d28, 0x79dcdc, 0x942d28, 0x7bdddc, 0x94332f, 0x64dddc, 0x8b302c, 0x79dec3, 0x8a312d, 0x7cc1dd, 0x8b302c, 0x70c7da, 0x863f2d, 0x6fcbdb, 0xbc212b, 0xffc3, 0xa02e21, 0xdfeffa, 0xbc5922, 0xf5f7fa, 0xc2502d, 0xeecffb, 0xc6532c, 0xe1cafb,
				0xc45d28, 0xe1c4fa, 0xc95928, 0xe7f9fc, 0xd75b28, 0xe5fffe, 0xd15926, 0xe4feff, 0xdc5625, 0xe4feff, 0xdc5826, 0xe5fffc, 0xd85720, 0xe7fefd, 0xa75626, 0xe4fefa, 0xa25424, 0xe5fffb, 0xa35527, 0xe9fef9, 0xa35224, 0xe8fffa, 0xa55225, 0xebfcc5, 0xbb5224, 0xeafdc6, 0xb95226, 0xefe2c4, 0xb85327, 0xe0e0c5, 0xb85327, 0xe0e0c5, 0xba5227, 0xe1e1c4, 0xbd5526, 0xe1e1c4, 0xbf5722, 0xe0e0c5, 0xbf5722, 0xdceec8, 0xba5024, 0xdceec8, 0xbd5221, 0xe6eac5, 0xa8471e, 0x94dace, 0xbf5409, 0xa4d5c8, 0xaba373, 0xa3ccc9, 0xa7a275, 0xa7cccc, 0xa5be70, 0xa1cace, 0xa5bf0f, 0xa3c8cc, 0xa5b209, 0xadcece, 0xa5b209, 0xaecfcf, 0xa2b108, 0xadcecf, 0xbc4c07, 0xaecdcf, 0xbc4c09, 0xa9cece, 0xbc4c0b, 0xabc8cc, 0xb34d04, 0xaacbcd, 0xb34d04, 0xabc5ce, 0xb24c05, 0xa8c6cf, 0xb34d04, 0xa8c6cf, 0xb44a03, 0xa9c5cd,
				0xb44a03, 0xa9c5cd, 0xb75502, 0xa8c4d2, 0x885603, 0xa9c3d1, 0x8a5405, 0xaeccd0, 0x895507, 0xaeccd2, 0x875604, 0xaccadc, 0x82560b, 0xaccadc, 0x9c570a, 0xaec8d2, 0x9b570b, 0xadf7d1, 0x94550a, 0xaff1d7, 0x925509, 0xd2f0d4, 0x905508, 0xd4f2d6, 0x915a09, 0xd9f3e9, 0x905936, 0xdbf3d6, 0x955f36, 0xc5f1d4, 0x965f37, 0xc3eed3, 0x955c36, 0xcdeed0, 0x945d35, 0xcee9d3, 0x955c34, 0xc9eadc, 0x95523b, 0xcae8d2, 0xaa5338, 0xcae8d2, 0xab5439, 0xc8ead4, 0xac5538, 0xc8ead4, 0xae2b39, 0xc7e9d7, 0xac2d27, 0xc7e9c9, 0xab2c26, 0xc5ebd7, 0xb52327, 0xc6e8c8, 0xb12538, 0xcbebc8, 0xb02439, 0xcfebcb, 0x4e2438, 0xcaf4cc, 0x4f3b38, 0xc9f4ca, 0x423b38, 0xcdf4ca, 0x5e3b3b, 0xc6ead4, 0x583e24, 0xf0e4d1, 0x433922, 0x87d8d3, 0x493c3c, 0x91d5cf, 0x73393a, 0x98d7cf, 0x69273a, 0x9dd5c9, 0x682439, 0x99d4d5,
				0x692539, 0x86d4d7, 0x6b2525, 0x86d4d1, 0x692424, 0x99cbd3, 0x683b25, 0x98cbd7, 0x683b27, 0x98cbd7, 0x683b27, 0x98cbd7, 0x683b27, 0x98cbd7, 0x683b27, 0x98cbd7, 0x683b27, 0x98cbd7, 0x683b27, 0x98cbd7, 0x683b27, 0x98cbd7, 0x683b27, 0x87cad7, 0x683b27, 0x87cad7, 0x683b27, 0x87cad7, 0x683b27, 0x87cad7, 0x683b27, 0x87cad7, 0x683b27, 0x87cad7, 0x683b27, 0x87cad7, 0x683b27, 0x87cad7, 0x683b27, 0x87cad7, 0x683b27, 0x87cad7, 0x683b27, 0x87cad7, 0x683b27, 0x87cad7, 0x683b27, 0x87cad7, 0x683b27, 0x87cad7, 0x683b27, 0x87cad7, 0x683b27, 0x87cad7, 0x683b27, 0x99cad4, 0x683b27, 0x99cad6, 0x693a26, 0x86cbc8, 0x693a26, 0x86cad4, 0x682525, 0x85d5d0, 0x6b2426, 0x85d6dd, 0x6b2426 };
		System.arraycopy(aFor, 0, key, 79510, aFor.length);
	}

	private static void init267(int[] key) {
		int[] aFor = { 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2426, 0x9bd4d4, 0x6b2424, 0x98cbca, 0x6b2424, 0x9acbd4, 0x6a3b26, 0x85cbd2, 0x683b27, 0x84cad2, 0x683b27, 0x86d4d4, 0x763b20, 0x85d5d2, 0x713b20, 0x85d5d2, 0x763b20, 0x87d4d2, 0x772420, 0x87cad1, 0x753823, 0x84ced1, 0x6b3b20, 0x87ced4, 0x643f20, 0xb4d7d2, 0xf3720, 0x94e6cb, 0xeb252d, 0x8a96f6, 0xc13120, 0xf8acf1,
				0xd0393c, 0xcfafec, 0xd0353f, 0xf8aeed, 0xd3333e, 0xfe93e8, 0xce3031, 0xff94ea, 0xcc3036, 0xf895eb, 0xcf3335, 0xf796e8, 0xcb3137, 0xf596e9, 0xb53e34, 0xf196e8, 0xb63e35, 0xff97e9, 0xb63e35, 0xfc95eb, 0xb43935, 0xfc95eb, 0xb73934, 0xfb94d4, 0xb43b35, 0xe594d7, 0xb43b35, 0xe08bd4, 0xb53a36, 0xe388d5, 0xb53a36, 0xe388d5, 0xb43a34, 0xec89d6, 0xb73a37, 0xec89d6, 0xb13a34, 0xef8ed7, 0xb03b33, 0xd28dd6, 0xb03430, 0xd588d7, 0xb33631, 0xdbf7d8, 0xb84830, 0xe4f1d4, 0xb45e0b, 0xf5fed3, 0xda701d, 0xc00bdd, 0xca646a, 0xcb08de, 0xca6568, 0xca0adf, 0xc97b63, 0xcd0fdd, 0xc97962, 0xcf01a3, 0xc77b60, 0xcc06a6, 0xc07861, 0xcef8a6, 0xde7961, 0xcff9a6, 0xdd7860, 0xcefaa7, 0xdd7860, 0xcafca9, 0xd27963, 0xcbffaa, 0xd17860, 0xc9f0aa, 0xd07961, 0xcaf3ad, 0xd17860, 0xcbf3ad, 0xd07f63, 0xccf1ae,
				0xd17e60, 0xcdf1ae, 0xd06161, 0xcdf1ae, 0xd3607e, 0xf2f3ac, 0xd16678, 0xf5f0ac, 0xd36679, 0xf4f1af, 0xde697a, 0xf2f3ad, 0xdc687b, 0xecf5a3, 0xde697b, 0xeaf7a1, 0xdc6878, 0xebc8a2, 0xd1697e, 0xedcaa0, 0xd06e7e, 0x90cba3, 0xd16d7d, 0x92c59d, 0xd66c42, 0x93c49d, 0xdb6d43, 0x91c6a3, 0xdd6d42, 0x92c0a3, 0xc26e41, 0x90dea5, 0xc36f41, 0x95dda4, 0xc26e42, 0x9bdbaa, 0xc16d43, 0x9bdbaa, 0xc26342, 0x9fdaa8, 0xc16043, 0x9edbaf, 0xfe6744, 0x9cd9a9, 0xff1945, 0x9ca7ae, 0xf96743, 0x9ea5ad, 0xf7615d, 0x9ca5ad, 0xf0605c, 0x9ea5ac, 0xf16243, 0x9ea5ac, 0xef6c43, 0x9ba5b3, 0xed6c42, 0x95a7b1, 0xef6b45, 0x91a7b6, 0x116c44, 0x95a0b6, 0x1e6d46, 0x8ca2a8, 0x157246, 0xb0a7aa, 0x17b45, 0xc19eb2, 0xc7747, 0xec9ab2, 0x57446, 0xe884b3, 0x187545, 0xe884b0, 0x197543, 0xe884b0, 0x187440, 0xf785b0,
				0x187440, 0xf585b2, 0x187446, 0xf784b3, 0x76b46, 0xf685b3, 0x76b46, 0xf79bb4, 0x76b44, 0xf79bb4, 0x76b44, 0xf79bb4, 0x76b44, 0xf79bb4, 0x76b44, 0xf79bb4, 0x76b44, 0xf79bb4, 0x76b44, 0xf79bb4, 0x76b44, 0xf79bb4, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb6, 0x76b44, 0xf79bb4, 0x76b44, 0xf79baa, 0x76b44, 0xe89bb6, 0x67447, 0xeb84b2, 0x57544, 0xeb87bf, 0x57544 };
		System.arraycopy(aFor, 0, key, 79810, aFor.length);
	}

	private static void init268(int[] key) {
		int[] aFor = { 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57544, 0xf585b6, 0x57546, 0xf69aa8, 0x57546, 0xf69ab6, 0x57442, 0xf49ab7, 0x1b6a42, 0xf69ab5, 0x1b6a40, 0xf49ab4, 0x46a46, 0xf085b5, 0x56a46, 0xf084b3, 0x36a47, 0xec84b3, 0x26b40, 0xef85b2, 0x1f7542, 0xed86ac, 0x1b735c, 0xe784af, 0x1a7c5a, 0xef8aa2, 0x67e58, 0xd292a0, 0x6e7353, 0xcaa1b9, 0x41675f, 0x33ddbf, 0x6b7263, 0x2ad5b4, 0x1d706c,
				0x2ed1b8, 0x1f4e6c, 0x2fd0bf, 0x1f4f69, 0x31efbf, 0x1f7068, 0x2fd1b1, 0x1c756d, 0x28d6b6, 0x1f726b, 0x23d5b4, 0x1d726a, 0x5fd5b7, 0x1b7d6b, 0x5cd5b6, 0x147c6a, 0x5cd0b4, 0x1b7d6a, 0x53d08b, 0x1a7f6b, 0x51d088, 0x1f7f6a, 0x4fcf89, 0x1f7f6b, 0x4ed089, 0x1c606a, 0x4fd18e, 0x1c636c, 0x4fd288, 0x19606b, 0x4ed38f, 0x17676c, 0x4bd38e, 0x17676c, 0x49d38f, 0x17676c, 0x49d38f, 0x16656c, 0x77dd8f, 0x13616b, 0x74de8e, 0x1d1c64, 0x76d88a, 0x101964, 0x4da088, 0xa6b, 0x389cb8, 0x1d1b7e, 0x19abb, 0x14e77f, 0x1a9ec0, 0x11e97f, 0x169fc2, 0x10e97c, 0x179ec3, 0x1fe400, 0x179ec3, 0x1ee507, 0x129bc2, 0x1c1b05, 0xd9acc, 0x1e1805, 0xa9bcf, 0x1f1f06, 0x79bca, 0x1f1e00, 0x698cb, 0x1e1001, 0x798cc, 0x1e1107, 0x59bc8, 0x1f1005, 0x49cd5, 0x1f121a, 0x49cd5, 0x18131b, 0x583ca, 0x19111a, 0x583c8,
				0x1a1119, 0x3a82cd, 0x18161e, 0x3c80cb, 0x19171d, 0x3e80ca, 0x16181d, 0x3a82c4, 0x17191c, 0x2785c6, 0x14181d, 0x2086c1, 0x16181a, 0x2187c6, 0x18251a, 0x2487fa, 0x192325, 0x2685c5, 0x192d1a, 0x5885f8, 0x1a2f19, 0x5f85fb, 0x192c1b, 0x5187f9, 0x1a2b18, 0x5486fb, 0x1b281f, 0x4a98f9, 0x19291c, 0x4d9bfa, 0x18281c, 0x4f9df5, 0x172b1c, 0x4e9cf6, 0x14241d, 0x489ef0, 0x15221c, 0x489ef0, 0x28221d, 0x4a9cf2, 0x29231c, 0x4d9cf2, 0x2b5d1c, 0x4c9ff3, 0x245c1c, 0x4f98ec, 0x245c1c, 0x489ff2, 0x245c1c, 0x499af2, 0x265d1d, 0x5595ec, 0x235c1d, 0x5990e9, 0xd95e1c, 0x5f8eeb, 0xd4411f, 0x4590eb, 0xdf431a, 0x7b95eb, 0xcb4f1b, 0x7590eb, 0xb97618, 0x6398ef, 0x876918, 0x7798ed, 0x82691f, 0x749bec, 0x876a18, 0x769beb, 0x98741a, 0x769beb, 0x9d741b, 0x7085e9, 0x9d741b, 0x7085ef, 0x9f751b, 0x6f9aef,
				0x9e751b, 0x6f9aef, 0x9e751b, 0x6e85e9, 0x9e7519, 0x6e85e9, 0x9e7519, 0x6e85e9, 0x9e7519, 0x6e85e9, 0x9e7519, 0x6e85e9, 0x9e7519, 0x6e85e9, 0x9e7519, 0x6e85e9, 0x9e7519, 0x6e85e9, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85eb, 0x9e7519, 0x6e85e9, 0x9e7519, 0x6e85f7, 0x9e7519, 0x7185eb, 0x9f6a1a, 0x709aef, 0x9e6b19, 0x7199e2, 0x9f6b19 };
		System.arraycopy(aFor, 0, key, 80110, aFor.length);
	}

	private static void init269(int[] key) {
		int[] aFor = { 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b19, 0x6f9beb, 0x9f6b1b, 0x6f9bf5, 0x9e6b1b, 0x6d84eb, 0x996a19, 0x6d87ed, 0x9e6919, 0x6f87ec, 0x9f6818, 0x7098ec, 0x80681e, 0x7298ed, 0x81771d, 0x7299ef, 0x81771d, 0x6e99ee, 0x80761d, 0x6d87e9, 0x82771d, 0x7299f2, 0x80771f, 0x7799f0, 0x806801, 0x739bf2, 0x9c6e07, 0x749af3, 0x976900, 0x7784f5, 0xa16c01, 0x628cf3,
				0xc55818, 0x469dc7, 0x20241e, 0x6f88c9, 0x2b2e1e, 0x12b1d1, 0x202a1a, 0xeb3d7, 0x242a19, 0xeb3c9, 0x24281a, 0x988cd, 0x392b17, 0xd8dcb, 0x352a17, 0xf82cc, 0x322b16, 0x7281ca, 0x302d14, 0x7481cb, 0x302d14, 0x7580f6, 0x332e17, 0x7a80f3, 0x302f10, 0x7b80f3, 0x352f11, 0x7a80f3, 0x2a3010, 0x7b81f4, 0x2a3017, 0x7b81f3, 0x283017, 0x7c82f2, 0x293114, 0x7387f1, 0x293215, 0x7284f0, 0x2e3316, 0x7085f0, 0x2e3314, 0x718bf0, 0x103116, 0x728af3, 0x163714, 0x7389fe, 0x173615, 0x72f6fa, 0x104815, 0x49fdfd, 0x2571d, 0x38cbc4, 0x145916, 0xadcd1, 0x19a06f, 0x12d6d5, 0x14a56d, 0x16d6d4, 0x15a56f, 0x16d0d3, 0x10a86c, 0x1ad4a9, 0x17ab61, 0x72bab, 0x16aa62, 0x428a8, 0x10ad63, 0x529af, 0x10ad64, 0x628a8, 0x10af63, 0x727ad, 0x10af61, 0x925b1, 0x11ae7f, 0x825ae, 0x10a87e, 0x926af, 0x10b77f, 0xa26ac,
				0x11b57e, 0xa27aa, 0x16b379, 0x820af, 0x29b47a, 0xa22ad, 0x2eb575, 0x822ac, 0x20b875, 0xa22af, 0x26be74, 0x822af, 0x27bf73, 0x1622ae, 0x22bc72, 0x1723af, 0x208272, 0x1a2093, 0x208473, 0x1d2392, 0x238a73, 0x632390, 0x228973, 0x602090, 0x238b72, 0x652091, 0x2c8c72, 0x662196, 0x288e70, 0x673e97, 0x358f70, 0x663d98, 0x32897f, 0x673d95, 0x308a7f, 0x683294, 0x318b78, 0x6b3195, 0x308a78, 0x6c3696, 0x328b7b, 0x6d3595, 0xcf57b, 0x683594, 0xcf479, 0x6a3597, 0xdf778, 0x643596, 0xdf778, 0x673694, 0xef478, 0x683693, 0x1f479, 0x6c3192, 0x18f77e, 0x653e93, 0xe3f27d, 0x733d93, 0xe9ec7c, 0x44308a, 0xfdef7c, 0x380b8a, 0xe9ec7f, 0x37078b, 0xd0e97f, 0x20188c, 0xd5e97e, 0x230490, 0xd6e97b, 0x250496, 0xd4eb66, 0x3b1a96, 0xd5e865, 0x381997, 0xd5e863, 0x381997, 0xd5e863, 0x3a1897, 0xcaf763,
				0x3a1897, 0xcbf765, 0x3a1897, 0xcae865, 0x3a1895, 0xcae865, 0x3a1895, 0xcae865, 0x3a1895, 0xcae865, 0x3a1895, 0xcae865, 0x3a1895, 0xcae865, 0x3a1895, 0xcae865, 0x3a1895, 0xcae865, 0x3a1895, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1897, 0xcae865, 0x3a1895, 0xcae865, 0x3a188b, 0xcae865, 0x3a1897, 0xd4f766, 0x3b0793, 0xd5f665, 0x3a049e, 0xd5f665 };
		System.arraycopy(aFor, 0, key, 80410, aFor.length);
	}

	private static void init270(int[] key) {
		int[] aFor = { 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x250697, 0xd5f665, 0x3a0795, 0xd5f665, 0x241997, 0xd7f765, 0x231997, 0xd7f765, 0x241997, 0xd5f665, 0x240796, 0xd4f764, 0x240794, 0xd4f764, 0x251894, 0xd4f764, 0x240796, 0xcbf764, 0x201896, 0xcaf667, 0x271b88, 0xc8f678, 0x3a1a96, 0xc9f566, 0x3a0494, 0xc9f166, 0x380796, 0xceff65, 0x350891, 0xc2fd67, 0x2e0c90,
				0xfbeb61, 0x483084, 0xddfe5b, 0xa33db9, 0xcd815b, 0xad3383, 0xf99f57, 0xb23784, 0xf19256, 0xcf3683, 0xf6925b, 0xc5308c, 0xf49355, 0xc6378f, 0xf59254, 0xc1348e, 0xf69255, 0xcf3b8e, 0xf29050, 0xcc398d, 0xf39353, 0xcc39b3, 0x8d926c, 0xcf398e, 0x8b956f, 0xcc398d, 0x8b956d, 0xc2398e, 0x88976c, 0xc3388f, 0x8d976d, 0xc33889, 0x8d976b, 0xdd388e, 0x8c896a, 0xde3b8e, 0x8a886d, 0xdf3c89, 0x89896c, 0xd03c8a, 0x89896c, 0xd33d8a, 0x888b6f, 0xd43c89, 0x89846e, 0xd73d86, 0x88876f, 0xeb3984, 0x8dfa6b, 0xe93b86, 0xb4876c, 0xfb378b, 0xb8916a, 0x8b06b9, 0xad8a73, 0xb10cb7, 0xa58c76, 0xa9f0c8, 0xa08a08, 0xa5fdb6, 0xa38509, 0xa4fccb, 0xad870f, 0xa1fbc9, 0xac860e, 0xa3f9c7, 0xac860e, 0xa3f9c9, 0xb37901, 0xa2f8c8, 0xb07b01, 0xa2f9cb, 0xb07d01, 0xa4fbcc, 0xb67c00, 0xa5f4ce, 0xb67e00, 0xa2f5cf,
				0xb17801, 0xa5f6d0, 0xb16600, 0xa7f6d3, 0xb16602, 0xa6f7d6, 0xbc6605, 0xa0f5d2, 0xbd6104, 0xa2f5d3, 0x836204, 0xa7f5dc, 0x816c04, 0xa6f4de, 0x8e6e07, 0xa4f4dd, 0x896f07, 0xa7f3dc, 0x976d07, 0xa4f2d8, 0x905206, 0xa7f6d9, 0x9f5307, 0xa6f5e6, 0x9b5207, 0xa6f5e6, 0x995d07, 0xdbf4e4, 0x9e5e06, 0xd8f5e5, 0x905e01, 0xdaf3e7, 0x965c01, 0xd9ece6, 0x975e00, 0xc5edea, 0x965903, 0xc2ece9, 0x945a00, 0xcce2eb, 0x955b07, 0xcce2eb, 0x965807, 0xcbe3e9, 0x955e04, 0xf7e0e9, 0x955e04, 0xf1e1e8, 0x942105, 0xfce0e8, 0x952206, 0xfee0eb, 0x952300, 0xe5e6ec, 0x912e01, 0xece5ee, 0x6a2a01, 0xf8f8ef, 0x652d01, 0xcff5ee, 0x7a2e00, 0xbdcaf4, 0x6c2d00, 0xb2c1f7, 0x553100, 0xbbc3f5, 0x4f3106, 0xb8c3e9, 0x403307, 0xb6ddeb, 0x443001, 0xb4dcea, 0x443205, 0xabc3f5, 0x453104, 0xabc3f7, 0x453104, 0xaac1f6,
				0x453104, 0xb5c1f6, 0x453104, 0xb5c1f6, 0x453106, 0xb5c1f6, 0x453106, 0xb5c1f6, 0x453106, 0xb5c1f6, 0x453106, 0xb5c1f6, 0x453106, 0xb5c1f6, 0x453106, 0xb5c1f6, 0x453106, 0xb5c1f6, 0x453106, 0xb5c1f6, 0x453106, 0xb5c1f6, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f4, 0x453106, 0xb5c1f6, 0x453106, 0xb5c1e8, 0x453106, 0xb5c1f4, 0x453106, 0xaac1f3, 0x5a3005, 0xb5c2fe, 0x5a3005 };
		System.arraycopy(aFor, 0, key, 80710, aFor.length);
	}

	private static void init271(int[] key) {
		int[] aFor = { 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xaac0f7, 0x5a3005, 0xb5c0f1, 0x583105, 0xb7c1f7, 0x473107, 0xb6c1e9, 0x473105, 0xb4dee9, 0x473107, 0xb4def7, 0x442e07, 0xabdef5, 0x462f05, 0xabdef5, 0x442f1b, 0xb4def7, 0x5b2f1b, 0xb5dcf4, 0x582d04, 0xb5dcf6, 0x5a2c04, 0xaadcf6, 0x453307, 0xb5ddf6, 0x442c07, 0xb1daf6, 0x472d04, 0xbfd9f5, 0x492b1a, 0xb8daeb,
				0x5d351b, 0x8edef6, 0x4d381a, 0xffe1f2, 0x59341b, 0xc3f8f8, 0x483c27, 0x3381fa, 0x5e3827, 0x8bfb, 0x522420, 0x158ffc, 0x2b2726, 0x1c82fc, 0x282126, 0x1a85fc, 0x282126, 0x1b84fd, 0x2f2221, 0x1987fd, 0x2e2227, 0x1687fa, 0x2c2221, 0x1784ff, 0x2a2222, 0x1485fc, 0x542d21, 0x1785c1, 0x532c1e, 0x1686fe, 0x512d21, 0x1687c0, 0x512c1f, 0x1b87fd, 0x522a1c, 0x1b87fd, 0x51291f, 0x1d99fd, 0x50281e, 0x1f98fd, 0x4f2919, 0x1d9bfc, 0x4f2a1b, 0x1b98f3, 0x4e2b1a, 0x199ef1, 0x40291b, 0x1b93f3, 0x472f15, 0x1b93f7, 0x412915, 0x129af0, 0x5c3514, 0x199dcb, 0x253c12, 0x17a7c7, 0x3e3416, 0x20bfda, 0x363811, 0x38b8d7, 0x33c513, 0x35bdd2, 0x31c813, 0x34bed1, 0x33c615, 0x3abfd0, 0x33c615, 0x3abfd6, 0x33c412, 0x39b8d7, 0x33c414, 0x38b9d2, 0x32c617, 0x39b9df, 0x323818, 0x39b9d1, 0x323d18, 0x3eb8d2,
				0x323f18, 0x3eb8d3, 0x353019, 0x38b8d5, 0x363318, 0x3bb9d5, 0x34351b, 0x25bbca, 0x37341b, 0x23bbc9, 0x362a18, 0x2eb8cb, 0x372b19, 0x2bb8cc, 0x352c18, 0x15bace, 0x362c1b, 0x12bbcd, 0x34211a, 0x1dbac0, 0x36211a, 0x1bbfc0, 0x2a201a, 0x1880c7, 0x2d221a, 0x1b81c4, 0x222219, 0x1987c6, 0x242119, 0x1b87f9, 0x592118, 0x1d89fb, 0x5b2218, 0x1389fc, 0x5b241f, 0x108af8, 0x5c251e, 0x128afa, 0x423b1c, 0x1389fb, 0x403d1c, 0x1588f4, 0x433e1c, 0x1b86f6, 0x423f1f, 0x1e84f6, 0x7e381d, 0x1d86f6, 0x79391a, 0x11f8f7, 0x7b3b18, 0xbfcea, 0x7d351b, 0x2fcf5, 0x89311a, 0x1ee5eb, 0xb93e18, 0xae0e9, 0xb43f07, 0x7fdcea, 0xaa3a07, 0x75d0e9, 0x903d06, 0x7ccdf7, 0x933c07, 0x62cdf6, 0x913e07, 0x62ccf7, 0x933c19, 0x62cde8, 0x8d2207, 0x62cde8, 0x923d18, 0x62cde8, 0x923d18, 0x7dd2f7, 0x923d18, 0x63d2e8,
				0x923d18, 0x63d2e8, 0x932218, 0x63d2e8, 0x8c2306, 0x63d2e8, 0x8c2306, 0x7cd3f6, 0x8c2306, 0x7cd3f6, 0x8c2306, 0x7cd3f6, 0x8c2306, 0x7cd3f6, 0x8c2306, 0x7cd3f6, 0x8c2306, 0x7cd3f6, 0x8c2306, 0x7cd3f6, 0x8c2306, 0x7cd3f6, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x7dccf4, 0x8c2306, 0x7dccf6, 0x8c2306, 0x7cd3e8, 0x8c2306, 0x7cd3f4, 0x8c2306, 0x63d3f3, 0x932205, 0x7cd0fe, 0x932205 };
		System.arraycopy(aFor, 0, key, 81010, aFor.length);
	}

	private static void init272(int[] key) {
		int[] aFor = { 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x63d2f7, 0x932205, 0x7cd2f1, 0x912305, 0x7ed3f7, 0x912219, 0x61d3f5, 0x902319, 0x63ccf5, 0x902319, 0x62cdf4, 0x92231b, 0x7dd3e9, 0x902219, 0x7dd3e9, 0x902107, 0x7fd0eb, 0x8f2107, 0x60d0e9, 0x8c2006, 0x60d0e9, 0x8d211b, 0x63ceea, 0x8d201a, 0x60cdf5, 0x90231a, 0x7fccf7, 0x90221d, 0x62ccf6, 0x973d18, 0x62c9ea,
				0x903f1f, 0x7dc6e8, 0x953c12, 0x71cae8, 0xae3914, 0x7cd4ec, 0xbd361d, 0x13eff1, 0x882016, 0xe5f4, 0x77582b, 0x12ebf1, 0x454026, 0xde3f6, 0x327c39, 0x9e3e9, 0x307c39, 0x6e3f6, 0x307d27, 0x6e3f6, 0x3f7d24, 0x6e3f6, 0x3c7c25, 0xdcf1, 0x3d7d24, 0x7ddcf0, 0x3d7d24, 0x7fdff1, 0x3c7c27, 0x7ad8f0, 0x3c7c27, 0x74d8f0, 0x3d7d28, 0x77dbf1, 0x3c7c2b, 0x75dbf1, 0x39712c, 0x77dcf1, 0x3a702d, 0x75dbf1, 0x25772c, 0x77dbcc, 0x25772c, 0x77dbcd, 0x23752e, 0x74dbcd, 0x2c6b2d, 0x74daf0, 0x2d682a, 0x71def3, 0x2f662e, 0x4edcca, 0x2f6023, 0x4edcc8, 0x156b20, 0x47dbc3, 0x731e, 0x3aeec8, 0xa7a18, 0x2bfddf, 0x33821e, 0x3cf4a7, 0x358412, 0x3df5a7, 0x37871e, 0x3cf6a7, 0x36841e, 0x3cf6a7, 0x35821f, 0x39f7a6, 0x32811c, 0x39f7a6, 0x328f1d, 0x3ff5a0, 0x348e1d, 0x3ff5a0, 0x32881f, 0x3cf7de, 0x327761,
				0x3e08a1, 0x32771f, 0x3ff7de, 0x30751f, 0x3df6de, 0x33721c, 0x23f4d8, 0x317c1e, 0x24f5d8, 0x327f1f, 0x2bf4d6, 0x31781e, 0x2cf6d4, 0x31781e, 0x10f7d2, 0x326719, 0x17f5d4, 0x30611b, 0x1bf4ca, 0x37621a, 0x19f5ca, 0x29621b, 0x1bfbc8, 0x2f671b, 0x18fbcf, 0x216519, 0x1dfacf, 0x225a18, 0x63face, 0x205816, 0x66fccc, 0x215917, 0x69ffcd, 0x205816, 0x6bf1cb, 0x275b16, 0x69f1cb, 0x265a17, 0x77f7c9, 0x235929, 0x76e9f6, 0x2f5817, 0x73eaf6, 0x2d5f14, 0x4ceaf5, 0x295217, 0x45e9f3, 0x2a5417, 0x58e9f3, 0x202b14, 0x5fecf9, 0xd52017, 0x4ff0fb, 0xe62616, 0x5cc6e5, 0x942f1d, 0x41c2ea, 0x9f2d1c, 0x76dee9, 0x84281c, 0x76daec, 0x822903, 0x76daec, 0x842b03, 0x74dbed, 0x852a02, 0x75daf2, 0x98351c, 0x77c5ee, 0x992a1f, 0x77c5ee, 0x98351c, 0x68c5ec, 0x872a03, 0x77c5ee, 0x863500, 0x77c5ee, 0x863500,
				0x77c5ee, 0x873500, 0x77c5ee, 0x983400, 0x77c5ee, 0x983400, 0x68c4f0, 0x983400, 0x68c4f0, 0x983400, 0x68c4f0, 0x983400, 0x68c4f0, 0x983400, 0x68c4f0, 0x983400, 0x68c4f0, 0x983400, 0x68c4f0, 0x983400, 0x68c4f0, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x983400, 0x68c4f2, 0x992b02, 0x68c4f2, 0x992b02, 0x69dbec, 0x992b02, 0x69dbf2, 0x992b00, 0x76dbf4, 0x982a02, 0x77d8f9, 0x992a02 };
		System.arraycopy(aFor, 0, key, 81310, aFor.length);
	}

	private static void init273(int[] key) {
		int[] aFor = { 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf2, 0x992a02, 0x69daf0, 0x862a02, 0x76daf2, 0x862a02, 0x76daec, 0x862a02, 0x77daec, 0x862a02, 0x77c5f2, 0x873502, 0x77c5f2, 0x983402, 0x77c5f2, 0x983402, 0x68c4ec, 0x983402, 0x68c4f2, 0x873502, 0x68c4f2, 0x873502, 0x77c5f2, 0x873502, 0x77c5f2, 0x982a1d, 0x76c4f3, 0x982a1f, 0x68c5f2, 0x99351c, 0x6bc7ee,
				0x98321a, 0x6bc5ec, 0x9f3d1b, 0x6ccaed, 0x9e3c1a, 0x72c8ec, 0x96271f, 0x4eceef, 0x842c03, 0x39f1e9, 0x8d2a05, 0x29f8ec, 0xbf340a, 0x36f0e8, 0x4a4e08, 0x39f2d7, 0x554837, 0x32feea, 0x534a36, 0xcf9e9, 0x514834, 0xdf8e8, 0x504935, 0xffbeb, 0x514a36, 0x31f9e9, 0x534c08, 0x30f8e9, 0x534c08, 0x35f8ea, 0x524d09, 0x3af8ea, 0x534e0e, 0x39f9eb, 0x534e08, 0x38f6ec, 0x534e0e, 0x3ff7ed, 0x524d09, 0x3cf6ec, 0x524d09, 0x3df1ef, 0x524d09, 0x23f3e1, 0x524d09, 0x21f3e1, 0x554c06, 0x208ce1, 0x564d09, 0x218eee, 0x594a06, 0x2582ea, 0x584b07, 0x2681e9, 0x584b07, 0x218cea, 0x524d02, 0x3ef6e4, 0x564000, 0xbedde, 0x5d4504, 0x10dbd1, 0x564301, 0x17d5ce, 0x284601, 0x12d6ca, 0x255b00, 0x13d4cb, 0x254407, 0x1dd5ca, 0x254704, 0x1cd4cb, 0x254704, 0x1fd3d4, 0x274604, 0x1fd3d4, 0x274405, 0x1edcd7,
				0x274407, 0x1fdcd5, 0x274505, 0x1ddfd1, 0x264302, 0x1aded0, 0x274003, 0x1aded0, 0x244104, 0x64ded1, 0x267f06, 0x62ddde, 0x277e09, 0x61dad1, 0x277e09, 0x6edad0, 0x257d0a, 0x68dad1, 0x27730c, 0x77d9d2, 0x25700c, 0x71dcd2, 0x27700f, 0x70ddd1, 0x28730e, 0x73ddee, 0x2f6d31, 0x70dcd0, 0x106e32, 0x73dad1, 0x106e32, 0x74dbd0, 0x126c34, 0x7bdbd1, 0x106236, 0x7cd9d0, 0x106236, 0x7ad9d0, 0x116537, 0x7edbde, 0xf6536, 0x7bdad1, 0xc1b39, 0x71d9d0, 0xf01c3a, 0x78d4d1, 0xf7183a, 0x6fd7d4, 0xf1063a, 0x55d5d7, 0xfc0238, 0x53decb, 0xea003a, 0x22e3d4, 0xf00638, 0x29ecc9, 0xcb1c3a, 0x23eece, 0xcd1d38, 0x3fe9cb, 0xca1d39, 0x3cefc8, 0xca1d39, 0x3fecc9, 0xcd1c38, 0x3decc8, 0xd20327, 0x3cecd6, 0xd10226, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6,
				0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0326, 0x3ef3d6, 0xce0338, 0x3ff3d6, 0xce0338, 0x3ef3c8, 0xce033a, 0x21f3ce, 0xcf0238, 0x21f0c3, 0xcd0338 };
		System.arraycopy(aFor, 0, key, 81610, aFor.length);
	}

	private static void init274(int[] key) {
		int[] aFor = { 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xcd0338, 0x3df3c8, 0xd21c27, 0x22ecd7, 0xd21c27, 0x3df3c8, 0xd21c27, 0x22ecd7,
				0xd31d26, 0x21efd4, 0xd51c25, 0x23eeca, 0xd51d24, 0x20ecca, 0xd11d25, 0x3dedca, 0xd80025, 0x7eacb, 0xdf033b, 0xfe5ca, 0xc8063b, 0x73dad4, 0xde0c3e, 0x7dddd7, 0xe7103f, 0x76d7dc, 0xfd133d, 0x7fd2df, 0x1123f, 0x7cadde, 0x26d3e, 0x7dd2dc, 0x2123c, 0x82d2df, 0x113c, 0x83d3d9, 0x113a, 0x86d3dc, 0x1138, 0x88d3df, 0x103a, 0x89d3d2, 0x1734, 0x8ad2d1, 0x1734, 0x8bd1d2, 0x1734, 0x8cd0d3, 0x11835, 0x8cd0dd, 0x1183b, 0x8fd1dc, 0x1183b, 0x8fd1dc, 0x1183b, 0x8ed2d3, 0x1183b, 0x91d3d2, 0x1e3b, 0x95d0d2, 0x1f35, 0x96cfdd, 0x1f35, 0x96d0df, 0x31e36, 0x90d2df, 0x31e35, 0x8ed6df, 0x71537, 0x87a9d6, 0xf01c08, 0x81acd3, 0xeb0605, 0x8ea3d6, 0xee0006, 0xb1a3d6, 0xee0006, 0x8ea4d5, 0xef0107, 0x8da7d2, 0xed0001, 0x8ca8d7, 0xec0103, 0x8dabd4, 0xef0002, 0x8cacdb, 0xef000c, 0x8dacd5, 0xef0102,
				0x8cacd8, 0xe80301, 0x8db3d9, 0xe80301, 0x8db3d9, 0xeb0200, 0x83b3da, 0xea0101, 0x81b3dd, 0xed0000, 0x80b5dd, 0xee0303, 0x9eb6dd, 0xec013d, 0x9fb9dc, 0xea013e, 0x9cb8dd, 0xea023c, 0x9db9de, 0xe5053f, 0x9eb9dd, 0xe2043e, 0x9eb9dd, 0xe3063f, 0x63c6db, 0xe2073e, 0x60c7db, 0xe3053e, 0x67c6d8, 0xe2023d, 0x6ac6d5, 0xe30332, 0x69c5da, 0xe30332, 0x64c5d5, 0xed0d3c, 0x61c5d6, 0xef0c3f, 0x7dc7d6, 0xe80b3c, 0x74c4d0, 0xd6153b, 0x7cc2d5, 0xc81824, 0x74c7d7, 0xb72523, 0x7dc1d0, 0xb22724, 0x66cdd3, 0xbd2127, 0x5fcdc9, 0xb82024, 0x53cfca, 0xbc3e3a, 0x4cceca, 0xbd3f3b, 0x49cfd4, 0xbd3f3b, 0x48d0d4, 0xbc203b, 0x4fcfcb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x50cfca, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b,
				0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x4ed0cb, 0xbe203b, 0x51d1cb, 0xbe203b, 0x4ed0d5, 0xbe203b, 0x4fd0d5, 0xbe203b, 0x4ed0cb, 0xa12039, 0x4ed0cd, 0xa3223b, 0x4dd0c0, 0xa1233b };
		System.arraycopy(aFor, 0, key, 81910, aFor.length);
	}

	private static void init275(int[] key) {
		int[] aFor = { 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x51d3cb, 0xa1233b, 0x50d2ca, 0xa0223a, 0x4fcdd5, 0xa0223a, 0x4eccd4,
				0xa1233b, 0x4eccd4, 0xbe2339, 0x4dccd5, 0xb93d39, 0x4fced7, 0xba3a27, 0x4dccd3, 0xbb3a27, 0x4eccdf, 0xbd3b25, 0x4dc3de, 0xa13622, 0x45c7d8, 0x992a2f, 0x4dcdda, 0x872c35, 0x45f0de, 0xfe2836, 0x51fdde, 0xfb2838, 0x52fcdf, 0xf82939, 0x53fdd1, 0xf82937, 0x53fddf, 0xfe2b37, 0x51fedd, 0xfe2b35, 0x4effdf, 0xff2936, 0x4efcdd, 0xff2a34, 0x4effdf, 0xff2936, 0x4cffdc, 0xf82836, 0x4cffdc, 0xf82836, 0x4df0dd, 0xf82934, 0x4df1df, 0xfb2b35, 0x4df1df, 0xfb2b35, 0x4ef2dc, 0xfb2b35, 0x4ef2dc, 0xfb2b35, 0x4df1df, 0xfb2b35, 0x4cf0dc, 0xfb2b35, 0x4cf0dc, 0xf42c36, 0x4ef2da, 0xf21234, 0x4df1c7, 0x8d1231, 0x4df7c6, 0xf31430, 0x4acbc4, 0xfb1236, 0x52c1da, 0xf30c3c, 0x6fc4df, 0xf6013f, 0x61c4e0, 0xf6013f, 0x6ec4dd, 0xf6023d, 0x6fc4de, 0xf7033f, 0x6ecbdb, 0xf70339, 0x6ecbdd, 0xf6013e, 0x6fcad8,
				0xf6013c, 0x6fcada, 0xf6013e, 0x6fcdd9, 0xf5033f, 0x6fcdd9, 0xf5033f, 0x6eced9, 0xf5033f, 0x69cdda, 0xf5033f, 0x6accd9, 0xca1c3e, 0x54d2db, 0xcb1d3d, 0x6bd3db, 0xca1c3c, 0x6bd3db, 0xc81c33, 0x6ccddb, 0xc81c33, 0x6dceda, 0xc81c33, 0x60ced9, 0xc91d30, 0x60ced9, 0xca1a33, 0x66cfd8, 0xca1a31, 0x64ced8, 0xcb1b32, 0x64ced8, 0xd41831, 0x65cdda, 0xd71a30, 0x64c2db, 0xd61a30, 0x64c2db, 0xd61a30, 0x65c3dc, 0xd01930, 0x67c3dd, 0xdb1e33, 0x1bfedc, 0xdd1c32, 0x10f9c3, 0xc51037, 0x18fec1, 0xfb0c38, 0x12fecf, 0xf90d39, 0x17fecf, 0xe70b37, 0x17fdc1, 0xe50b36, 0x14fec2, 0xe60a31, 0x17fbc0, 0xf8142f, 0xafac2, 0xf8142f, 0xafac2, 0xf8142f, 0xafac0, 0xfa142f, 0xae4df, 0xfa142f, 0x15e4dd, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de,
				0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0x15e5de, 0xe5152e, 0xae4de, 0xe5152e, 0x15e5c0, 0xe5152e, 0x14e5c0, 0xe5152e, 0x15e5de, 0xfa152c, 0x15e5d8, 0xf8172e, 0x16e5d5, 0xfa162e };
		System.arraycopy(aFor, 0, key, 82210, aFor.length);
	}

	private static void init276(int[] key) {
		int[] aFor = { 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0xae6de, 0xfa162e, 0x15f9c1, 0xfa162e, 0x14f8c0, 0xfa162e, 0x15f9c1, 0xfa162e, 0xaf9c3,
				0xfb092f, 0x9f8c2, 0xfa0a2c, 0xef9c3, 0xf80c30, 0xf8c3, 0xf70e37, 0x2fdc3, 0xf10e30, 0xfcc4, 0xed0d30, 0x4e3c2, 0xe70932, 0x7eedf, 0xde0833, 0xceede, 0xc20930, 0xfefdd, 0xc10833, 0xeeedd, 0xc00b30, 0xfedde, 0xdf0a31, 0xdecde, 0xdf0a31, 0xcefde, 0xdf0a31, 0xdeedf, 0xdf0a31, 0xdeedf, 0xdf0a31, 0xcecdc, 0xdf0a31, 0xaecdf, 0xde0b31, 0xbeddc, 0xdf0a31, 0xaecdc, 0xde0b31, 0x8ecdf, 0xdd0431, 0xbe3df, 0xdf0432, 0xae2df, 0xde0532, 0xbe3df, 0xdf0432, 0x9e3dc, 0xdc0b32, 0xaecdc, 0xdd0531, 0x5ecc1, 0xdf0733, 0x4ebc0, 0xdf0534, 0x6e9c7, 0xde0534, 0x9eec0, 0xdb0633, 0x16e3c2, 0xdf022f, 0x1bdcc4, 0xd8012e, 0x1addc7, 0xd9002d, 0x1addc7, 0xd9002d, 0x1ddec6, 0xde012d, 0x1adfc6, 0xd9002d, 0x1bdec7, 0xd8012c, 0x1bdec7, 0xd8012c, 0x1bdec7, 0xd93e2c, 0x1adfc0, 0xde3d2d, 0x1adfc0, 0xde3d2d,
				0x1adfc0, 0xdf3e2d, 0x1adfc0, 0xdf3e2c, 0x1adfc0, 0xdf3e2c, 0x17ddc2, 0xdf3e2c, 0x17ddc2, 0xde392d, 0x15dac2, 0xde392d, 0x15dac2, 0xde392f, 0x15dac0, 0xd93e2e, 0x15dade, 0xd83f31, 0x15dade, 0xd83f31, 0x17dac1, 0xd83f31, 0x9dadf, 0xdb3c30, 0x9dadf, 0xdb3c30, 0x8d9df, 0xdb3c30, 0xfdbde, 0xdb3c30, 0x8dbde, 0xdb3c30, 0xed4df, 0xda3331, 0xed4dc, 0xd93c33, 0x2d6dc, 0xe23d33, 0x6d3c3, 0xe13c32, 0xdcec0, 0xfc3d32, 0xfcec3, 0xfb3d32, 0xeccdc, 0xfd3e32, 0xecbc6, 0xfd3f30, 0xfcbc3, 0xff3932, 0xfc9c2, 0xe0262d, 0x10c9c0, 0xe2272d, 0x13cac1, 0xe1242c, 0x11cac3, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d5df, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc,
				0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0x11d4dc, 0xe1242c, 0xed5dc, 0xe1242c, 0x11d4c2, 0xe1242c, 0x10d4c2, 0xe1242c, 0x11d4dc, 0xfe242e, 0x11d4da, 0xfc262c, 0x12d4d7, 0xfe272c };
		System.arraycopy(aFor, 0, key, 82510, aFor.length);
	}

	private static void init277(int[] key) {
		int[] aFor = { 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0xed7dc, 0xe13833, 0xed7dc, 0xfe272c, 0xed7dc, 0xfe272c, 0x11d7de,
				0xfd272f, 0x13d7c0, 0xfd272f, 0x12c8c0, 0xfd272d, 0xdc8c0, 0xfd272b, 0xcd7c7, 0xfe262a, 0xcd5c4, 0xfe2734, 0xfd4c4, 0xfe2734, 0xfd4c4, 0xe02736, 0xdd1c3, 0xe62437, 0xdd1c3, 0xe62437, 0xad1c3, 0xe62437, 0xad1c3, 0xe62437, 0xbd2c2, 0xe62437, 0x8d0c3, 0xe62437, 0x8d0c3, 0xe62437, 0xbd7c4, 0xe62437, 0x8d0c3, 0xe62437, 0x9d7c3, 0xe72337, 0x8d0c3, 0xe62437, 0x9d7c3, 0xe72337, 0x17d7c2, 0xf82237, 0x8d6c2, 0xe62236, 0x9d1c2, 0xe72536, 0x8d6c2, 0xe62236, 0x9d1c2, 0xe72536, 0x17d1c3, 0xe72530, 0x17d1c5, 0xf82237, 0x17d1c5, 0xf92334, 0x8d6c0, 0xf82036, 0x9d7c1, 0xe62038, 0x8d8c1, 0xe6203b, 0xad7c2, 0xe6203b, 0xad6c3, 0xe7213a, 0xad6c3, 0xe7213a, 0xad6c3, 0xe6213a, 0xbd6c3, 0xe7213a, 0xcd7c2, 0xe0203b, 0xcd7c2, 0xe0203b, 0xcd7c2, 0xe62f3b, 0xcd7c2, 0xe72e38, 0xcd7c4, 0xe72e38,
				0xcd7c4, 0xe0203f, 0xcd7c4, 0xe0203d, 0xcd7c4, 0xe0203d, 0xbd5ca, 0xe0203d, 0xbd5ca, 0xe0203d, 0xcd4ca, 0xe0203d, 0xcd4ca, 0xe0203c, 0xad4ca, 0xe0203f, 0xbd5c8, 0xe0203e, 0xbd3cb, 0xe0203e, 0xcd4c8, 0xe0203e, 0xcd4c8, 0xe0203e, 0xcd4c8, 0xe0203e, 0xed3c8, 0xe0203e, 0xed4ca, 0xe0203e, 0xfd3cc, 0xe0203e, 0xfd5cd, 0xe1213f, 0xfd5cb, 0xe12738, 0x10d4ca, 0xe12738, 0x12d4c9, 0xe12639, 0x14d7d7, 0xe12639, 0x17d7d4, 0xef2739, 0x17c8d3, 0xe32738, 0x13c8d5, 0xfc273a, 0x13c8d5, 0xfc273a, 0x13c8d5, 0xfc273a, 0xcc9d5, 0xfc273a, 0xdc8ca, 0xfc273a, 0xdc8ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca,
				0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0xcd7ca, 0xfc273a, 0x13d6ca, 0xfc273a, 0xcd7d4, 0xfc273a, 0xdd7d4, 0xfc273a, 0xcd7ca, 0xe32738, 0xcd7cc, 0xe1253a, 0xfd7c1, 0xe3243a };
		System.arraycopy(aFor, 0, key, 82810, aFor.length);
	}

	private static void init278(int[] key) {
		int[] aFor = { 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x13d4ca, 0xe3243a, 0x12d5cb, 0xe2253b, 0x12d5cb, 0xe2253b, 0x12d5cb,
				0xe2253b, 0x12d5cb, 0xfd2539, 0x13caca, 0xff3a39, 0x11d5ca, 0xff3a3b, 0x12d4cb, 0xfc3a25, 0x13d4c9, 0xfc3a23, 0xecbce, 0xfc3a23, 0xfc8cd, 0xfc3c22, 0x8c9d2, 0xfd3f23, 0xac7d0, 0xfd3e24, 0xac7d0, 0xfc3f23, 0xac7d6, 0xfc3f25, 0xbc8d0, 0xfc3023, 0xbc7d6, 0xfc3f25, 0x4c7d3, 0xf33f20, 0xbc8d5, 0xf33f26, 0xbc8d3, 0xf33f20, 0xbc8d5, 0xf33f20, 0xbc8d5, 0xf33f20, 0xbc8d5, 0xf33f20, 0xbc8d5, 0xf33f20, 0xbc8d5, 0xf33f26, 0x4c9d2, 0xf33f20, 0x4c9d4, 0xf33f26, 0x4c9d2, 0xf33f20, 0x4c9d4, 0xf33f20, 0x4c9d4, 0xfc3e21, 0x4c9d4, 0xfc3e21, 0xbc8d5, 0xf23d27, 0xac9d6, 0xf23c26, 0x4c9d7, 0xf23c26, 0x7cad7, 0xf13d25, 0x6c4d3, 0xfe3e24, 0x6c4d3, 0xf03f24, 0x7c6d2, 0xf03f24, 0x7c6d2, 0xf03f24, 0x7c6d2, 0xf03f24, 0x7c6d2, 0xf03f24, 0x7c6d2, 0xff3c25, 0x7c6d2, 0xff3c25, 0x7c6d2, 0xf13d25, 0x9c7d2,
				0xff3c25, 0x7c6dc, 0xf23f24, 0x5c6dc, 0xf23f24, 0x5c6dc, 0xf23f24, 0x4c7d1, 0xf23f24, 0x5c6d2, 0xf23f24, 0xac7d2, 0xf23f24, 0xac7d2, 0xf23f24, 0xac7d2, 0xf23f24, 0x4c7d1, 0xf33e27, 0x4c7d1, 0xf33e27, 0x4c9d2, 0xf33e27, 0xbc6d1, 0xf33e27, 0x4c9d2, 0xf33e27, 0x4c9d2, 0xf33e27, 0xbc9d2, 0xf33e27, 0xbc9d2, 0xf33e21, 0xacbd3, 0xf33e21, 0xbc9d2, 0xf33e21, 0x4c8d3, 0xf33e27, 0x5cbd4, 0xfd3f27, 0x5cbd6, 0xf33939, 0x6c9d4, 0xf22638, 0x4c8d4, 0xf32738, 0x5c9d3, 0xf12638, 0xcbd4, 0xee253a, 0x1cad5, 0xee253a, 0x1cad5, 0xee253a, 0x1ecbd5, 0xee253a, 0x1cd5cb, 0xee253a, 0x1fcaca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a,
				0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1ed5ca, 0xee253a, 0x1d4ca, 0xee253a, 0x1ed5d4, 0xee253a, 0x1fd5d4, 0xee253a, 0x1ed5ca, 0xf12538, 0x1ed5cc, 0xf3273a, 0x1dd5c1, 0xf1263a };
		System.arraycopy(aFor, 0, key, 83110, aFor.length);
	}

	private static void init279(int[] key) {
		int[] aFor = { 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf1263a, 0x1d6ca, 0xf12638, 0x1ec8cb,
				0xf12638, 0x1c9cc, 0xf1393e, 0x1c9cc, 0xf0263e, 0x1c9ce, 0xf0263e, 0x1fcbd0, 0xf0253c, 0x1ecbd0, 0xf0253c, 0x1fcad3, 0xf03b23, 0x1fcad3, 0xf03b23, 0x1ecbcc, 0xee3b22, 0x1ecbd2, 0xee3b3c, 0x1ecbcc, 0xee3b22, 0x1ecbd2, 0xf1243f, 0x1d4cf, 0xf12421, 0x1d4d1, 0xf1243f, 0x1d4cf, 0xf12421, 0x1d4d1, 0xf12421, 0x1d4d1, 0xf12421, 0x1d4d1, 0xf12421, 0x1d4d1, 0xf12421, 0x1d4d1, 0xf1243f, 0x1ecbd0, 0xf1243d, 0x1ecbd2, 0xee3b3c, 0x1ecbcc, 0xee3b22, 0x1d4cd, 0xee3b22, 0x1ecbd2, 0xee3b22, 0x1ecbd2, 0xee3b22, 0x1ecbd2, 0xef3b3c, 0x1ecbd2, 0xef3b3e, 0x1dcad1, 0xef3b3e, 0x1ecad1, 0xef3b3e, 0x1ecacf, 0xee383e, 0x1fcbcc, 0xee383e, 0x1fc9d1, 0xee383e, 0x1fc9d1, 0xee383e, 0x1fc9d1, 0xee383e, 0x1fc9d1, 0xee383e, 0x1ccace, 0xee383e, 0x1ccace, 0xee383e, 0x1ccace, 0xed393e, 0x1fcbce, 0xee383e,
				0x1fc9cf, 0xef3b3e, 0x1dc9cc, 0xef3b3e, 0x1ecacf, 0xef3b3e, 0x1ecacf, 0xef3b3e, 0x1fcbce, 0xef3b3e, 0x1fcbce, 0xef3b3e, 0x1fcbce, 0xef3b3e, 0x1fcbce, 0xef3b3e, 0x1fcbce, 0xef3b3e, 0x1fcbce, 0xef3b3e, 0x1fcbce, 0xef3b3e, 0x1fcbce, 0xee3a3f, 0x1ecacf, 0xee3a3f, 0x1ecacf, 0xee3a3f, 0x1fd5cf, 0xee3a3f, 0x1fd5cf, 0xee2521, 0x1ecacc, 0xee2521, 0x1fd5cf, 0xee2521, 0x1ed5cf, 0xf13a20, 0x1ed5cf, 0xee253f, 0x1ed5cf, 0xee253f, 0x1cace, 0xee2521, 0x1ecbce, 0xee2521, 0x1fcad1, 0xee2521, 0x1dcad1, 0xec2521, 0x1dcad1, 0xec2521, 0x1cd5d1, 0xec2521, 0x1cd5d1, 0xf33a3e, 0x2cbcf, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x2d5ce, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace,
				0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x3cace, 0xf33a3e, 0x1ccbce, 0xf33a3e, 0x3cad0, 0xf33a3e, 0x2cad0, 0xf33a3e, 0x3cace, 0xec3a3c, 0x3cac8, 0xee383e, 0xcac5, 0xec393e };
		System.arraycopy(aFor, 0, key, 83410, aFor.length);
	}

	private static void init280(int[] key) {
		int[] aFor = { 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce, 0xec393e, 0x3d6d1, 0xec393e, 0x1cc9ce, 0xec393e, 0x1cc9ce,
				0xec393e, 0x1cc9ce, 0xec393e, 0x1dd6cc, 0xec3938, 0x1ec9cb, 0xec3938, 0x1ec9c9, 0xef2639, 0x1ec9c9, 0xee2726, 0x1fc8d6, 0xee2726, 0x1fc8d6, 0xee2726, 0x1ed7d4, 0xee2726, 0xc8d7, 0xed2627, 0xcbca, 0xee2524, 0xcbca, 0xee2524, 0xcbca, 0xee2524, 0xcbca, 0xed2627, 0x3c8c9, 0xed2627, 0x3c8c9, 0xed2627, 0x2c9c8, 0xed2627, 0x2c9c8, 0xed2627, 0x3c8d7, 0xec2726, 0x3c8d7, 0xec2726, 0x3c8d7, 0xec2726, 0x3c8c9, 0xec2726, 0x3c8c9, 0xec2726, 0x3c8c9, 0xf33839, 0x3c8c9, 0xf33839, 0x1cd7d6, 0xf33839, 0x1dd6d7, 0xf33839, 0x1cd7c8, 0xf33827, 0x1cd7c8, 0xf33827, 0x3d7ca, 0xec3926, 0x3d7ca, 0xf33827, 0x1cd7ca, 0xf23926, 0x1fd4cb, 0xf23926, 0x1ed7cb, 0xf33825, 0x1dd6cb, 0xf33827, 0x1dd6cb, 0xf33827, 0x1dd6cb, 0xf33827, 0x1dd6cb, 0xf33827, 0x1dd6cb, 0xf33827, 0x1ed5cc, 0xf33827, 0x1ed5cc,
				0xf33827, 0x1ed5cc, 0xf33827, 0x1dd6c9, 0xf33827, 0x1dd6c9, 0xf33827, 0x1dd6c9, 0xf33827, 0x1dd6c9, 0xf03b24, 0x1ed5ca, 0xf03b24, 0x1ed5ca, 0xf03b24, 0x1ed5ca, 0xf13a25, 0x1ed5ca, 0xf13a25, 0x1fd4cb, 0xf13a25, 0x1fd4cb, 0xf13a25, 0x1fd4cb, 0xf13a25, 0x1fd4cb, 0xf13a25, 0x1ed5ca, 0xf13a25, 0x1ed5ca, 0xf13a25, 0x1d4ca, 0xf13a25, 0x1d4ca, 0xf03b3a, 0xd4d7, 0xf03b3a, 0xd5d5, 0xf03b3a, 0x1fd4d5, 0xf03b3a, 0x1fd4cb, 0xef2439, 0x3c9d6, 0xee2726, 0x1d7d2, 0xee2726, 0x1c8d7, 0xee2726, 0x1c8d7, 0xf13825, 0xd7d5, 0xf33825, 0x2d7d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x1cc9d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x2d7d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5,
				0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x3c8d5, 0xf33825, 0x1cc9d5, 0xf33825, 0x3c8cb, 0xf33825, 0x2c8cb, 0xf33825, 0x3c8d5, 0xec3827, 0x3c8d3, 0xee3a25, 0xc8de, 0xec3b25 };
		System.arraycopy(aFor, 0, key, 83710, aFor.length);
	}

	private static void init281(int[] key) {
		int[] aFor = { 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbd5,
				0xec3b25, 0x1ccbd5, 0xec3b25, 0x1ccbcb, 0xec3b25, 0x1ccbcb, 0xec3b25, 0x1dcbcb, 0xec3b25, 0x1fd4cb, 0xec3b25, 0x1fd4cb, 0xec3b25, 0x1fd4d5, 0xec3b25, 0x1fd5d7, 0xec3b25, 0x1fd5d7, 0xee3a25, 0x1fd5d5, 0xee3a25, 0x1fd5d5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad7, 0xee3a27, 0x1cbd7, 0xee3a39, 0x1ecac9, 0xee3a27, 0x1ecac9, 0xee3a27, 0x1ecac9, 0xee3a27, 0x1ecac9, 0xee3a27, 0x1ecad7, 0xee3a27, 0x1ecad7, 0xee3a27, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1fd5d5,
				0xee3a25, 0x1fd5d5, 0xee3a25, 0x1fd5d5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1fcacb, 0xee3a25, 0x1fcacb, 0xee3a25, 0x1fcacb, 0xee3a25, 0x1fcacb, 0xee3a25, 0x1fcacb, 0xee3a25, 0x1fd5d5, 0xee3a25, 0x1fd5d5, 0xee3a25, 0x1fd5d5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad5, 0xee3a25, 0x1ecad7, 0xee3a25, 0x1cad7, 0xee3a25, 0x1cad7, 0xee3a25, 0x1cad7, 0xee3a25, 0x1cad7, 0xee3a25, 0x1cbd5, 0xf13b25, 0xd4d5, 0xf33b25, 0x2d4d5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x1ccad5, 0xf33b25, 0x1ccad5, 0xf33b25, 0x1ccad5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5,
				0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x3cbd5, 0xf33b25, 0x1ccad5, 0xf33b25, 0x3cbcb, 0xf33b25, 0x2cbcb, 0xf33b25, 0x3cbd5, 0xec3b27, 0x3cbd3, 0xee3925, 0xcbde, 0xed3f22 };
		System.arraycopy(aFor, 0, key, 84010, aFor.length);
	}

	private static void init282(int[] key) {
		int[] aFor = { 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2, 0xed3f22, 0x1dcfd2,
				0xed3f22, 0x1dcfd2, 0xed3f22, 0x2cecc, 0xed3f20, 0x2cecc, 0xed3f20, 0x1dcecc, 0xed3f20, 0x1ccfcc, 0xed3f20, 0x1ccfce, 0xed3f20, 0x1ed0d0, 0xed3f20, 0x1ed0d0, 0xed3f20, 0x1ed1d2, 0xed3e22, 0x1cd1d2, 0xed3e22, 0x1cd1d2, 0xed3e22, 0x1dced2, 0xed3e22, 0x1dced2, 0xed3e22, 0x1dced2, 0xed3e22, 0x1dced2, 0xed3e22, 0x1dced2, 0xed3e22, 0x1dced2, 0xed3e22, 0x1dced2, 0xed3e22, 0x1dced2, 0xed3e22, 0x1dced2, 0xed3e22, 0x1dced2, 0xed3e22, 0x1dced2, 0xed3e22, 0x1dced2, 0xed3e22, 0x1dced2, 0xed3e22, 0x1dced0, 0xed3e20, 0x2cfce, 0xed3e20, 0x1dcece, 0xed3e20, 0x1dcece, 0xed3e20, 0x1dcece, 0xed3e20, 0x1dcece, 0xed3e20, 0x1dced0, 0xed3e20, 0x1dced0, 0xed3e20, 0x1dced2, 0xed3e20, 0x1dced0, 0xed3e20, 0x1dced0, 0xed3e20, 0x1dced0, 0xed3e20, 0x1dced0, 0xed3e20, 0x1dced0, 0xed3e20, 0x1cd1d0,
				0xed3e20, 0x1cd1d0, 0xed3e20, 0x1cd1d0, 0xed3e20, 0x1dced0, 0xed3e20, 0x1dced0, 0xed3e20, 0x1dced0, 0xed3e20, 0x1dced0, 0xed3e20, 0x1dced0, 0xed3e20, 0x1dced0, 0xed3e20, 0x1dced0, 0xed3e20, 0x1dced0, 0xed3e20, 0x1ccece, 0xed3e20, 0x1ccece, 0xed3e20, 0x1ccece, 0xed3e20, 0x1ccece, 0xed3e20, 0x1ccece, 0xed3e20, 0x1cd1d0, 0xed3e20, 0x1cd1d0, 0xed3e20, 0x1cd1d0, 0xed3e20, 0x1dced0, 0xed3e20, 0x1dced0, 0xed3e20, 0x1dced2, 0xed3e20, 0x2ced2, 0xed3e20, 0x2ced2, 0xed3f22, 0x2cfd0, 0xed3e20, 0x2ced2, 0xed3f22, 0x2ced2, 0xf23e22, 0x3d1d2, 0xf23e22, 0x3d1d2, 0xf23e22, 0x2ced2, 0xf23e22, 0x1dcfd2, 0xf23e22, 0x1dcfd2, 0xf23e22, 0x1dcfd2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2,
				0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x2ced2, 0xf23e22, 0x1dcfd2, 0xf23e22, 0x2cecc, 0xf23e22, 0x3cecc, 0xf23e22, 0x2ced2, 0xed3e20, 0x2ced4, 0xef3c22, 0x1ced9, 0xec3a25 };
		System.arraycopy(aFor, 0, key, 84310, aFor.length);
	}

	private static void init283(int[] key) {
		int[] aFor = { 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x1ccad5, 0xec3a25, 0x3cbd5, 0xec3a25, 0x3cbd5, 0xec3a25, 0x3cbd5, 0xec3a25, 0x3cbd5, 0xec3a25, 0x3cbd5, 0xec3a25, 0x3cbd5, 0xec3a25, 0x3cbd5, 0xec3a25,
				0x3cbd5, 0xec3a25, 0x1c8cb, 0xec3a25, 0x1c8cb, 0xec3a25, 0x1c8cb, 0xec3a25, 0x3cbcb, 0xec3a25, 0x3cbcb, 0xec3a25, 0x1ccacb, 0xec3a25, 0x1ccacb, 0xec3a25, 0x1dd5d5, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd4d7, 0xec253b, 0x1cd4d7, 0xec253b, 0x1cd4d7, 0xec253b, 0x1cd4d7, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb,
				0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5d5, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5cb, 0xec253b, 0x1cd5d5, 0xec2439, 0x1cd5d5, 0xec2439, 0x1cd4d7, 0xec2439, 0x1cd4d7, 0xec2439, 0x1cd4d7, 0xec2439, 0x1cd4d7, 0xec2439, 0x1cd4d7, 0xec2439, 0x1cd4d7, 0xec2439, 0x1cd4c9, 0xec2439, 0x1cd4c9, 0xec2439, 0x1cd4c9, 0xec2439, 0x1cd4c9, 0xec2439, 0x1cd4c9, 0xec2427, 0x1cd4d7, 0xec2439, 0x1cd4c9, 0xec2427, 0x1cd4c9, 0xed2427, 0x1ccbd7, 0xed2427, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x3cad7, 0xec3b27, 0x3cad7, 0xec3b27, 0x3cad7, 0xec3b27, 0x3cad7, 0xec3b27, 0x3cad7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7,
				0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x1ccbd7, 0xec3b27, 0x3cad7, 0xec3b27, 0x1ccbc9, 0xec3b27, 0x1dcbc9, 0xec3b27, 0x1ccbd7, 0xf33b25, 0x1ccbd1, 0xf13927, 0x1fcbdc, 0xf23f20 };
		System.arraycopy(aFor, 0, key, 84610, aFor.length);
	}

	private static void init284(int[] key) {
		int[] aFor = { 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x2cfd0, 0xf23f20, 0x1dced0, 0xf23f20, 0x1dced0, 0xf23f20, 0x1dced0, 0xf23f20, 0x1dced0, 0xf23f20, 0x1dced0, 0xf23f20, 0x1dced0, 0xf23f20, 0x1dced0, 0xf23f20, 0x1dced0, 0xf23f20,
				0x1fced0, 0xf23f20, 0x1fced0, 0xf23f20, 0x1fced0, 0xf23f20, 0x1fced0, 0xf23f20, 0x1fced0, 0xf23c3e, 0x1dcdce, 0xf23c20, 0x1dcdd0, 0xf23c3e, 0x2ccd0, 0xf23c3e, 0x2ccd0, 0xed3d3e, 0x1dcdce, 0xed3d20, 0x1dcdd0, 0xed3d3e, 0x1dcdce, 0xed3d20, 0x1dcdd0, 0xed3d3e, 0x1dcdce, 0xed3d20, 0x1dcdd0, 0xed3d3e, 0x1dcdce, 0xed3d20, 0x1dcdce, 0xf23c20, 0x2ccce, 0xed3d20, 0x1dcdce, 0xf23c20, 0x2ccce, 0xed3d20, 0x1dcdd0, 0xf23c20, 0x2ccd0, 0xed3d20, 0x1dcdd0, 0xf23c20, 0x2ccd0, 0xed3d20, 0x1dcccc, 0xf23d20, 0x2cccc, 0xed3d20, 0x1dcdce, 0xed3d20, 0x1dcdce, 0xed3d20, 0x1dcdce, 0xed3d3e, 0x1dcdce, 0xed3d3e, 0x1dcdce, 0xed3d3e, 0x1dcdce, 0xed3d3e, 0x1dcdce, 0xed3d3e, 0x1dcdce, 0xed3d3e, 0x1dcdce, 0xed3d3e, 0x1dcdce, 0xed3d3e, 0x1dcdce, 0xed3d3e, 0x1dcdce, 0xed3d3e, 0x1dcdce, 0xed3d3e, 0x1dcdce,
				0xed3d3e, 0x1dcdce, 0xf23c20, 0x2ccce, 0xed3d20, 0x1dcdd0, 0xf23c20, 0x2ccd0, 0xed3d20, 0x1dcdd0, 0xf23c20, 0x2ccd0, 0xf23c20, 0x2ccd0, 0xf23c20, 0x2ccd2, 0xf23c22, 0x2cccc, 0xed3d22, 0x1dcdcc, 0xf23c22, 0x2cccc, 0xed3d22, 0x1dcdd2, 0xf23c3c, 0x2cccc, 0xf23c22, 0x2ccd2, 0xf23c3c, 0x2cccc, 0xf23c22, 0x2ccd2, 0xf23c22, 0x2ccd2, 0xed3d22, 0x1dcdd2, 0xf23c22, 0x2ccd2, 0xf23c22, 0x2ccd2, 0xf23c22, 0x2ccd2, 0xf23c3c, 0x2ccd2, 0xf23c3c, 0x2ccd2, 0xf23c3c, 0x2ccd2, 0xf23c3c, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x1ccdd2, 0xf33c22, 0x1ccdd2, 0xf33c22, 0x1ccdd2, 0xf33c22, 0x1ccdd2, 0xf33c22, 0x1ccdd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22,
				0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x3ccd2, 0xf33c22, 0x1ccdd2, 0xf33c22, 0x3cccc, 0xf33c22, 0x2cccc, 0xf33c22, 0x1cd3cd, 0xf23c3c, 0x1dccc8, 0xf03e3e, 0x1eccc5, 0xf23f3e };
		System.arraycopy(aFor, 0, key, 84910, aFor.length);
	}

	private static void init285(int[] key) {
		int[] aFor = { 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1,
				0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1dd0cf, 0xed3e3e, 0x2d1cf, 0xed3e3e, 0x3d1cf, 0xed3e3e, 0x3d1cf, 0xed3e3e, 0x3d1cf, 0xed2120, 0x3ced1, 0xed3e3e, 0x3d1cf, 0xed2120, 0x3d1cf, 0xed2120, 0x3d1cf, 0xef2120, 0x1ced1, 0xef3e3e, 0x1d1cf, 0xef2120, 0x1ced1, 0xef3e3e, 0x1d1cf, 0xef2120, 0x1ced1, 0xef3e3e, 0x1d1cf, 0xef2120, 0x1ced1, 0xef3e3e, 0x1ced1, 0xed3e3e, 0x3ced1, 0xef3e3e, 0x1ced1, 0xed3e3e, 0x3ced1, 0xef3e3e, 0x1d1cf, 0xed213e, 0x3cecf, 0xef3e3e, 0x1d1cf, 0xed213e, 0x3cecf, 0xef3e20, 0x1cecf, 0xed3f22, 0x3cfcf, 0xef3e22, 0x1cecd, 0xef3e22, 0x1cecd, 0xef3e22, 0x1cecd, 0xef213c, 0x1cecd, 0xef213c, 0x1cecd, 0xef213c, 0x1cecd, 0xef213c, 0x1cecd, 0xef213c, 0x1cecd, 0xef213c, 0x1cecd, 0xef213c, 0x1cecd, 0xef213c, 0x1cecd, 0xef213c, 0x1cecd, 0xef213c, 0x1cecd, 0xef213c, 0x1cecd,
				0xef3e22, 0x1cecd, 0xed3e22, 0x3cecd, 0xef3e22, 0x1d1d3, 0xed2122, 0x3ced3, 0xef3e22, 0x1d1d3, 0xed2122, 0x3ced3, 0xed2122, 0x3ced3, 0xed2122, 0x3ced1, 0xed2120, 0x3ced1, 0xef3e3e, 0x1ced1, 0xed3e3e, 0x3ced1, 0xef3e3e, 0x1d1cf, 0xed2120, 0x3ced1, 0xed3e3e, 0x3d1cf, 0xed2120, 0x3ced1, 0xed3e3e, 0x3d1cf, 0xed3e3e, 0x3d1cf, 0xef213e, 0x1cecf, 0xed3e3e, 0x3d1cf, 0xed3e3e, 0x3d1cf, 0xed3e3e, 0x3d1cf, 0xed2120, 0x3d1cf, 0xed2120, 0x3d1cf, 0xed2120, 0x3d1cf, 0xed2122, 0x2cecf, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x3d1d3, 0xec3e22, 0x2d1d3, 0xec3e22, 0x2cecd, 0xec3e22, 0xcecd, 0xec3e22, 0xcfcf, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd,
				0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x2cecd, 0xec3e22, 0x1ccecc, 0xec3e22, 0x1cd1cf, 0xec3e22, 0x3d1cd, 0xed3e3c, 0x3d1cf, 0xee2339, 0xd1c2, 0xec2239 };
		System.arraycopy(aFor, 0, key, 85210, aFor.length);
	}

	private static void init286(int[] key) {
		int[] aFor = { 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xec2239, 0x2d2d6, 0xed3d39, 0x1dd3c8,
				0xed3d39, 0x1dd3c8, 0xf23c39, 0x1dd3c8, 0xf33c39, 0x1dd3ca, 0xf33c3b, 0x1dd3ca, 0xf33c3b, 0x1dd3ca, 0xf33c3b, 0x1dd3ca, 0xf33c3b, 0x1dccd4, 0xf33c3b, 0x1dd3ca, 0xf1233b, 0x1dd3ca, 0xf1233b, 0x1fccca, 0xf1233b, 0x1fccca, 0xf1233b, 0x1fccca, 0xf1233b, 0x1fccca, 0xf1233b, 0x1fccca, 0xf1233b, 0x1fccca, 0xf13c25, 0x1fccca, 0xf33c25, 0x1fccca, 0xf33c25, 0x1fccca, 0xf33c25, 0x1fccca, 0xf33c25, 0x1fccd4, 0xf33c25, 0x1fccd4, 0xf33c25, 0x1fccd4, 0xf33c25, 0x1fccd4, 0xf33c25, 0x1fccca, 0xf33c25, 0x1dccca, 0xf13c25, 0x1dccca, 0xf13c25, 0x1fd3d4, 0xf13c25, 0x1fd3d4, 0xf13c25, 0x1fd3d4, 0xf13c25, 0x1fd3d4, 0xf1233b, 0x1fccca, 0xf13c25, 0x1fd3d4, 0xf1233b, 0x1fccca, 0xf13c25, 0x1fd3d4, 0xf1233b, 0x1fccca, 0xf13c25, 0x1fd3d4, 0xf1233b, 0x1fccca, 0xf13c25, 0x1fd3d4, 0xf1233b, 0x1fccca,
				0xf13c25, 0x1fccca, 0xf33c25, 0x1fccd4, 0xf33c25, 0x1fccd4, 0xf33c25, 0x1fccd4, 0xf33c25, 0x1fccd4, 0xf33c25, 0x1dd3d4, 0xf33c25, 0x1dd3d6, 0xf33c25, 0x1dd3d6, 0xf33c25, 0x1fccd4, 0xf33c25, 0x1fccd4, 0xf33c25, 0x1fccd4, 0xf33c25, 0x1fccd4, 0xf33c25, 0x1fccd4, 0xf33c25, 0x1dd3d4, 0xf33c25, 0x1dd3d4, 0xf33c25, 0x1dd3d4, 0xf33c25, 0x1dd3d4, 0xf12325, 0x1fccd4, 0xf33c25, 0x1dd3d4, 0xf33c25, 0x1dd3d4, 0xf33c25, 0x1dd3d4, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccc8, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1cd3d4, 0xf33c25, 0x1dd3d4, 0xf33c25, 0x1dccca, 0xf33c25, 0x1fccca, 0xf33c25, 0x1fcdc8, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca,
				0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1dccca, 0xf33c25, 0x1cd3c8, 0xf33c25, 0x3d3c8, 0xf33c25, 0x1cd3ca, 0xf23c3b, 0x1cd3c8, 0xf1213e, 0x1fd3c5, 0xf3203e };
		System.arraycopy(aFor, 0, key, 85510, aFor.length);
	}

	private static void init287(int[] key) {
		int[] aFor = { 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1, 0xf3203e, 0x1dd0d1,
				0xf3203e, 0x1dd0d1, 0xf3203e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf23f3e, 0x1ccfd1, 0xf03f3e, 0x1ccfcf, 0xf03f3e, 0x1ccfcf, 0xf03f3e, 0x1ed0cf, 0xf03f3e, 0x1fd0cf, 0xf03f3e, 0x1fd0cf, 0xf03f3e, 0x1ecfd1, 0xf03f3e, 0x1ecfd1, 0xf03f3e, 0x1ecfd1, 0xf03f3e, 0x1ecfd1, 0xf03f3e, 0x1fd0d1, 0xf03f3e, 0x1fd0d1, 0xf03f3e, 0x1fd0d1, 0xf03f3e, 0x1fd0d1, 0xf1203e, 0x1fd0d1, 0xf1203c, 0x1fd0d1, 0xf1203c, 0x1fd0d1, 0xf1203c, 0x1fd0d1, 0xf1203c, 0x1fd0d3, 0xf1203c, 0x1fd0d3, 0xf1203c, 0x1fd0d3, 0xf1203c, 0x1fd0d3, 0xf1203c, 0x1fcfcd, 0xf1203c, 0x1ecfcd, 0xf0203c, 0x1ecfcd, 0xf0203c, 0x1ecfcd, 0xf0203c, 0x1ed0d3, 0xf0203c, 0x1fcfd3, 0xf0203c, 0x1fcfd3, 0xf0203e, 0x1fcfd1, 0xf0203c, 0x1fcfd3, 0xf0203e, 0x1fcfd1, 0xf0203c, 0x1fcfd3, 0xf0203e, 0x1fcfd1, 0xf0203c, 0x1fcfd3, 0xf0203e, 0x1fcfd1,
				0xf0203c, 0x1fcfd3, 0xf0203e, 0x1fcfd1, 0xf13f3c, 0x1fcfd1, 0xf13f3c, 0x1fcfd3, 0xf13f3c, 0x1fcfd3, 0xf13f3c, 0x1fcfd3, 0xf13f3c, 0x1fcfd3, 0xf13f3c, 0x1ed0cd, 0xf13f3c, 0x1ed0cd, 0xf13f3c, 0x1ed0cd, 0xf03f3c, 0x1ccfcd, 0xf03f3c, 0x1ccfcd, 0xf03f3c, 0x1ccfcd, 0xf03f3c, 0x1ed0cd, 0xf03f3c, 0x1ecfd3, 0xf03f3c, 0x1ecfd3, 0xf03f3c, 0x1ecfd3, 0xf03f3c, 0x1ecfd3, 0xf03f3c, 0x1ecfd3, 0xf03f3c, 0x1fd0d3, 0xf1203c, 0x1ecfd3, 0xf1203c, 0x1ecfd3, 0xf1203c, 0x1fd0d3, 0xf1203c, 0x1fcfcd, 0xf1203c, 0x1fcfcd, 0xf1203c, 0x1fcfcd, 0xf13f22, 0x1dcecf, 0xf13f22, 0x1dcfcd, 0xf13f22, 0x1fcfcd, 0xf13f22, 0x1ed0d3, 0xf13f22, 0x1ed0d3, 0xf13f22, 0x1fcfcd, 0xf13f22, 0x1dcfcd, 0xf13f22, 0x1acecf, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd,
				0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x18cfcd, 0xf63f22, 0x19d0cf, 0xf63f22, 0x6d0cf, 0xf63f22, 0x19d0cd, 0xf73f3c, 0x19d0cf, 0xf5213a, 0x1bd3c1, 0xf7203a };
		System.arraycopy(aFor, 0, key, 85810, aFor.length);
	}

	private static void init288(int[] key) {
		int[] aFor = { 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d5,
				0xf7203a, 0x19d0d5, 0xf7203a, 0x19d0d7, 0xf7203a, 0x19d0d7, 0xf5213a, 0x1bd1d5, 0xf7213a, 0x19d1d5, 0xf5213a, 0x1bcecb, 0xf5213a, 0x1bcecb, 0xf5213a, 0x1acecb, 0xf5213a, 0x5cfcb, 0xea203a, 0x5cfd5, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x4d0d5, 0xeb3f3a, 0x4d0d5, 0xeb3f3a, 0x4d0d5, 0xeb3f3a, 0x4d0d5, 0xeb3f3a, 0x5cfd7, 0xeb3f3a, 0x5cfd7, 0xeb3f3a, 0x5cfd7, 0xeb3f3a, 0x5cfd7, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x4d0cb, 0xeb3f3a, 0x4d0cb, 0xeb3f3a, 0x5d0cb, 0xeb3f3a, 0x5d0cb, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x4d0d5, 0xeb3f3a, 0x4d0d7, 0xeb3f3a, 0x4d0d7, 0xeb3f3a, 0x4d0d7, 0xeb3f3a, 0x4d0d7, 0xeb3f3a, 0x4d0d7, 0xeb3f3a, 0x4d0d7, 0xeb3f3a, 0x4d0d7, 0xeb3f3a, 0x4d0d7, 0xeb3f3a, 0x4d0d7, 0xeb3f3a,
				0x4d0d7, 0xeb3f3a, 0x5cfd7, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x4d0d5, 0xeb3f3a, 0x4d0cb, 0xeb3f3a, 0x4d0cb, 0xeb3f3a, 0x4d0cb, 0xeb3f3a, 0x5d0cb, 0xe9203a, 0x7cfcb, 0xeb3f3a, 0x5d0cb, 0xeb3f3a, 0x5d0cb, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x4d0d5, 0xeb3f3a, 0x4d0d5, 0xeb3f3a, 0x4d0d5, 0xeb3f3a, 0x4d0d5, 0xeb3f3a, 0x5cfd5, 0xeb3f3a, 0x5d0cb, 0xeb3f3a, 0x5d0cb, 0xeb3f3a, 0x5d0cb, 0xeb2024, 0x7d0cb, 0xeb2126, 0x7d1c9, 0xe92126, 0x7d1c9, 0xe92126, 0x6ced7, 0xe92126, 0x6ced7, 0xe92126, 0x7d1c9, 0xe92126, 0x7d1c9, 0xeb2126, 0x7d0cb, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126,
				0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x5d1c9, 0xeb2126, 0x4cecb, 0xeb2126, 0x1bcecb, 0xf42126, 0x1bcec9, 0xf62039, 0x18cfca, 0xf53f3f, 0x1bccc6, 0xf73f3d };
		System.arraycopy(aFor, 0, key, 86110, aFor.length);
	}

	private static void init289(int[] key) {
		int[] aFor = { 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd,
				0xf73f3d, 0x7cfcd, 0xe83e3d, 0x18cecd, 0xf73f3d, 0x7cfcd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd,
				0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xf73f3d, 0x7cfcd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x7cfcd, 0xe83e3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xf73f3d, 0x7cfcd, 0xe83e3d, 0x7cfcd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d,
				0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18cecd, 0xe83e3d, 0x18ced3, 0xe83e3d, 0x7d1d0, 0xe83e3d, 0x6d0d3, 0xeb3e23, 0x5d1d0, 0xeb2026, 0x4d2df, 0xea2126 };
		System.arraycopy(aFor, 0, key, 86410, aFor.length);
	}

	private static void init290(int[] key) {
		int[] aFor = { 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6,
				0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6,
				0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6,
				0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2126, 0x1ad1d6, 0xea2138, 0x5ced5, 0xea2138, 0x7ced6, 0xea2026, 0x4cfd5, 0xf43e23, 0x1bccda, 0xf43e23 };
		System.arraycopy(aFor, 0, key, 86710, aFor.length);
	}

	private static void init291(int[] key) {
		int[] aFor = { 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3,
				0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3,
				0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3,
				0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced3, 0xf43e23, 0x4ced1, 0xf43e21, 0x4ced1, 0xf43e21, 0x4cecf, 0xeb2122, 0x5d1cd, 0xe83f3d, 0x6d0ce, 0xf62138, 0x19d3c1, 0xf62138 };
		System.arraycopy(aFor, 0, key, 87010, aFor.length);
	}

	private static void init292(int[] key) {
		int[] aFor = { 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8,
				0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8,
				0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8,
				0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1ca, 0xf62138, 0x6d1c8, 0xf62138, 0x6d1d6, 0xe93e3b, 0x7ced4, 0xea2024, 0x4cfd7, 0xf43e21, 0x1bccd8, 0xf43e21 };
		System.arraycopy(aFor, 0, key, 87310, aFor.length);
	}

	private static void init293(int[] key) {
		int[] aFor = { 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3,
				0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3,
				0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3,
				0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x4ced3, 0xf43e21, 0x1bd1d0, 0xf43e21, 0x4ced1, 0xf43e21, 0x1bd1ce, 0xf43e21, 0x1ad1d0, 0xf73f20, 0x19d0d3, 0xe92125, 0x6d3dc, 0xe92127 };
		System.arraycopy(aFor, 0, key, 87610, aFor.length);
	}

	private static void init294(int[] key) {
		int[] aFor = { 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6,
				0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6,
				0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6,
				0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6ced6, 0xe92127, 0x6cec8, 0xe92127, 0x6cec8, 0xe92127, 0x7ced6, 0xea2026, 0x4cfd2, 0xf43e24, 0x1bccdf, 0xf43e24 };
		System.arraycopy(aFor, 0, key, 87910, aFor.length);
	}

	private static void init295(int[] key) {
		int[] aFor = { 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5,
				0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5,
				0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5,
				0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1bd1d5, 0xf43e24, 0x1ad0d4, 0xf43e24, 0x1bd1cb, 0xf43e24, 0x1bd1cb, 0xf53f25, 0x18d1d5, 0xf53f25, 0x1bd0d1, 0xeb2127, 0x4d3dc, 0xeb2127 };
		System.arraycopy(aFor, 0, key, 88210, aFor.length);
	}

	private static void init296(int[] key) {
		int[] aFor = { 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7,
				0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7,
				0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7,
				0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfd7, 0xeb2127, 0x5cfc9, 0xeb2127, 0x5cfc9, 0xeb2127, 0x6cfd7, 0xeb2127, 0x5ced3, 0xf53f25, 0x1acdde, 0xf53f25 };
		System.arraycopy(aFor, 0, key, 88510, aFor.length);
	}

	private static void init297(int[] key) {
		int[] aFor = { 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4,
				0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4,
				0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4,
				0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0d4, 0xf53f25, 0x1ad0ca, 0xf53f25, 0x1ad0ca, 0xf43e24, 0x19d0d4, 0xf43e24, 0x1bced1, 0xeb3f27, 0x4cddc, 0xeb3f27 };
		System.arraycopy(aFor, 0, key, 88810, aFor.length);
	}

	private static void init298(int[] key) {
		int[] aFor = { 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6,
				0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6,
				0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6,
				0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0d6, 0xeb3f27, 0x4d0c8, 0xeb3f27, 0x4d0c8, 0xeb3f27, 0x5d0d6, 0xeb3f27, 0x5d0d3, 0xea2026, 0x4d1dc, 0xeb2327 };
		System.arraycopy(aFor, 0, key, 89110, aFor.length);
	}

	private static void init299(int[] key) {
		int[] aFor = { 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6,
				0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6,
				0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6,
				0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccd6, 0xeb2327, 0x4ccc8, 0xeb2327, 0x4ccc8, 0xeb2327, 0x5ccd6, 0xe82226, 0x6cdd2, 0xe93d27, 0x7ccdd, 0xe83e26 };
		System.arraycopy(aFor, 0, key, 89410, aFor.length);
	}

	private static void init300(int[] key) {
		int[] aFor = { 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7,
				0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7,
				0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7,
				0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1d7, 0xe83e26, 0x7d1c9, 0xe83e26, 0x7d1c9, 0xe83e26, 0x5d0d6, 0xe83e26, 0x6d1d5, 0xe92120, 0x7d0d8, 0xe82223 };
		System.arraycopy(aFor, 0, key, 89710, aFor.length);
	}

	private static void init301(int[] key) {
		int[] aFor = { 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc,
				0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc,
				0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc,
				0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x7cdcc, 0xe82223, 0x6ccd3, 0xe92322, 0x6cccd, 0xe92322, 0x6cccf, 0xe82223, 0x5cdcd, 0xe8233d, 0x6ccce, 0xe93c3b, 0x7cdc3, 0xe83f3a };
		System.arraycopy(aFor, 0, key, 90010, aFor.length);
	}

	private static void init302(int[] key) {
		int[] aFor = { 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4,
				0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4,
				0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4,
				0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x6d1d4, 0xe83f3a, 0x5d2d5, 0xe83f38, 0x5d2d5, 0xe83f38, 0x5d2d3, 0xe83f38, 0x4d1d5, 0xe83c3a, 0x6d3c9, 0xe9233c, 0x7d2c4, 0xe8203d };
		System.arraycopy(aFor, 0, key, 90310, aFor.length);
	}

	private static void init303(int[] key) {
		int[] aFor = { 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3,
				0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3,
				0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3,
				0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203d, 0x6ced3, 0xe8203f, 0x6ced3, 0xe8203f, 0x5cfd1, 0xe82121, 0x7d1d5, 0xf72023, 0x18d2da, 0xf72023 };
		System.arraycopy(aFor, 0, key, 90610, aFor.length);
	}

	private static void init304(int[] key) {
		int[] aFor = { 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x7d2d2, 0xf72023, 0x6d1d0, 0xf72023, 0x6d1d0, 0xf72023, 0x5d0d2, 0xf42123, 0x6d1d2, 0xf72023, 0x6d1d0, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d2, 0xf72023, 0x6d1d0, 0xf72021, 0x6d1d0, 0xf72021, 0x6d1d0, 0xf72021, 0x6d1d0, 0xf72021, 0x6d1d0, 0xf7203f, 0x6d1ce, 0xf7203f, 0x6d1ce, 0xf7203d, 0x6d1ce,
				0xf7203d, 0x6d1cc, 0xf7203d, 0x7d2cc, 0xf7203d, 0x6d1cc, 0xf4213d, 0x6d1cc, 0xf4213d, 0x5d0cc, 0xf4213d, 0x5d0ce, 0xf4213f, 0x6d1ce, 0xf4213f, 0x5d0cc, 0xf4213d, 0x5d0cc, 0xf4213d, 0x5d0cc, 0xf4213d, 0x5d0cc, 0xf4213d, 0x6d0d2, 0xf4213d, 0x5d0d2, 0xf42123, 0x4d3d2, 0xf42123, 0x4d3d2, 0xf52223, 0x4d3d2, 0xf52223, 0x4d3d2, 0xf52223, 0x4d3d2, 0xf62323, 0x4d3d2, 0xf6223d, 0x4d2cc, 0xf6223d, 0x7d3cc, 0xf7223f, 0x6d3cc, 0xf7223d, 0x5d2cc, 0xf7223d, 0x6d3cc, 0xf6213d, 0x7d0cc, 0xf6213d, 0x7d0cc, 0xf6213d, 0x7d0cc, 0xf6213d, 0x7d0cc, 0xf6213d, 0x7d0cc, 0xf6213d, 0x7d0cc, 0xf6213d, 0x7d0cc, 0xf6213d, 0x7d0ce, 0xf6213d, 0x7d0cc, 0xf6213d, 0x7d0cc, 0xf6213d, 0x7d0cc, 0xf6213d, 0x7d0cc, 0xf6213d, 0x7d0cc, 0xf6213d, 0x7d0cc, 0xf6213d, 0x7d0cc, 0xf6213d, 0x7d0cc, 0xf7223d, 0x6d3cc,
				0xf7223d, 0x6d3d2, 0xf7223d, 0x6d3d2, 0xf72223, 0x6d3d2, 0xf72223, 0x6d3d2, 0xf72223, 0x6d3d2, 0xf72223, 0x6d3d2, 0xf72223, 0x6d3d0, 0xf72223, 0x6d3d0, 0xf72221, 0x6d3d2, 0xf72221, 0x6d3d0, 0xf72221, 0x6d3d0, 0xf72221, 0x6d3d0, 0xf72221, 0x6d3d0, 0xf62121, 0x6d3ce, 0xf6213f, 0x6d3ce, 0xf6213f, 0x6d3ce, 0xf6213f, 0x7d0cc, 0xf6213f, 0x7d0cc, 0xf7223d, 0x7d0d2, 0xf7223f, 0x6d3ce, 0xf4233f, 0x5d2cc, 0xf4233d, 0x5d2cc, 0xf4233d, 0x5d2cc, 0xf4233d, 0x5d2d2, 0xf4233d, 0x4d1cc, 0xf4203f, 0x5d1ce, 0xf4203f, 0x5d1ce, 0xf4203f, 0x5d1ce, 0xf4203f, 0x6d1d0, 0xf4203f, 0x5d1cc, 0xf4203f, 0x5d1cc, 0xf4203d, 0x5d1cc, 0xf4203d, 0x5d1cc, 0xf4203d, 0x5d1cc, 0xf5233d, 0x5d1cc, 0xf5233d, 0x5d1cc, 0xf4203d, 0x5d1cc, 0xf4203d, 0x5d1cc, 0xf4203d, 0x4d2cc, 0xf4203d, 0x4d1ce, 0xf4203d, 0x5d1cc,
				0xf4203d, 0x5d1cc, 0xf7213d, 0x5d1cc, 0xf7213d, 0x6d0cc, 0xf7213d, 0x6d0cc, 0xf7213d, 0x6d0cc, 0xf7213d, 0x7d3cc, 0xf7213d, 0x6d0cc, 0xf7213d, 0x6d0ce, 0xf7213d, 0x5d1cc, 0xf72023, 0x6d1cc, 0xf72023, 0x7d2d2, 0xf72321, 0x5d3d0, 0xf72321, 0x6d2d0, 0xf72321, 0x6d2d0, 0xf72321, 0x6d2d0, 0xf72321, 0x6d2d0, 0xf72321, 0x6d2d0, 0xf72321, 0x6d2d0, 0xf72321, 0x6d2d0, 0xf72321, 0x6d2d0, 0xf72321, 0x6d2d0, 0xf72321, 0x6d2d0, 0xf72321, 0x6d2ce, 0xf72321, 0x6d2ce, 0xf72321, 0x7d1d0, 0xf72321, 0x7d2d2, 0xf62024, 0x4d3dc, 0xf52725 };
		System.arraycopy(aFor, 0, key, 90910, aFor.length);
	}

	private static void init305(int[] key) {
		int[] aFor = { 0x3d1d3, 0xf52725, 0x3d1d3, 0xf52725, 0x3d1d3, 0xf52725, 0x3d1d3, 0xf52725, 0x3d1d3, 0xf52725, 0x3d1d3, 0xf52725, 0x3d1d3, 0xf52725, 0x3d1d3, 0xf52725, 0x3d1d3, 0xf52725, 0x3d1d3, 0xf52725, 0x3d1d3, 0xf52725, 0x3d1d3, 0xf52725, 0x3d1d3, 0xf52725, 0x3d1d3, 0xf52725, 0x3d1d3, 0xf52725, 0x3d1d3, 0xf52725, 0x2d1d1, 0xf52725, 0x2d1d1, 0xf42725, 0x7d0d3, 0xf4272b, 0x2d0d0, 0xf5262b, 0x2d3d1, 0xf5262b, 0xcd2d3, 0xfb272b, 0x2d3d3, 0xf5262b, 0xd0d0, 0xf6272c, 0xd1d4, 0xf62722, 0xd1d4, 0xf62722, 0xd1d4, 0xf62722, 0xd1d4, 0xf62722, 0xd1d4, 0xf62722, 0xd1d4, 0xf62722, 0xd1d4, 0xf62722, 0xd1d4, 0xf62722, 0xd1d6, 0xf62720, 0xd2da, 0xf62422, 0xd2d6, 0xf62422, 0xd2d4, 0xf6242c, 0xd2d4, 0xf62422, 0xd2d6, 0xf62524, 0xd3d2, 0xf6252a, 0xd3d2, 0xf62628, 0x1d2d3, 0xf62729, 0x1d2d1,
				0xf72427, 0x5d2d0, 0xf62528, 0x1d2df, 0xfa2527, 0xd1d3, 0xfa2724, 0xcd1dc, 0xf8242b, 0xdd0d2, 0xf5262b, 0xfd2d3, 0xf72025, 0x1d5df, 0xf42327, 0x2d5d1, 0xf42327, 0x1d4d1, 0xf42229, 0x1d4d1, 0xf72227, 0xed7d5, 0xf72124, 0xd7d6, 0xf52022, 0x6d7da, 0xf52022, 0x6d7da, 0xf3202c, 0x5d6d8, 0xf3202c, 0x6d7d8, 0xf0212c, 0x7d7d8, 0xfe222c, 0x4d6d8, 0xf8222a, 0x4d1de, 0xfd242a, 0x8d2d2, 0xfb2528, 0xed3d2, 0xf9262a, 0x5d5dc, 0xf9262a, 0xfd0dc, 0xfc2724, 0x9d1dc, 0xfc2724, 0x9d0d2, 0xfc2724, 0xad1d2, 0xfc2724, 0xad1d2, 0xfc2724, 0x9d0d2, 0xfc2724, 0x9d1dc, 0xfc2724, 0x9d1dc, 0xfc2724, 0xad2de, 0xfc2724, 0x9d1dc, 0xfc2724, 0x9d0d2, 0xfc2724, 0xad1d2, 0xfc2724, 0xad1d2, 0xfc2724, 0xbd2d2, 0xfc2724, 0xbd1d0, 0xfc2724, 0xbd1d0, 0xfd2724, 0x8d0d2, 0xfb2724, 0xed0d2, 0xfb2726, 0xed0d4,
				0xfb2726, 0xdd0d4, 0xfb2620, 0xcd3d6, 0xfb2620, 0xcd3d8, 0xfb2620, 0xcd3d6, 0xfa2520, 0xfd2d4, 0xfa2522, 0xfd3d8, 0xfa2523, 0xfd3d9, 0xfa2521, 0xfd3db, 0xf92621, 0xfd0d9, 0xf8252f, 0xdd6db, 0xfa232d, 0xdd4da, 0xfa232d, 0xcdbd8, 0xff232c, 0xedbdd, 0xfd2228, 0xdd4de, 0xf92c27, 0xdd5d2, 0xfe2224, 0x9dad8, 0xfe2d27, 0xad9db, 0xfb2c2d, 0x9d6c2, 0xfa2f2f, 0xfdbdd, 0xf62f25, 0xfd8d9, 0xf72023, 0xd5d5, 0xf82d23, 0xed5d4, 0xfb2220, 0xcd4d2, 0xfb2c21, 0xad9d7, 0xfb2f2e, 0xed9d6, 0xf82f20, 0xfd9d4, 0xf82c22, 0xddada, 0xf82d2c, 0x1d8de, 0xf82d2c, 0xfd8d6, 0xf92d2d, 0xed8d7, 0xf92d2f, 0xfdbd7, 0xf92d2f, 0xcdad9, 0xf92d2f, 0xcdadb, 0xff222f, 0xcdadb, 0xff222f, 0xcd5d9, 0xf9222f, 0xcd4d7, 0xf9222f, 0xfd4d7, 0xfa222f, 0x8dad7, 0xf8232f, 0xbdbd4, 0xff232f, 0xad5d7, 0xfc2321, 0xbd5d5,
				0xf22023, 0xbd4db, 0xf22023, 0x5d5d5, 0xf32323, 0x5d5d7, 0xf02223, 0x5d4db, 0xf02223, 0x3d5d5, 0xf02d21, 0x5dad5, 0xf32c23, 0x5d9d9, 0xf32d20, 0xad8d6, 0xf02e25, 0x6d9d4, 0xf32e26, 0xd9de, 0xf32e24, 0xadadc, 0xf32f2a, 0x5d9d2, 0xf02f2a, 0x6d9dc, 0xf02f2a, 0x6d9dc, 0xf02f2a, 0x6d9dc, 0xf02f2a, 0x6d9dc, 0xf02f2a, 0x6d9dc, 0xf02f2a, 0x6d9dc, 0xf02f2a, 0x6d9dc, 0xf02f2a, 0x6d9dc, 0xf02f2a, 0x6d9dc, 0xf02f2a, 0x6d9dc, 0xf02f2a, 0x6d9dc, 0xf02f2a, 0x6d9dc, 0xf02f2a, 0x8d7d2, 0xf02f28, 0x8d7d2, 0xff2f28 };
		System.arraycopy(aFor, 0, key, 91210, aFor.length);
	}

	private static void init306(int[] key) {
		int[] aFor = { 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f28, 0x7d7d0, 0xff2f26, 0x4d8d0, 0xfd2026, 0xad9de, 0xff2024, 0x8d8de, 0xff2022, 0x7d7de, 0xfe2024, 0x7d7de, 0xfc2026, 0xd6de, 0xfb2024, 0x3d7d8, 0xf42f24, 0xcd7de, 0xf42f26, 0xcd7de, 0xf42f26, 0xcd7de, 0xf42f26, 0xcd7de, 0xf42f26, 0xcd7de, 0xf42f26, 0xcd7de, 0xf42f26, 0xcd7de, 0xf42f26, 0xcd7de, 0xf42f26, 0xcd7d0, 0xf42f28, 0xcd8d4, 0xf42f28, 0xcd7de, 0xf42f28, 0xcd7d0, 0xf42f2a, 0xcd7d0, 0xf42f28, 0xcd6dc, 0xf42f28, 0xcd7d0, 0xf42f2a, 0xcd7d0, 0xf4202c, 0x3d6d7,
				0xf4202c, 0xdd7d6, 0xf62e2c, 0xfd5d6, 0xf82c2e, 0xdbdb, 0xf92e2f, 0x5d9db, 0xfe2e2d, 0x9d6d7, 0xff212c, 0x7d7d7, 0xfc212d, 0xd9da, 0xfa202d, 0x2d8d7, 0xfa202d, 0x2d8d5, 0xfa202d, 0xdd9d5, 0xfa202d, 0x2d8d5, 0xfa202d, 0x3d8d9, 0xfa202d, 0x2d9d9, 0xfa202d, 0xdd9d5, 0xfa212f, 0xdd9d5, 0xfa212f, 0x2d9d7, 0xfa2121, 0x2d9d9, 0xfa2121, 0x3d6d9, 0xf82121, 0x3d4d4, 0xf82121, 0x4d7d7, 0xff2021, 0xad9db, 0xfe2027, 0xbd9db, 0xf32121, 0xdd4d9, 0xf3212f, 0xbd9d7, 0xfc212d, 0xbd9d7, 0xfc202f, 0xbd9d7, 0xf3212f, 0xbd9d7, 0xf3212f, 0xbd9d7, 0xf3212f, 0xbd9d7, 0xfc202f, 0x4d8d5, 0xf3202f, 0x4d8d5, 0xf3202f, 0xbd7d3, 0xf32f29, 0xbd7d3, 0xfc2e2b, 0x4d6d3, 0xf32f2b, 0xbd7d3, 0xfc2f29, 0x4d7d3, 0xfc2f29, 0x5d8d3, 0xfc2f2b, 0x5d8d3, 0xfc2025, 0x4d8d3, 0xfc2025, 0xbd8df, 0xfc2025, 0xbd9dd,
				0xfc202b, 0x4d9df, 0xfc202b, 0x5d8df, 0xfc2029, 0x5d8df, 0xfc2f27, 0x5d8dd, 0xfd2027, 0x5d8df, 0xf22127, 0x5d8d1, 0xf22129, 0x5d9d5, 0xf22129, 0x5d9d3, 0xf22129, 0x5d9d5, 0xfd2028, 0x4d9d3, 0xfd202a, 0x4d9d3, 0xfd202a, 0xad7dd, 0xfc212b, 0xbd6dc, 0xfd2e2b, 0xed9dd, 0xfd202a, 0xbdad1, 0xf3232a, 0xad8dc, 0xfd212a, 0xbd4d0, 0xfc222c, 0x5dad3, 0xf32028, 0x6ddd8, 0xf32028, 0xbd8d0, 0xf22f2c, 0x8d7d1, 0xf02f2b, 0x6d9dd, 0xf12025, 0xaddd9, 0xf02721, 0xaded5, 0xf32420, 0x6ddda, 0xf32727, 0xbdedc, 0xfc292b, 0x6d1d2, 0xfc292b, 0x4d0d0, 0xfc2a29, 0xddda, 0xfc2a29, 0x4d2d3, 0xfc252f, 0x5d2d3, 0xfc2529, 0x5d2d3, 0xfd2a2b, 0x5d2d3, 0xf22b2b, 0x5d2dd, 0xf0282b, 0x5d2dd, 0xf0282b, 0x5d1d3, 0xf2282b, 0x5d0d1, 0xfd282b, 0x5d0d1, 0xfd282b, 0x8ded3, 0xfb292b, 0x8ded3, 0xfd272b, 0x5ddd2,
				0xfc2425, 0x5d3dd, 0xff252a, 0x3d0d6, 0xf8262a, 0x1d1d2, 0xf92924, 0x1d1d2, 0xf62824, 0xed0de, 0xf92824, 0xfd0d3, 0xf92826, 0xedfd3, 0xf92824, 0x1dfd9, 0xfb2827, 0x7dedf, 0xfc282c, 0x5d0df, 0xf2292b, 0x6d3d1, 0xf32a2d, 0x8dcd7, 0xf32b2f, 0xbd3d5, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f };
		System.arraycopy(aFor, 0, key, 91510, aFor.length);
	}

	private static void init307(int[] key) {
		int[] aFor = { 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xfc2b2f, 0x4d3d7, 0xf32a2f, 0x7d0d7, 0xf2292f, 0x9ded7, 0xf5282f, 0xcdfd7, 0xf42721, 0x3ded7, 0xf42721, 0x1ddd7, 0xf62421, 0x1ddd7, 0xf82521, 0x6d0d7, 0xf82521, 0x1ddd5, 0xf92523, 0x1dddb, 0xf92523, 0x1dddb, 0xf92523, 0x1dddb, 0xf92523, 0x1dddb, 0xf92523, 0x1dddb, 0xf92523, 0x1dddb, 0xf92523, 0x1dddb, 0xf92523, 0x1dddb, 0xf92523, 0x1ddd5, 0xf9252d, 0x1ddd7, 0xf9252d, 0x1dddb, 0xf9252d, 0x1ddd5, 0xf9252f, 0x1ddd5, 0xf9252d, 0x1dcd9, 0xf9252d, 0x1ddd5, 0xf9252f, 0x1ddd5, 0xf6242d, 0xded4,
				0xf42623, 0x2d0d5, 0xf52621, 0x2d0d5, 0xfa2720, 0x1dfd3, 0xfb2521, 0x2dfd3, 0xf52520, 0xdcda, 0xf72426, 0xed3dc, 0xf62429, 0x2d8c6, 0xf72536, 0xfdcc2, 0xf62b3a, 0xfdcc2, 0xf7243a, 0xedccc, 0xf52b3a, 0xcd3cc, 0xf42b3a, 0x3d2c2, 0xf62b3a, 0x1d2c2, 0xf82a34, 0x3ddc2, 0xf82a34, 0xd2cc, 0xf82a36, 0xddca, 0xf82a36, 0xddcb, 0xf82a36, 0x1dccb, 0xf92b37, 0x1d3cd, 0xf92b37, 0xedcc0, 0xf82437, 0xbddc0, 0xfa2739, 0x9dec0, 0xfa2737, 0xcdfc2, 0xfb2837, 0xcdfc0, 0xfb2837, 0xcdfc0, 0xfb2835, 0xcdfc0, 0xf42835, 0xcdfc0, 0xf42835, 0xcdfc0, 0xf42835, 0xcdfc0, 0xfb2835, 0x3dec2, 0xf42935, 0x3dec2, 0xf42935, 0x2d1c2, 0xf52637, 0x2d1c2, 0xf52637, 0xdd0c0, 0xfa2737, 0xcd0ce, 0xf82835, 0xedfce, 0xf82835, 0xfdece, 0xf72835, 0xdfcc, 0xf7283b, 0x1d0cc, 0xf7283b, 0xfdec0, 0xf52b3c, 0xdddc7, 0xf52b3e,
				0xfddc9, 0xf52b3c, 0xfddc9, 0xf52b3c, 0xddcc9, 0xfa2b3c, 0xcd3cb, 0xf82b3c, 0xcd3cb, 0xf82b3c, 0xcd3cb, 0xfa2b3c, 0x2d3c4, 0xfb2b32, 0x2d3c6, 0xfb2b30, 0x3d3c8, 0xf42b32, 0x1d2c8, 0xf52832, 0x1d2ca, 0xf22b3d, 0x4d3c8, 0xf3243f, 0x8d2c5, 0xf42538, 0xed2c7, 0xf72438, 0xcd2c4, 0xf42631, 0xed1c3, 0xf22837, 0xbddc3, 0xf12b34, 0xddcc9, 0xf52433, 0x1dfc0, 0xf02432, 0x5ddc8, 0xff2437, 0x1d8c8, 0xfc2535, 0x7daca, 0xfb2535, 0xdecc, 0xfa2739, 0x1d0cd, 0xf92738, 0xedfc2, 0xf8253f, 0x1dcc4, 0xf9243c, 0xd3c6, 0xf9243c, 0x1dcc6, 0xf82b3e, 0x4dccd, 0xff243c, 0x8ddca, 0xff2432, 0x7d2c5, 0xff2432, 0x7d2c5, 0xff2530, 0x7d2c5, 0xf02530, 0x7d2c5, 0xf12a30, 0x7d2c5, 0xf12a30, 0x7d2c5, 0xf02530, 0x7d2c7, 0xff2430, 0x7d2c7, 0xfd273e, 0x2dfc3, 0xfd2938, 0x7dfcb, 0xff2839, 0x7d1ca, 0xfe2b3f,
				0x7dcc7, 0xff2a3c, 0x4dcc0, 0xff2a3c, 0x6ddc4, 0xfe2532, 0x6ddc4, 0xfe2532, 0x7d2c8, 0xfc2530, 0x1d2c7, 0xff2b31, 0x5d3c8, 0xf22431, 0x4d3cd, 0xfd2b30, 0x1d3c7, 0xfa2534, 0x1d2c0, 0xf92a36, 0xcd3cc, 0xf92a30, 0xddca, 0xfb2a32, 0xdcc8, 0xf92b32, 0x1d3ca, 0xf92b32, 0x1d3ca, 0xf92b32, 0x1d3ca, 0xf92b32, 0x1d3ca, 0xf92b32, 0x1d3ca, 0xf92b32, 0x1d3ca, 0xf92b32, 0x1d3ca, 0xf92b32, 0x1d3ca, 0xf92b32, 0x1d3ca, 0xf92b32, 0x1d3ca, 0xf92b32, 0x1d3ca, 0xf92b32, 0x1d3ca, 0xf92b32, 0x1d3ca, 0xf92b32, 0x1d3ca, 0xf92b32 };
		System.arraycopy(aFor, 0, key, 91810, aFor.length);
	}

	private static void init308(int[] key) {
		int[] aFor = { 0xedcc5, 0xf92b32, 0xedcc5, 0xf92b32, 0xedcc5, 0xf92b32, 0xedcc5, 0xf92b32, 0xedcc5, 0xf92b32, 0xedcc5, 0xf92b32, 0xedcc5, 0xf92b32, 0xedcc5, 0xf92b32, 0xedcc5, 0xf92b32, 0xedcc5, 0xf92b32, 0xedcc5, 0xf92b32, 0xedcc5, 0xf92b32, 0xedcc5, 0xf92b32, 0xedcc5, 0xf92b32, 0xedcc5, 0xf92b32, 0xedcc5, 0xf82432, 0xbddc5, 0xff253c, 0x5d0c5, 0xfe253c, 0x6d3cb, 0xfe2a3f, 0x7d2cb, 0xff2b38, 0x9d3cb, 0xfd2a38, 0x9d3cd, 0xfe2438, 0x3d0cd, 0xfe253e, 0x6d2cc, 0xf12a3e, 0x6ddcb, 0xf12a3c, 0x6ddcb, 0xf12a3c, 0x6ddcb, 0xf12a3c, 0x6ddcb, 0xf12a3c, 0x6ddcb, 0xf12a3c, 0x6ddcb, 0xf12a3c, 0x6ddcb, 0xf12a3c, 0x6ddcb, 0xf12a3c, 0x6ddc9, 0xf12a3e, 0x6ddc7, 0xf12a3e, 0x6ddcb, 0xf12a3e, 0x6ddc9, 0xf12a30, 0x6ddc9, 0xf12a3e, 0x6d2cd, 0xf12a3e, 0x6ddc9, 0xf12a30, 0x6ddc7, 0xf02532, 0x4dcc7,
				0xf22730, 0x8ddca, 0xf12433, 0x9dccb, 0xf0253c, 0xadcc8, 0xf22539, 0x5dfc8, 0xf1263a, 0x2d1cc, 0xf52930, 0xedfcc, 0xf6293b, 0x7d5d5, 0xf52838, 0x2d0ca, 0xfa273f, 0xdd0c6, 0xf5263f, 0xfd0ca, 0xf52639, 0xdd1ca, 0xfa263f, 0xcd1c6, 0xfa263d, 0x2d0c4, 0xf82633, 0x5d2c6, 0xfe2435, 0x6d3c0, 0xf12437, 0x7d3cc, 0xf12437, 0x9d1cb, 0xf02736, 0x8d0cb, 0xf02736, 0x7dfca, 0xf22630, 0x4dec7, 0xf02630, 0x6dec5, 0xf22730, 0x6dec5, 0xf22730, 0x6dec5, 0xf22730, 0x4dfc7, 0xf32830, 0xbdfc5, 0xf32830, 0xbdfc5, 0xf32830, 0xbdfc5, 0xf32830, 0xbdfc5, 0xf32830, 0xbdfc5, 0xf32830, 0xbdec7, 0xfc2930, 0xbdec7, 0xfc2930, 0xad1c5, 0xfd2630, 0x5d1c5, 0xfd2630, 0x7d0c5, 0xff2632, 0x8d1cb, 0xfe2632, 0x8d1c9, 0xfe2632, 0x8d1c9, 0xff2630, 0x8d1c9, 0xfe293e, 0x8d1c9, 0xff2630, 0x5d3cb, 0xfe2730, 0x4d2c9,
				0xfc2430, 0x4d2c7, 0xfc2430, 0x6d2c5, 0xfe2530, 0x6d2c5, 0xf12530, 0x5ddc7, 0xf62430, 0x5ddc7, 0xf12530, 0x6d2c9, 0xfe243e, 0x6d3cb, 0xfc2538, 0x6d2ca, 0xfc2538, 0xbddcb, 0xfd253e, 0xedcc9, 0xfd2530, 0xfddc8, 0xfc2a3e, 0x4d2c6, 0xff253e, 0x4d3c4, 0xf82439, 0x2d3c6, 0xfa2639, 0x6dfc6, 0xfc273d, 0x7d0c9, 0xfa2a3c, 0x4d3ca, 0xf92433, 0x5d1cf, 0xfd2736, 0xfdec4, 0xfe2635, 0x9d1c2, 0xf52331, 0xacddd, 0xf5273b, 0xaccd1, 0xf5273a, 0xacbd5, 0xf53922, 0xac0df, 0xf63724, 0xfcedf, 0xfa3827, 0xcced1, 0xfb3b27, 0x3cddc, 0xfb3b27, 0xccedf, 0xf53b29, 0xecddb, 0xf43a29, 0x3cddc, 0xf43424, 0xcc2d3, 0xf43424, 0xcc3d1, 0xf43424, 0xcc3d1, 0xf43424, 0x3c3d1, 0xf43424, 0x3c3d1, 0xf43424, 0x3c3d1, 0xf43424, 0xcc2d3, 0xf43424, 0xcc2d3, 0xf63424, 0x9c0de, 0xf63329, 0xcc6db, 0xf6312b, 0x1c9d9,
				0xf9302d, 0x1c8d7, 0xf93f2b, 0xec9d7, 0xf93f2c, 0xfc7db, 0xf93f2e, 0xfc7db, 0xf93f2c, 0xec8d5, 0xf63e22, 0xccbd0, 0xf03c24, 0xac4df, 0xfd3224, 0x8c4de, 0xfe3226, 0x7cad0, 0xfc3d24, 0x4cad1, 0xf33d24, 0x7c5dd, 0xf33d24, 0x4cad3, 0xfc3c24, 0x6c9dd, 0xfc3c24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0xbc5dc, 0xf33d24, 0xbc5dc, 0xf33d24 };
		System.arraycopy(aFor, 0, key, 92110, aFor.length);
	}

	private static void init309(int[] key) {
		int[] aFor = { 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0x4cad3, 0xf33d24, 0xbc7d3, 0xf23e2a, 0xbc9d6, 0xf23e2a, 0x5c7d2, 0xf33f21, 0x9c9d2, 0xf23f20, 0xbc7d3, 0xf33e27, 0x6c4d1, 0xf13326, 0xcc7df, 0xf13328, 0x9cadc, 0xfe3328, 0x9c4dd, 0xfe332a, 0x9c4dd, 0xfe332a, 0x9c4dd, 0xfe332a, 0x9c4dd, 0xfe332a, 0x9c4dd, 0xfe332a, 0x9c4dd, 0xfe332a, 0x9c4dd, 0xfe332a, 0x9c4dd, 0xfe332a, 0x9c4df, 0xfe3328, 0x9c4d1, 0xfe3328, 0x9c4df, 0xfe332a, 0x9c4dd, 0xfe3324, 0x9c4d3, 0xfe3324, 0x9cbd7, 0xfe3c22, 0x9cbdb, 0xfe3c22, 0x9cbd7, 0xfe3324, 0x8c6d7,
				0xf33f2d, 0x8c3d2, 0xf0382d, 0x3c3d3, 0xf73f2d, 0xfc5da, 0xf93228, 0x1c9dc, 0xf7312f, 0x2c7d7, 0xf5312c, 0xec5d0, 0xf5312b, 0xdc9dd, 0xf8332e, 0xdc9dd, 0xfa3029, 0x2c8d3, 0xfa3f2f, 0x3c8d7, 0xfb3021, 0xccad2, 0xf43326, 0xcc5df, 0xf63024, 0xbc3d8, 0xf63023, 0xbc4d4, 0xf03121, 0x8c6d2, 0xfe3e21, 0xbc7d9, 0xfe3e21, 0x6c6db, 0xff3121, 0x6c6dd, 0xfe3121, 0x6c9db, 0xf03e22, 0x8c6da, 0xf03e2c, 0xcc9d8, 0xf03e2c, 0xcc9d8, 0xf73e2c, 0xfc6da, 0xf83f22, 0xc7da, 0xf83f22, 0xc7da, 0xf83f22, 0x1c8da, 0xf83f22, 0x1c8da, 0xf83f22, 0x1c8da, 0xf83f22, 0xc7da, 0xf83f22, 0xc7d8, 0xf83f22, 0xc7d8, 0xf73f22, 0xc6da, 0xf83e22, 0x1c9da, 0xfa3e2c, 0x6c8da, 0xf83d2c, 0x4cbda, 0xff3c2c, 0x7c4da, 0xf23e2c, 0x7c4da, 0xf23e2c, 0x5c7da, 0xfd3f22, 0x4c8da, 0xff3f22, 0x1cad4, 0xff3f22, 0x4c8d4, 0xfc3022,
				0x9c9da, 0xfc3022, 0xbc9da, 0xfc3022, 0xbc9da, 0xfc3022, 0xbc9da, 0xfc3022, 0xbc8d8, 0xf23f22, 0xecade, 0xf23c24, 0xecad2, 0xf23d26, 0xecad5, 0xf53226, 0xdcbd7, 0xf53023, 0x3cbd4, 0xf5312f, 0xdc9d5, 0xf43e2f, 0x9c9d4, 0xf53f2c, 0xfcbda, 0xf63c22, 0xcc7dd, 0xf93d23, 0xbc6dc, 0xff3823, 0x9c2de, 0xf13a24, 0xac3de, 0xf33424, 0xbc7de, 0xf13f23, 0x6c4d9, 0xfc3f2f, 0x3cbde, 0xfe1108, 0x2a9a7, 0xf13535, 0x1a0a5, 0xe83331, 0x59680, 0xf25452, 0xdb7a3, 0xf55954, 0xda1ae, 0xfe5658, 0x4afaf, 0xfe5756, 0x4afab, 0xfd5956, 0x4aeac, 0xfd5954, 0x6aea2, 0xfd5954, 0x6aeac, 0xff5954, 0x6aeac, 0xfe565a, 0x6aeac, 0xfe565a, 0x6aea2, 0xfe565a, 0x7a1a2, 0xfe565a, 0x7a1a2, 0xfe565a, 0x6aea2, 0xfe565a, 0x6aea2, 0xfe565a, 0x6aea2, 0xff595a, 0x6acac, 0xfc5a59, 0x5a2af, 0xfd5a59, 0xaa3af, 0xff5a57,
				0x9a0ac, 0xfc5a51, 0x4a7ae, 0xf25951, 0x4a6af, 0xf25953, 0x4a6af, 0xfc5853, 0x5a5ac, 0xfc5852, 0x4a2a7, 0xf35b53, 0x5a2ad, 0xfc5b52, 0x5a3af, 0xfc5457, 0x4a3a4, 0xfc5a50, 0xaa2a7, 0xfc5a50, 0xaa2a7, 0xfc5a50, 0xaa2a7, 0xfd5552, 0x7a3a5, 0xfd5552, 0x5a3a5, 0xf25452, 0x5a3a5, 0xf25452, 0x5a3a5, 0xf25452, 0x5a3a5, 0xf25452, 0x5a3a5, 0xf25452, 0x5a3a5, 0xf25452, 0x5a3a5, 0xf25452, 0x5a3a5, 0xf25452, 0x5a3a5, 0xf25452, 0x5a3a5, 0xf25452, 0x5a3a5, 0xf25452, 0x5a3a5, 0xf25452, 0xaacaa, 0xf25452, 0xaacaa, 0xf25452 };
		System.arraycopy(aFor, 0, key, 92410, aFor.length);
	}

	private static void init310(int[] key) {
		int[] aFor = { 0xaacaa, 0xf25452, 0xaacaa, 0xf25452, 0xaacaa, 0xf25452, 0xaacaa, 0xf25452, 0xaacaa, 0xf25452, 0xaacaa, 0xf25452, 0xaacaa, 0xf25452, 0xaacaa, 0xf25452, 0xaacaa, 0xf25452, 0xaacaa, 0xf25452, 0xaacaa, 0xf25452, 0xaacaa, 0xf25452, 0xaacaa, 0xf25452, 0xaacaa, 0xf25452, 0xaacaa, 0xf25452, 0xaacaa, 0xf25452, 0xbada5, 0xf2545c, 0xba3a0, 0xf2545c, 0x4a3a5, 0xf25b52, 0xbaea6, 0xf15b54, 0xaaca0, 0xf25456, 0x7adae, 0xf25454, 0xba3a8, 0xf25452, 0x5adaa, 0xf2545c, 0xaaca4, 0xf2545c, 0xaaca4, 0xf2545c, 0xaaca4, 0xf2545c, 0xaaca4, 0xf2545c, 0xaaca4, 0xf2545c, 0xaaca4, 0xf2545c, 0xaaca4, 0xf2545c, 0xaaca4, 0xf2545c, 0xaacaa, 0xf25452, 0xaaca8, 0xf25452, 0xaacaa, 0xf2545c, 0xaaca6, 0xf2545c, 0xaaca4, 0xf25452, 0xaaca4, 0xf25452, 0xaaca8, 0xf25452, 0xaada6, 0xf15557, 0xea3a6,
				0xf15654, 0xea3a3, 0xf1565a, 0xea0a1, 0xf1575a, 0xeafa6, 0xf1555b, 0xcaca3, 0xf7565b, 0xafa3, 0xf6595b, 0xfada0, 0xf5585b, 0x2afa2, 0xf75854, 0xa1a0, 0xf75856, 0xfa0ac, 0xf75856, 0xfa0ac, 0xf8595a, 0xda3ae, 0xf8595a, 0x1aea2, 0xfd5b5e, 0x3afa3, 0xfd5b5e, 0x1ada4, 0xf85a5c, 0xa3a8, 0xf5595b, 0xa2ac, 0xf6595b, 0xea1a3, 0xf7565b, 0xfa0a2, 0xf8575b, 0xfa0a2, 0xf9575b, 0xfa0a2, 0xf85755, 0x3a1a6, 0xfe5455, 0x3a1a6, 0xf85453, 0xfa3aa, 0xf95453, 0xea3a4, 0xf95453, 0xea3a4, 0xf95453, 0xea3a4, 0xf95453, 0xea3a4, 0xf95453, 0xea3a4, 0xf95453, 0xea3a4, 0xf85b53, 0xfacaa, 0xf95b53, 0xfacaa, 0xf95b53, 0xda3aa, 0xfb5453, 0xca3aa, 0xf4555d, 0xea3aa, 0xf4555f, 0xea3aa, 0xf6545f, 0x1a3aa, 0xf75b59, 0x3a2ac, 0xf75b59, 0x1a3ac, 0xf6545b, 0xea2a2, 0xf45455, 0x9a1a6, 0xf25754, 0xaa0a7,
				0xfc5852, 0x8a0a5, 0xfb595c, 0xfa1a5, 0xf9565c, 0xfa1a5, 0xf9565c, 0xfa1a5, 0xf8565c, 0xfa1a5, 0xf7575c, 0xca3a7, 0xf7575c, 0xda1ab, 0xf5565e, 0xfa0ab, 0xf6585f, 0x1a2ae, 0xf9595c, 0xfa2a9, 0xf75850, 0xda0ad, 0xf75556, 0xba0aa, 0xf75652, 0xda3a0, 0xf35a53, 0xca4a6, 0xf35f54, 0xea7a1, 0xf15e5c, 0xea8a2, 0xf15c5c, 0xea9a0, 0xf05d5c, 0xaaea7, 0xfd585b, 0x9a0a2, 0xf25a57, 0xda9b9, 0xf16f05, 0x1e67d, 0xdebc34, 0x3cf373, 0xe6bd22, 0x3bd4a2, 0xd44b18, 0x2b93f6, 0xd77d0d, 0x2b81f1, 0xde7b05, 0x2783f1, 0xde7607, 0x2780fa, 0xde7607, 0x2781ff, 0xdf7909, 0x2880ff, 0xdf770a, 0x2781f3, 0xd0740b, 0x2783fc, 0xd17b09, 0x2783fc, 0xd07409, 0x2783fe, 0xd07409, 0x2783fe, 0xd07409, 0x2882f0, 0xdf7509, 0x2882fe, 0xdf7509, 0x2882fe, 0xde7a09, 0x2882fe, 0xde7a0b, 0x2680fc, 0xd1790a, 0x268efd,
				0xde7605, 0x248ff0, 0xd97505, 0x268cf7, 0xd97403, 0x2681f5, 0xd9740d, 0x2681fb, 0xd9740e, 0x2681fb, 0xd9740e, 0x2680f8, 0xd9750e, 0x2689f9, 0xd97500, 0x228fff, 0xda7700, 0x2380fc, 0xd87704, 0x218ff0, 0xd67604, 0x238ffc, 0xd67606, 0x218ffe, 0xd67608, 0x218ffe, 0xd97708, 0x2280f0, 0xd97708, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808 };
		System.arraycopy(aFor, 0, key, 92710, aFor.length);
	}

	private static void init311(int[] key) {
		int[] aFor = { 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2080f0, 0xd87808, 0x2f81f0, 0xd77908, 0x2d8fff, 0xd67a06, 0x2d8cfb, 0xd47a06, 0x2c82fc, 0xdb7b04, 0x2383fc, 0xdb7b06, 0x2e83fb, 0xdd7b07, 0x2c81fe, 0xdd7b07, 0x2882fb, 0xdf7a07, 0x2782fd, 0xdf7a05, 0x2782fd, 0xdf7a05, 0x2782fd, 0xdf7a05, 0x2782fd, 0xdf7a05, 0x2782fd, 0xdf7a05, 0x2782fd, 0xdf7a05, 0x2782fd, 0xdf7a05, 0x2782fd, 0xdf7a05, 0x2782f3, 0xdf7a0b, 0x2782f1, 0xdf7a0b, 0x2782f3, 0xdf7a05, 0x2782ff, 0xdf7a05, 0x2782fd, 0xdf7a0b, 0x2782fd, 0xdf7a05, 0x278df9,
				0xdf7503, 0x278cf0, 0xd9741c, 0x269bfd, 0xd9472c, 0x268dea, 0xd9492f, 0x268de5, 0xd94437, 0x2692d3, 0xd97427, 0x2599d3, 0xde6c26, 0x2497d0, 0xdc6d25, 0x2495df, 0xdd6c24, 0x2895de, 0xdb6226, 0x239adc, 0xda6d26, 0x219ade, 0xd86d26, 0x2f94de, 0xdb6e26, 0x2995de, 0xdb6e26, 0x2c97de, 0xd56026, 0x2c97dc, 0xd56020, 0x2298dc, 0xd56124, 0x2298d0, 0xd56223, 0x2098d5, 0xd76123, 0x2096d4, 0xd7612d, 0x2096da, 0xd76f22, 0x2f95db, 0xd96f20, 0x2b94da, 0xd96f20, 0x2e96d8, 0xd76e2e, 0x2c99d6, 0xd56e2c, 0x2d99d3, 0xd56e2c, 0x2296d6, 0xd56f2e, 0x2296d6, 0xd56f2e, 0x2296d6, 0xd56f2e, 0x2296d6, 0xd56f2e, 0x2296d6, 0xd56f2e, 0x2297d4, 0xd76e2e, 0x2096d4, 0xd56f2e, 0x2096d4, 0xd56f2e, 0x2196d2, 0xd56f2e, 0x2196d2, 0xd56c28, 0x2196d2, 0xd56c28, 0x2095d2, 0xd56c2a, 0x2295d2, 0xd56c24, 0x2d94dc,
				0xd56c24, 0x2d94de, 0xd56c24, 0x2294d8, 0xda6c22, 0x2295d6, 0xda6c25, 0x2294d3, 0xd56d2b, 0x2295d7, 0xd56d2a, 0x2d9ad5, 0xd56d2a, 0x2d9ad7, 0xd56d2a, 0x2d9ad6, 0xd5622c, 0x2d9ad6, 0xd5622c, 0x2d95d0, 0xda6d2c, 0x2e97d6, 0xda6d2c, 0x2f94d0, 0xda6d2a, 0x2f97d9, 0xdb6d29, 0x2d95da, 0xdb6d2d, 0x239ad1, 0xd66e2b, 0x2099d7, 0xd9602e, 0x2396c5, 0xdc6227, 0x238ff5, 0xde5231, 0x2186f9, 0xde4f32, 0x218ae1, 0xde403f, 0x2196d9, 0xde7f2f, 0x218ad0, 0xd47e2a, 0x2284d1, 0xdc7f27, 0x238ecd, 0xda396a, 0x31533e, 0xe47928, 0x3d6026, 0xf0743c, 0x224f66, 0xcecdce, 0x310125, 0xc9ebde, 0x351724, 0xc3ebd6, 0x391222, 0xc0e7d6, 0x38112d, 0xcfe7d6, 0x371e22, 0xc1e5d6, 0x321823, 0xc1e4d4, 0x351e2e, 0xc0e7d4, 0x351e2c, 0xc0e4da, 0x351e2c, 0xc2e7da, 0x351e22, 0xc2e6d8, 0x351e22, 0xc2e6d8, 0x3a1e22,
				0xcde6d8, 0x3a1e22, 0xcde6d8, 0x3a1f20, 0xcfe6d8, 0x3a1c2e, 0xcee6d8, 0x3a1d2c, 0xc8e5d8, 0x3b1222, 0xc2e5da, 0x3d1134, 0xc2fae9, 0x3d262e, 0xc2e992, 0x3d2e52, 0xc2ea94, 0x3d285d, 0xc2eb94, 0x3d2f52, 0xc2ea96, 0x3d2f50, 0xc2e899, 0x383848, 0xc4d9ae, 0x392851, 0xc2ddae, 0x3b2954, 0xc1dfa1, 0x382755, 0xcfdea1, 0x3b245b, 0xcfdda7, 0x37255f, 0xcfdda9, 0x37255f, 0xcfdda9, 0x362a51, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9 };
		System.arraycopy(aFor, 0, key, 93010, aFor.length);
	}

	private static void init312(int[] key) {
		int[] aFor = { 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xcfdda9, 0x372551, 0xc0dca9, 0x362b50, 0xc0d3a7, 0x392b53, 0xc4d3a6, 0x3a2b5c, 0xc5d3a1, 0x3a2a5f, 0xc5d3a1, 0x3a265c, 0xc7d0a2, 0x3f275d, 0xcbdea0, 0x3b2258, 0xcadea0, 0x3f265d, 0xc7d1a0, 0x3f295a, 0xc7d1a2, 0x3f295a, 0xc7d1a2, 0x3f295a, 0xc7d1a2, 0x3f295a, 0xc7d1a2, 0x3f295a, 0xc7d1a2, 0x3f295a, 0xc7d1a2, 0x3f295a, 0xc7d1a2, 0x3f295a, 0xc7d1a2, 0x3f2954, 0xc7d1a2, 0x3f2958, 0xc7d1a2, 0x3f295a, 0xc7d1a2, 0x3f2958, 0xc7d1a2, 0x3f2954, 0xc7d1a2, 0x3f2954, 0xc7d1ac, 0x3f2650,
				0xc7deaa, 0x3f275b, 0xc0dfbe, 0x3c037b, 0xd3ade1, 0x36d793, 0xd7b4f7, 0x8d69f, 0xd6a4e0, 0x303c4e, 0xc2829b, 0x3b5e75, 0xc1b383, 0x3e4977, 0xc1b486, 0x3e4e72, 0xc1b58a, 0x3e4c76, 0xc1ba8b, 0x3c4977, 0xc7bd8b, 0x3d4b7c, 0xc5bc89, 0x33447c, 0xc7bc8b, 0x344572, 0xc7bc8b, 0x304573, 0xc7bc8b, 0x304573, 0xc7bc8b, 0x324571, 0xc7bc8b, 0x30457d, 0xc7bc8b, 0x31447e, 0xc7bc8b, 0x304b7c, 0xcbbc84, 0x364471, 0xc9bc87, 0x364471, 0xc9bc86, 0x36457e, 0xc9bc86, 0x36447e, 0xc9b388, 0x36447e, 0xc9b187, 0x364578, 0xc9b187, 0x36477e, 0xc9b088, 0x364670, 0xc9b186, 0x36477e, 0xc9b186, 0x36467e, 0xc9b186, 0x36467e, 0xc9b186, 0x36467e, 0xc9b186, 0x36467f, 0xc9b187, 0x36467e, 0xc9b186, 0x36497e, 0xc9b186, 0x36497e, 0xc9b187, 0x36497e, 0xc9b187, 0x36497e, 0xc9b186, 0x36467e, 0xc9b086, 0x36457e,
				0xc9b086, 0x36457f, 0xc9b386, 0x36457d, 0xc9b284, 0x364a70, 0xc9b282, 0x364574, 0xc9b38d, 0x364676, 0xc9b28b, 0x364174, 0xc9b58b, 0x364176, 0xc9b48d, 0x364274, 0xc9b48c, 0x364274, 0xc9b582, 0x36437a, 0xc9b483, 0x364d7f, 0xc9b480, 0x36437f, 0xc8bb80, 0x334178, 0xcbba8c, 0x3c4378, 0xcabb8d, 0x324276, 0xc0b78c, 0x344e73, 0xccb48a, 0x354668, 0xcfa3a0, 0x396c06, 0xcbdd8d, 0x2c5bf8, 0xf13195, 0x2c56ea, 0xcd2f70, 0x2eb2c7, 0xd56322, 0x2a9bdd, 0xd26c21, 0x2496da, 0xd96c2f, 0x269cca, 0xd82b6f, 0x2e413e, 0xcb6a2c, 0x217c24, 0xfd7137, 0x224760, 0xd5c7ca, 0x2a093b, 0xd2e0c7, 0x2e1c3d, 0xd8e0cd, 0x221b3e, 0xd5edcc, 0x221b37, 0xdbeccf, 0x241520, 0xdbefce, 0x24143f, 0xdbe8cc, 0x241135, 0xdbe8cc, 0x24103a, 0xdbe8cc, 0x241f3a, 0xdbe8cc, 0x241e34, 0xdbe8cd, 0x241e34, 0xdbe8cd, 0x241e34,
				0xdbe8cd, 0x241e34, 0xdbe8cc, 0x241f34, 0xdbe8c2, 0x241034, 0xdbe8c0, 0x241034, 0xdbe8c2, 0x241038, 0xdbe5cc, 0x240217, 0xdbcaa5, 0x2b5524, 0xcd2b41, 0x2c4d1f, 0xcb2f7a, 0x234f10, 0xcb2f7c, 0x2e4d1b, 0xca297e, 0x2e4d1b, 0xf42a77, 0x16a2e5, 0xe41121, 0x1bf1d4, 0xe4032b, 0x1ff7d0, 0xe50e27, 0x1ef4d1, 0xe90324, 0x1cfad8, 0xe90324, 0x11fbdc, 0xe8032a, 0x10fade, 0xe8032a, 0x11f4d2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a };
		System.arraycopy(aFor, 0, key, 93310, aFor.length);
	}

	private static void init313(int[] key) {
		int[] aFor = { 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe8032a, 0x10fbd2, 0xe7022a, 0x14f6dc, 0xe00e2b, 0x17f4da, 0xef0e37, 0x17f8de, 0xe80a34, 0x17eedd, 0xed3b3b, 0x10e1d5, 0xef072c, 0x12ffd3, 0xe1082b, 0x17f2d2, 0xe00b2a, 0x17fed2, 0xee0928, 0x17fed0, 0xef0628, 0x18f1df, 0xe00927, 0x18f1df, 0xe00927, 0x18f1df, 0xef0628, 0x17fed0, 0xef0628, 0x17fed0, 0xef0628, 0x17fed0, 0xef0628, 0x17fed0, 0xef0628, 0x17fede, 0xef0628, 0x17fed2, 0xef0628, 0x17fed0, 0xef0628, 0x17fed2, 0xef0628, 0x17fede, 0xef0628, 0x17fede, 0xef0624, 0x17f1d9,
				0xe00620, 0x17ffcc, 0xe80811, 0x17c6bc, 0xf145da, 0x3e74f2, 0xf37ae1, 0x3e74f7, 0xf251c1, 0x2932be, 0xc5ad7f, 0x326693, 0xcd8c6e, 0x327883, 0xcd975f, 0x32738e, 0xcdaa41, 0x326694, 0xcdb17d, 0x315488, 0xcca177, 0x365880, 0xc3ae70, 0x3a5485, 0xc0ae7f, 0x385b83, 0xc1a37d, 0x365b87, 0xc3a27f, 0x36588b, 0xc3a27f, 0x345b89, 0xcca371, 0x345b8b, 0xcca371, 0x35588b, 0xcca17c, 0x3a548f, 0xc5a17b, 0x3a4d93, 0xc5ad48, 0x3a6385, 0xc5af4e, 0x3a6485, 0xc5a84e, 0x3a6087, 0xc5a940, 0x3a6289, 0xc5ab43, 0x3a6e8e, 0xc5a841, 0x3a6f8c, 0xc5a746, 0x3a608d, 0xc5a847, 0x3a6f8c, 0xc5a847, 0x3a6f8c, 0xc5a847, 0x3a6e8d, 0xc5a946, 0x3a618a, 0xc5a946, 0x3a6e8b, 0xc5a647, 0x3a6f88, 0xc5a841, 0x3a6187, 0xc5a642, 0x3a6085, 0xc5a64c, 0x3a6086, 0xc5a74b, 0x3a6d85, 0xc5a549, 0x3a6c84, 0xc5a44f, 0x3a6384,
				0xc5a54f, 0x3a6284, 0xc5aa49, 0x3a6384, 0xc5a84f, 0x3a6385, 0xc5a94f, 0x3a6184, 0xc5a749, 0x3a6286, 0xc5a749, 0x3a6186, 0xc5a64b, 0x3a6e81, 0xc5a74b, 0x3a6d83, 0xc5a445, 0x3a6d82, 0xc5a544, 0x3a6283, 0xc5aa48, 0x3a639a, 0xc5b17f, 0x3a648b, 0xc58774, 0x3e698c, 0xc19276, 0x366583, 0xc19276, 0x366a8c, 0xc09071, 0x346b8e, 0xcf9077, 0x337fab, 0xc9a718, 0x331c9e, 0xd49dcf, 0x8d9e0, 0xcfc1ff, 0x2dcbe, 0xcaeede, 0x1b834d, 0xed3d9a, 0x12ca65, 0xe5339d, 0x13cb6a, 0xec309f, 0x13c278, 0xec79d0, 0x150b85, 0xf23992, 0x1b2398, 0xc6318d, 0x2709d8, 0xdd8a73, 0x224582, 0xdbaf7f, 0x215587, 0xd7ab76, 0x225087, 0xd5ac71, 0x22548b, 0xdda37e, 0x2248a2, 0xdd9468, 0x2241ad, 0xdd8c69, 0x2244ae, 0xdd8c64, 0x2245ae, 0xdd8f65, 0x2247a9, 0xdd8062, 0x2247a9, 0xdd8f67, 0x2248a9, 0xdd8d65, 0x224ba8,
				0xdd8d65, 0x224aa8, 0xdd8d63, 0x2245a8, 0xdd8c62, 0x2245a8, 0xdd8c62, 0x224bab, 0xdd8165, 0x2247ac, 0xdd8068, 0x222ef4, 0xdfbe87, 0x3ce9b3, 0xebc6a7, 0x3ad6a0, 0xe2ddb0, 0x3ad7a7, 0xedddbe, 0x39d0aa, 0xebdeba, 0x38d3b4, 0xfec2ac, 0x2ffbfe, 0xc78264, 0x384480, 0xc5a17b, 0x385985, 0xcea170, 0x355b86, 0xccae72, 0x34598e, 0xccae73, 0x35598b, 0xcca17d, 0x345889, 0xcca17d, 0x355685, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d };
		System.arraycopy(aFor, 0, key, 93610, aFor.length);
	}

	private static void init314(int[] key) {
		int[] aFor = { 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x345985, 0xcca17d, 0x375a86, 0xcca670, 0x30599c, 0xcfa478, 0x3053a2, 0xcf8c6e, 0x393cd6, 0xe3b449, 0x321fd, 0xfcea18, 0x31de7, 0xfbeb1e, 0xc1ee6, 0xf4e811, 0xd1de7, 0xf7eb10, 0xf1de7, 0xf7e51f, 0xf1de7, 0xf7e51f, 0xf1de7, 0xf7e51f, 0xf1de7, 0xf7e51f, 0xf1de7, 0xf7e51f, 0xf1de7, 0xf7e51f, 0xf1de7, 0xf7e51f, 0xf1de7, 0xf7e51f, 0xf1de9, 0xf7e51f, 0xf1de7, 0xf7e51d, 0xf1de5, 0xf7e51f, 0xf12e3, 0xf7ea19, 0xf12ef, 0xf7eb1b, 0xf13e3, 0xf7eb19, 0xf1ce4, 0xf8eb13, 0xf12f8,
				0xf0e422, 0xf2f84, 0xfc52db, 0x1f7af8, 0xfc7cf5, 0x1979fa, 0xf867d4, 0x1107a8, 0xe59a17, 0x1957f8, 0xe6b001, 0x1955d8, 0xec9372, 0x336f8, 0xe4bd86, 0x39ca03, 0xd459ae, 0x289072, 0xd7618e, 0x289975, 0xd7638d, 0x289475, 0xd46783, 0x2d957a, 0xd66387, 0x2e9b7d, 0xd96285, 0x2c9871, 0xdb6282, 0x229a76, 0xdb6d8e, 0x229a72, 0xda6d8e, 0x2f9a78, 0xd9628d, 0x229579, 0xdd6088, 0x22bc5d, 0xd70ef4, 0x31718e, 0xee19ea, 0x327d8f, 0xe91eeb, 0x357e89, 0xe91ee9, 0x347d89, 0xea1feb, 0xa408f, 0xe81fe8, 0x9418c, 0xe91ee8, 0x9418c, 0xe91ee8, 0x9418c, 0xe91ee8, 0x9418c, 0xe91ee8, 0x36438d, 0xd61ce9, 0x36428f, 0xd61deb, 0x36428f, 0xd61deb, 0x37438f, 0xe81ded, 0x3742b3, 0xe81ded, 0xa7d8f, 0xee1ce9, 0xc438e, 0xed1ce9, 0xd428f, 0xd01cea, 0xe7c8e, 0xee23ed, 0xf7d8e, 0xee23ed, 0xe7c89, 0xd01ced,
				0xc7d8b, 0xd61fef, 0xc7d8b, 0xd01cef, 0xe7c8b, 0xee23ef, 0xd7e8b, 0xec20ef, 0xc7f8b, 0xd21fe8, 0xf7e8b, 0xd31cea, 0xe7d8b, 0xd01cd4, 0xe7d8b, 0xd122d5, 0xf7c8a, 0xd323ef, 0x334497, 0xd73d00, 0x37b0bb, 0xdb0365, 0x28d488, 0xd72175, 0x2ad88f, 0xd32176, 0x24d681, 0xd32e7b, 0x26d485, 0xdc2f73, 0x23dfaa, 0xdc0705, 0x23be7a, 0xd6c332, 0x39ff14, 0xe4f00f, 0x5e64a, 0xdeca2d, 0x1a3b6, 0xff1e6b, 0xe894, 0xf61061, 0x1e892, 0xfe1261, 0x1e384, 0xfe582c, 0x62a79, 0xe0186e, 0x80364, 0xd51171, 0x342822, 0xceac85, 0x31636a, 0xc98897, 0x33726f, 0xc58c9e, 0x31776d, 0xc68b9b, 0x317263, 0xc99986, 0x3d5e34, 0xd1fcb3, 0x367fdf, 0xd413bf, 0x344de1, 0xd01384, 0x304ee7, 0xd01183, 0x304fe5, 0xef1280, 0xf4fe5, 0xee1183, 0xf4fe5, 0xef1280, 0xe4ce6, 0xef1280, 0xf4ce6, 0xef1382, 0xf4ce6, 0xd12c85,
				0x3173e1, 0xd12c85, 0x3077e7, 0xd32a83, 0xd77e1, 0xe816be, 0xb41f4, 0xef08c1, 0x3522d2, 0xed37d1, 0x3130d2, 0xd333da, 0x3132d5, 0xd130da, 0xc34d7, 0xd031dd, 0xc37db, 0xde3ec8, 0xa1c8c, 0xd248f0, 0x38eb35, 0xcd33db, 0x33ca24, 0xc733d1, 0x3bcb24, 0xc13dd1, 0x3acb2d, 0xc33cd1, 0x3acb29, 0xc333df, 0x3acb29, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df };
		System.arraycopy(aFor, 0, key, 93910, aFor.length);
	}

	private static void init315(int[] key) {
		int[] aFor = { 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc233df, 0x3acb27, 0xc333d1, 0x38c521, 0xc330c4, 0x3cc91d, 0xc327de, 0x3cc66c, 0xc370fb, 0x360885, 0xe54ce7, 0x321e9a, 0xcd805e, 0x3262aa, 0xcc8d5c, 0x3779a7, 0xca815b, 0x3677a3, 0xca8f54, 0x3279a3, 0xca815b, 0x3279a3, 0xca815b, 0x3279a3, 0xc58e54, 0x3d76ac, 0xc48f55, 0x3c77ad, 0xc48f55, 0x3c77ad, 0xc48f55, 0x3c77ad, 0xc48f55, 0x3c77ad, 0xc48f55, 0x3c77a3, 0xc48f55, 0x3c77ad, 0xc48f55, 0x3c77af, 0xc48f55, 0x3c78a9, 0xc48053, 0x3c79a7, 0xc48053, 0x3c78ab, 0xc48f57, 0x3c78a8,
				0xcb8f5f, 0x3c75b6, 0xc3806c, 0x3c49ca, 0xc835a9, 0x2b128f, 0xc9149f, 0x2d138f, 0xcd32bf, 0x2851c4, 0xdbf178, 0x223a9d, 0xddda75, 0x2208c2, 0xd095b4, 0x39fbf9, 0xe2b2c5, 0x289f87, 0xf6ccf5, 0xe575b, 0xf18584, 0xe5c61, 0xf1bd8d, 0xe5e62, 0xf1b094, 0xe4668, 0xf3bf92, 0xb4965, 0xfcbe92, 0x54664, 0xfcbe90, 0x74966, 0xfcbe9e, 0x54962, 0xfdbe9e, 0xe466a, 0xfabf99, 0x6466d, 0xf9b382, 0x66241, 0xe9edc0, 0x30a8f9, 0xe188e1, 0x3190f7, 0xe184e2, 0x3094f7, 0xe184e4, 0x2e96f4, 0xe199fa, 0x3195ea, 0xe598f8, 0x3096ed, 0xe598f8, 0x3096ed, 0xe598f8, 0x3096ed, 0xe598f8, 0x3096ed, 0xe598f8, 0x3194ee, 0xe49afb, 0x3096ed, 0xe49bf9, 0x3195ec, 0xe598f8, 0x3193eb, 0xe49dfe, 0x318de9, 0xe49df0, 0x3792e9, 0xe59cf1, 0x3792e9, 0xe482f1, 0x338de8, 0xe49dfd, 0x3293ec, 0xe79cfc, 0x3293ec, 0xe19cfc,
				0x3293ed, 0xe19df8, 0x3392ef, 0xe19df8, 0x3392ef, 0xe19dfa, 0x3292e9, 0xe19dfa, 0x3292eb, 0xe19dfa, 0x338deb, 0xe19dfa, 0x3092ea, 0xe19dfa, 0x3392e9, 0xe19dfc, 0x3392e9, 0xe183ff, 0x3292e6, 0xfe83fa, 0x2b9ccc, 0xfdaa90, 0x28fd04, 0xcd6dcd, 0x3ca52b, 0xc356d4, 0x3cae2b, 0xc656d2, 0x3ca226, 0xc654d3, 0x3ead2e, 0xc557db, 0x3aa60c, 0xc57fa2, 0x3ac3df, 0xcd4397, 0x237ebc, 0xfd6f9e, 0x1b78d1, 0xfb54a2, 0x1e3d07, 0xe181e3, 0x1e761c, 0xe88ee9, 0x127919, 0xed80e9, 0x12710a, 0xedcbac, 0x15b9f9, 0xf38bee, 0x1a92e2, 0xc480f7, 0x25b9a7, 0xdf3d03, 0x20eced, 0xd70010, 0x2efbe8, 0xd8051b, 0x2dffef, 0xd40417, 0x2fffee, 0xd41a34, 0x3ab7a5, 0xd8c0f6, 0x285d1, 0xdaa1c2, 0x9adcd, 0xd3a3d7, 0x5afcf, 0xd1a3d8, 0x2a8ce, 0xd6a4d9, 0x3a8cf, 0xd7a4d9, 0x3a8cf, 0xd7a4d9, 0x3a8cf, 0xd7a4d9, 0x3a8cf,
				0xd7a5db, 0x3a8cf, 0xd1a6dd, 0x5abc9, 0xd1a6dd, 0x9aaca, 0xdea1dc, 0xaaac9, 0xd9a4dc, 0xdb5c5, 0xdba2db, 0x1bfff, 0xdc9dd6, 0x2befc, 0xdf9ad6, 0x2befc, 0xde9ad0, 0x2befe, 0xd89bd2, 0x2bdfb, 0xd49bc8, 0xdae9f, 0xd9fde5, 0x6655d, 0xf4b0b4, 0xb4a4b, 0xfdb0b2, 0x14845, 0xf8bdb1, 0x34b4b, 0xfabcb7, 0x34b4f, 0xfab3b9, 0x34b4f, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9 };
		System.arraycopy(aFor, 0, key, 94210, aFor.length);
	}

	private static void init316(int[] key) {
		int[] aFor = { 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfbb3b9, 0x34b41, 0xfab3b5, 0x74559, 0xf8b684, 0x75943, 0xf396d8, 0x23daf, 0xeb45f9, 0x50fb0, 0xe527f2, 0x3a15af, 0xca7021, 0x31dbe5, 0xcd0d06, 0x32f9ff, 0xcc0304, 0x37f6f3, 0xcb0e0a, 0x33f8fd, 0xcb0005, 0x33f8fd, 0xcb0005, 0x33f8fd, 0xcb0005, 0x33f8fd, 0xca0104, 0x32f9fc, 0xca0104, 0x32f9fc, 0xca0104, 0x32f9fc, 0xca0104, 0x32f9fc, 0xca0104, 0x32f9f2, 0xca0104, 0x32f9fc, 0xca0104, 0x32f9fe, 0xca0104, 0x32f6f8, 0xca0e02, 0x32f7f6, 0xca0e02, 0x32f6fa, 0xca0106, 0x32f6f9, 0xc5010e, 0x32fbe9,
				0xcd0d31, 0x32c59b, 0xc7b9fc, 0x2391d5, 0xc797c4, 0x2391d5, 0xc2b3e4, 0x25d699, 0xd07523, 0x2cbcfb, 0xd36f35, 0x2ddfb9, 0xc8adfc, 0x2ae8da, 0xcbc3fa, 0x1cd8d6, 0xfae085, 0x1dbeeb, 0xea397c, 0x1ab7d9, 0xf32e6b, 0x1c9aa1, 0xe3414c, 0x1cb6b1, 0xe74344, 0x1fb5b3, 0xe84244, 0x11b5bc, 0xe84d4a, 0x13babc, 0xea4d44, 0x13bab8, 0xeb4242, 0x1db8bb, 0xe8424d, 0x13b5b9, 0xec4054, 0x139094, 0xe41cec, 0xc5dc3, 0xea47cc, 0x254c3, 0xe85fcd, 0x158df, 0xeb50cc, 0x858c0, 0xe85dc9, 0xb59c0, 0xef5ac9, 0xb59c0, 0xe85dc9, 0xc5ec2, 0xef5dc9, 0xb5ec2, 0xe85dc9, 0xc5ec2, 0xef5dc9, 0xc5fc3, 0xe85cc8, 0xb5ec2, 0xe85cca, 0xd5ec3, 0xe95fcb, 0xd5ec3, 0xea5ac8, 0xe59c3, 0xe95ed2, 0xe57c6, 0xe75cd0, 0x952c9, 0xe75ed1, 0xe58de, 0xe95ad7, 0xe58d2, 0xe95bd6, 0xd5fd2, 0xee5bd7, 0xd5fd0, 0xee5cdb, 0xa5ed6,
				0xef5fd8, 0xa5dd5, 0xef5fde, 0xb5cd7, 0xe858d0, 0x95dd5, 0xea59d0, 0xe5dd5, 0xea5ed2, 0x95cda, 0xea5ed0, 0x95ddd, 0xeb5fd0, 0xb5cdc, 0xee54cd, 0x75dde, 0xe75bca, 0xf4de5, 0xe762bc, 0x63028, 0xe9bce5, 0x1e7409, 0xe180f6, 0x1e7809, 0xe68efe, 0x1c7b0c, 0xe68dff, 0x107704, 0xeb8bf0, 0x157928, 0xeba586, 0x141bf8, 0xe29ab3, 0xea59d, 0xd2b6bb, 0x37aee8, 0xd5809f, 0x3dea36, 0xc256d1, 0x3da02e, 0xca57db, 0x33a134, 0xcc5bda, 0x33aa39, 0xcc119f, 0x3a62ca, 0xdf51d3, 0x3648de, 0xeb5ac8, 0xa6398, 0xf2e63a, 0xd37d4, 0xfadb29, 0x21d3, 0xf7dd26, 0xf25d0, 0xf4df28, 0xb24d2, 0xf4c208, 0x16980, 0xef1ac7, 0x524df, 0xe83bd7, 0xd38d0, 0xe63bc1, 0xd3fd5, 0xeb3dda, 0xf3dd7, 0xeb3dda, 0xe3fd7, 0xea3dda, 0xe3ed1, 0xea3add, 0x838d7, 0xea3bdf, 0x839d5, 0xea3add, 0x839d5, 0xeb3bdd, 0x839d5, 0xeb3bdd,
				0x13fd3, 0xe63ed8, 0x13fd3, 0xdf3fde, 0x135ff, 0xde28c7, 0x336899, 0xc435ec, 0x384793, 0xcf31e8, 0x3a4690, 0xcf31ea, 0x384497, 0xcf31ea, 0x3b4790, 0xcf3210, 0x394582, 0xd5c620, 0x3b72ec, 0xc1ad1c, 0x3f54e3, 0xc6ae1f, 0x3d54e7, 0xc5a014, 0x3c57ee, 0xc4af14, 0x3c57ee, 0xc4af16, 0x3d57e0, 0xc4af16, 0x3c57ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16 };
		System.arraycopy(aFor, 0, key, 94510, aFor.length);
	}

	private static void init317(int[] key) {
		int[] aFor = { 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcbae16, 0x3356ee, 0xcaae1a, 0x325af3, 0xccb426, 0x335595, 0xdcfbed, 0x38fab, 0xd1b18b, 0xe9696, 0xea8db3, 0xe9089, 0xd7bedb, 0x3ccc48, 0xc3729a, 0x3c8069, 0xc37d91, 0x3f8b6b, 0xc67f91, 0x3c876a, 0xc47f92, 0x3c876a, 0xc47f92, 0x3c876a, 0xc47f92, 0x3c876a, 0xc47f92, 0x3c876a, 0xc47f92, 0x3c876a, 0xc47f92, 0x3c876a, 0xc47f92, 0x3c876a, 0xc47f92, 0x3c8764, 0xc47f92, 0x3c876a, 0xc47f92, 0x3c8768, 0xc47f92, 0x3c886e, 0xc47094, 0x3c8960, 0xc47094, 0x3c886e, 0xc47f93, 0x3c886c, 0xcb7f9b,
				0x3c857e, 0xc373a6, 0x3cbb09, 0xc9c762, 0x2cef44, 0xcae848, 0x2def5a, 0xc8ce6f, 0x23aaed, 0xda0b5a, 0x21cb98, 0xdf0a36, 0x2f9a50, 0xf4c979, 0x2fe16d, 0xcdfa7b, 0x2fe364, 0xccfc4d, 0x2fd579, 0xcbe233, 0x2ea357, 0xf5ed2f, 0x1c6c89, 0xe3ad57, 0x1c5fa8, 0xe2aa50, 0x1452a5, 0xe0a85d, 0x1551a5, 0xe2a85d, 0x1551a5, 0xe2a85d, 0x1a50a7, 0xe2a85d, 0x1550a1, 0xe0a659, 0x1850ae, 0xe7a75f, 0x18729d, 0xefe1e4, 0x4a8d6, 0xe98dc3, 0x794d6, 0xea84c1, 0x489de, 0xec84ff, 0x3088e6, 0xe783f0, 0x3189e5, 0xe48ef4, 0x3287fa, 0xe48df7, 0x3384fa, 0xe58ef7, 0x3287fa, 0xe48df7, 0x3384fa, 0xe58ef7, 0x3287fa, 0xea8df4, 0x3287fa, 0xe58ef1, 0x3c86fa, 0xe68ff6, 0x3d86fa, 0xe18cf7, 0x181e4, 0xe493fd, 0xc81e1, 0xe695c1, 0x982e5, 0xe796c7, 0x9bdc, 0xe490ca, 0x3996c7, 0xe591ca, 0x3f99c1, 0xe691cc, 0x3f99c2,
				0xe591d1, 0x3e96c4, 0xe390d2, 0x3d94c6, 0xe091d4, 0x3999da, 0xee90d7, 0x3999da, 0xe091d7, 0x3d97d9, 0xe392c9, 0x3f96da, 0xe290cc, 0x3897d4, 0xe09fc2, 0x3e93db, 0xd982c0, 0x3490da, 0xd29ec3, 0x3881f0, 0xd0b9ae, 0x33e137, 0xc371e7, 0x35b90b, 0xca4df4, 0x37b70b, 0xc04ef3, 0x38b900, 0xce40f2, 0x3cbd0b, 0xcb42ff, 0x31b727, 0xcd6a88, 0x32d408, 0xc75644, 0x2f176b, 0xf7024d, 0x16181c, 0xf63769, 0x1c5fcd, 0xe3e42e, 0x1c10d1, 0xeae625, 0x1d10d4, 0xe2eb24, 0x1d19c1, 0xe0a569, 0x15d630, 0xf6e52c, 0x1efc3d, 0xc5ee25, 0x25d477, 0xd252d3, 0x2d803f, 0xda6cc2, 0x209638, 0xda6dcd, 0x219a3b, 0xdf62c3, 0x20953b, 0xdf73e3, 0x26dd65, 0xd5a720, 0x27ef37, 0xd5c63c, 0x30c92d, 0xdad90d, 0x38d017, 0xe7d800, 0x3cdf15, 0xe7d806, 0x3dd017, 0xe5d906, 0x32d309, 0xe5d807, 0x32d309, 0xe5d805, 0x32d30b,
				0xe5d805, 0x32d30b, 0xead905, 0x32d00a, 0xe8d904, 0x32d00a, 0xebd606, 0x34df17, 0xecd60c, 0x36cd31, 0xd6f657, 0x2283f5, 0xdd2132, 0x22e2e7, 0xdc282b, 0x21e4e3, 0xdf2f2b, 0x20e6e5, 0xdf2f2a, 0x21e5e4, 0xde2229, 0x21e1e6, 0xdb2128, 0x22f4cb, 0xdf183d, 0x21e1c2, 0xd81b3c, 0x24e1c7, 0xdd1433, 0x24e3cb, 0xdc1b33, 0x29e2c9, 0xde1a33, 0x26e2cb, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d };
		System.arraycopy(aFor, 0, key, 94810, aFor.length);
	}

	private static void init318(int[] key) {
		int[] aFor = { 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xdf1a3d, 0x27e2c5, 0xde1a31, 0x26ecdb, 0xd91e03, 0x26fdb5, 0xd34b34, 0x34357b, 0xed7c5d, 0xf5147, 0xe84a5d, 0xd5a7f, 0xd95554, 0x391636, 0xcf9f96, 0x365f50, 0xce818d, 0x31737a, 0xce8885, 0x357179, 0xcc8880, 0x347078, 0xc3878f, 0x3b7f77, 0xc3878f, 0x3b7f77, 0xcc8880, 0x347078, 0xcc8880, 0x347078, 0xcc8880, 0x347078, 0xcc8880, 0x347078, 0xcc8880, 0x347076, 0xcc8880, 0x347078, 0xcc8880, 0x34707a, 0xcc8880, 0x347f7c, 0xcc8786, 0x347e72, 0xcc8786, 0x347f7c, 0xcc8881, 0x347f7e,
				0xc38889, 0x34736d, 0xcb84bb, 0x344c14, 0xc0307f, 0x26195c, 0xc11f56, 0x261a46, 0xc03b73, 0x2d5ff1, 0xd1ff48, 0x2e3c80, 0xd1fb36, 0x25654d, 0xc30b06, 0x263435, 0xcd1f1d, 0x243d02, 0xc42f10, 0x18261f, 0xc12f06, 0x1e3c30, 0xc91c7e, 0x2a5301, 0xdcdeb4, 0x231251, 0xdff6a0, 0x26015a, 0xd2fba2, 0x27025a, 0xd2f8ac, 0x2a005a, 0xd2f8a2, 0x2a005a, 0xd2f8a0, 0x250e5b, 0xd0faa2, 0x270d5b, 0xd8f5aa, 0x27236a, 0xd3b61d, 0x38fa32, 0xd4dd26, 0x39c13e, 0xd4d61d, 0x24cc29, 0xcbe868, 0x23d92f, 0xc4e661, 0x28a134, 0xcfe67b, 0x27a137, 0xcfe97d, 0x27a137, 0xcfe97d, 0x27ae31, 0xcfe67b, 0x27a137, 0xcfe97d, 0x27a137, 0xcee77e, 0x25af35, 0xcee87d, 0x27ad3b, 0xcaea72, 0x27ad35, 0xcdec0b, 0x24d425, 0xc8e50d, 0x24c12b, 0xc8db0e, 0x26cc27, 0xcfd90c, 0x27f838, 0xd7cd7e, 0x278f32, 0xcccb7e, 0x258d35,
				0xcfca79, 0x258c34, 0xceca79, 0x258f36, 0xc9cb67, 0x388828, 0xd7cc65, 0x3d8b29, 0xd5c363, 0x3d8b29, 0xd6cd63, 0x39892e, 0xc8cb7f, 0x388f2b, 0xc8ca7c, 0x238f2f, 0xcacd63, 0x27f723, 0xccdd0e, 0x22c413, 0xc8d00f, 0x2ecf3d, 0xc8f55d, 0x2ca9c3, 0xdd3b17, 0x2bf2fd, 0xd40602, 0x29fcfd, 0xd10604, 0x26fef7, 0xd10703, 0x22fbfa, 0xda050e, 0x23f1d9, 0xde2d68, 0x2193ea, 0xd412a4, 0x3c5395, 0xe446b3, 0x45afd, 0xda6a92, 0x360233, 0xc9b8d2, 0x364c2d, 0xc3bbdb, 0x354328, 0xcab8d9, 0x354a3f, 0xc8f695, 0x3e84cc, 0xdbb6d0, 0x33afc1, 0xe8bdd9, 0x36878a, 0xc1022c, 0x3ed0c3, 0xc93c3e, 0x32c5c4, 0xc83e32, 0x33c9c4, 0xcd313c, 0x33c8ca, 0xcc2e1c, 0x379f98, 0xc4e5db, 0x34acce, 0xdf86c5, 0x19cdb, 0xe9bbe7, 0x582ab, 0xefbde4, 0x1feb7, 0xedbae6, 0x7fea8, 0xeebbe4, 0x9fdaf, 0xefb5e6, 0x8fcae, 0xefb5e6,
				0x8fcae, 0xefb5e6, 0x7fdac, 0xefb5e6, 0x5f2aa, 0xefb5e6, 0x4fdad, 0xedbbe4, 0x6fda8, 0xe3b9fc, 0x7ea88, 0xee9a13, 0x173cc3, 0xe8ed31, 0x171fce, 0xe8e839, 0x1712cc, 0xe8e839, 0x171fc3, 0xe8e938, 0x1711c1, 0xe8e636, 0x1708c7, 0xe8ea21, 0x110ccb, 0xecfe33, 0x1704cc, 0xeffd32, 0x160ac8, 0xefff3c, 0x1607ca, 0xeeff32, 0x1b06ce, 0xefff32, 0x1806ca, 0xe1fe3c, 0x1809c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c };
		System.arraycopy(aFor, 0, key, 95110, aFor.length);
	}

	private static void init319(int[] key) {
		int[] aFor = { 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe3c, 0x1906c4, 0xe1fe32, 0x1709dd, 0xedfc3f, 0x1011f3, 0xeac45b, 0x197025, 0xf4f773, 0x1da742, 0xfc8455, 0x1c8941, 0xc3865e, 0x28b41a, 0xc7ec71, 0x3468e5, 0xc8de25, 0x373acd, 0xc9c235, 0x323bcf, 0xcbc236, 0x323bcf, 0xcac337, 0x323bcf, 0xcac337, 0x323bcf, 0xcac337, 0x323bcf, 0xcac337, 0x323bcf, 0xcac337, 0x323bcf, 0xcac337, 0x323bcf, 0xcac337, 0x323bc1, 0xcac337, 0x323bc1, 0xcac339, 0x323bc3, 0xcac339, 0x3234c5, 0xcacc3f, 0x3235cb, 0xcacc3f, 0x3234c5, 0xcac338, 0x3235c7,
				0xc5c230, 0x3239d4, 0xcdc101, 0x320aab, 0xc08ac3, 0x23a1e0, 0xc6a7e9, 0x2ea2e7, 0xc983d5, 0x27e254, 0xdc7ce9, 0x21b435, 0xd866e2, 0x2da355, 0xd90ac3, 0x2870b1, 0xc623fe, 0x200dd8, 0xc118d6, 0x2516d8, 0xc01fcd, 0x2716ef, 0xc205d5, 0x26298b, 0xc76709, 0x31f3ca, 0xce3e25, 0x31ccda, 0xc93521, 0x3ccfd5, 0xcb3524, 0x30c3d6, 0xcc3520, 0x37c3da, 0xce3420, 0x37c3d8, 0xcf352f, 0x36c2d7, 0xc93a27, 0x36ed9a, 0xc37bec, 0x2e37c3, 0xc31fd6, 0x2a04cb, 0xc21ee5, 0x2e38af, 0xc305cb, 0x295eb2, 0xdb2220, 0x2db3bf, 0xc22722, 0x32b2b8, 0xc22722, 0x32b2b8, 0xc22722, 0x32b2be, 0xc22724, 0x32b2b8, 0xc22722, 0x33b1b9, 0xdc222f, 0x2eb4b6, 0xdd202e, 0x2db2bd, 0xd8272a, 0x2bb4bf, 0xc037c7, 0x304395, 0xc21fac, 0x332580, 0xc304a7, 0x29148f, 0xc904bf, 0x2c3ce9, 0xd5516e, 0x2cdff0, 0xc04a6d, 0x29ddf6,
				0xc3456c, 0x2cd3f4, 0xdc456c, 0x2cd3fa, 0xdd4662, 0x2ed2f8, 0xdf4760, 0x33dff6, 0xd94660, 0x35def6, 0xda4960, 0x29ddfa, 0xda4e64, 0x37dff8, 0xd94b65, 0x37def2, 0xc04f7f, 0x3c360e, 0xd07e31, 0x366327, 0xdc763e, 0x3a570b, 0xd26c63, 0x3431c0, 0xc6a215, 0x3168fc, 0xce9e03, 0x3365fd, 0xc49c05, 0x3e6af6, 0xc59d02, 0x3d64f9, 0xc69e0c, 0x3b6fd5, 0xc4b464, 0x3b0fe6, 0xc370b6, 0x2d4e99, 0xf15dbc, 0x1140f5, 0xcf719c, 0x231807, 0xdca2da, 0x235725, 0xd7afdc, 0x23572b, 0xdcacde, 0x235d38, 0xdce690, 0x2597c7, 0xc2a6de, 0x2bbfd2, 0xf6adc4, 0x2b9791, 0xde1238, 0x21c0d7, 0xdb2b29, 0x20d2d3, 0xda2e24, 0x2dd7d2, 0xd72d2a, 0x2ad1d2, 0xd53604, 0x2b8781, 0xdefec4, 0x30b9de, 0xef9ed1, 0x34b4eb, 0xdae59b, 0x3c891e, 0xdaf68a, 0x2b7a14, 0xd8ebb4, 0x377928, 0xd9eab2, 0x347e2a, 0xd9eabc, 0x327f28,
				0xd9eabc, 0x347e2a, 0xd9eabc, 0x377924, 0xd9eabc, 0x367826, 0xd8ebbe, 0x327f29, 0xdbeabc, 0x307f28, 0xd9e8b3, 0x33481c, 0xddfbdb, 0x24343e, 0xdad2c8, 0x252432, 0xdbdec5, 0x272532, 0xdbdec5, 0x252738, 0xd8dfc4, 0x23253c, 0xd8dfca, 0x27263c, 0xdcd7d3, 0x25383d, 0xd9cec5, 0x2e343a, 0xdacdc7, 0x2c3b3f, 0xd6cdca, 0x2a3b3c, 0xd1ccc4, 0x243538, 0xd6cfc4, 0x23363c, 0xdbceca, 0x273832, 0xdbceca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca };
		System.arraycopy(aFor, 0, key, 95410, aFor.length);
	}

	private static void init320(int[] key) {
		int[] aFor = { 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1ca, 0x223932, 0xdac1c4, 0x233b30, 0xd9c1de, 0x26393b, 0xd9cfef, 0x262354, 0xd9e8c3, 0x236e9e, 0xc02bb4, 0x1c36a7, 0xf820bd, 0x1a399e, 0xc820b9, 0x1f1eeb, 0xee9f7a, 0x1157b5, 0xeeba45, 0x114cbf, 0xebb643, 0x114cb9, 0xe9b44f, 0x1e43b8, 0xe9b44f, 0x1e43b8, 0xe6bb4e, 0x1e43b8, 0xe6bb4e, 0x1e43b6, 0xe6bb4e, 0x1e43b8, 0xe6bb4e, 0x1e43b6, 0xe6bb4e, 0x1e43b8, 0xe6bb4e, 0x1e43b8, 0xe6bb4e, 0x1e43b6, 0xe6bb4c, 0x1e4cb0, 0xe6b448, 0x1e4dbc, 0xe6b44f, 0x1e4cb7, 0xe6bb4b, 0x1e4cb6,
				0xe9bb43, 0x1e40a7, 0xe1b872, 0x1e73da, 0xecf3bc, 0xfd89f, 0xeade96, 0xcd99a, 0xe9f9ab, 0x19992a, 0xe305eb, 0x1ccb00, 0xe32ff3, 0x1cda03, 0xe32ae0, 0x1ced23, 0xe361aa, 0x22b95, 0xd9008b, 0x71f9e, 0xe00482, 0x20d9e, 0xe702ad, 0x3017e4, 0xf035b8, 0x275a1a, 0xdfe4fe, 0x201601, 0xd9effa, 0x211609, 0xd6eef9, 0x2c190b, 0xd7ecfe, 0x2e1b06, 0xd6e3fc, 0x2f1404, 0xd7e2f3, 0x2e1a05, 0xd1ede8, 0x2e3b57, 0xdbad21, 0x37e00c, 0xdec61e, 0x3ade07, 0xd9c236, 0x32f06a, 0xc4a8e3, 0x3b2351, 0xc4e18c, 0x3b077f, 0xc4ea8c, 0x3b067c, 0xc4ea8c, 0x3b067c, 0xc4ed8e, 0x3b017c, 0xc4ed8e, 0x3b017c, 0xc4ed8e, 0x3b007f, 0xc4e894, 0x3b0364, 0xc4ef8b, 0x3b0760, 0xc4ea8f, 0x3b0d68, 0xc4ddd7, 0x3b76aa, 0xc4f5fb, 0x3dbbcf, 0xcd9de9, 0x2897c1, 0xf199f8, 0x1dc881, 0xe26e47, 0x1d8ab4, 0xe26747, 0x1d88b6,
				0xe26659, 0x1d88b7, 0xe2665a, 0x1d8bb1, 0xe2665a, 0x1d8ab7, 0xe2675a, 0x1d88b7, 0xe2785c, 0x1d97b1, 0xe2795f, 0x1d95af, 0xe27e5d, 0x1d90ae, 0xe2605c, 0x1d8fb5, 0xe26a6c, 0x1dd0c5, 0xebb793, 0xe9386, 0xe78692, 0x49ba6, 0xe1a3c0, 0x2f960, 0xf26bb1, 0x5a158, 0xfa57a7, 0x7ac59, 0xff54af, 0x5a25c, 0xfe55aa, 0x7ac51, 0xfa56a4, 0x5a67d, 0xfa7ccd, 0x5c04e, 0xfcbf1e, 0xd8231, 0xd29012, 0x318b5b, 0xefb833, 0x5d4a8, 0xfa6974, 0x59f8b, 0xf1677c, 0x59e89, 0xfa657c, 0x59499, 0xfa2e3f, 0x35c6a, 0xe46e7d, 0xf7771, 0xd26567, 0x95e32, 0xfcdb9b, 0x30b6b, 0xf9e095, 0x21969, 0xfae49e, 0xf1e6a, 0xf6e59c, 0xa186b, 0xf5fdb9, 0xa4d3c, 0xfe3a7d, 0x137f65, 0xcb5d68, 0x176925, 0xe104b2, 0x1eac79, 0xe16999, 0x1eb468, 0xe1539c, 0x1eb46e, 0xe15c9f, 0x1eb66f, 0xe15d81, 0x1eb16d, 0xe15c86, 0x1eb06a,
				0xe15b84, 0x1eb06a, 0xe15a84, 0x1eb074, 0xe15b84, 0x1eb675, 0xe1589a, 0x1eb571, 0xe15b9d, 0x1eb56f, 0xe15a98, 0x1ea865, 0xe15d9b, 0x19ab6c, 0xee539f, 0x19a46a, 0xee539f, 0x19a466, 0xee539f, 0x18ab68, 0xee539d, 0x1da66d, 0xe55f99, 0x1ea86d, 0xe65f98, 0x15a963, 0xe6519f, 0x10a767, 0xeb509f, 0x17a669, 0xee5191, 0x1aa86d, 0xe85291, 0x1fab69, 0xe6539f, 0x1aa567, 0xe6539f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f };
		System.arraycopy(aFor, 0, key, 95710, aFor.length);
	}

	private static void init321(int[] key) {
		int[] aFor = { 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1fa467, 0xe75c9f, 0x1eab67, 0xe75c9f, 0x1eab67, 0xe75c9f, 0x1eab67, 0xe75c9f, 0x1eab67, 0xe65391, 0x1eaa65, 0xe45190, 0x1faa63, 0xe15189, 0x1eab5e, 0xe14ee6, 0x1af763, 0xec7c3e, 0x1f2402, 0xf40b21, 0x29072e, 0xcb1531, 0x293209, 0xc0626b, 0x2fe2fb, 0xda5345, 0x2f88a1, 0xd4715f, 0x2f8ba7, 0xd0745c, 0x2783ab, 0xdf7b53, 0x288ca6, 0xd27750, 0x2a8ea4, 0xd27750, 0x258ea6, 0xdd7451, 0x2a8da5, 0xd27451, 0x2b8ca7, 0xd27b5f, 0x2b82a8, 0xd2785d, 0x2b82a8, 0xd27b5f, 0x2b82a6, 0xd27b5d, 0x2b82a6, 0xd27b5f, 0x2a82ab, 0xd27b58, 0x2a83ae, 0xd27b56, 0x2a83ae,
				0xd27a5d, 0x2a81bb, 0xd57763, 0x2abdc8, 0xd9c1ac, 0x3ceb89, 0xdfed82, 0x3fe58f, 0xdec7be, 0x32983f, 0xc803fc, 0x37cc12, 0xca24e5, 0x35d816, 0xca22fd, 0x35fd20, 0xca4698, 0x3bd21d, 0xd7a742, 0x23cf0f, 0xcd8531, 0x23aa70, 0xfcb634, 0x209b50, 0xfdcfda, 0x12501c, 0xe983f7, 0x16750a, 0xef8dfc, 0x16780e, 0xee8ffd, 0x16750a, 0xee8ff3, 0x16750a, 0xe18cf2, 0x187b08, 0xef8ef0, 0x177608, 0xe88cf9, 0x175946, 0xe2cf3e, 0x98111, 0xe0a701, 0x5bf12, 0xe1a43f, 0xa935b, 0xe6cacb, 0x13450a, 0xec89e4, 0x137f1b, 0xec85e1, 0x137f1c, 0xec85e1, 0x137f1c, 0xec85e1, 0x137f1e, 0xec85e1, 0x137e1e, 0xec84e3, 0x137e18, 0xec87e3, 0x137d1e, 0xec87e3, 0x137d1e, 0xec84e4, 0x137316, 0xecabd7, 0x131855, 0xef981f, 0x1bc931, 0xf1e013, 0x14eb3e, 0xcce67a, 0x28b2f3, 0xd70324, 0x28ecd8, 0xd71622, 0x28ead8,
				0xd71622, 0x28ebd9, 0xd71622, 0x28edda, 0xd71722, 0x28edd8, 0xd71622, 0x28ead8, 0xd71722, 0x28ebd9, 0xd71024, 0x28ead9, 0xd71024, 0x28ebd9, 0xd71022, 0x28ecd4, 0xd71f31, 0x28dd9d, 0xd8adca, 0x388bdb, 0xd193ca, 0x358cf9, 0xd3b59f, 0x35ee00, 0xc67dd2, 0x31b739, 0xce42c6, 0x31b838, 0xc940ce, 0x31b73b, 0xc640cc, 0x3eb937, 0xc343c4, 0x3eb21d, 0xc368ad, 0x3cd42f, 0xc45461, 0x36684e, 0xd6796b, 0x326327, 0xec514b, 0xa3fd7, 0xf5810c, 0xa77f1, 0xfd8e05, 0xb77f7, 0xf48b07, 0xb79e3, 0xf4c347, 0xcb013, 0xea8204, 0x39b09, 0xd88911, 0x2b542, 0xf632e5, 0x9e315, 0xf009ea, 0xbf014, 0xf20bec, 0x7f11f, 0xfe0dea, 0xf61c, 0xff10c8, 0x2a04a, 0xf6d974, 0x69f67, 0xdcbe6b, 0x78a39, 0xf5e79b, 0xe4043, 0xf58cb3, 0xa604c, 0xf599b3, 0xa614c, 0xf597b1, 0xa624a, 0xf594b3, 0xa6e4b, 0xf595b3, 0xa6f49,
				0xf596b3, 0xa6f49, 0xf596b3, 0xa6e4f, 0xf596b3, 0xa6e48, 0xf596b1, 0xa6f46, 0xf596b1, 0xa6e4a, 0xf599b5, 0xb6e4a, 0xf696b5, 0xf614f, 0xf699b9, 0xf614d, 0xf699b9, 0xf6e41, 0xf699bb, 0xe6141, 0xf999bb, 0xc6043, 0xf999bb, 0x16143, 0xf999bb, 0xe6147, 0xf999bb, 0x6e41, 0xfb99b9, 0x26e41, 0xf597b9, 0x16d43, 0xf494b9, 0xd6341, 0xf195b9, 0x86241, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9 };
		System.arraycopy(aFor, 0, key, 96010, aFor.length);
	}

	private static void init322(int[] key) {
		int[] aFor = { 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x96d41, 0xf195b9, 0x86241, 0xf195b9, 0x86241, 0xf195b9, 0x86241, 0xf195b9, 0x86241, 0xf09ab7, 0x76d42, 0xf094b4, 0x86c4c, 0xf196b8, 0xf6b50, 0xf09c83, 0xe7c2d, 0xf1bfa3, 0xd34c0, 0xd374e7, 0x565ee, 0xec71f6, 0x56cde, 0xe040e2, 0x3a01b7, 0xd47c26, 0x2cc0ee, 0xd32f1a, 0x2cd6ec, 0xd32118, 0x2ad6e0, 0xd02c1c, 0x25d9e9, 0xd02c1a, 0x26daee, 0xd32d18, 0x20dae0, 0xd32d16, 0x26dae4, 0xd02d16, 0x27d8e0, 0xd02d16, 0x27dae3, 0xd12216, 0x26d5e3, 0xd02d14, 0x27daed, 0xd12d16, 0x26dbed, 0xd02c14, 0x26dae0, 0xd32d12, 0x24dae5, 0xd22212, 0x25d5e7, 0xd32c15, 0x24d6fc, 0xdb2327,
				0x24e48c, 0xd79dee, 0x30baca, 0xd6bdc6, 0x36b4c8, 0xe890fa, 0x1cf7b, 0xf653be, 0x89e53, 0xf276ab, 0x88a5c, 0xf176ad, 0xf9843, 0xf0469e, 0xb8f20, 0xf23abe, 0xf9ac1, 0xf9e7a9, 0x12b4c9, 0xc3859e, 0x1bcfe2, 0xef4655, 0x1096b8, 0xed714c, 0x1187ba, 0xe97049, 0x1386bc, 0xea7e4a, 0x1f87b0, 0xec7e47, 0x1886b0, 0xef7f48, 0x1688b4, 0xe17d4e, 0x1985b8, 0xe67c56, 0x19a8e9, 0xee3d93, 0x270a3, 0xe856b3, 0x4ea7, 0xe4558a, 0xc63ec, 0xeb3478, 0x6babe, 0xf9774d, 0x68eb2, 0xf8714f, 0x78eb0, 0xf8704f, 0x78eb0, 0xf8704f, 0x68fb0, 0xf8704f, 0x68fb0, 0xf9704f, 0x68eb2, 0xf9704f, 0x68fb0, 0xf9704f, 0x68fb0, 0xf9714b, 0x68bb9, 0xf95078, 0x6e3f8, 0xfe9cb0, 0x11ce99, 0xf4e787, 0x10edaa, 0xc6e1ec, 0x27b261, 0xd803ba, 0x27f144, 0xd90fb8, 0x26f045, 0xd80fba, 0x23f045, 0xd80fba, 0x27f147, 0xd80fbc,
				0x27f141, 0xd80ebc, 0x27f141, 0xd90ebc, 0x26f143, 0xd90fbc, 0x26f243, 0xd90cbc, 0x26f343, 0xd90cbe, 0x26f346, 0xd905af, 0x26c602, 0xcbb755, 0x149144, 0xfd8955, 0x199666, 0xffaf00, 0x18f59e, 0xea674f, 0x1dada4, 0xe2585b, 0x1da2a5, 0xe45a53, 0x12aca5, 0xe45452, 0x1cada9, 0xe7565a, 0x1aa783, 0xe77d33, 0x18c0b1, 0xe040ff, 0x117dd0, 0xf16cf5, 0x1576b9, 0xca47d7, 0x2e2977, 0xd197aa, 0x2e6255, 0xd69ba1, 0x216353, 0xde98a3, 0x216942, 0xded3e6, 0x26a0b2, 0xc393a5, 0x2b89a8, 0xf19ab0, 0x2ba6e3, 0xdf2145, 0x20f0aa, 0xdb1955, 0x26e1aa, 0xdf1a52, 0x28e3a6, 0xd21853, 0x2de2a5, 0xd20471, 0x29b5f3, 0xdbcfcd, 0x2b89de, 0xf1a8d2, 0x2a9b86, 0xdbf621, 0x2c52fd, 0xd89b09, 0x2276f7, 0xd98a08, 0x2072f5, 0xd98509, 0x2273f5, 0xdb840f, 0x2e7ef9, 0xdc850f, 0x287ff5, 0xdc850f, 0x297cf5, 0xde840f,
				0x2b7df3, 0xde840f, 0x2b7df5, 0xde840f, 0x297df7, 0xde840f, 0x267cf5, 0xde8b09, 0x267ef5, 0xde880e, 0x277ff4, 0xde8702, 0x277ff6, 0xde8702, 0x277ff4, 0xde880c, 0x277ff0, 0xdf880c, 0x2a71f6, 0xdf880c, 0x2770f6, 0xdf880c, 0x2870f6, 0xdf880c, 0x267ff6, 0xdd890c, 0x2571f4, 0xd2880c, 0x2672f4, 0xd38b0c, 0x287cf4, 0xd48a0c, 0x2d7df4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c };
		System.arraycopy(aFor, 0, key, 96310, aFor.length);
	}

	private static void init323(int[] key) {
		int[] aFor = { 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda840c, 0x227cf4, 0xda8402, 0x2c7cf7, 0xdb8503, 0x2072f5, 0xdb8501, 0x207eee, 0xde8008, 0x217bdd, 0xde941f, 0x215688, 0xc720d8, 0x1e17c6, 0xfd36d3, 0x1823c6, 0xf932d8, 0x2f27f2, 0xc660ac, 0x31e73f, 0xce58fd, 0x318524, 0xce69cc, 0x32913b, 0xc96dc5, 0x35963a, 0xcc6ec7, 0x3b963a, 0xc36fc4, 0x35963b, 0xcd6fc5, 0x34963c, 0xcd6fc5, 0x37973e, 0xce6ec5, 0x36973e, 0xc06dc5, 0x38943e, 0xce6ec3, 0x36973d, 0xc06ec2, 0x38973c, 0xce6dc1, 0x39953b, 0xcf6fc2, 0x37963f, 0xc16cc2, 0x399539,
				0xcf6ece, 0x379220, 0xc864c0, 0x37af6f, 0xcfd40a, 0x25f32b, 0xc2f622, 0x21f133, 0xfed504, 0x18b182, 0xed1249, 0x13c3bb, 0xef2944, 0x12d5bb, 0xe82940, 0x14debb, 0xeb2641, 0x14d2ac, 0xeb3a74, 0x14ecc1, 0xe85a5c, 0x18d1cd, 0xcdb84e, 0x1338ea, 0xec870b, 0x1373f4, 0xe9870c, 0x117ffa, 0xe6860e, 0x1e7ef8, 0xe7870f, 0x107ff5, 0xe68702, 0x1170f5, 0xe68702, 0x1f70f8, 0xe88500, 0x107cf4, 0xef8518, 0x1051a6, 0xe9c2dc, 0x689ee, 0xebadfa, 0xbbe2, 0xe5a1d2, 0xc95b5, 0xe9c026, 0x44be0, 0xfb8113, 0x476ec, 0xfb8911, 0x476ec, 0xfb8911, 0x476ec, 0xfb8911, 0x776ee, 0xfb8911, 0x776ee, 0xf98913, 0x676e8, 0xf98912, 0x676ef, 0xf88912, 0x676ef, 0xf98917, 0x672f8, 0xf9ae38, 0x61f46, 0xf06200, 0x1e3328, 0xf81b34, 0x1c131f, 0xcb1f5c, 0x294cd5, 0xd6fd0f, 0x290ff0, 0xd6f20e, 0x290df1, 0xd7f20e,
				0x2c0df1, 0xd0f20e, 0x2f0ff1, 0xd0f30c, 0x2f0ff3, 0xd0f20e, 0x2f0cf3, 0xd0f20e, 0x2f0cf1, 0xd0f20e, 0x2f0ff1, 0xd0f10e, 0x2f0ef1, 0xd1f10b, 0x2e0cfc, 0xd1ff14, 0x2e3dbb, 0xc04de1, 0x1f6bf5, 0xf87ce0, 0x1c62d5, 0xfa5bb3, 0x1d012d, 0xef93fc, 0x185917, 0xe7ace8, 0x185616, 0xe1aee0, 0x175816, 0xe1a0e1, 0x19591a, 0xe2a2e9, 0x1f5330, 0xe28980, 0x1d3402, 0xebb44c, 0x78b62, 0xdb9841, 0x38830b, 0xe7b265, 0x3dcc7, 0xfc6125, 0x392da, 0xf86420, 0x93d5, 0xff6924, 0x98c7, 0xff2261, 0x75034, 0xe26323, 0xa792e, 0xd06a38, 0xb516b, 0xfcd4cd, 0x30420, 0xffeddd, 0x11a23, 0xfbe0d9, 0x3182f, 0xf9e2d7, 0x5192e, 0xfafef6, 0x34c70, 0xf33033, 0x1e7724, 0xc95628, 0x11657b, 0xe009de, 0x17ab05, 0xe263f6, 0x198e08, 0xe275f5, 0x1b8c0e, 0xe37af9, 0x1f8c01, 0xe57af4, 0x138207, 0xe77bf4, 0x118303,
				0xe774fa, 0x10830d, 0xe774fa, 0x1f820d, 0xe875fa, 0x1f820f, 0xe87bf9, 0x10820d, 0xe77afe, 0x108d0b, 0xe77afc, 0x108d05, 0xe77afc, 0x1f8204, 0xe77af2, 0x1f8306, 0xe77af2, 0x1f8204, 0xe77afc, 0x1f8204, 0xe77afe, 0x1f8206, 0xe675fe, 0x1f8206, 0xe77afe, 0x128306, 0xe77afe, 0x1f8206, 0xe675fe, 0x1f8206, 0xe77afe, 0x128306, 0xe77afe, 0x1c8d06, 0xe07bfe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe };
		System.arraycopy(aFor, 0, key, 96610, aFor.length);
	}

	private static void init324(int[] key) {
		int[] aFor = { 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xe174fe, 0x198c06, 0xee75fe, 0x188d0b, 0xe075fd, 0x1d820a, 0xe07aff, 0x1a830a, 0xe378fa, 0x1a8612, 0xe57acc, 0x1aa575, 0xe51ee6, 0xf6cab, 0xd755b7, 0x440be, 0xdb51ad, 0x3e448e, 0xd96fb2, 0x527e4, 0xde569f, 0x3bf135, 0xcc29e3, 0x32d90c, 0xce2dfe, 0x31d506, 0xce21f0, 0x31d50a, 0xce21f6, 0x31d40a, 0xce21f1, 0x31d409, 0xce21f1, 0x31d509, 0xce21f1, 0x31d409, 0xce21f1, 0x31d409, 0xce21f1, 0x31d50d, 0xce21f1, 0x31d50d, 0xce21f7, 0x31d400, 0xce21f7, 0x31d40f, 0xce20f5, 0x31d402, 0xce21f6,
				0x31d41a, 0xce24c5, 0x31ec74, 0xce901c, 0x20b93f, 0xc6bd37, 0x27b826, 0xc69c1e, 0x36fb9b, 0xc95f5d, 0x368fb0, 0xc9684c, 0x369eb3, 0xc9684b, 0x369cbc, 0xc96b46, 0x369cb0, 0xc96e58, 0x36808c, 0xc95a49, 0x369e8c, 0xc92c48, 0x36939f, 0xc9486d, 0x36bb90, 0xc94e67, 0x36b693, 0xc94e66, 0x35b691, 0xcc4169, 0x35b693, 0xcd4e69, 0x34b991, 0xcc4f66, 0x35b89c, 0xc34e6a, 0x3bb79b, 0xc44e71, 0x3b9dcf, 0xc00eb5, 0x304481, 0xdd6796, 0x34708c, 0xd769bd, 0x315ddb, 0xd50848, 0x3e848e, 0xc14e7a, 0x3eb985, 0xc1477a, 0x3eb887, 0xc1477a, 0x3eb887, 0xc1477a, 0x3db885, 0xc1477a, 0x3db885, 0xc34778, 0x3cb883, 0xc34779, 0x3cb884, 0xc34779, 0x3cb884, 0xc3477c, 0x3cbc93, 0xc36753, 0x3cd72d, 0xcaaa6b, 0x25fa43, 0xc2dd5f, 0x26d476, 0xf1d837, 0x138bbf, 0xec3966, 0x13c899, 0xec3567, 0x13cb98, 0xed3467,
				0x16cb98, 0xea3467, 0x15c998, 0xea3567, 0x15c898, 0xea3665, 0x15c99e, 0xea3663, 0x15c89c, 0xea3663, 0x15c89c, 0xea3761, 0x14c89c, 0xea3765, 0x15ca92, 0xea397a, 0x15f8d5, 0xf8968e, 0x26b299, 0xc1a58e, 0x25bbbb, 0xc382dd, 0x24d843, 0xd64a92, 0x218079, 0xde7586, 0x218f78, 0xd8778e, 0x2e8178, 0xd8798f, 0x208074, 0xdb7b87, 0x268a5e, 0xdb50ee, 0x24ed6c, 0xd16f20, 0x3b2e0c, 0xe23b2d, 0x12067, 0xde1109, 0x387caa, 0xc7c04c, 0x3832b3, 0xc3c44e, 0x3431b8, 0xcbc84b, 0x3438ae, 0xcb8208, 0x32f35f, 0xd4c146, 0x3cdb4a, 0xe6c85c, 0x38f20f, 0xc077a9, 0x3fa642, 0xc44cb8, 0x3fb546, 0xc84ebc, 0x30b644, 0xca4cbe, 0x36b747, 0xc9509f, 0x33e117, 0xc19b51, 0x2fdd48, 0xf8fd46, 0x22ce17, 0xd3a4b5, 0x280669, 0xd0c19d, 0x2e2c62, 0xd2d09c, 0x2a2a65, 0xd2d293, 0x2e2465, 0xd2d391, 0x2b2b62, 0xd3d296,
				0x2b2a6e, 0xd2dd94, 0x2b2a6c, 0xd2d29a, 0x29256c, 0xd2d29a, 0x2b2a6c, 0xd3d29a, 0x2b2b6e, 0xd3d398, 0x2b2b6e, 0xd3d396, 0x2b2b6e, 0xd3d396, 0x2b2b6e, 0xd3d396, 0x2b2b6e, 0xd3d396, 0x2b2b6e, 0xd3d396, 0x2b2b6e, 0xd2dc96, 0x292b6e, 0xd2dc96, 0x292b6e, 0xd1d396, 0x25296e, 0xd1d396, 0x292b6e, 0xd0dc96, 0x292b6e, 0xd1d396, 0x242a6e, 0xd1d396, 0x28246e, 0xd3d396, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96 };
		System.arraycopy(aFor, 0, key, 96910, aFor.length);
	}

	private static void init325(int[] key) {
		int[] aFor = { 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246e, 0xd2dc96, 0x2a246c, 0xd2dc96, 0x2a246c, 0xd2dc96, 0x2a246c, 0xd2dc96, 0x2a246c, 0xdddc96, 0x2a246c, 0xd2dc94, 0x2e2a6c, 0xd1dc9b, 0x2c2b60, 0xd5dc9a, 0x202562, 0xd9de92, 0x262771, 0xd9d5a3, 0x266d33, 0xc61e7f, 0x142362, 0xc90974, 0x2b1162, 0xc90c45, 0x42a7f, 0xc9651a, 0x11eb81, 0xe62650, 0x19ceb4, 0xe62a6e, 0x19f1bc, 0xe63f75, 0x19f7b2, 0xe63079, 0x19f7b2, 0xe63079, 0x19f5b2, 0xe63079, 0x19f7b2, 0xe6317f, 0x19f6b3, 0xe6307f, 0x19f7b4, 0xe63178, 0x19f7b6, 0xe63178, 0x19f7b4, 0xe6307f, 0x19f7b6, 0xe6307f, 0x19f5b4, 0xe6307f, 0x19f5b2,
				0xe6307b, 0x19f6ba, 0xe63502, 0x199591, 0xeff3ca, 0x5d4e9, 0xe1dde4, 0x2d7f1, 0xe5f5c2, 0x17a3a9, 0xe82435, 0x1788f4, 0xe8333f, 0x17f4ef, 0xe83d21, 0x17f5e8, 0xe83c20, 0x17fbeb, 0xe83c2f, 0x17f695, 0xe8312c, 0x17f1ed, 0xe84a28, 0x178be6, 0xe84b2b, 0x178de7, 0xe84129, 0x1793fd, 0xe8731c, 0x179cee, 0xed6f14, 0x149bef, 0xec6d14, 0x179aec, 0xee6d14, 0x1695ee, 0xe36218, 0x1498e9, 0xeb6100, 0x14b5be, 0xed26c2, 0x6df4, 0xea49ed, 0xc51f7, 0xed4dc7, 0x97aa2, 0xeb2231, 0x3aff7, 0xfc6402, 0x39cfd, 0xfc6202, 0x39cfd, 0xfc6202, 0x39cfd, 0xfc6202, 0x29dfd, 0xfc6202, 0x29dfd, 0xfd6202, 0x29cff, 0xfd6102, 0x29ffd, 0xfd6102, 0x29ffd, 0xfd6106, 0x298f4, 0xfd4235, 0x2f24b, 0xfa8e0d, 0xbc125, 0xece63f, 0x8ef18, 0xdfe227, 0x3db6a1, 0xc20477, 0x3df689, 0xc20b77, 0x3df588, 0xc30a77, 0x38f588,
				0xc40a77, 0x3bf788, 0xc40977, 0x3af68a, 0xc10977, 0x3af68c, 0xc10971, 0x3df68e, 0xc10971, 0x3ff68c, 0xc10977, 0x3df68c, 0xc3097b, 0x3cf48e, 0xc30768, 0x3cc7c6, 0xd3aa9b, 0xd8e83, 0xea989a, 0xe86ad, 0xe8bfcb, 0xfe555, 0xfd7784, 0xabd6f, 0xf54890, 0xab26e, 0xf34a98, 0x5bc6e, 0xf34499, 0xbbd62, 0xf04691, 0xdb748, 0xf06df8, 0xfd07a, 0xfb5236, 0x13101a, 0xcb063b, 0x281d71, 0xc82d1f, 0x2e41ba, 0xd1fa52, 0x2e0bad, 0xd5fe52, 0x220ba4, 0xddf157, 0x2200b4, 0xddba12, 0x26cb45, 0xcffa5c, 0x27e050, 0xfcf346, 0x1cca15, 0xe44fb3, 0x1b9c5a, 0xee71a2, 0x1a8c5e, 0xe872a4, 0x1d8b5e, 0xe771a2, 0x1b8b59, 0xe46d81, 0x1bdd08, 0xecaa4e, 0x1fee57, 0xc3f059, 0x18c117, 0xebabb7, 0x100b6c, 0xeacd9a, 0x142065, 0xefdc9b, 0x19276c, 0xefdf9f, 0x14286b, 0xe8df98, 0x14286b, 0xefdf9f, 0x142965, 0xedde9f,
				0x142967, 0xefde91, 0x132867, 0xefde91, 0x142969, 0xedde91, 0x14296b, 0xedde91, 0x15266b, 0xedde91, 0x1a266b, 0xedde91, 0x1a266d, 0xedde90, 0x1a266d, 0xedde90, 0x15296c, 0xedde90, 0x15266a, 0xecd190, 0x102768, 0xecd190, 0x172668, 0xefde90, 0x1b2468, 0xe9df90, 0x1e2668, 0xe7d190, 0x1e2668, 0xe7d190, 0x102868, 0xe5d190, 0x1d2968, 0xe4de90, 0x1d2968, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90 };
		System.arraycopy(aFor, 0, key, 97210, aFor.length);
	}

	private static void init326(int[] key) {
		int[] aFor = { 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c2668, 0xe4de90, 0x1c266a, 0xe4de90, 0x1c266a, 0xe4de90, 0x1c266a, 0xe4de90, 0x1c266a, 0xe4de90, 0x1c276b, 0xe4df91, 0x1e2966, 0xe5dc91, 0x192a6b, 0xe0dd97, 0x182568, 0xeedf95, 0x142567, 0xebd286, 0x143638, 0xea88aa, 0x1f03cb, 0xf558f6, 0x2c7fed, 0xcb4dd4, 0x2417a4, 0xd9980e, 0x2223c2, 0xddfa1f, 0x221acc, 0xd7db67, 0x3f4b1b, 0xe03b44, 0x396513, 0xe53948, 0x396515, 0xe43f4a, 0x3b662a, 0xe43f4a, 0x38642a, 0xe43f4a, 0x3b662a, 0xdb3f75, 0x3b662a, 0xdb3f75, 0x3b6615, 0xdb3f75, 0x3b662a, 0xdb3f77, 0x3b652c, 0xdb3f77, 0x3b6628, 0xdb3f48, 0x3b672a,
				0xdb3e75, 0x3b6422, 0xdf3d76, 0x396c3b, 0xda5b0c, 0x3c452c, 0xd75135, 0x3b452a, 0xd25803, 0x346a3d, 0xdc2c6c, 0x3b7d31, 0xd92b50, 0x77033, 0xdc2d52, 0x5700f, 0xdd2c55, 0x7708, 0xdf2a57, 0x87600, 0xd4175c, 0x364e3c, 0xd41863, 0x364406, 0xeb1f65, 0x3c4507, 0xee256f, 0x375be8, 0xdcf25b, 0x252bbf, 0xd9db45, 0x232fbb, 0xdad946, 0x232ebe, 0xdbd94b, 0x222eb1, 0xd5db47, 0x2d22b6, 0xd2db5f, 0x2d0fe1, 0xd49c9d, 0x39d7ab, 0xd3f3bc, 0x36e9aa, 0xd7f587, 0x34cde3, 0xd69472, 0x3f1bb7, 0xc0d744, 0x3f2fbb, 0xc0d046, 0x3f2eb9, 0xc0d046, 0x3f2eb9, 0xc0d046, 0x3e2fb9, 0xc0d046, 0x3e2fb9, 0xc1d146, 0x3e2cbb, 0xc1d146, 0x3e2fb9, 0xc1d146, 0x3e2fb9, 0xc1d242, 0x3e2bb0, 0xc1f270, 0x3e420e, 0xc73e4a, 0x357062, 0xdd567e, 0x395f59, 0xef5367, 0xf07e2, 0xf0b534, 0xf47ca, 0xf1b934, 0xe46cb, 0xf0b934,
				0xb46cb, 0xf0b934, 0xf46cb, 0xf0b936, 0xb46c9, 0xf2b934, 0xb46cf, 0xf0b932, 0xc46cd, 0xf2b932, 0xc46cf, 0xf2b934, 0xe46ce, 0xf0b939, 0xf47ca, 0xf0b42c, 0xf7583, 0xe21bd8, 0x3c3fcf, 0xdb28d8, 0x3f36ed, 0xd90f8b, 0x3e5515, 0xccc7c4, 0x3b0d2f, 0xc4f8d0, 0x3b022e, 0xc2fad8, 0x340c2e, 0xc2f4d9, 0x3a0d22, 0xc1f6d1, 0x3c0708, 0xc1ddb8, 0x3e603a, 0xcae276, 0x2da05a, 0xf5b67b, 0x11ac31, 0xf38341, 0x14efe4, 0xeb540c, 0x14a6f3, 0xed500c, 0x1aa7fb, 0xe55c0a, 0x1aaee9, 0xe5144d, 0x196418, 0xf35401, 0x1a4d0c, 0xc75f1a, 0x266649, 0xdce2ef, 0x233607, 0xd7d8ff, 0x242503, 0xd6dbf9, 0x232203, 0xd9d8ff, 0x252306, 0xdac5de, 0x276a56, 0xd01d10, 0x235909, 0xfe4705, 0x237749, 0xd71ee9, 0x2cbe34, 0xd678c3, 0x28953c, 0xd26ec1, 0x279536, 0xd46fc5, 0x2d9731, 0xd160c2, 0x2a9736, 0xd160c0, 0x28973a,
				0xd160c6, 0x29983e, 0xd160c8, 0x2a973e, 0xd661c8, 0x2c973f, 0xd560c5, 0x2c973f, 0xd46fc5, 0x2c973f, 0xdb6ec7, 0x2c973f, 0xdb6fc5, 0x2c9739, 0xdb60c6, 0x2c9739, 0xdb60c6, 0x23973b, 0xdb6fc1, 0x23973b, 0xda60c3, 0x21973b, 0xda60c3, 0x21973b, 0xd96fc3, 0x2d953b, 0xd96fc3, 0x2e963b, 0xd66ec3, 0x2f993b, 0xd66ec3, 0x21973b, 0xd66ec3, 0x21973b, 0xd96fc3, 0x20983b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3 };
		System.arraycopy(aFor, 0, key, 97510, aFor.length);
	}

	private static void init327(int[] key) {
		int[] aFor = { 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x21973b, 0xd96fc3, 0x2e9739, 0xd96fc3, 0x2e9739, 0xd96fc3, 0x2e9739, 0xd96fc3, 0x219739, 0xd96fc3, 0x219739, 0xd96fc3, 0x20963a, 0xd86cc3, 0x2e9436, 0xd86cc3, 0x2f9b36, 0xd763ce, 0x2f9432, 0xd763cf, 0x2c9f31, 0xd764c0, 0x289e1a, 0xd76edf, 0x28a742, 0xc62b2b, 0x13606b, 0xf03a0a, 0x8ada1, 0xf76740, 0x886b0, 0xf76c59, 0x8b69b, 0xff1f1e, 0x1e4023, 0xc77135, 0xa6231, 0xde6d38, 0xc6337, 0xde6d25, 0xa6133, 0xd96f24, 0x86033, 0xd86f27, 0x96133, 0xdb6c27, 0x96133, 0xdb6c27, 0x96133, 0xdb6c27, 0x96235, 0xdb6c25, 0xa6229, 0xd86c26, 0xa6234, 0xd86f22, 0xa6235, 0xd86f21, 0xa612e,
				0xdf6c21, 0x26239, 0xe67227, 0xb6707, 0xfa7d25, 0x86606, 0xe47f26, 0x26a3c, 0xe37929, 0x3e683d, 0xe46728, 0x316a3f, 0xe0642b, 0x306b3b, 0xe07b34, 0x33763a, 0xe67b2a, 0x327039, 0xe57e21, 0x3d7637, 0xe87325, 0x3c7836, 0xe8772e, 0x3b7a32, 0xf36914, 0x3f515a, 0xdb2cc8, 0x20e413, 0xdf09e8, 0x24fc17, 0xdc05e9, 0x25fc1e, 0xd20aea, 0x2efc10, 0xd20fe8, 0x2ef81b, 0xd10ff1, 0x2edd4e, 0xd54f32, 0x3a0506, 0xd02012, 0x383901, 0xda2528, 0x3f1377, 0xdb45f9, 0x30c93d, 0xcf02ce, 0x30fa31, 0xcf05cb, 0x30fa36, 0xcf05c9, 0x30fa36, 0xce05c9, 0x32fa36, 0xce05c9, 0x30fa36, 0xcf05cb, 0x30fb30, 0xcf04ca, 0x30fb37, 0xcf04ca, 0x30fb37, 0xcf05cd, 0x30ff3c, 0xcf2583, 0x3094f9, 0xc9e8bb, 0x3ba693, 0xd1838e, 0x358ba5, 0xe087e7, 0x3fd26f, 0xc061b7, 0x3f9248, 0xc26db6, 0x3c924b, 0xc06db6, 0x3b924b,
				0xc26db6, 0x39924b, 0xc56db6, 0x399249, 0xc76db6, 0x39924b, 0xc76db6, 0x389249, 0xc76cb6, 0x38924b, 0xc76cb0, 0x38934b, 0xc66cb2, 0x399247, 0xc666a1, 0x39a50c, 0xd5d554, 0x9f345, 0xeee456, 0xafa63, 0xecc305, 0xb999b, 0xf90b4a, 0xec1a1, 0xf1345e, 0xecea0, 0xf73656, 0x1c0a0, 0xf73857, 0xfc1ac, 0xf43a5f, 0x9cb86, 0xf41136, 0xbacb4, 0xfe2ef8, 0x166cd4, 0xcc78f5, 0x2b60b9, 0xc84fc9, 0x2f236c, 0xd09f8a, 0x2f6c75, 0xd79b89, 0x24617a, 0xd99f8a, 0x266b6b, 0xd8d7c9, 0x24a69d, 0xce968a, 0x228e87, 0xfc9f91, 0x1ea7c2, 0xe42366, 0x1bf08f, 0xec1d77, 0x1be68b, 0xed1a71, 0x1ae389, 0xe01973, 0x1ae285, 0xe50a53, 0x12b9d7, 0xe0c294, 0x108783, 0xcc988f, 0x17a9c3, 0xe3c063, 0x185f83, 0xe09978, 0x1c7487, 0xe48978, 0x167481, 0xe68f72, 0x117686, 0xe88c73, 0x117485, 0xe98c7d, 0x1e7481, 0xeb8c7c,
				0x1f7686, 0xea8f7e, 0x127788, 0xeb8f7e, 0x127788, 0xea8f70, 0x12778a, 0xea8f70, 0x1d7686, 0xe88c70, 0x1d7684, 0xe88c72, 0x1d7588, 0xe88c74, 0x1d7489, 0xea8c74, 0x12748e, 0xea8c78, 0x12748e, 0xea8d7a, 0x127582, 0xea8d7a, 0x137a82, 0xeb827a, 0x1e788c, 0xeb827a, 0x1c7b8c, 0xe4837a, 0x1d7b8c, 0xe4837a, 0x1c7b82, 0xeb827a, 0x1c7b82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a };
		System.arraycopy(aFor, 0, key, 97810, aFor.length);
	}

	private static void init328(int[] key) {
		int[] aFor = { 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x137a82, 0xeb827a, 0x1c7a80, 0xeb827a, 0x1c7a80, 0xeb827a, 0x1c7a80, 0xeb827a, 0x137a80, 0xeb827a, 0x137a80, 0xeb8278, 0x13748f, 0xeb8c79, 0x1e7780, 0xeb8c77, 0x1d7782, 0xe58d77, 0x1c7a8d, 0xeb8f77, 0x1e798c, 0xe08671, 0x167f95, 0xe9854f, 0x16608e, 0xe3d913, 0xf569b, 0xf9cd39, 0xd72f6, 0xf79006, 0xe7ffc, 0xf1880e, 0xe52b3, 0xf5f1c8, 0x19a9f8, 0xf98cfc, 0x2585fc, 0xc681fc, 0x2482f8, 0xc781f3, 0x2482fe, 0xc781f0, 0x2685fd, 0xc781f6, 0x2685fb, 0xc781f0, 0x2482fb, 0xc586f0, 0x2685fb, 0xc781f0, 0x2485f9, 0xc580fe, 0x2685fa, 0xc780ff, 0x2483f4, 0xc587f9, 0x2684f7, 0xc780fa,
				0x2484fd, 0xc687fb, 0x2085ea, 0xce8ef4, 0x3e98d0, 0xd083f4, 0x3e98d6, 0xd182f6, 0x3f96e3, 0xd59def, 0x329be5, 0xd498ef, 0x3698e4, 0xd49ae8, 0x369fe2, 0xd598eb, 0x309ded, 0xd49ce5, 0x3c9eea, 0xd99ee4, 0x309feb, 0xdb9afa, 0x3f99f1, 0xde98fa, 0x3a99e8, 0xe291c8, 0x3ba083, 0xd4d910, 0x2b1fcc, 0xd4f535, 0x2c07cb, 0xdbff36, 0x2105ce, 0xd8fd3a, 0x240bc0, 0xd8f838, 0x240fcc, 0xdbf820, 0x242ae1, 0xddb99c, 0x30f2ae, 0xdad4be, 0x33cdb1, 0xd6d197, 0x3ee4c8, 0xdab145, 0x363b86, 0xc9f274, 0x360a8b, 0xc9f570, 0x360a8d, 0xc8f570, 0x360a8d, 0xc8f572, 0x340a8d, 0xc8f572, 0x360a8d, 0xc9f570, 0x360a8a, 0xc9f570, 0x360a8d, 0xc8f570, 0x370a8d, 0xc8f575, 0x370f84, 0xc8d53b, 0x376742, 0xc01800, 0x325629, 0xd97009, 0x3c7924, 0xe87460, 0x3621e9, 0xc99532, 0x3666cd, 0xcb9933, 0x3566ce, 0xcb9935,
				0x3766ce, 0xcc9935, 0x3066c8, 0xcc9937, 0x3366c8, 0xcc9937, 0x3366ca, 0xcc9937, 0x3367c8, 0xcc9937, 0x3364ca, 0xcc9a31, 0x3365cc, 0xcc9a37, 0x3365cf, 0xcc9027, 0x33548c, 0xd925da, 0x503d4, 0xe21bc4, 0x604f7, 0xe03d91, 0x7670f, 0xf5f5de, 0x23f35, 0xfdcaca, 0x23034, 0xfbc8c2, 0xd3e34, 0xfbc6c3, 0x33f38, 0xf8c4cb, 0x53512, 0xf8efa2, 0x75220, 0xf2d36e, 0x189240, 0xc48163, 0x23992d, 0xc0b75c, 0x27dbf9, 0xd8671d, 0x2793e2, 0xdf6b18, 0x2c91eb, 0xd16c1a, 0x2e98fb, 0xd02459, 0x2b560b, 0xc1671e, 0x2d7f13, 0xf36e05, 0x125756, 0xe8d3f0, 0x170019, 0xe0ece3, 0x1a151d, 0xedeee7, 0x15161f, 0xefece7, 0x151711, 0xebffc2, 0x1d4b46, 0xed3705, 0x1d7110, 0xc16e1b, 0x1a5f55, 0xee36f7, 0x149617, 0xec50ec, 0x10bd13, 0xe940ec, 0x1bbd15, 0xeb46e0, 0x1ebc14, 0xe645e0, 0x1ebd16, 0xe645ec, 0x11bd11,
				0xe445ec, 0x16be16, 0xe445ee, 0x13bc18, 0xeb44ee, 0x13bc16, 0xeb44ee, 0x13bc14, 0xeb44ee, 0x1cbd18, 0xe947ec, 0x1ebd1f, 0xe944eb, 0x1ebd13, 0xe945ef, 0x1ebd13, 0xe945ef, 0x11bd17, 0xe845e1, 0x11bd15, 0xe945e3, 0x1ebc1b, 0xeb45e3, 0x13bd1b, 0xeb45e3, 0x13bd15, 0xe444e3, 0x13bd15, 0xeb45e3, 0x12bd15, 0xeb45e3, 0x12b21b, 0xea4ae3, 0x12b21b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3 };
		System.arraycopy(aFor, 0, key, 98110, aFor.length);
	}

	private static void init329(int[] key) {
		int[] aFor = { 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x1db31b, 0xe54be3, 0x12b319, 0xe54be3, 0x12b319, 0xe54be3, 0x13bc1a, 0xe54be3, 0x1db319, 0xe44ae2, 0x1eb018, 0xe749e1, 0x1ebe19, 0xe446e0, 0x1fb118, 0xe549e1, 0x13b31a, 0xe648e3, 0x15b210, 0xe14be3, 0x16bc16, 0xee4ae1, 0x15b21e, 0xed44e7, 0x1abc17, 0xe145fd, 0x1fb41d, 0xe256ca, 0x1d8316, 0xe256f7, 0x15b01b, 0xec47e1, 0x1bbc1f, 0xe44af2, 0x1b904c, 0xe33531, 0x16f05, 0xdb420a, 0xe4d08, 0xd54601, 0xc4d0e, 0xd5471c, 0xe4e08, 0xd2461c, 0xc4e0e, 0xd2461c, 0x94f08, 0xd0451c, 0xb4c0e, 0xd2461c, 0x94f0e, 0xd0451c, 0xb4f0c, 0xd24403, 0x94e0e, 0xd34200, 0xf4813, 0xd64105, 0xd4912, 0xd44306, 0xf4909,
				0xd44304, 0x354817, 0xd05a0c, 0x38432f, 0xd1580a, 0x3b4329, 0xd35a36, 0x364c2a, 0xd45f33, 0xa5024, 0xd15c32, 0xa5524, 0xd15c32, 0xc5527, 0xd15f34, 0xd5624, 0xd15f34, 0xa5626, 0xd15f34, 0xd5624, 0xd65c34, 0xe503b, 0xd65b29, 0xd5330, 0xc35f14, 0x106945, 0xf912d1, 0x5d508, 0xfb39f0, 0x1cb0d, 0xf63df6, 0xfc401, 0xf73df5, 0xeca0f, 0xf93ff7, 0x1c500, 0xfe3ff1, 0x1ea35, 0xf67e48, 0x1a327a, 0xf01474, 0x190d79, 0xf1115e, 0x182501, 0xfe7091, 0x13f954, 0xec30a2, 0x13c75d, 0xed3aa6, 0x12c559, 0xec3aa6, 0x13c559, 0xed3aa6, 0x11c559, 0xed3aa6, 0x13c559, 0xec3aa6, 0x13c75c, 0xec39a7, 0x13c758, 0xed39a6, 0x10c45b, 0xef39a3, 0x10c351, 0xed19ef, 0x10ac95, 0xe22cd4, 0x107cfe, 0xf45de3, 0x1157d1, 0xc55a99, 0x1a0c15, 0xe5bfce, 0x1a4d31, 0xe7b3ce, 0x184c33, 0xe7b3c8, 0x184c33, 0xe7b3ce,
				0x184d31, 0xe7b3ce, 0x184e31, 0xe7b0ce, 0x184f31, 0xe7b0cc, 0x184f33, 0xe7b1cc, 0x184c31, 0xe7b1cc, 0x184c32, 0xe7b3cd, 0x1a4f3a, 0xe5b9d0, 0x1a7d7d, 0xf60e2b, 0x282a20, 0xc3322d, 0x202c1f, 0xc5147a, 0x224ee4, 0xd1dd36, 0x2617dd, 0xd9e222, 0x2618dc, 0xdce12b, 0x2419d3, 0xd2e124, 0x2b1bd8, 0xd0e02b, 0x2d11f2, 0xd3ca43, 0x2c76c2, 0xd9f78c, 0x33c8a1, 0xefdb84, 0x7c2d5, 0xe4eca6, 0xc8703, 0xf33de2, 0xcce1d, 0xfb3be5, 0x3c11c, 0xfd38ef, 0x2cc09, 0xfd77ad, 0x407fd, 0xed36e8, 0x2ce7, 0xdb3cf1, 0x506a4, 0xf28302, 0xd50ef, 0xf5bd11, 0xf4aef, 0xf8b215, 0x48ec, 0xf9b11b, 0x74bec, 0xf8ac38, 0x319bc, 0xf263fc, 0x626ea, 0xd906e4, 0x736b5, 0xf45e16, 0xdc1cb, 0xfa043d, 0x4efc2, 0xfe163c, 0xaecc4, 0xf91531, 0xfedc2, 0xf81b30, 0x3ecc6, 0xf91a31, 0x1ecca, 0xf71b31, 0x4e2c6, 0xf71b33, 0xecc6,
				0xf71a32, 0xfeccb, 0xf71a30, 0xfefcc, 0xf81937, 0xfeec0, 0xf91633, 0xeeec1, 0xf91632, 0xfe0ca, 0xf81631, 0xe0ca, 0xf81633, 0x2e0c6, 0xf81633, 0x3e3c4, 0xfb1533, 0x8ecca, 0xf81532, 0xfeec8, 0xf41533, 0xce3c4, 0xf5143c, 0xfeec4, 0xf81931, 0xe1c7, 0xf81931, 0x1e1c7, 0xf91931, 0x1e1c9, 0xf91931, 0xee0c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931 };
		System.arraycopy(aFor, 0, key, 98410, aFor.length);
	}

	private static void init330(int[] key) {
		int[] aFor = { 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0x1e1c9, 0xf91931, 0xee1cb, 0xf91931, 0xee1cb, 0xf91931, 0xee1cb, 0xf61830, 0xfe1cb, 0xf8163c, 0xee0ca, 0xf8163c, 0x1e1c4, 0xf8163c, 0x3e0c6, 0xfa173c, 0xdefc6, 0xf8163e, 0xcedca, 0xf91739, 0x1eecd, 0xf91938, 0x5eec5, 0xfc193f, 0x5e0c8, 0xf91d3f, 0x5e1cb, 0xf9183f, 0x6edc2, 0xf9153d, 0x3e9c4, 0xf91638, 0xfeac4, 0xf41e2a, 0xbfce0, 0xf0407b, 0x1dc91c, 0xf4ac50, 0x10e011, 0xfaa759, 0x12e015, 0xfaa758, 0x10e117, 0xfca45a, 0x13e017, 0xfca45a, 0x17e115, 0xfda75a, 0x17e117, 0xfda75a, 0x17e117, 0xfda75a, 0x17e016, 0xfda75c, 0x16ef15, 0xfda75c, 0x16e012, 0xfda740, 0x16e114, 0xfda644, 0x17e10e, 0xf9a74b,
				0x99977, 0xe3b758, 0x6a97b, 0xe3b164, 0x4a944, 0xedb462, 0x59c55, 0xefaf10, 0x7945e, 0xeed60d, 0x5915f, 0xeed60d, 0x2905f, 0xe9d510, 0x2935c, 0xe8d416, 0x935a, 0xe7da10, 0xd9d5a, 0xe5d510, 0x9c5a, 0xe7d417, 0xd9144, 0xecd918, 0x8b066, 0xfa2dd6, 0x5fa34, 0xfb0bce, 0xff35, 0xf908cf, 0x1f039, 0xf406c8, 0xdf132, 0xfb07ca, 0xcfe32, 0xf304c0, 0xcd106, 0xf94479, 0x12094b, 0xfb2e45, 0x13364b, 0xf62d6c, 0x1c180e, 0xf44f9c, 0x1bc45b, 0xe40fa3, 0x1bf85c, 0xe406a3, 0x1bf85c, 0xe407a3, 0x1bf95c, 0xe407a3, 0x1bf85c, 0xe507a3, 0x1af85c, 0xe506a3, 0x1afb59, 0xe505a2, 0x1afb5d, 0xe505a2, 0x1afb5d, 0xe505a6, 0x1aff55, 0xe52494, 0x1891ee, 0xec11ad, 0x194382, 0xf364a7, 0x1b6992, 0xc865d5, 0x17315e, 0xe88285, 0x17717a, 0xe88c84, 0x17737f, 0xe88c85, 0x17737f, 0xe88e82, 0x17737d, 0xe88f82,
				0x17747d, 0xe88882, 0x17777f, 0xe88884, 0x177779, 0xe88884, 0x17767f, 0xe88b82, 0x17767c, 0xe88883, 0x17737b, 0xe88497, 0x174039, 0xfb306f, 0x271465, 0xc00368, 0x231d5a, 0xc5243c, 0x227ea2, 0xd0ec73, 0x272698, 0xd8d367, 0x272999, 0xded16f, 0x262997, 0xd0d160, 0x292b9c, 0xd2d06f, 0x2f21b6, 0xd1fa07, 0x2e4686, 0xd8c6c8, 0x33f8e5, 0xeeeac0, 0xbf290, 0xe8c2e2, 0xaf41, 0xff12a3, 0xe75c, 0xfe1da7, 0x7e45e, 0xf81fab, 0x7eb42, 0xf856e8, 0x124bc, 0xe917a4, 0x20cab, 0xd91eb3, 0x225e0, 0xf5af49, 0xa78a6, 0xf09558, 0xd6da7, 0xf6965a, 0xf6ca6, 0xf5965c, 0xa6aa5, 0xf58c73, 0xe3ef6, 0xfc47b4, 0xf03a3, 0xd21ead, 0xe2ffc, 0xf8435b, 0x3e084, 0xf9297c, 0x6c483, 0xf93e7d, 0x3c481, 0xf43d79, 0xec48e, 0xf23c79, 0xcc481, 0xf23c7b, 0xfc485, 0xf53d7b, 0x2c681, 0xf53a79, 0xcc38e, 0xf63a79, 0xfcd83,
				0xf63a7f, 0xfcc82, 0xf63b7e, 0xec386, 0xf63a72, 0xec381, 0xf63a75, 0xdc389, 0xf63a77, 0xacd8c, 0xf63575, 0xacd80, 0xf73a77, 0xacd8c, 0xf63a71, 0xec68e, 0xfc3e76, 0x8c68f, 0xf13f76, 0xac88e, 0xf63077, 0xcc980, 0xfb3e75, 0xcc783, 0xfb3e75, 0x3c683, 0xfa3e75, 0x2c68d, 0xfa3e75, 0xdc78d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75 };
		System.arraycopy(aFor, 0, key, 98710, aFor.length);
	}

	private static void init331(int[] key) {
		int[] aFor = { 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0x2c68d, 0xfa3e75, 0xdc68f, 0xfa3e75, 0xdc68f, 0xfa3e75, 0x2c68f, 0xfb3f74, 0x2c68d, 0xf5317a, 0xdc78d, 0xf43f7b, 0x8c78c, 0xf0317b, 0x8c780, 0xff327a, 0xac78d, 0xfc317b, 0xbc988, 0xf3307c, 0xac888, 0xf23f7d, 0x4cb88, 0xf23f7d, 0x4c989, 0xf3307d, 0x5cb88, 0xf0377d, 0x4ca85, 0xf3377c, 0xbcc8e, 0xf2367a, 0x8cd87, 0xf5347f, 0xbc699, 0xf81c5f, 0x12a0fa, 0xf10468, 0x149ffa, 0xfd076f, 0x159ff6, 0xfd076f, 0x1490f6, 0xfa056f, 0x997f6, 0xfa056f, 0x1591f4, 0xf9076d, 0x1591fa, 0xf9076d, 0x1591f4, 0xf9076d, 0x1591fa, 0xf9076f, 0x149ffc, 0xf90769, 0x1490f3, 0xf9066f, 0x1490f1, 0xf9076b, 0x1590ff, 0xe00375,
				0x197818, 0xf2375b, 0x131478, 0xf70761, 0x1c137d, 0xf40d53, 0x133506, 0xfa607f, 0x1d10ef, 0xf79671, 0x1a00ef, 0xf09875, 0x1b0eee, 0xf79877, 0x190de0, 0xf59b75, 0x1d02e1, 0xf59b75, 0x1e0ce0, 0xf59b77, 0x1c0cee, 0xf79a75, 0x190eeb, 0xf09b49, 0x1a33fb, 0xe8f637, 0x1e15d2, 0xe9e423, 0x1310d5, 0xe8e72d, 0x111eda, 0xe6e92f, 0x1d1ed7, 0xeaeb21, 0x1213db, 0xedea2f, 0x123ee9, 0xe5aa96, 0x9e6a4, 0xe0c0b4, 0x6daa5, 0xe2c48e, 0xaf3ed, 0xe0a87e, 0x1138b8, 0xeef24b, 0x1105b4, 0xeef949, 0x1104b6, 0xeef94b, 0x1105b6, 0xeef84b, 0x1106b4, 0xeef84b, 0x1105b4, 0xeef949, 0x1105b3, 0xeef949, 0x1105b4, 0xeef849, 0x1105b4, 0xeef94e, 0x1103bc, 0xeedf7f, 0x1169fe, 0xeae9b9, 0x1fb989, 0xf69fad, 0x149582, 0xc49ec3, 0x26ca45, 0xd97e92, 0x268f6f, 0xd97395, 0x268d6d, 0xd97295, 0x268c6d, 0xd97196,
				0x268a69, 0xd97196, 0x268b69, 0xd97096, 0x268f6c, 0xd97094, 0x268f6e, 0xd97094, 0x268e6c, 0xd97094, 0x268b6d, 0xd97796, 0x268c61, 0xd97a8d, 0x26bc3e, 0xc9cf65, 0x17e576, 0xfff963, 0x1ce650, 0xfadf36, 0x1d85a8, 0xef1779, 0x18dd92, 0xe7286d, 0x18d293, 0xe12a65, 0x16dd92, 0xe02565, 0x19df99, 0xe2246a, 0x1fd5b3, 0xe10e02, 0x1eb283, 0xe933cc, 0x673e3, 0xd867c7, 0x3c7b8c, 0xe348e1, 0x5397f, 0xfa87a4, 0x5725a, 0xfa89a2, 0x6725b, 0xf98fa3, 0x67b4f, 0xf9c5e1, 0xeb1b9, 0xe984a2, 0x9eb2, 0xda8daa, 0x2b2f9, 0xf42251, 0xbf8bc, 0xf40847, 0xbf1b8, 0xf40c47, 0xff0b8, 0xf30d47, 0xcf1bc, 0xf31665, 0xaa6e0, 0xf8dca5, 0x179abe, 0xcf84b1, 0x14b0e3, 0xe3c244, 0x1a6b9a, 0xe0a662, 0x1f4b9d, 0xe0b062, 0x1f4b9d, 0xe2b062, 0x1d4b9d, 0xe2b062, 0x1d4b9d, 0xe2b062, 0x1d4b9d, 0xe2b762, 0x1e4a9d,
				0xe2b460, 0x1c489d, 0xe3b460, 0x1c499e, 0xe2b761, 0x1c4a9e, 0xe2b461, 0x1d4a9b, 0xe2b462, 0x1d4b95, 0xe2b56f, 0x1d4e90, 0xe2b46e, 0x1c4995, 0xe2b46c, 0x1c4994, 0xe3b56f, 0x1c4c90, 0xe3b66f, 0x1c4c90, 0xe5bb6a, 0x104d92, 0xe6ba6b, 0x1d4d93, 0xe1bb6b, 0x1a4c93, 0xe2b46b, 0x154d9d, 0xe0b76b, 0x184f9d, 0xe1b76b, 0x184093, 0xe0b86b, 0x174193, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b };
		System.arraycopy(aFor, 0, key, 99010, aFor.length);
	}

	private static void init332(int[] key) {
		int[] aFor = { 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x184093, 0xe0b86b, 0x174091, 0xe0b86b, 0x174091, 0xe0b86b, 0x184091, 0xe0b869, 0x184091, 0xe1b867, 0x1b4190, 0xe6b868, 0x1d4f9e, 0xeaba68, 0x134295, 0xe4ba68, 0x134d91, 0xebb569, 0x124291, 0xebb569, 0x134d91, 0xeab468, 0x134d91, 0xeab468, 0x134d91, 0xe4b469, 0x114d91, 0xe2b166, 0x134d90, 0xe3b762, 0x1b4e93, 0xecba7c, 0x1b4f84, 0xecba7e, 0x164389, 0xeabb66, 0x154189, 0xeab665, 0x154788, 0xeab766, 0x155896, 0xeab766, 0x155896, 0xeab666, 0x155d94, 0xeab666, 0x155a89, 0xeab466, 0x15598b, 0xeab766, 0x155a89, 0xeab466, 0x15598b, 0xeab767, 0x15588e, 0xeab764, 0x155a89, 0xeab579, 0x155b8b,
				0xeab465, 0x155a8d, 0xeab051, 0x1570fd, 0xe80a95, 0xd3abc, 0xd237ac, 0x313dbf, 0xdb1d89, 0x284cf3, 0xd7ce41, 0x287f9d, 0xd7ab6f, 0x28469a, 0xd7b677, 0x285b9b, 0xd7b475, 0x285b98, 0xd7b475, 0x28459e, 0xd7b475, 0x285b98, 0xd7b568, 0x285b9a, 0xd7b56e, 0x28589a, 0xd7b66e, 0x28599a, 0xd7ac6d, 0x285094, 0xd4ab63, 0x285394, 0xd3a462, 0x245397, 0xd0a564, 0x29529c, 0xdea76a, 0x265f92, 0xd9a766, 0x2673a0, 0xdee7dd, 0x32abef, 0xdb8dfd, 0x3d9bef, 0xd880c4, 0x34b398, 0xc4e512, 0x3f62a4, 0xc0db79, 0x3f3a97, 0xc0dc7e, 0x3f3f9b, 0xc0dc7f, 0x3f3f9b, 0xc0dc7f, 0x3f3f9a, 0xc0db7f, 0x3f389a, 0xc0db7e, 0x3f399c, 0xc0db7e, 0x3f389a, 0xc0da7e, 0x3f3e98, 0xc0dc7a, 0x3f03a3, 0xc0c510, 0x3f626c, 0xc01a20, 0x385713, 0xd47136, 0x307e1b, 0xe86e25, 0x33e5f, 0xfc9e9f, 0x3477b, 0xfca59a, 0x34178,
				0xfca798, 0x3437a, 0xfca09e, 0x34277, 0xfca39c, 0x34375, 0xfca190, 0x34572, 0xfca392, 0x34570, 0xfca392, 0x34672, 0xfca292, 0x34771, 0xfca297, 0x34075, 0xfc9ca2, 0x33203, 0xf35556, 0x137341, 0xf76455, 0x134463, 0xf57d05, 0x12279b, 0xe0b54a, 0x177fa1, 0xe88a5e, 0x1770a0, 0xee8856, 0x197fa1, 0xef8756, 0x167daa, 0xed8659, 0x107780, 0xefab32, 0x1016b0, 0xe794fd, 0x9abd3, 0xd4b8cc, 0x37a48f, 0xd591ec, 0x3afa7e, 0xc54ab7, 0x3aa85f, 0xc540b8, 0x3aa45d, 0xc547be, 0x3a9e66, 0xc534c4, 0x3f589c, 0xd66c83, 0x3d7690, 0xe06388, 0x222d9, 0xffa443, 0x6295, 0xffb870, 0x599a, 0xffbc76, 0x5f99, 0xffb163, 0x4190, 0xffa749, 0x508ce, 0xf77286, 0x19359b, 0xc01789, 0x1d26c2, 0xea4e54, 0x15d39f, 0xea6941, 0x15bfa7, 0xea5d4e, 0x15bea5, 0xea5c4f, 0x15bfa4, 0xea5b4d, 0x15baa8, 0xea584e, 0x15baa4,
				0xea584e, 0x15bda8, 0xea584e, 0x15bba8, 0xea584e, 0x15bca8, 0xea594e, 0x15bda6, 0xea5840, 0x15bda1, 0xea587e, 0x15bda1, 0xea5842, 0x15baa5, 0xea5942, 0x15bca1, 0xea5a40, 0x15bca1, 0xea5947, 0x15bdb2, 0xea5848, 0x15bcbb, 0xea4c41, 0x10b4bc, 0xe64345, 0x1eb5bc, 0xe54244, 0x1fb4b3, 0xe6434b, 0x11babd, 0xe4404b, 0x1cb8bd, 0xe5404b, 0x1cb7b3, 0xe44f4b, 0x13b6b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b };
		System.arraycopy(aFor, 0, key, 99310, aFor.length);
	}

	private static void init333(int[] key) {
		int[] aFor = { 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x1cb7b3, 0xe44f4b, 0x13b7b1, 0xe44f4b, 0x13b7b1, 0xe44f4b, 0x1db6b2, 0xe54e4a, 0x1cb9b2, 0xe54144, 0x1eb6b2, 0xe54041, 0x19b7b5, 0xe34e42, 0x14b5bc, 0xe24e43, 0x1ab5bc, 0xe04e43, 0x1ab7bd, 0xe34f43, 0x1bb6bd, 0xe14d42, 0x18b1bd, 0xe14d42, 0x1bb6bd, 0xe24c43, 0x18b5bd, 0xe44943, 0x1eb5b8, 0xe44f40, 0x1fb8b6, 0xe64b43, 0x1abcbe, 0xe14941, 0x1ab3be, 0xe34442, 0x1cbfb8, 0xe3464f, 0x1cbeb7, 0xe3494d, 0x1cbeb7, 0xe3464d, 0x1cbfb7, 0xe3464b, 0x1cb1b5, 0xe3464b, 0x1cbeb7, 0xe3474d, 0x1cbeb5, 0xe3444d, 0x1cbdb7, 0xe3444d, 0x1cbdb7, 0xe3474f, 0x1cbeb8, 0xe3474e, 0x1cbfb7, 0xe3464b, 0x1cbfb4,
				0xe3464e, 0x1cbcbd, 0xe34a55, 0x1c86e3, 0xe60191, 0xf3dbf, 0xe92bad, 0xc3bbb, 0xea1b8c, 0x156f1, 0xf52849, 0x99aac, 0xf64652, 0x9bead, 0xf64555, 0x9bda2, 0xf6475b, 0x9bda3, 0xf6475b, 0x9bda3, 0xf64459, 0x9b3a5, 0xf64459, 0x9b3a7, 0xf64b59, 0x9b2a7, 0xf64b59, 0x9b1a5, 0xf4485d, 0xcb1a9, 0xfa495a, 0xdbeaf, 0xfa495a, 0xdb0a2, 0xfb4a5b, 0xeb0ad, 0xfd4859, 0xab1af, 0xf5495e, 0xa9c9c, 0xfd09e0, 0x1044d5, 0xfb62c0, 0x1578d9, 0xfe6ef1, 0x1148bb, 0xfe70df, 0xc26a2, 0xf45532, 0x9dfa9, 0xff543a, 0x5dfab, 0xf95424, 0x4deab, 0xf85524, 0x2deb5, 0xf85524, 0x4deb5, 0xf85538, 0x7deb4, 0xf9543f, 0x4d8af, 0xfd523f, 0x4dead, 0xff5423, 0xdca4, 0xfda7ca, 0x7ca98, 0xf698ad, 0x1ba088, 0xf28297, 0x1792b1, 0xca8280, 0x2db7d5, 0xd7d3a8, 0x285539, 0xded9a9, 0x295438, 0xded9a9, 0x275526, 0xdddeb4,
				0x215722, 0xdcdfba, 0x22572e, 0xdfddbf, 0x25562e, 0xdcdabf, 0x2a572d, 0xdfd9bf, 0x295730, 0xdfd9bd, 0x295533, 0xded8a2, 0x265531, 0xd9dfbf, 0x25aed1, 0xcae693, 0x22c78f, 0xcad293, 0x2fcdab, 0xc8f7cc, 0x2fad52, 0xdd3f83, 0x2af568, 0xd50097, 0x2afa69, 0xd3029f, 0x24f568, 0xd20d9f, 0x2bf763, 0xd00c90, 0x2dfd49, 0xd221fb, 0x2d9c79, 0xdb1f34, 0x345d05, 0xe84819, 0xb512a, 0xe8746d, 0x23108, 0xf95c8d, 0x6d719, 0xf05b89, 0x9d119, 0xf55a88, 0x8df06, 0xfeb476, 0xffc37, 0xe5d628, 0xbcc3e, 0xeedb25, 0x31f11c, 0xc1a27a, 0x3fd8f2, 0xc75c63, 0x30d4fb, 0xc2585a, 0x28c9f7, 0xdd783d, 0x23a1dc, 0xdc4009, 0x22ee80, 0xd097ca, 0x3fd0ea, 0xdff5f8, 0x3ed3c1, 0xca9aac, 0x3ef928, 0xcd8ca5, 0x350828, 0xcd83a6, 0x350837, 0xc383a4, 0x360f37, 0xc583a7, 0x310f2a, 0xc484a7, 0x330e2a, 0xc685a7, 0x35092a,
				0xc685a7, 0x300929, 0xc685b9, 0x320e36, 0xc182b9, 0x350936, 0xc182b9, 0x340e30, 0xc182b9, 0x340932, 0xc182bd, 0x340928, 0xc182bd, 0x320e30, 0xc383bb, 0x330d36, 0xc382ae, 0x301203, 0xde85b9, 0x2c3369, 0xd3ed86, 0x2c1579, 0xd9ec85, 0x2c1a7d, 0xd4e287, 0x2f157f, 0xd6e287, 0x211b71, 0xd6e287, 0x2e1a71, 0xd7e287, 0x2e157f, 0xd6ed87, 0x21147f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87 };
		System.arraycopy(aFor, 0, key, 99610, aFor.length);
	}

	private static void init334(int[] key) {
		int[] aFor = { 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x21157d, 0xd6ed87, 0x21157d, 0xd6ed87, 0x2e157f, 0xd6ed87, 0x2f1571, 0xd4e287, 0x2f1474, 0xd4e286, 0x291a72, 0xd6e085, 0x291b73, 0xd6ec87, 0x291970, 0xd6ec88, 0x291872, 0xd6eb8b, 0x291872, 0xd6ed89, 0x291f73, 0xd6ec8a, 0x291870, 0xd6eb89, 0x291f70, 0xd6ea8b, 0x291f74, 0xd6ea8b, 0x291d77, 0xd2eb8d, 0x2e1d77, 0xd7e98d, 0x2e1172, 0xd6e98d, 0x2f1170, 0xd6e68a, 0x2a1070, 0xd6e68a, 0x2d1076, 0xd4e78c, 0x231f76, 0xd6e68c, 0x211e71, 0xd6e68c, 0x211e76, 0xd6e78e, 0x211e76, 0xd6e78e, 0x211f74, 0xd6e788, 0x211f72, 0xd6e68a, 0x211f7c, 0xd7e789, 0x211070, 0xd6e88c, 0x211070,
				0xd7e887, 0x2f1375, 0xd0eb9d, 0x2f3920, 0xd6a95a, 0x38ee6f, 0xd1f17a, 0x39e26f, 0xddc259, 0x358e25, 0xdaf39c, 0x285c78, 0xd48187, 0x2b7978, 0xde8080, 0x297777, 0xd08e8e, 0x277776, 0xd38f81, 0x24777d, 0xdc8081, 0x25777d, 0xdc8081, 0x24777d, 0xd38f81, 0x26767d, 0xd38f87, 0x2a747d, 0xd28e84, 0x277472, 0xd28e84, 0x257772, 0xd38f85, 0x2b777d, 0xdc8e85, 0x2b7773, 0xde8087, 0x297971, 0xd68081, 0x29543e, 0xdec144, 0x328f71, 0xd8a967, 0x28b37b, 0xc5a058, 0x2bb96d, 0xc09953, 0x27b417, 0xc28250, 0x25bd1c, 0xc68359, 0x22be1d, 0xc6805f, 0x20bd1d, 0xc6805f, 0x22bd1b, 0xc1835f, 0x25be1b, 0xc38359, 0x29be66, 0xcf825b, 0x29bd1d, 0xcb8059, 0x2fbf1f, 0xcb815d, 0x27bd63, 0xcd8a50, 0x24be7d, 0xc29059, 0x2bb744, 0xc79564, 0x2a8c43, 0xc29b6f, 0x24b959, 0xc3891b, 0x25b55e, 0xc68b1b, 0x22b65e,
				0xc68b1a, 0x25b558, 0xc1881c, 0x25b55b, 0xc3891c, 0x24b559, 0xc3891d, 0x25b459, 0xc1891c, 0x23b755, 0xc38812, 0x23b756, 0xc18814, 0x23b756, 0xc0f713, 0x21b75b, 0xc2891e, 0x27bc26, 0xc0950d, 0x2c8f10, 0xcb9c0f, 0x2dbc34, 0xca8653, 0x2ddccd, 0xdf4e1c, 0x2884f7, 0xd77108, 0x288bf6, 0xd17300, 0x2684f7, 0xd37301, 0x2a89fd, 0xd1720e, 0x2c83d7, 0xd35f65, 0x2ce2e7, 0xda61aa, 0x37239a, 0xeb378d, 0x821a8, 0xed3a99, 0x51ca7, 0xec28e2, 0x416a5, 0xe52ae7, 0x214a4, 0xea2be2, 0xd16a8, 0xe92297, 0xabc, 0xea17a6, 0x400b3, 0xe817a8, 0x33498, 0xef04a7, 0x13ee2, 0xe704a4, 0x53fe9, 0xd900b5, 0x14dc3, 0xebcd67, 0x130dac, 0xecd17d, 0x137ef6, 0xe106bf, 0x114e9e, 0xf6678d, 0x297dae, 0xc05893, 0x296bd9, 0xcc5290, 0x286cd2, 0xca52ed, 0x286fa9, 0xca51ee, 0x156ea9, 0xc92eed, 0x286fae, 0xcb2fef,
				0x2f11af, 0xcd2f90, 0x2d6fd0, 0xcd2f90, 0x2910d3, 0xcd2f96, 0x2e6fd5, 0xcd2f96, 0x2e6fd3, 0xca5090, 0x2e10af, 0xca5090, 0x2f6fd3, 0xcb5095, 0x286edb, 0xc85090, 0x166fd3, 0xca2eec, 0x106faf, 0xcb2cfd, 0x28648f, 0xf33108, 0x12b4a2, 0xef7d42, 0x108bbd, 0xe67243, 0x1485b9, 0xe27f42, 0x1b88ba, 0xe07f42, 0x1786b4, 0xe07f42, 0x1887b4, 0xe17f42, 0x1888ba, 0xe17f42, 0x1987ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42 };
		System.arraycopy(aFor, 0, key, 99910, aFor.length);
	}

	private static void init335(int[] key) {
		int[] aFor = { 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1686ba, 0xee7e42, 0x1986b8, 0xee7e42, 0x1986b8, 0xee7e42, 0x1989b5, 0xe0704c, 0x1988ba, 0xe07d4e, 0x1c8aba, 0xe2734f, 0x1881a0, 0xe1667d, 0x1ebbb7, 0xe1750a, 0x1eb6b6, 0xe10808, 0x1eb5c9, 0xe10808, 0x1eb6b7, 0xe10977, 0x1eb4b6, 0xe10977, 0x1eb7b5, 0xe17771, 0x1eb1bc, 0xe17f67, 0x1ea692, 0xe1436c, 0x18ae9b, 0xe15963, 0x1baf90, 0xec5962, 0x1bae9b, 0xe35766, 0x15a190, 0xed5767, 0x16a09f, 0xea5667, 0x11a09d, 0xe85767, 0x1fae91, 0xe85767, 0x1fae9f, 0xe85665, 0x10ae9d, 0xe8566b, 0x10ae9d, 0xe85665, 0x10ae9f, 0xe85665, 0x10ae9f, 0xe85667, 0x10ae91, 0xe85667, 0x10ae9d, 0xe85667, 0x1fa19e,
				0xe9576a, 0x11ad85, 0xee546c, 0x1182d3, 0xe914ae, 0x45f98, 0xef7c8c, 0x9689f, 0xeb77af, 0xc3dd8, 0xe2406b, 0x10f0b5, 0xec2f4b, 0x13d6b4, 0xe62f4e, 0x1cdab5, 0xe02f49, 0x17d8b0, 0xe32049, 0x16d9b5, 0xe12149, 0x19d9b1, 0xe12147, 0x19d8b3, 0xe12147, 0x19d8b3, 0xe12045, 0x19d6b2, 0xee2145, 0x18d6bc, 0xee2c47, 0x1bd7bc, 0xec2e44, 0x16d8b3, 0xed2d44, 0x16dabc, 0xef2f48, 0x14d8bc, 0xeb2052, 0x14f4ec, 0xec6295, 0x62da6, 0xee04b1, 0x1e1aac, 0xf00fb2, 0x1e1b96, 0xf60ab6, 0x141ba1, 0xc810af, 0x151ba1, 0xcf13aa, 0x161ba7, 0xcf13ac, 0x151ba7, 0xcc13ac, 0x1b1ba2, 0xcc13ac, 0x151ba2, 0xcc13af, 0x1014a6, 0xcb12ae, 0x1018be, 0xc510b1, 0x121aa0, 0xcb12ad, 0x2b1aa4, 0xca1dac, 0x2c13b5, 0xca00a9, 0x2218b1, 0xc903a8, 0x2418b6, 0xc80196, 0x2f178a, 0xce079c, 0x150f92, 0xcb089c, 0x150d91,
				0xcb0b9a, 0x160390, 0xcc099a, 0x150191, 0xcc099a, 0x160191, 0xcc099a, 0x100e97, 0xcc0899, 0x160e8b, 0xcc0899, 0x160f94, 0xcc079f, 0x110194, 0xcd0699, 0x160e88, 0xce079b, 0x150b8f, 0xf11896, 0x1c0e88, 0xfb1daa, 0x1c3d97, 0xfb07f0, 0x1c5d6e, 0xeecfbf, 0x190554, 0xe6f0ab, 0x190a55, 0xe0f2a3, 0x170554, 0xe2f2a2, 0x1b085e, 0xe0f3ad, 0x1d0274, 0xe2dec6, 0x1d6344, 0xebe009, 0x1ba53a, 0xc4b02f, 0x22a534, 0xc8b12a, 0x2fa037, 0xcfaa23, 0x13a32c, 0xc9ab25, 0x15ae27, 0xc8a920, 0x11a036, 0xcaac2a, 0x29bc33, 0xc2af2b, 0x30bc3d, 0xc4a927, 0x23a730, 0xc7aa25, 0x23a328, 0xfca424, 0x27a23c, 0xf5ab15, 0x38b25c, 0xd9eade, 0x215a62, 0xde80af, 0x212e24, 0xd4586d, 0x25114f, 0xc83a5f, 0x2b294e, 0xcd3952, 0x2d3549, 0xf3395e, 0x2a3253, 0xf1385e, 0x2c324d, 0xf23e54, 0x29314e, 0xf13e59, 0x2d2e4a,
				0xf62345, 0x2d2a49, 0xf02245, 0x2a2b49, 0xf12144, 0x2d2854, 0xf02f5b, 0x2c2856, 0xf02f5b, 0x2c2955, 0xf12f58, 0x2c2851, 0xf12f58, 0x2f2a56, 0xf22f44, 0x2c295f, 0xf72146, 0x2e2d57, 0xf72346, 0x212c52, 0xf63d7a, 0x162a31, 0xc30d53, 0x226ac5, 0xddd11f, 0x2225e0, 0xd5df1f, 0x3a26e5, 0xc8dd1f, 0x302be8, 0xccd311, 0x342be7, 0xc3d211, 0x3b2ae7, 0xc3d211, 0x3a25e9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211 };
		System.arraycopy(aFor, 0, key, 100210, aFor.length);
	}

	private static void init336(int[] key) {
		int[] aFor = { 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x3b2aeb, 0xc3d211, 0x3b2ae9, 0xc3d211, 0x342aeb, 0xc3d211, 0x342aeb, 0xccd213, 0x352ae5, 0xc9d212, 0x3324e7, 0xc5d114, 0x3b2bed, 0xc4d119, 0x3134c1, 0xdcf371, 0x366d0f, 0xddeb67, 0x3f8506, 0xe0e758, 0x1b807, 0xe2e658, 0x1b807, 0xe3e559, 0x6bb3b, 0xe5e75b, 0x4bb06, 0xdad962, 0x4a919, 0xe120b9, 0xf8a6a, 0xfc4c87, 0xaa873, 0xf75189, 0xbaa7e, 0xf05088, 0x7a77f, 0xfe5e84, 0xbab71, 0xf0528b, 0xba57d, 0xf05285, 0xba47f, 0xf35c87, 0x4a573, 0xf35c87, 0xba471, 0xf35c89, 0xaab71, 0xf25387, 0xbab71, 0xf35387, 0xbab7f, 0xf35387, 0xaa47f, 0xf35387, 0xaaa70, 0xf35286, 0x8a57e, 0xf35384, 0xaa77e, 0xfc538b, 0x5aa64,
				0xfa518c, 0x5864c, 0xf01330, 0x1d5e05, 0xf07b10, 0x1a6d03, 0xf8702c, 0x1e3958, 0xf345e8, 0x1dea34, 0xe434c9, 0x1bcd36, 0xec35cc, 0x17c137, 0xeb34cb, 0x1dc233, 0xe83bc9, 0x1dc235, 0xea3acf, 0x1dc339, 0xea3acd, 0x12c33e, 0xea3acd, 0x13c23e, 0xea3aca, 0x12cd3f, 0xea3bc8, 0x1ccc31, 0xe834c8, 0x1cce32, 0xeb36c8, 0x10c130, 0xec37c8, 0x10c132, 0xe934c4, 0x12cc37, 0xed34dd, 0x12e061, 0xea7618, 0x3392d, 0xe4133a, 0x80c26, 0xe31a3a, 0x90918, 0xed1906, 0x301712, 0xe5101b, 0x3d1813, 0xea1f14, 0x3f1618, 0xea1f14, 0x3f1618, 0xea1f14, 0x3e1619, 0xea1f16, 0x3e161b, 0xeb1e16, 0x3d161c, 0xe91014, 0x3f1b05, 0xee1315, 0x3d1907, 0xe8110a, 0x34190d, 0xeb1e05, 0xb1714, 0xe91802, 0xf0e16, 0xe3120e, 0xc0e2c, 0xe3120f, 0x70712, 0xd20f1d, 0xb0710, 0xd2001a, 0xf0510, 0xd3001a, 0xb0812, 0xde011a,
				0xa0b10, 0xdb0219, 0xf0813, 0xda0119, 0x20615, 0xda0118, 0x30409, 0xdb0218, 0x30515, 0xda021f, 0x60514, 0xdc001f, 0x4060e, 0xd1031c, 0x60913, 0xe71a04, 0xa021a, 0xed1738, 0xa3604, 0xed0c63, 0xa56fd, 0xf8c42c, 0xf0ec7, 0xf0fb38, 0xf01c6, 0xf6f930, 0x10ec7, 0xf4f931, 0xd03cd, 0xf6f83e, 0xb09e7, 0xf4d555, 0xb68d7, 0xfdea98, 0x12aeaa, 0xcfbdb9, 0x2aa9a3, 0xc0bdbd, 0x25b2a4, 0xfdb7a8, 0x2bb2a2, 0xf2bbab, 0x2eb3af, 0xf4bba8, 0x27bcb8, 0xf7b4ad, 0x25beb8, 0xf1b5ad, 0x24bfbd, 0xf3b3af, 0x26bfbb, 0xf3b7b6, 0x2bb1b1, 0xf0b7bb, 0x29b1ac, 0xe6b98b, 0x20adcf, 0xfcf8b1, 0x85409, 0xf78ec5, 0x82142, 0xfb5401, 0xa1c1c, 0xfa310d, 0x18241f, 0xc72907, 0x1e2010, 0xc62903, 0x1c230b, 0xc32803, 0x2b2311, 0xc52f0b, 0x2b2214, 0xc02c0b, 0x22261e, 0xfe2f0e, 0x272804, 0xf02e0d, 0x272804, 0xff2f08,
				0x272805, 0xf02e09, 0x282b05, 0xf02e09, 0x282b05, 0xf02e0e, 0x28280b, 0xf22d0c, 0x292e02, 0xf22d10, 0x2e2903, 0xf02e0c, 0x132206, 0xfb2c0a, 0x132119, 0xfb2f3e, 0x103a75, 0xcf1d10, 0x2c7e86, 0xd3c45b, 0x2c31a4, 0xdbcb5b, 0x3432a1, 0xc5c858, 0x3d3eaf, 0xc0c757, 0x383fa1, 0xc0c757, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759 };
		System.arraycopy(aFor, 0, key, 100510, aFor.length);
	}

	private static void init337(int[] key) {
		int[] aFor = { 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c759, 0x383fa1, 0xc0c75b, 0x373fa7, 0xc0c75b, 0x383fa1, 0xc0c759, 0x373ea1, 0xc0c759, 0x353ea3, 0xcdc655, 0x3331a4, 0xccc755, 0x3730ad, 0xc1c655, 0x383cab, 0xc7c75f, 0x3a1de1, 0xd1b99b, 0x35d7a5, 0xeb93bb, 0x268db6, 0xed83bc, 0x228eb7, 0xf082ba, 0x2288b7, 0xf683a4, 0x2288b1, 0xf685a5, 0x248baa, 0xec9abf, 0x20bd88, 0xf9f2f9, 0x1d7341, 0xf3c3a2, 0x71b4d, 0xfaedb0, 0x4144d, 0xfeecb6, 0x91b4f, 0xf3e2b1, 0x8144b, 0xf3e2b1, 0xf1449, 0xf4e3b1, 0xc1b47, 0xfbe2b1, 0xe1847, 0xf6e0b1, 0xd1749, 0xf6e0b1, 0xe1646, 0xf8eeb1, 0xf1944, 0xf9e1b1, 0xd1842, 0xfbe0b1, 0x31744, 0xfbe0b1, 0x31a46, 0xfae3b1, 0x41647, 0xfbe2bd, 0x61443, 0xfce1b8, 0x51849,
				0xfae2ae, 0x53a12, 0xf1af65, 0x1fe356, 0xf4c144, 0x1fd451, 0xfcc860, 0x148318, 0xfbfdac, 0xa4c4f, 0xf090b1, 0xf694e, 0xf89eb9, 0x36845, 0xf99dbe, 0x16445, 0xf79ebc, 0x6646, 0xf89ebe, 0x6646, 0xf89eb0, 0x6646, 0xf89eb0, 0x6646, 0xf89eb0, 0x6648, 0xf89eb0, 0x6648, 0xf79fb0, 0x6648, 0xf89eb0, 0x16948, 0xf89eb2, 0x1694e, 0xf69cb6, 0xe6545, 0xf19faf, 0xe4912, 0xfbdf68, 0x1c905f, 0xffb848, 0x159854, 0xf0804b, 0x189e7f, 0xfabc44, 0x239b79, 0xfaaa39, 0x24977a, 0xf1ae46, 0x249478, 0xf1ae46, 0x27947b, 0xf1ae46, 0x259578, 0xf1ae38, 0x259578, 0xf0af46, 0x24977d, 0xf3aa42, 0x209303, 0xf0aa43, 0x259406, 0xf0ad3b, 0x2e9703, 0xf0a428, 0x12950f, 0xf6b92f, 0x1f9033, 0xf78e29, 0x199400, 0xff822e, 0x249d19, 0xf9ac58, 0x2f9b64, 0xf9a15f, 0x259863, 0xf9a15f, 0x2f9b64, 0xfba059, 0x289d66,
				0xf9a126, 0x289d18, 0xf9a126, 0x2d9a18, 0xfba026, 0x239866, 0xfba026, 0x2d9a18, 0xfba026, 0x219919, 0xf8a159, 0x20961f, 0xfdaf5b, 0x1d9d68, 0xf9b44c, 0x1da35e, 0xf4bb43, 0x11a47b, 0xf69e1c, 0x1ec583, 0xed5651, 0x1a9cba, 0xe56945, 0x1a93b9, 0xe36b4d, 0x149cb8, 0xe2644f, 0x1a9db4, 0xe16647, 0x1c979e, 0xe14d2e, 0x1ef0ac, 0xeb71e2, 0x437d1, 0xdf24c7, 0x3931ef, 0xd02adf, 0x330eeb, 0xd320d1, 0x331990, 0xe62da9, 0x3f1492, 0xe62da9, 0x301794, 0xe52daa, 0x3314ea, 0xe52da8, 0x3314ea, 0xe62eaa, 0x3215ea, 0xe02cd6, 0x3610e8, 0xe329d5, 0x341092, 0xfb29c0, 0x3060af, 0xee1a33, 0x19a4f4, 0xe67938, 0x19cbbb, 0xeab1fa, 0x1af9e3, 0xf1d0ed, 0x2dcbcd, 0xccedf6, 0x11ddb2, 0xcae88d, 0x16d0a2, 0xf7e484, 0x11c6a7, 0xfcdd8f, 0x13c8a1, 0xfadc93, 0x1bc3a9, 0xc5ee96, 0x19d7a8, 0xcdee9f, 0x16d5a2,
				0xceec9f, 0x1ad6a3, 0xcfea9d, 0x19d0a3, 0xcfea9d, 0x1ad3a0, 0xcee99a, 0x1ad2a9, 0xcfe89c, 0x17dfa3, 0xcbe9e1, 0x15dfd7, 0xf7eefe, 0x1fc6e7, 0xf4e7f2, 0x19ffee, 0xf5e7c1, 0x1cc296, 0xc1fbe3, 0x258945, 0xda37a2, 0x25c25d, 0xd238a2, 0x20cf58, 0xd536a0, 0x2dc155, 0xd139a2, 0x29c154, 0xd139ac, 0x2ace54, 0xd339ac, 0x24c054, 0xd139ac, 0x26c05a, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac };
		System.arraycopy(aFor, 0, key, 100810, aFor.length);
	}

	private static void init338(int[] key) {
		int[] aFor = { 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ac, 0x26c054, 0xde38ae, 0x26cf52, 0xde38ae, 0x26c056, 0xde38ae, 0x29c156, 0xde38ae, 0x2bc154, 0xd339a2, 0x2ccf53, 0xd338a1, 0x28cf59, 0xdd39a2, 0x28c35d, 0xd739ae, 0x28e11b, 0xda436a, 0x352850, 0xdc694a, 0x47340, 0xd07a45, 0x97d43, 0xd57a4a, 0x87c47, 0xea7a57, 0x97847, 0xe17055, 0xc7d5b, 0xe8724e, 0xa5077, 0xe01b03, 0x1066bd, 0xe5c956, 0x1210a3, 0xece65c, 0x121fa3, 0xe5e85a, 0x101dad, 0xe8e557, 0x1013ac, 0xe7e654, 0x1e11ac, 0xe6e95a, 0x1110ac, 0xe4ea5a, 0x1113a2, 0xe9eb5a, 0x121ca2, 0xe9eb5a, 0x111da3, 0xe6ea54, 0x1012a3, 0xe4eb56, 0x1711a4, 0xe3e856, 0x1b1fa5, 0xe3e850, 0x1411a6, 0xe3e653, 0x1e12a6, 0xe3e651, 0x1a15ac, 0xefe155,
				0x1718a6, 0xe8e24f, 0x1735f5, 0xe4a181, 0xeedae, 0xe8cca0, 0x2d8b4, 0xe7c385, 0xc88f2, 0xfdf647, 0x946a4, 0xf79a5b, 0x863a4, 0xff9453, 0x663af, 0xfe9554, 0x96dae, 0xff9559, 0x76da1, 0xff9559, 0x76da1, 0xff9559, 0x76da1, 0xff9559, 0x76da1, 0xff9559, 0x76da1, 0xff9559, 0x76da1, 0xff9559, 0x76da1, 0xff9559, 0x76da1, 0xff955b, 0x662a7, 0xf0945f, 0x86dac, 0xf79747, 0x841f8, 0xffd484, 0x1699b2, 0xf3bea5, 0x15a2bd, 0xf0b99a, 0x1d97d7, 0xefd1bb, 0x18b432, 0xe73d91, 0x189821, 0xe73f8a, 0x189721, 0xe73f8a, 0x189720, 0xe73f8a, 0x189621, 0xe73f8c, 0x189621, 0xe73e8a, 0x189623, 0xe73f8f, 0x189620, 0xe73f8f, 0x18933d, 0xe73494, 0x18900b, 0xe7048e, 0x1878d1, 0xe326ee, 0x1119c6, 0xf83bdb, 0x102bf3, 0xce3bc5, 0x2704a6, 0xd87e32, 0x27dc99, 0xd87533, 0x27dd9a, 0xd87533, 0x27dc99, 0xd87532,
				0x27df9c, 0xd87631, 0x27dc9a, 0xd87631, 0x27dc9b, 0xd87531, 0x27d29a, 0xd87531, 0x27dd9c, 0xd87537, 0x27d29e, 0xd87737, 0x27d186, 0xd8732e, 0x27f053, 0xd0a31a, 0x388000, 0xdc9618, 0x38b620, 0xdf8c47, 0x37d7d8, 0xc4440a, 0x338ee1, 0xcc7b1e, 0x3381e2, 0xca7916, 0x3c8fe2, 0xca7717, 0x328eec, 0xc9751f, 0x3484c6, 0xc95e76, 0x36e3f4, 0xc362ba, 0x2e208b, 0xf23295, 0x142bad, 0xff00fd, 0xb5193, 0xf4d104, 0xb74b6, 0xf4dd06, 0xb7aad, 0xf4d307, 0xb7aaf, 0xf4d307, 0xb74ac, 0xf4d301, 0xb7bac, 0xf4d301, 0xb7aad, 0xf4dd07, 0xb74ad, 0xf4d304, 0xb7bb4, 0xf4d302, 0x979c6, 0xf6bf18, 0x95ff0, 0xf6ba25, 0xb155a, 0xf96c1a, 0x162802, 0xf20c0d, 0x122634, 0xea7547, 0x150dd5, 0xea8143, 0x1517c6, 0xea62a7, 0x75990, 0xe74db0, 0x3479c, 0xe754a1, 0xc6fc3, 0xf31951, 0xcbffd, 0xf3155a, 0xcbdf1, 0xf3155b,
				0xcbff1, 0xf3155b, 0xcbdf6, 0xf3155b, 0xcbff5, 0xf3145c, 0xcb8ff, 0xf3135b, 0xcb5f4, 0xf3115f, 0xc85d4, 0xf3fcb0, 0x9a987, 0xfd9198, 0x138f82, 0xf597ae, 0x10bcf2, 0xf1f576, 0x1874c0, 0xe7b22e, 0x1844d1, 0xefbe2e, 0x1a47d4, 0xe2bd23, 0x1b45d5, 0xe1bc20, 0x1944d8, 0xe0b320, 0x1b45da, 0xe2b220, 0x174bd8, 0xe3b120, 0x1448d6, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020 };
		System.arraycopy(aFor, 0, key, 101110, aFor.length);
	}

	private static void init339(int[] key) {
		int[] aFor = { 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448d8, 0xecb020, 0x1448da, 0xecb020, 0x1448d8, 0xecb02e, 0x1b49d6, 0xecb02e, 0x1949d4, 0xe1b12c, 0x1c44de, 0xe2b22d, 0x1b45d7, 0xe8b32c, 0x1b49d3, 0xe4b325, 0x196de7, 0xeac26f, 0x4be38, 0xede404, 0x34dc2a, 0xe0f600, 0x37df2b, 0xeef705, 0x32df34, 0xd0f707, 0x37d629, 0xdcca0f, 0x31df17, 0xd7cc0b, 0x32e84a, 0xdca535, 0x2d27f2, 0xdb9602, 0x2c4cfb, 0xd1bb04, 0x2d41f9, 0xd5b90f, 0x2341f8, 0xd4ba02, 0x2c43f9, 0xdab900, 0x2f43f6, 0xdbba05, 0x2f42f2, 0xdbba0b, 0x2d4df7, 0xdbba0b, 0x2d4df2, 0xd5b50a, 0x2f43fd, 0xd5b50a, 0x234dfd, 0xd0b40a, 0x234dff, 0xd7b40c, 0x2d42ff, 0xd6b70a, 0x2c4efd, 0xd5b905, 0x2941f2, 0xd0b80b, 0x2440f0,
				0xd7b80b, 0x2144f3, 0xdebe1d, 0x2169a3, 0xd0fed6, 0x3aaff9, 0xdf88f4, 0x379fe7, 0xd483c8, 0x3fcbbd, 0xceb313, 0x3d18ce, 0xc0c133, 0x3f39cc, 0xc8ce3b, 0x3036c1, 0xc7c138, 0x3f39c0, 0xc8ce35, 0x3036cd, 0xc8ce35, 0x3036cd, 0xc8ce35, 0x3036cd, 0xc8ce35, 0x3036cd, 0xc8ce35, 0x3036cd, 0xc8ce35, 0x3036cd, 0xc8ce35, 0x3036cd, 0xc8ce35, 0x3036cd, 0xc9c135, 0x3237cf, 0xcbc337, 0x3034c3, 0xcfcc2c, 0x3018ec, 0xcb8a90, 0x26c1a6, 0xcce4b3, 0x28f2a5, 0xcbe889, 0x20ded6, 0xd1845b, 0x2c09e0, 0xd3cd06, 0x2c23fc, 0xd3d009, 0x2c22fa, 0xd3d00b, 0x2c21fa, 0xd3d00b, 0x2c22f8, 0xd3d00b, 0x2c22f8, 0xd3d009, 0x2c21f8, 0xd3d009, 0x2c21fd, 0xd3d308, 0x2c27ff, 0xd3d710, 0x2c3cf3, 0xd3ed4a, 0x2c5dc8, 0xd3dc98, 0x2a8ca9, 0xc7a48b, 0x22aea1, 0xf5a59d, 0x1ff11c, 0xe05cd3, 0x1fbb27, 0xe04bd3, 0x1fb927,
				0xe049d4, 0x1fb825, 0xe04ad4, 0x1fb825, 0xe04ad4, 0x1fb824, 0xe04bca, 0x1fb83a, 0xe04aca, 0x1fbb3b, 0xe04aca, 0x1fb839, 0xe04bc8, 0x1fb839, 0xe049d6, 0x1fba25, 0xe056cc, 0x1fec67, 0xea813a, 0xaa926, 0xe8bf31, 0xc9f09, 0xeaa66f, 0x2fdf0, 0xf16e22, 0x6a4c9, 0xf95136, 0x6abca, 0xff533e, 0x9a5ca, 0xff5d3f, 0x7a4c4, 0xfc5f37, 0x1aeee, 0xfc745e, 0x3c9dc, 0xf54992, 0x1b74a1, 0xfb6686, 0x1e7dcd, 0xfb4ea0, 0xb223d, 0xf497e7, 0xb7e1b, 0xf48fec, 0xb7c19, 0xf488ea, 0xb7c1b, 0xf488ea, 0xb7b1f, 0xf488ea, 0xb7b1f, 0xf489ec, 0xb791f, 0xf497f0, 0xb6401, 0xf494ef, 0xb671e, 0xf493eb, 0xb7d13, 0xf488ec, 0xb7016, 0xf49acc, 0xa314f, 0xf24906, 0x10a1a, 0xdf2a08, 0x3f1845, 0xc06bd9, 0x3fce1b, 0xc00ad1, 0x3fde6b, 0xc07fe9, 0x3630ae, 0xe9208e, 0xf25a1, 0xec35e6, 0xb739e, 0xf4d759, 0xb3aaf,
				0xf4ce5d, 0xb21ae, 0xf4d15a, 0xb22ac, 0xf4d059, 0xb21ac, 0xf4d059, 0xb23af, 0xf4d75b, 0xb22b5, 0xf4d645, 0xb39bd, 0xf4d24d, 0xb008e, 0xf4a50b, 0xec849, 0xfc8c56, 0x11a943, 0xf7b56b, 0x1d810f, 0xf1da99, 0x1555b, 0xfe99ab, 0x16c54, 0xf795ab, 0x16252, 0xf99aa4, 0x16d51, 0xf895a5, 0x6d5d, 0xf895a5, 0x3635f, 0xfa94a5, 0xf6d5d, 0xfa94a5, 0xd6d53, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5 };
		System.arraycopy(aFor, 0, key, 101410, aFor.length);
	}

	private static void init340(int[] key) {
		int[] aFor = { 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xd6d5d, 0xf595a5, 0xc625d, 0xf595a5, 0xd6d5d, 0xf595ab, 0x26c53, 0xf595ab, 0x6c57, 0xf794ad, 0xc6359, 0xf094ad, 0x86c57, 0xfc9bab, 0xf6154, 0xf39aad, 0xd727e, 0xf1b9d3, 0xf1740, 0xf38ec4, 0xab9, 0xf271c4, 0x60dba, 0xf1773a, 0x90eba, 0xf679c6, 0x926a2, 0xfc18e2, 0x1503f9, 0xf111e2, 0x1234a3, 0xe27b22, 0x10f8ea, 0xe64918, 0x1e92e2, 0xe06a1d, 0x1b91e0, 0xec6814, 0x1a90e7, 0xe06b11, 0x1a92e6, 0xe06b11, 0x1d97e6, 0xe26c1e, 0x1d95e5, 0xe26d18, 0x1d9be7, 0xe26c18, 0x1d97e2, 0xe26c1a, 0x1d94e2, 0xe26c18, 0x1d96e4, 0xe26d18, 0x1f91e2, 0xe06a18, 0x1f90e0, 0xe06818, 0x1f9fe3, 0xe06818, 0x1f91e2, 0xe06d19, 0x1a97e1, 0xe06b18, 0x1c95e3, 0xe36d12,
				0x1cb4d7, 0xeb2aa9, 0x1b749c, 0xf2468e, 0x18589b, 0xfb45b5, 0x1c05d9, 0xf56c7b, 0x18f3a8, 0xe3205e, 0x1cd8a1, 0xeb2159, 0x13d9a3, 0xe42e5a, 0x1dd7ad, 0xe52f5b, 0x1dd7a3, 0xe52f5b, 0x1dd7a3, 0xe52f5b, 0x1dd7a3, 0xe52f5b, 0x1dd7a3, 0xe52f5b, 0x1dd7a3, 0xe52f5b, 0x1dd7a3, 0xe52f5b, 0x1dd7a3, 0xe52f5b, 0x1dd7a3, 0xe4205b, 0x1fd6a1, 0xe62357, 0x1dd4a1, 0xe22351, 0x1df292, 0xe163ef, 0x1129db, 0xfc0dcf, 0x151ad9, 0xf307e9, 0x1b308c, 0xf36a18, 0x1dfbde, 0xe2362d, 0x1dced2, 0xe2312d, 0x1dcfd2, 0xe2302f, 0x1dced2, 0xe2302f, 0x1dced0, 0xe2302f, 0x1dced0, 0xe2312d, 0x1dccd0, 0xe2312c, 0x1dcfd3, 0xe2302c, 0x1dced3, 0xe23029, 0x1dcadb, 0xe21064, 0x1da31b, 0xea2051, 0x1e717f, 0xf3595d, 0x145370, 0xc35f31, 0x2709b9, 0xd8bb6f, 0x274a90, 0xd8b76f, 0x274990, 0xd8b76f, 0x274990, 0xd8b66d,
				0x274890, 0xd8b66b, 0x274b91, 0xd8b56b, 0x274a90, 0xd8b56b, 0x274a96, 0xd8b469, 0x274b96, 0xd8b469, 0x274b92, 0xd9b66a, 0x264990, 0xd9bf7e, 0x267dd1, 0xca128a, 0x173593, 0xf12d8b, 0x1232bc, 0xf40bda, 0x1c5045, 0xefc397, 0x18097c, 0xe7fc83, 0x18067f, 0xe1fe8b, 0x17087f, 0xe1f08a, 0x190971, 0xe2f282, 0x1f035b, 0xe2d9eb, 0x1d6469, 0xebe427, 0x6df0a, 0xdbcd2c, 0x3ad77d, 0xe7e50b, 0x195a7, 0xfe2a4c, 0x1dfb3, 0xfc234c, 0xdcb3, 0xfc234e, 0x2dcb3, 0xfc234e, 0x2dcb1, 0xfc234e, 0xdcb1, 0xfe234e, 0x1ddb1, 0xfe214f, 0x1deb2, 0xfe2048, 0x1deb1, 0xfe214b, 0x1deb6, 0xfe204b, 0x1dbb2, 0xfe3c6b, 0x190e3, 0xfde9ae, 0x9adb1, 0xd2b2a5, 0xe83f6, 0xf4f152, 0x9589f, 0xf6924c, 0x94c8e, 0xf6e40a, 0x3b14d, 0xdebe56, 0x39bc7d, 0xe7b53c, 0x4fc41, 0xfb568e, 0x4a371, 0xfa5d8f, 0x5a370, 0xfa5d8f,
				0x5a370, 0xfa5d8f, 0x5a170, 0xfa5c8f, 0x5a270, 0xfa5d8f, 0x4a272, 0xfb5d8f, 0x4a170, 0xfb5988, 0x48441, 0xfe22c3, 0x1347f8, 0xfb7be0, 0x135bf1, 0xf040d9, 0x1679be, 0xfa1c21, 0x880e8, 0xf7541a, 0x8a3e5, 0xfd5b1a, 0xbade2, 0xf25514, 0xaa2e1, 0xf25512, 0x5acea, 0xfd5412, 0x6a2e8, 0xff5512, 0x8acea, 0xfd5512, 0xaace4, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412 };
		System.arraycopy(aFor, 0, key, 101710, aFor.length);
	}

	private static void init341(int[] key) {
		int[] aFor = { 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xaacea, 0xf25412, 0xba3ea, 0xf25412, 0xaacea, 0xf25412, 0x5adea, 0xf25412, 0x7adee, 0xf25414, 0x8aced, 0xf15b15, 0x6acec, 0xf35411, 0x6aeee, 0xff5715, 0xa6f3, 0xff4f24, 0xacea, 0xfc7726, 0x7a5ea, 0xf86a25, 0x7a5f5, 0xf8693a, 0x7a3f1, 0xf86633, 0x7f8a4, 0xf098f1, 0x11bae9, 0xf1aefc, 0x138ac1, 0xfcc5bc, 0xf457d, 0xf7f793, 0x2f6b, 0xfdda94, 0x7216b, 0xfddd92, 0x62767, 0xf9db91, 0x62d62, 0xf9d891, 0x62c62, 0xf9de97, 0x62f6f, 0xf9c096, 0x62e6f, 0xf9df99, 0x62c68, 0xf9d887, 0x62b69, 0xf9d899, 0x6296c, 0xf9d89b, 0x6296c, 0xf9db9b, 0x6286e, 0xf9db9b, 0x62b62, 0xf9da98, 0x62860, 0xf9dc95, 0x6287a, 0xf9de8a, 0x62970, 0xf9dc84, 0x6054f,
				0xfda1c7, 0x9cbfc, 0xe4f6e8, 0xfd5fe, 0xeeced4, 0xdf6b1, 0xefaa26, 0x839e1, 0xf1f410, 0xe03ef, 0xfbfa17, 0xd02e0, 0xfbf416, 0x20ce0, 0xfbf416, 0x30cee, 0xfbf416, 0x30cee, 0xfbf416, 0x30cee, 0xfbf416, 0x30cee, 0xfbf416, 0x30cee, 0xfbf416, 0x30cee, 0xfbf416, 0x30cee, 0xfbf416, 0x30cee, 0xfbf416, 0x203ee, 0xf5f618, 0xc01e0, 0xf3f611, 0xc24d2, 0xf7b6af, 0x7fc9f, 0xead88f, 0x1cf9c, 0xe6d2b1, 0xfe7d5, 0xe9bf47, 0x53083, 0xf8fd70, 0x7078f, 0xfcf871, 0x2078e, 0xfdf971, 0x2078c, 0xfdf971, 0x2078e, 0xfdf871, 0x2068e, 0xfdf871, 0x2058c, 0xfdf870, 0x2068f, 0xfdf970, 0x2048e, 0xfdfa74, 0x20187, 0xfdd847, 0x269c7, 0xf4178e, 0x1b5ba5, 0xf27885, 0x1770ae, 0xc07cef, 0x252969, 0xda98bd, 0x256942, 0xdb97bd, 0x276842, 0xdb97bd, 0x276842, 0xd997bd, 0x266942, 0xd995bd, 0x266e40, 0xd992bb,
				0x266d46, 0xd892b9, 0x266d46, 0xd892b9, 0x266d46, 0xd892b9, 0x276d44, 0xd890bd, 0x276d47, 0xd899ad, 0x275901, 0xc83759, 0x17134a, 0xff055f, 0x1b1b6a, 0xfd220c, 0x1a7892, 0xe9eb40, 0x1e21ab, 0xe1d454, 0x1e2ea8, 0xe7d65c, 0x1120a8, 0xe7d85d, 0x1f21a6, 0xe4da55, 0x192b8c, 0xe4f13c, 0x1b4cbe, 0xedcdf2, 0x6f2d5, 0xdbe7f5, 0x38fdbb, 0xe5cdc9, 0x1a06e, 0xfe1d88, 0x1eb77, 0xfe1488, 0x1eb77, 0xfe148a, 0x1ea77, 0xfe148a, 0x1eb77, 0xfe148a, 0xeb77, 0xfe1488, 0x1ea77, 0xff1788, 0xe977, 0xff1688, 0xea73, 0xff1589, 0xea73, 0xff1589, 0xe97e, 0xff0fa8, 0xa220, 0xf7d568, 0x79072, 0xddb063, 0x9e36, 0xf8f492, 0x45443, 0xfb9299, 0x47153, 0xf3ddd6, 0x18a95, 0xdd9a86, 0x379ea7, 0xd59590, 0x31d2e4, 0xce7122, 0x319fd9, 0xcd6327, 0x329ed8, 0xcd6327, 0x329dd8, 0xcd6327, 0x329ed8, 0xcd6225,
				0x329ed8, 0xcd6224, 0x329cde, 0xcd6325, 0x329ede, 0xcd6831, 0x32bff1, 0xc5268c, 0x2c75b6, 0xc95faf, 0x2f49b9, 0xcc5588, 0x2b11fb, 0xc06452, 0x31ce80, 0xcd1274, 0x32eb8b, 0xc71376, 0x31e58e, 0xcb1c79, 0x31e58e, 0xc91c7a, 0x3ce582, 0xcb1c7a, 0x32eb80, 0xcb1c7a, 0x3ce480, 0xcb1d78, 0x33e58e, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78 };
		System.arraycopy(aFor, 0, key, 102010, aFor.length);
	}

	private static void init342(int[] key) {
		int[] aFor = { 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x33e580, 0xcb1d78, 0x30ea8e, 0xc91278, 0x30e580, 0xc81d78, 0x3fe480, 0xc81d78, 0x3de482, 0xc81d78, 0x32e784, 0xca1f7c, 0x3de885, 0xca1079, 0x3ee984, 0xc81e7d, 0x34e98c, 0xcb1263, 0x34ec91, 0xc91162, 0x36ea95, 0xc9136f, 0x36eb95, 0xc91c6d, 0x36e499, 0xc91670, 0x36abdc, 0xc5da87, 0x18fc91, 0xf9eb82, 0x18cfb8, 0xf582c1, 0x4fd7c, 0xfe4e91, 0x2956b, 0xfd6294, 0x79969, 0xf0639a, 0x98c79, 0xf06eab, 0x8a26a, 0xf11cd2, 0x9aa65, 0xf21edd, 0xead61, 0xf11fdd, 0xeae67, 0xf11dd0, 0xda965, 0xf71fd6, 0xa964, 0xf71fd0, 0xeab69, 0xf419d4, 0xdaa69, 0xfa1ed2, 0x9a96b, 0xfd1fd2, 0x7ab6c, 0xfb1fac, 0xaa11, 0xf81ca9, 0xeab1b, 0xfc13af, 0xbd764,
				0xf402be, 0xbcd79, 0xf069f0, 0x619cd, 0xea5dde, 0x37bca, 0xdc62e2, 0x3e5083, 0xdc0711, 0x3a8ad2, 0xc2403d, 0x3db8c2, 0xcb423b, 0x3dbacc, 0xcb4c38, 0x32b4cc, 0xca433f, 0x32bbc7, 0xca433f, 0x32bbc7, 0xca433f, 0x32bbc7, 0xca433f, 0x32bbc7, 0xca433f, 0x32bbc7, 0xca433f, 0x32bbc7, 0xca433f, 0x32bbc7, 0xca433f, 0x32bbc7, 0xca433f, 0x32bbc7, 0xc74c33, 0x30b5c5, 0xcf4d34, 0x309ef7, 0xc90d8a, 0x2646ba, 0xcb62aa, 0x2174b8, 0xc66d95, 0x2e59f6, 0xc80f65, 0x2381a0, 0xdd4d52, 0x22b7ad, 0xde4852, 0x20b7ad, 0xdf4852, 0x20b7af, 0xdf4852, 0x20b7ad, 0xdf4852, 0x20b7ad, 0xdf4952, 0x20b7af, 0xdf4a53, 0x20b4ac, 0xdf4b53, 0x20b6ad, 0xdf4857, 0x20b2b8, 0xdd6a05, 0x22de85, 0xd6a1cc, 0x3bece5, 0xd2cac5, 0x37c3e9, 0xe2c9d6, 0x19a52, 0xfe2887, 0x1da79, 0xff2486, 0x3db79, 0xf82486, 0x3db79, 0xfd2486,
				0x2d979, 0xfd2586, 0x2de79, 0xfd2284, 0x2dd7b, 0xfe2284, 0x2dd7b, 0xfe2284, 0x2dd7b, 0xfc2284, 0x3dd79, 0xfc2283, 0x3dc7b, 0xfc2e9c, 0x39137, 0xf3ff6f, 0x2cdb7c, 0xc5ce68, 0x21d05d, 0xc7e93b, 0x20b3a5, 0xd22174, 0x25eb9f, 0xda1e60, 0x25e49c, 0xdf1d69, 0x29eb9d, 0xdf1368, 0x27ea93, 0xdc1160, 0x21e0b9, 0xdc3a09, 0x23878b, 0xd605c0, 0x3d46e8, 0xe650f7, 0x54ab9, 0xe565ca, 0x10f69, 0xfeb5b6, 0x14149, 0xffbfb7, 0x4148, 0xffbfb7, 0x434a, 0xffbeb7, 0x414a, 0xffbeb7, 0x1414a, 0xffbeb5, 0x1414a, 0xfdbcb5, 0x1414a, 0xffbeb5, 0x4148, 0xffbeb2, 0x4148, 0xffbfbf, 0x4249, 0xffa49a, 0xa12, 0xf67254, 0x63743, 0xdc164e, 0x2381a, 0xfb5fbf, 0x6c46b, 0xf9018f, 0x6e459, 0xf055c9, 0x3098e, 0xe2119f, 0xe1a84, 0xec15ab, 0xc57ce, 0xf3ca74, 0xc2381, 0xf6db7c, 0x92083, 0xf6dd7c, 0x92383, 0xf6dd7f,
				0x92384, 0xf6dd7f, 0x92085, 0xf6dc7f, 0x92284, 0xf6dd7e, 0x9218f, 0xf6d56f, 0x918c0, 0xfd94af, 0x1bd79d, 0xfdcb87, 0x15db98, 0xf2fba5, 0x1eae25, 0xed229c, 0x189c41, 0xe378b9, 0x1e8246, 0xeb7abb, 0x1d8e4c, 0xe679b4, 0x1c8043, 0xe478b5, 0x11814d, 0xe478b5, 0x1d8f4f, 0xe478b5, 0x1c804f, 0xeb78b5, 0x13804d, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb };
		System.arraycopy(aFor, 0, key, 102310, aFor.length);
	}

	private static void init343(int[] key) {
		int[] aFor = { 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x138043, 0xeb78bb, 0x108f4d, 0xe977bb, 0x108043, 0xe878bb, 0x1f8143, 0xe878bb, 0x1d8141, 0xe878bb, 0x108140, 0xe978b9, 0x118041, 0xe677b6, 0x118f4c, 0xe778b5, 0x1f8043, 0xe47ab5, 0x1e8341, 0xe478b4, 0x1e824c, 0xe77bb7, 0x1d834a, 0xe07bb6, 0x1f804e, 0xe076a4, 0x1fb20f, 0xf2c658, 0x29e049, 0xcaf85b, 0x2bdc61, 0xc5921d, 0x2b12a0, 0xd2a64b, 0x247ebb, 0xd88841, 0x2277b8, 0xde8a55, 0x216184, 0xdeaa28, 0x2936a9, 0xdd4ac2, 0x2d23a7, 0xdb46cd, 0x2c22a3, 0xd541cf, 0x2f22a7, 0xd546c2, 0x2f22a4, 0xd847c2, 0x2d20a4, 0xde47ce, 0x2b22a0, 0xde47cf, 0x2823a0, 0xdd46ce, 0x2d2ea4, 0xdf49ce, 0x2a2aa3, 0xdc49ce, 0x282ba2, 0xdc4ec5, 0x2c2ba5,
				0xcb4cc3, 0x38cb57, 0xc77292, 0x38cc2f, 0xcd51a8, 0x3e2393, 0xd36480, 0x3b4c93, 0xdb56b4, 0x3f64d6, 0xdb3244, 0x33bc80, 0xca7770, 0x358f8f, 0xc07677, 0x368e80, 0xc17975, 0x3b8080, 0xc37773, 0x3b8f8b, 0xc37773, 0x3b8f8b, 0xc37773, 0x3b8f8b, 0xc37773, 0x3b8f8b, 0xc37773, 0x3b8f8b, 0xc37773, 0x3b8f8b, 0xc37773, 0x3b8f8b, 0xc37773, 0x3b8f8b, 0xcc7673, 0x388c85, 0xca7577, 0x3e8e84, 0xc1776a, 0x3ea3ab, 0xc730d6, 0x287ae2, 0xc559f7, 0x2f41ee, 0xc85ddc, 0x206eba, 0xc7392e, 0x29b5eb, 0xd67c1a, 0x298be5, 0xd6761a, 0x2989e5, 0xd6761a, 0x2989e7, 0xd6761a, 0x2989e5, 0xd7761a, 0x2989e5, 0xd6761a, 0x2988e7, 0xd6771a, 0x2988e5, 0xd7771a, 0x2888e5, 0xd7761f, 0x288ff1, 0xd7554c, 0x2de734, 0xdf6770, 0x313658, 0xd81c78, 0x3b1053, 0xea1b6f, 0xa4fec, 0xf5ff38, 0xa0ec7, 0xf5f338, 0xa0dc7,
				0xf5f338, 0xa0cc7, 0xf5f238, 0xa0fc7, 0xf5f238, 0xa0cc7, 0xf5f238, 0x90dc7, 0xf5f238, 0x90dc7, 0xf5f238, 0xe0dc7, 0xf5f23a, 0x80dc3, 0xf7f23b, 0x80fcf, 0xf7fe2a, 0x83f86, 0xe74edd, 0x3969ca, 0xd070d3, 0x346ee6, 0xd25780, 0x350d1e, 0xc79fcf, 0x305524, 0xcfa0db, 0x305a27, 0xcaa3d2, 0x3c5526, 0xcaadd3, 0x325428, 0xc9afdb, 0x345e02, 0xc984b2, 0x363930, 0xc2bb7c, 0x24fa57, 0xfcef74, 0x18f624, 0xfbc650, 0x12abf3, 0xed102d, 0x12e6d2, 0xec182e, 0x13e7d1, 0xec192e, 0x13e4d1, 0xec1a2e, 0x13e5d1, 0xed1a2e, 0x12e5d1, 0xed1a2e, 0x12e4d1, 0xec1a2f, 0x17e5d1, 0xec1a2c, 0x17e5d7, 0xeb1a2d, 0x15e5d7, 0xea1a2f, 0x15e6d9, 0xea0508, 0x15ab81, 0xe3d3c4, 0x1294d7, 0xc9b5df, 0x169892, 0xecfe30, 0x1260ed, 0xeda502, 0x1246e3, 0xeaf07d, 0x12952c, 0xf7b139, 0x10a028, 0xc8b033, 0x13f264, 0xeb67ce,
				0x14b823, 0xef4cdf, 0x10b520, 0xef49df, 0x10b622, 0xee49d8, 0x12b620, 0xec49d8, 0x13b620, 0xec49da, 0x13b627, 0xec49df, 0x13b33a, 0xec5cf5, 0x13996c, 0xe11937, 0x62c10, 0xe03c08, 0x7352a, 0xe1176c, 0xd73e6, 0xf4d020, 0xb06ce, 0xf0eb32, 0xa12cd, 0xfdea31, 0x41ec9, 0xffeb3e, 0x51dcb, 0xfde53d, 0x91fc5, 0xfce63d, 0x511c7, 0xfce63d, 0x41ec7, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d };
		System.arraycopy(aFor, 0, key, 102610, aFor.length);
	}

	private static void init344(int[] key) {
		int[] aFor = { 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x41ec5, 0xfce63d, 0x51ecb, 0xfce63d, 0x41ec5, 0xfce63d, 0xb1fc5, 0xfce63d, 0xb1ec7, 0xfce63d, 0x910c5, 0xf0e93c, 0x911ca, 0xfee73e, 0x71ec7, 0xffe43e, 0xb1cc7, 0xf8eb3f, 0x1cca, 0xf8e43c, 0xf1dc4, 0xfcea3e, 0x91cc5, 0xf1eb39, 0x810c1, 0xf7e629, 0x82380, 0xe050d2, 0x3874d9, 0xda62d6, 0x3b41ea, 0xd51094, 0x3a912a, 0xcd25c0, 0x35ff32, 0xca06cf, 0x36f934, 0xc802dc, 0x37de60, 0xc579e0, 0x1a19dd, 0xc928c5, 0x23bce, 0xd335dc, 0x33bca, 0xd235dc, 0x3bcc, 0xd235dc, 0x638ce, 0xd435da, 0x725cc, 0xd734d4, 0x1825cf, 0xd734d4, 0x524cd, 0xd735db, 0x727cf, 0xd735db, 0x63bcf, 0xd436d9, 0x53acc, 0xd12bdb, 0x1e39cb, 0xdf2ddd, 0xc6985, 0xf3e727, 0xc5692,
				0xe2c111, 0x12b02b, 0xf9fa38, 0x10d32c, 0xf1c804, 0x19fa67, 0xfeaff4, 0x172037, 0xeeebc7, 0x111338, 0xe4eac2, 0x131d35, 0xeae5c3, 0x111f3b, 0xe8e7cd, 0x101f35, 0xe8e7cd, 0x101f35, 0xe8e7cd, 0x101f35, 0xe8e7cd, 0x101f35, 0xe8e7cd, 0x101f35, 0xe8e7cd, 0x101f35, 0xe8e7cd, 0x101f35, 0xe8e7cd, 0x101f35, 0xe7e6cd, 0x121c3b, 0xe0e5c9, 0x151f3a, 0xeae6d6, 0x153517, 0xeca66a, 0x3ec5c, 0xefc84b, 0x7dd50, 0xe4c461, 0xf605, 0xe6a096, 0x82d55, 0xf7e4a5, 0x8125a, 0xf7efa5, 0x8105a, 0xf6efa5, 0x9115a, 0xf6eea5, 0x9115a, 0xf7eea5, 0x9115a, 0xf6eea5, 0x91158, 0xf6eea5, 0x8105a, 0xf5eea5, 0xa115a, 0xf5efa0, 0xa164e, 0xf5caf1, 0x97b89, 0xfdf9cd, 0x13a8e5, 0xf68ffe, 0x2985d8, 0xfa8ae7, 0x1bd261, 0xe463b4, 0x1b914b, 0xe46cb4, 0x1b924b, 0xe46db4, 0x1b924b, 0xe46db4, 0x1b934b, 0xe46db4,
				0x1b934b, 0xe46cb4, 0x18934b, 0xe46cb4, 0x1b934b, 0xe46cb4, 0x18934b, 0xe46cb6, 0x1a934e, 0xe56cb8, 0x1a934e, 0xe567a6, 0x1aa50b, 0xf7ca52, 0x2cee44, 0xc8f852, 0x2be767, 0xcdde01, 0x2a849f, 0xd8164e, 0x2fdca5, 0xd0295a, 0x2fd3a6, 0xd52a53, 0x23dca7, 0xd52452, 0x2ddda9, 0xd6265a, 0x2bd783, 0xd60d33, 0x29b0b1, 0xdd32ff, 0x3476cf, 0xee61e8, 0xb79b9, 0xee54ca, 0x43f6a, 0xfb82b1, 0x47a4e, 0xff85b2, 0x17a4d, 0xfe84b2, 0x17a4d, 0xfe84b2, 0x17b4d, 0xfe84b2, 0x1794d, 0xfe84b2, 0x1784c, 0xfe87b1, 0x784a, 0xfa87b0, 0x784c, 0xf986b6, 0x4794c, 0xfb86b6, 0x47a40, 0xfb9e92, 0x42f1e, 0xf3575b, 0x1e114a, 0xc4334c, 0x1a0307, 0xec65a6, 0x10fb7b, 0xef3e88, 0x10da61, 0xef66ca, 0x111692, 0xff2789, 0x163c87, 0xce2a91, 0x1716de, 0xe79445, 0x185aa6, 0xe7b458, 0x184fa7, 0xe7b158, 0x194ea5,
				0xe2b15f, 0x194ea4, 0xe5b15e, 0x1a4ea6, 0xe5b15c, 0x1a4ea1, 0xe5b054, 0x1a468f, 0xe5af4f, 0x1a13c9, 0xf56783, 0x174f9f, 0xf7498b, 0x154ca3, 0xf06af2, 0x1196a, 0xfea4b0, 0x14e4c, 0xfabbb3, 0x2424e, 0xfabbb5, 0x6434c, 0xfdb6bb, 0x7404e, 0xfeb9b9, 0xa4341, 0xffbab9, 0x74243, 0xfeb5b9, 0x74243, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9 };
		System.arraycopy(aFor, 0, key, 102910, aFor.length);
	}

	private static void init345(int[] key) {
		int[] aFor = { 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x74241, 0xffbab9, 0x6424f, 0xffbab9, 0x74241, 0xffbab9, 0x84243, 0xffbab9, 0x84341, 0xf0bbb9, 0x84341, 0xf0bbb7, 0xb4c43, 0xf0bbb7, 0xb4c43, 0xf2b4b5, 0x74d49, 0xf2b4b5, 0xb434d, 0xf2bbbb, 0xb4242, 0xfcbabe, 0xb4e45, 0xf2b9b9, 0x94240, 0xf6b4a7, 0x97200, 0xe30650, 0x38205b, 0xdd364b, 0x381375, 0xd45f09, 0x26dec8, 0xde6d24, 0x29b5d3, 0xd6422c, 0x2fbfd0, 0xd0443b, 0x2f9d82, 0xd239fe, 0x3e61cc, 0xdc47c5, 0x74fc5, 0xe74bc1, 0x3a4ecb, 0xe748c6, 0x394fca, 0xe748c4, 0x394dca, 0xe748da, 0x384bd5, 0xdd46cd, 0x3f56d4, 0xe258c0, 0x156d2, 0xe35cd9, 0x35ade, 0xe15cd6, 0x559dc, 0xe75ad4, 0x558d8, 0xe55bd2, 0x395fd5, 0xe952c0, 0x3e6f97, 0xc1e533,
				0x3e578b, 0xcbf707, 0x35754b, 0xc12055, 0x2d0e4d, 0xcc176b, 0x27240e, 0xce719d, 0x23e158, 0xd82ca9, 0x27d456, 0xd22dac, 0x24db5a, 0xdc2dad, 0x26d554, 0xde2dac, 0x26d554, 0xde2dac, 0x26d554, 0xde2dac, 0x26d554, 0xde2dac, 0x26d554, 0xde2dac, 0x26d554, 0xde2dac, 0x26d554, 0xde2dac, 0x26d554, 0xde2dac, 0x26d554, 0xde2dac, 0x26d55a, 0xd12da9, 0x28d55a, 0xd72db4, 0x28fe76, 0xd46d08, 0x3b273c, 0xd6022a, 0x3e1530, 0xdc0e02, 0x3a3867, 0xdf6ff6, 0x33e134, 0xcc2dc5, 0x33db3a, 0xcc25c5, 0x33da3a, 0xcd25c5, 0x32db3a, 0xcd24c5, 0x32db3a, 0xcc24c5, 0x33da3a, 0xcc25c5, 0x33db3a, 0xcc26c4, 0x33d83b, 0xcd27c4, 0x32d83b, 0xcd26c0, 0x32df30, 0xcd058f, 0x32b7f5, 0xc7c8b7, 0x2b8592, 0xcdad8e, 0x2ca1a4, 0xfcae9a, 0x23f91f, 0xdc4ac9, 0x23b836, 0xdc47c9, 0x23b836, 0xdd47c9, 0x21b836, 0xda47cb,
				0x26b836, 0xd847cb, 0x27b934, 0xd847cb, 0x27b834, 0xd847cb, 0x27b934, 0xd847cb, 0x27b934, 0xd846c9, 0x27b93e, 0xd846c8, 0x27b83b, 0xd84cdd, 0x278870, 0xc9f829, 0x13db3a, 0xf5c322, 0x16dc17, 0xf0e571, 0x17bfef, 0xe42c3d, 0x13e6d6, 0xec1329, 0x13e9d5, 0xea1121, 0x12e9d7, 0xe41122, 0x1debde, 0xe6102d, 0x1be1f4, 0xe53a45, 0x1a86c4, 0xef078a, 0x547a5, 0xde5580, 0x3642d1, 0xd16ca3, 0x3a073d, 0xc5bce5, 0x3a4518, 0xc1bae3, 0x3a451c, 0xc6bae3, 0x39451c, 0xc6bbe3, 0x39451c, 0xc6b8e3, 0x39431c, 0xc6b9e3, 0x39421c, 0xc6bfe6, 0x38421e, 0xc6bde5, 0x38421a, 0xc6bde5, 0x39421a, 0xc6bce5, 0x39401f, 0xc6a6c9, 0x390843, 0xce7f0b, 0x20391e, 0xf61b17, 0x2f295b, 0xdf43c4, 0x28dc1f, 0xd71beb, 0x28f806, 0xd745ab, 0x283ff5, 0xdb03e8, 0x3626e6, 0xe83ef3, 0x350ab8, 0xdc6236, 0x26d4ed, 0xd93712,
				0x26c1ed, 0xd93c12, 0x27c3ed, 0xdb3c12, 0x27c3ed, 0xdc3c12, 0x23c3e9, 0xdc3c12, 0x20c3ed, 0xdf3c1b, 0x20cac3, 0xdf1472, 0x20ba04, 0xd0d13a, 0x35f726, 0xd7f03d, 0x36f80e, 0xd6d054, 0x26a9f5, 0xd96a2a, 0x269bd5, 0xde6c29, 0x289bd2, 0xdf6328, 0x2494d0, 0xd86228, 0x2395d0, 0xdb6d28, 0x2e94d0, 0xdb6d28, 0x2395d2, 0xda6228, 0x2395d2, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228 };
		System.arraycopy(aFor, 0, key, 103210, aFor.length);
	}

	private static void init346(int[] key) {
		int[] aFor = { 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ad0, 0xda6228, 0x229ade, 0xda6228, 0x229ad0, 0xda6228, 0x2d9ad2, 0xda6228, 0x229ad0, 0xda6226, 0x229ad0, 0xdb6224, 0x209ad7, 0xdc6d24, 0x209ad7, 0xdb6d23, 0x2e94df, 0xdb6c22, 0x229bd8, 0xd96c20, 0x2194da, 0xd86326, 0x2291db, 0xde6427, 0x229fde, 0xdd6a39, 0x22af9c, 0xc9dccc, 0x14f9c7, 0xf1edc8, 0x14c8f6, 0xf8848a, 0xa054b, 0xf2b6a7, 0x56e5f, 0xfa96a0, 0x1695f, 0xfe92b1, 0x14b0a, 0xf8ee8a, 0x1db5bc, 0xc49fb1, 0x1790b0, 0xcf9bb8, 0x1990b7, 0xcc9ca3, 0x1990b7, 0xcc9ca3, 0x1a96b0, 0xc29fa1, 0x2193b5, 0xcc81af, 0x2397b1, 0xcc80ad, 0x2395bb, 0xc985aa, 0x2b8eb8, 0xcb84aa, 0x168eba, 0xcf88b6, 0x1680b8, 0xcd8aa8, 0x1b80a5, 0xdd8ebd,
				0xdcee6, 0xf64141, 0x9f5fb, 0xf15269, 0xedc30, 0xf4bc1a, 0x58e05, 0xe49723, 0x8a741, 0xe5f3d5, 0x87c11, 0xf4b1e0, 0xb481f, 0xfcb0e5, 0x4461c, 0xffb1e4, 0x6481d, 0xfeb0e5, 0x6481d, 0xfeb0e5, 0x6481d, 0xfeb0e5, 0x6481d, 0xfeb0e5, 0x6481d, 0xfeb0e5, 0x6481d, 0xfeb0e5, 0x6481d, 0xfeb0e5, 0x6481d, 0xfeb0e5, 0x6481d, 0xffbfe5, 0x54912, 0xffbde6, 0x44a12, 0xfbbcfd, 0x46f3f, 0xfdfc43, 0x13b672, 0xf99366, 0x118b70, 0xf3905e, 0x15a63a, 0xf7f1b4, 0x1c7c0b, 0xe3b0fb, 0x1c4804, 0xe3b7f9, 0x1d4906, 0xe0b7f9, 0x1e4906, 0xe0b7f9, 0x1d4906, 0xe0b7f9, 0x1d4906, 0xe3b7f9, 0x1c4906, 0xe3b4f8, 0x1d4b07, 0xe3b4f8, 0x1c4b07, 0xe3b6fd, 0x1c4f0d, 0xe395b2, 0x1c24ce, 0xe65b88, 0x140ba2, 0xfd23bd, 0x1c2f97, 0xd322a8, 0xd742e, 0xf2c6f8, 0xd3707, 0xf0cafa, 0xd3504, 0xf6caf8, 0xf3503, 0xf7caff,
				0xd3505, 0xf6caff, 0x93701, 0xf6caff, 0x83401, 0xf6caff, 0x93600, 0xf6caff, 0x93600, 0xf6cbfe, 0x93404, 0xf6cbf2, 0x93607, 0xf6c7e4, 0x9064e, 0xe46918, 0x3e4a09, 0xdb521c, 0x384d29, 0xde744f, 0x392ed1, 0xcbbc00, 0x3c76eb, 0xc38314, 0x3c79e8, 0xc5811c, 0x3d79ea, 0xcb811f, 0x327be3, 0xc98010, 0x3471c9, 0xcaaa78, 0x3516f9, 0xc097b7, 0x2cd687, 0xf0c5a1, 0x18d2f0, 0xfdff83, 0x14951c, 0xeb29c6, 0x14d03b, 0xee2fc1, 0x14d03f, 0xef2fc0, 0x11d13e, 0xee2cc0, 0x11d13c, 0xee2dc2, 0x11d63c, 0xee2cc2, 0x11d73c, 0xee2bc0, 0x10d43a, 0xef2bc1, 0x10d63e, 0xee2ac1, 0x11d63e, 0xee28c1, 0x11d53a, 0xee32ec, 0x119d66, 0xe6ea2e, 0x16af39, 0xc18e35, 0x16bd7b, 0xf9d7da, 0xf7600, 0xf1bff3, 0xe591e, 0xf19aae, 0xe1cf1, 0xfe56d1, 0x147bde, 0xca62cd, 0x154488, 0xf01509, 0x58ad9, 0xfa5f22, 0x5aadd,
				0xfa5422, 0x5abdd, 0xf95622, 0x7a8dd, 0xfa5522, 0x4aadd, 0xf95527, 0x2aad9, 0xfd552d, 0x2a5fd, 0xfd775f, 0x2d534, 0xf7b10c, 0x119211, 0xf19a31, 0x2b900f, 0xf0be69, 0x1dc0c1, 0xe20922, 0x1dfddc, 0xe80426, 0x1cfcdf, 0xe40425, 0x1ff3dd, 0xe30525, 0x1af2dd, 0xe20a25, 0x17f3dd, 0xe20a25, 0x1af2df, 0xe30525, 0x1af2df, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525 };
		System.arraycopy(aFor, 0, key, 103510, aFor.length);
	}

	private static void init347(int[] key) {
		int[] aFor = { 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30525, 0x1bfddd, 0xe30527, 0x14fddb, 0xe30527, 0x1bfddf, 0xe20529, 0x1bfddd, 0xe0052e, 0x1bfddd, 0xe70a2e, 0x1bfddf, 0xe0052c, 0x18fdd6, 0xef052a, 0x16f2d6, 0xed042a, 0x14f2d7, 0xef0728, 0x12f6d5, 0xed0528, 0x12fdd3, 0xed0e3b, 0x12cd9c, 0xffbfcd, 0x219bc0, 0xc48fcf, 0x21aaf1, 0xcde68b, 0x3f6734, 0xc7d4d8, 0x300c2f, 0xcef4d0, 0x320a2d, 0xcdf1c2, 0x301009, 0xc6aa97, 0x2328f2, 0xf875b4, 0x2d328d, 0xf671b3, 0x2f33f4, 0xf472bf, 0x2832f4, 0xf572b3, 0x2932f2, 0xcb0fc9, 0x213bf8, 0xc61ad8, 0x2f0ec0, 0xc21bda, 0x2f07c5, 0xc520e8, 0x2314aa, 0xc22fe3, 0x2210a4, 0xfc2fe7, 0x236fa3, 0xfc2ce7, 0x216ea7,
				0xee2aee, 0x384392, 0xc3e425, 0x3c25e7, 0xc68a7f, 0x391f1f, 0xc0792d, 0x314d0c, 0xd15b28, 0x3d7176, 0xd63dfa, 0x3ab544, 0xc47fb4, 0x3b874b, 0xc37fb1, 0x398a48, 0xc27cb2, 0x3b8549, 0xcc7db3, 0x34854b, 0xcc7db3, 0x34854b, 0xcc7db3, 0x34854b, 0xcc7db3, 0x34854b, 0xcc7db3, 0x34854b, 0xcc7db3, 0x34854b, 0xcc7db3, 0x34854b, 0xcc7db3, 0x34854b, 0xcd72b3, 0x31844b, 0xcc70bc, 0x308644, 0xcf70b5, 0x30a371, 0xc8370d, 0x247c23, 0xce5a2d, 0x24413e, 0xc75c14, 0x206475, 0xc33df8, 0x2ab046, 0xd47baa, 0x2b8255, 0xd57dae, 0x2b8251, 0xd57dae, 0x2b8253, 0xd57dae, 0x2b8251, 0xd77dae, 0x2b8251, 0xd57dae, 0x2b8352, 0xd47caf, 0x288350, 0xd47caf, 0x2f8351, 0xd07cab, 0x2f8744, 0xd05dfb, 0x2ff085, 0xd48bcf, 0x27c7e3, 0xcee1c1, 0x2de8ed, 0xfce3ad, 0x1db62b, 0xe206fe, 0x1df401, 0xe20afe, 0x1df501,
				0xe10afc, 0x1af501, 0xe10afa, 0x1df501, 0xe30afa, 0x1cf405, 0xe30afa, 0x1ff505, 0xe30afa, 0x1df505, 0xe20bfa, 0x1df605, 0xe208fa, 0x1df401, 0xe20bfb, 0x1df50e, 0xe206ea, 0x1dc341, 0xf0b714, 0x2d9e06, 0xcb8415, 0x289b26, 0xcea240, 0x29f8de, 0xdb6a0f, 0x2ca0e4, 0xd3551b, 0x2cafe7, 0xd55713, 0x22a0e6, 0xd45813, 0x2da2ef, 0xd6591c, 0x2ba8c5, 0xd57374, 0x2acff5, 0xdc4dba, 0x347296, 0xed61b2, 0xe76e0, 0xef4698, 0x62a3e, 0xf996df, 0x66120, 0xfb9cdb, 0x56324, 0xfb9cdb, 0x46224, 0xfb9cdb, 0x46324, 0xfa9cd9, 0x56324, 0xfa9cd9, 0x56326, 0xfb9cd9, 0x76324, 0xf99cdb, 0x66124, 0xf99adb, 0x66624, 0xf998db, 0x66721, 0xf98df7, 0x73d7e, 0xf14536, 0x12f, 0xda1e21, 0x2f73, 0xf046d0, 0x6e708, 0xfb2cf8, 0x4c612, 0xf817a3, 0x489cb, 0xeaeee4, 0xd0fe, 0xe0cfe4, 0x4d3a5, 0xe2e9d1, 0x116f6e,
				0xeea69c, 0x115563, 0xeeab9e, 0x115464, 0xeeab9f, 0x105660, 0xeea99f, 0x105660, 0xeea99b, 0x155667, 0xeaa896, 0x154e55, 0xeaf3d9, 0x15798c, 0xe22dbd, 0xa0d9f, 0xeb03ae, 0x3216fd, 0xe92a83, 0x4a237, 0xfb6cd1, 0x4982f, 0xf161d7, 0x59920, 0xfd61d8, 0x69620, 0xfd61d8, 0x49620, 0xfc6ed8, 0xb9720, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8 };
		System.arraycopy(aFor, 0, key, 103810, aFor.length);
	}

	private static void init348(int[] key) {
		int[] aFor = { 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0x49620, 0xfc6ed8, 0xb9720, 0xfc6ed8, 0x59920, 0xfc6ed8, 0xb9624, 0xfc6ed8, 0x49620, 0xfd6ed4, 0x69627, 0xfd6ed4, 0x49620, 0xff6ed3, 0x39922, 0xf861d1, 0x19629, 0xf96ed3, 0x19629, 0xf96ed3, 0x1992f, 0xf86fd2, 0x49d2f, 0xfb69d3, 0x4912a, 0xfb63c2, 0x4a16b, 0xead038, 0x37f437, 0xd3e025, 0x36c41a, 0xda8866, 0x2908a7, 0xd1bb4b, 0x2663bc, 0xd89543, 0x226ebe, 0xd8944c, 0x247aad, 0xdba460, 0x2567d3, 0xdbd577, 0x277dea, 0xd8db49, 0x277fe3, 0xd8dd4e, 0x277ce5, 0xd8dd40, 0x277fda, 0xd8e257, 0x27953b, 0xcca80d, 0x2da71f, 0xcaa909, 0x248e27, 0xdec07b, 0x21b8e9, 0xde3740, 0x21ace9, 0xde0840, 0x21abe7, 0xde0845, 0x21ace4, 0xdf0443, 0x24b381,
				0xdb615a, 0x24b795, 0xd80e0b, 0x239869, 0xd3fa5b, 0x3fc97a, 0xdfda58, 0x35fb0d, 0xd3c673, 0x35bfc1, 0xcb7b2b, 0x3482d4, 0xcc7a2c, 0x378cd6, 0xcc7a2c, 0x3483d7, 0xc17a2d, 0x3982d5, 0xc17a2d, 0x3982d5, 0xc17a2d, 0x3982d5, 0xc17a2d, 0x3982d5, 0xc17a2d, 0x3982d5, 0xc17a2d, 0x3982d5, 0xc17a2d, 0x3982d5, 0xc17a2d, 0x3982d5, 0xc0752d, 0x3b83d7, 0xc1762e, 0x3a81d6, 0xc57627, 0x3aa2e3, 0xc2369f, 0x2e7db1, 0xc45bbd, 0x2c42b2, 0xcf599a, 0x2a6fc5, 0xc93648, 0x22b98a, 0xdd747a, 0x228e85, 0xde7178, 0x238e84, 0xde7178, 0x208e82, 0xde7178, 0x238e84, 0xde7178, 0x238e86, 0xde717a, 0x218e81, 0xde717a, 0x208e85, 0xdc717a, 0x228e87, 0xdd717f, 0x228d91, 0xdd572e, 0x22f851, 0xd58319, 0x3ac933, 0xd0ee10, 0x37e53f, 0xe2e97d, 0xbaf5, 0xff0a22, 0xfadd, 0xfe0622, 0xf8dd, 0xfd0723, 0x6f8df, 0xfd0723,
				0x3f9df, 0xfd0723, 0x2f9df, 0xfc0721, 0x7f8de, 0xfd0721, 0xf9de, 0xfe0421, 0xf9de, 0xfe0421, 0x1fbde, 0xfe0425, 0x1fbdd, 0xfe0d35, 0x1cb9e, 0xedb8c8, 0x319ed8, 0xd686ca, 0x3299f9, 0xd4a09f, 0x33fa01, 0xc168d0, 0x36a23b, 0xc957c4, 0x36ad38, 0xcf55cc, 0x38a239, 0xce5acc, 0x37a030, 0xcc5bc3, 0x31aa1a, 0xce76a8, 0x31cb2a, 0xc74867, 0x2d094b, 0xf61c69, 0x100739, 0xf9354c, 0xc5bea, 0xf3e10a, 0xc0ef1, 0xf3f907, 0xc0eff, 0xf3f907, 0xc0fff, 0xf3f908, 0xc0eff, 0xf3f60a, 0xc0ef9, 0xf3f70c, 0xc0df1, 0xf3f70e, 0xc0af1, 0xf3f40e, 0xc09f1, 0xf3f50e, 0xc08f1, 0xf3f60d, 0xc09f7, 0xf3e223, 0xd53a4, 0xfa2be1, 0xe68f8, 0xd375f6, 0x845a2, 0xfa2d06, 0xc8cdc, 0xf7402c, 0x8adc7, 0xf74c78, 0x8f2f9, 0xf27bb4, 0x1289b, 0xe70eb8, 0x1b84, 0xe631e1, 0x154950, 0xea8abf, 0x157940, 0xea87bc, 0x157945,
				0xea86bf, 0x157b41, 0xea84be, 0x157b41, 0xea84bc, 0x147b46, 0xeb87ab, 0x145f1f, 0xeec06d, 0x1ba857, 0xe9e975, 0xef557, 0xeae917, 0x35c67a, 0xd69de1, 0x270124, 0xd8d7c9, 0x272135, 0xd2d8cd, 0x24203a, 0xdcd8c2, 0x252f3a, 0xdcd8c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2 };
		System.arraycopy(aFor, 0, key, 104110, aFor.length);
	}

	private static void init349(int[] key) {
		int[] aFor = { 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x252f3a, 0xddd7c2, 0x2a2e3a, 0xddd7c2, 0x242f34, 0xddd8cc, 0x2a2030, 0xddd8cd, 0x242f35, 0xdfd8c1, 0x232f32, 0xd8d7c1, 0x202f37, 0xd8d7c1, 0x232035, 0xd8d7c1, 0x212039, 0xd9d8c1, 0x2c2237, 0xd8d8c1, 0x2c2239, 0xd9dbc3, 0x2e2e3b, 0xd5d9c3, 0x2a2035, 0xd5d2d2, 0x2a1378, 0xc7622f, 0x1c463b, 0xfe522d, 0x1b766e, 0xf73d11, 0x442d7, 0xfcf027, 0x429df, 0xfadf20, 0x626df, 0xfed123, 0x726db, 0xf8de2d, 0x72bdf, 0xf8df2e, 0x729dc, 0xf8dc28, 0x72fd3, 0xf8de2f, 0x72ed5, 0xf8df24, 0x72cc4, 0xf8c017, 0x76c8e, 0xec3dc7, 0x3734d5, 0xd23ccc, 0x3812f1, 0xc37570, 0x3cdda0, 0xc30d56, 0x3ce8af, 0xc31c52, 0x3ce8a8, 0xc31b59, 0x3cecaa, 0xc3145e,
				0x3ceda3, 0xc3145b, 0x3cfc8c, 0xc13928, 0x39a440, 0xd2c377, 0x38f552, 0xd8e670, 0x3ff13b, 0xe1da56, 0x3eb2f4, 0xc00e16, 0x3ff9e9, 0xc6011d, 0x3cf4e4, 0xc70218, 0x30fae4, 0xc5031e, 0x3dfbe6, 0xc5031e, 0x3dfbe6, 0xc5031e, 0x3dfbe6, 0xc5031e, 0x3dfbe6, 0xc5031e, 0x3dfbe6, 0xc5031e, 0x3dfbe6, 0xc5031e, 0x3dfbe6, 0xc5031e, 0x3dfbe6, 0xc5031e, 0x33f4e7, 0xc60311, 0x30fbe4, 0xcf0314, 0x30d7d6, 0xc944aa, 0x260f98, 0xcb298b, 0x22319f, 0xc12bb3, 0x271dd7, 0xc34445, 0x2fcb83, 0xd00776, 0x2ff089, 0xd20e76, 0x2df18b, 0xd20e70, 0x2df18a, 0xd20e70, 0x2df18b, 0xd20e70, 0x2df18d, 0xd20e76, 0x2df38f, 0xd20d76, 0x2df28b, 0xd30c75, 0x2cf289, 0xd30c71, 0x2cf59d, 0xd12d26, 0x2e9b59, 0xda1a11, 0x34543b, 0xdf7c1f, 0x387730, 0xec7c72, 0xd28fb, 0xf29920, 0xd6adf, 0xf39420, 0xd6bdf, 0xf39420,
				0xc6bdf, 0xf39420, 0xc6adf, 0xf39522, 0xc6adf, 0xf29522, 0xe6add, 0xf29522, 0xd6bdd, 0xf29622, 0xc68dd, 0xf09722, 0xb68dd, 0xf19727, 0xa68dd, 0xf59e36, 0xa5c9a, 0xe632cd, 0x3811df, 0xd207ca, 0x3619ff, 0xd02099, 0x377a07, 0xc5e8d6, 0x32223d, 0xcdd7c2, 0x322d3e, 0xcbd5ca, 0x3c223f, 0xcadaca, 0x332036, 0xc8dbc5, 0x352a1c, 0xcaf6ae, 0x354b2c, 0xc3c861, 0x288b48, 0xf59d55, 0x138a14, 0xf9a374, 0xcf4f3, 0xf36543, 0xcd984, 0xf31a41, 0xcd883, 0xf31a41, 0xcd883, 0xf31947, 0xcd884, 0xf31a47, 0xcd8f8, 0xf31c3d, 0xcd5eb, 0xf3000c, 0xceaf4, 0xf31909, 0xce5f6, 0xf3180b, 0xce5f6, 0xf31b0d, 0xce4f5, 0xf30d21, 0xcbca2, 0xf5c4e3, 0x286f6, 0xe29afa, 0x3cb4a8, 0xcedc0c, 0x387cd1, 0xc1b625, 0x3e59d1, 0xc1b702, 0x3e61a3, 0xc1c6d2, 0x3ba395, 0xd389bf, 0x378490, 0xea9fdf, 0x6f642, 0xf948a6,
				0x6bc59, 0xfa42a4, 0x7bf5f, 0xf840a4, 0x7be5d, 0xf840a6, 0x7bd59, 0xf840a6, 0x7bb5a, 0xf84cb6, 0x78810, 0xf6f546, 0x1fb758, 0xf69148, 0x288652, 0xcda818, 0x28fa9e, 0xc77e26, 0x32c6ff, 0xcd250d, 0x33ddf7, 0xc42401, 0x32dcf6, 0xca240e, 0x32dcf4, 0xca240e, 0x33d3f4, 0xca240e, 0x33d3f6, 0xcb2b0e, 0x33d3f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3dddf6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e };
		System.arraycopy(aFor, 0, key, 104410, aFor.length);
	}

	private static void init350(int[] key) {
		int[] aFor = { 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xc42a0e, 0x3cd2f6, 0xcb2b0e, 0x3cd2f6, 0xcb2b00, 0x30dcf4, 0xcb2b02, 0x3cd3ff, 0xcb2b02, 0x32dcf8, 0xc92b0c, 0x35dcff, 0xcc240c, 0x39ddf4, 0xcc240e, 0x34dcf6, 0xcd2400, 0x34d3f8, 0xcc2b0e, 0x39d1fa, 0xcd2a0e, 0x39d0f6, 0xcd2a0c, 0x38ddfa, 0xc1250c, 0x3edff8, 0xc12c1d, 0x3eedb7, 0xd39cee, 0x9b9fa, 0xe8acec, 0xb89ad, 0xe7c2d0, 0x154215, 0xedf0fb, 0x1a2a0d, 0xe4dcf2, 0x1b260d, 0xe3d1f2, 0x14260d, 0xe3dcf2, 0x19220d, 0xe2ddf2, 0x142108, 0xecddf5, 0x16270a, 0xecdff5, 0x17270a, 0xe9dcfc, 0x142119, 0xebd5cc, 0x146253, 0xf7311b, 0x2f3616, 0xcc3003, 0x281d3c, 0xc675bf, 0x3ed964, 0xc50e9b, 0x3fe264, 0xc11f9b, 0x3ee064, 0xc11f99, 0x3fe064,
				0xc31f99, 0x38e067, 0xc71d90, 0x38f247, 0xc720ed, 0x388f95, 0xc8f9d2, 0x24c4f8, 0xfad5d8, 0x19d899, 0xc1c1c5, 0x1b9857, 0xe42c8c, 0x1bd970, 0xe02183, 0x1ad774, 0xe0228f, 0x17da73, 0xe02289, 0x18da71, 0xe02289, 0x18da71, 0xe02289, 0x18da71, 0xe02289, 0x18da71, 0xe02289, 0x18da71, 0xe02289, 0x18da71, 0xe02289, 0x18da71, 0xe02289, 0x18da71, 0xef2389, 0x1bdb70, 0xef2387, 0x18da73, 0xe7229d, 0x18f75c, 0xe56322, 0x142817, 0xfa0e00, 0x101619, 0xf60d36, 0x1a3553, 0xf66ec1, 0x1ff02, 0xfe36f0, 0x1c50f, 0xfe3df2, 0x1c408, 0xfe3df0, 0x1c506, 0xfe3df0, 0x1c408, 0xfe3df0, 0x1c408, 0xfe3df0, 0x1c506, 0xfe3cf0, 0x1c50a, 0xfe3cf1, 0x1c50b, 0xfe3dff, 0x1cb13, 0xfe13ad, 0x1a52f, 0xfd2062, 0x8724d, 0xe2556c, 0x65d47, 0xd35778, 0x3504ff, 0xcaab28, 0x3546d7, 0xcabe29, 0x3547d6, 0xcabe2b,
				0x3546d7, 0xcabf2c, 0x3547d7, 0xcabf2d, 0x3545d7, 0xcabe2f, 0x3544d5, 0xcabe2f, 0x3546d4, 0xcab129, 0x3548d6, 0xcab22b, 0x354ed1, 0xcab229, 0x3549d1, 0xcabd3c, 0x357d93, 0xc312cf, 0x2734d5, 0xcc22cd, 0x283cf8, 0xce059e, 0x295f00, 0xdbcdd1, 0x2c073a, 0xd3f2c5, 0x2c0839, 0xd5f0cd, 0x220738, 0xd7f0cc, 0x2e0a30, 0xd5f1c3, 0x28001a, 0xd7dca8, 0x28612a, 0xdee267, 0x34a64d, 0xefb35b, 0xaa06b, 0xedb92b, 0x89464, 0xefd138, 0xb8658, 0xd7d102, 0xa845b, 0xd7d102, 0xa845b, 0xd7d102, 0xb8459, 0xd7d102, 0xc8755, 0xd8df35, 0x4b1b2, 0xe22301, 0x17eae5, 0xed0d1f, 0x12f6e0, 0xed0a19, 0x12f7e4, 0xed0a1f, 0x12f4e5, 0xed1d31, 0x12acb0, 0xebd48f, 0x1e979c, 0xfe8a97, 0x20a4c5, 0xd3c361, 0x2b5dbd, 0xd29548, 0x2d78be, 0xd28b61, 0x2d6ed9, 0xd2d553, 0x2bba06, 0xcf912f, 0x2f990f, 0xfa973a, 0x1bcfb8,
				0xe47d6c, 0x1b9090, 0xe66c6f, 0x199190, 0xe66f6f, 0x199194, 0xe66f6f, 0x199290, 0xe66c6f, 0x199799, 0xe6637d, 0x19d7ea, 0xf1b6ab, 0x2c95a5, 0xcc84ac, 0x1a97b7, 0xfeabe2, 0x15db7e, 0xef72aa, 0x14bd40, 0xe857b8, 0x16af42, 0xee56b6, 0x19a143, 0xe159bb, 0x16a141, 0xe159bb, 0x19a141, 0xe056bb, 0x19a143, 0xe056bb, 0x18ae43, 0xef57bb, 0x17af43, 0xef57bb, 0x16a043, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb };
		System.arraycopy(aFor, 0, key, 104710, aFor.length);
	}

	private static void init351(int[] key) {
		int[] aFor = { 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xef57bb, 0x17af43, 0xe056bb, 0x17af43, 0xe056b5, 0x1bae46, 0xe059b0, 0x17a14d, 0xe259b0, 0x1bae4a, 0xe059bc, 0x1ba14f, 0xe358bb, 0x17a241, 0xe558bd, 0x10a147, 0xe859bf, 0x11ae47, 0xe859bf, 0x10a149, 0xe758b1, 0x10a04d, 0xe559b1, 0x10af49, 0xe957bd, 0x16ac4f, 0xe95faa, 0x169e00, 0xfbef59, 0x21ca4d, 0xc1dc59, 0x22fa65, 0xc8b71d, 0x3834a0, 0xcd8147, 0x395ca8, 0xc5ab53, 0x3a52ac, 0xc0a157, 0x3a54ab, 0xcda153, 0x3b57a7, 0xcfa156, 0x3a56a4, 0xcdaf52, 0x3558ae, 0xcdad52, 0x355ba5, 0xcca24a, 0x355eab, 0xcaaf79, 0x351de3, 0xd04ea5, 0xa44af, 0xee4da0, 0xd6397, 0xe006ec, 0x14a33e, 0xe16dc5, 0x18813a, 0xe47ac5, 0x1b8439, 0xe47bc2, 0x1b853d,
				0xe678c0, 0x19873f, 0xe678cb, 0x198a1f, 0xe66aac, 0x19a826, 0xef2e70, 0x26a41, 0xde7a5d, 0x3c7f67, 0xea7035, 0x303fbf, 0xcf8f67, 0x307b9d, 0xcb836c, 0x30749a, 0xc98360, 0x317b9a, 0xc68360, 0x3e7b98, 0xc68360, 0x3e7b98, 0xc68360, 0x3e7b98, 0xc68360, 0x3e7b98, 0xc68360, 0x3e7b98, 0xc68360, 0x3e7b98, 0xc68360, 0x3e7b98, 0xc68360, 0x3e7b98, 0xc68362, 0x3e7a9f, 0xc88268, 0x307b99, 0xcf8370, 0x3050cc, 0xcbc1b5, 0x268781, 0xcca696, 0x2bb08f, 0xcfa9a3, 0x229cfa, 0xcdce87, 0x35b020, 0xca1ded, 0x35d332, 0xca01eb, 0x35d232, 0xca06e5, 0x35d230, 0xca06e5, 0x35d232, 0xca06eb, 0x35d232, 0xca06e5, 0x35d230, 0xca00e5, 0x35d33c, 0xca06e6, 0x35d53f, 0xca04ec, 0x35d620, 0xca6e84, 0x35f6f7, 0xca85bf, 0x3cce92, 0xd6e68d, 0x33e9a4, 0xe8f89d, 0x3b2ee, 0xfc215f, 0x3eb8b, 0xfc3859, 0x3ed8d,
				0xfc3858, 0x3ed8f, 0xfc3858, 0x3eb81, 0xfc3958, 0x3ed8d, 0xfc3958, 0x3ed8b, 0xfc3e58, 0x3ec8d, 0xfc3f58, 0x3eb8f, 0xfc3d5a, 0x3e889, 0xfc3b5b, 0x3e88e, 0xfc2347, 0x381d1, 0xfbe183, 0x1fc59a, 0xf9d38c, 0x1dcdb9, 0xfbf4df, 0x1cae41, 0xee3c90, 0x19f67b, 0xe60384, 0x19f978, 0xe0018c, 0x17f679, 0xe2018d, 0x1bfb71, 0xe00082, 0x1df15b, 0xe22de9, 0x1d906b, 0xe81326, 0x1590b, 0xd84118, 0x31533a, 0xde4212, 0x375030, 0xec5d29, 0x38503d, 0xf65a33, 0x225120, 0xf45b33, 0x215727, 0xf55a33, 0x20572b, 0xf55a33, 0x265426, 0xed4604, 0x236850, 0xf80bc1, 0x9bb19, 0xf064e3, 0xf9f1c, 0xf262e7, 0xd9f18, 0xf264e4, 0xd991b, 0xf271c1, 0x9c242, 0xfab97d, 0x9fc6f, 0xd4e264, 0xacc36, 0xfcaa92, 0x364b, 0xfef0b8, 0x11a40, 0xfeeda7, 0x10261, 0xfecbfc, 0x6b0a3, 0xe4848a, 0x4899e, 0xd68280, 0xdceea,
				0xf46e54, 0xbb3a5, 0xf7425a, 0x8b5a5, 0xf74e5a, 0x8b3a5, 0xf74d5a, 0x9b2a5, 0xf64d5d, 0x9b4bb, 0xf65b6f, 0x9f3e6, 0xeabdde, 0x36afcc, 0xd6a7d9, 0xb2f1, 0xe9fe98, 0x1a7729, 0xe5b4c1, 0x1a6b36, 0xe186cc, 0x1f7e36, 0xe686c2, 0x117137, 0xe688cf, 0x137135, 0xe688cf, 0x1e7035, 0xe787cf, 0x1c7037, 0xe787cf, 0x1f7f39, 0xe886cf, 0x1f7f39, 0xe787cf, 0x1e7f39, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf };
		System.arraycopy(aFor, 0, key, 105010, aFor.length);
	}

	private static void init352(int[] key) {
		int[] aFor = { 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x1f7f37, 0xe787cf, 0x107e37, 0xe886c1, 0x137135, 0xe886c3, 0x1f7e3f, 0xe886c2, 0x117138, 0xe889ce, 0x137e3a, 0xeb87ce, 0x1f7e32, 0xed84ce, 0x187d34, 0xef85ce, 0x167236, 0xef85ce, 0x147236, 0xed85ce, 0x157232, 0xe28ace, 0x147c36, 0xed84c0, 0x127e34, 0xed8dd1, 0x124f78, 0xff3e2f, 0x251b3d, 0xc50d2f, 0x262b13, 0xcc6565, 0x3ce6d8, 0xc8503f, 0x3c8fcf, 0xc67533, 0x398fcc, 0xc37c36, 0x3f89ca, 0xc37133, 0x3988c6, 0xce7034, 0x3687c6, 0xce7f30, 0x3487cb, 0xc37032, 0x3b88c4, 0xc1742b, 0x3b89c9, 0xc47a1b, 0x3bca8c, 0xdc9fca, 0x794cd, 0xe593c6, 0x6bdf3, 0xf6d58f, 0xd7d59, 0xf7b2a5, 0xd595b, 0xf3a5a4, 0xc5b59, 0xf3a4a2, 0xc5a5d, 0xf3a5a2,
				0xc5b5d, 0xf3a6af, 0xc5174, 0xf3b8c9, 0xc765c, 0xf5f903, 0x18b136, 0xc5a02b, 0x26a31c, 0xffaf51, 0x22e4d8, 0xdd490d, 0x22bdf7, 0xd84a07, 0x23bdf1, 0xd9450a, 0x21b2f6, 0xd64a0a, 0x2eb2f0, 0xd64a08, 0x2eb2f0, 0xd64a08, 0x2eb2f0, 0xd64a08, 0x2eb2f0, 0xd94b08, 0x2eb2f0, 0xd94b08, 0x21b3f0, 0xd94b08, 0x20b3fe, 0xd94b08, 0x21b3f0, 0xd94b0a, 0x21b2f4, 0xd74a03, 0x2fb2ef, 0xd0470f, 0x2f8abb, 0xd700ca, 0x3d3ef8, 0xd927ed, 0x333ef3, 0xd527db, 0x3f0b9d, 0xd831c5, 0x3260aa, 0xc70f2d, 0x3b8dbc, 0xc90d34, 0x398ebd, 0xc90d35, 0x398ebd, 0xc90d35, 0x278ebc, 0xc90d37, 0x278ebe, 0xc90d37, 0x3b88bf, 0xcb0b37, 0x258ebb, 0xcb0834, 0x268bb9, 0xc90931, 0x318db5, 0xc3e2d2, 0x3a8682, 0xc8cab6, 0x27fc92, 0xc0dc89, 0x28cfac, 0xf6de83, 0x13eccc, 0xe98ebb, 0x10f239, 0xe171bb, 0x13f53e, 0xe270bb,
				0xff53d, 0xe171b5, 0x13f23f, 0xe270b6, 0x12f33e, 0xe370b8, 0x17f13e, 0xe271b8, 0x15f13e, 0xe071b8, 0x10f23e, 0xfe76ba, 0xff339, 0xfe70bd, 0xdf23b, 0xf08db9, 0xde5dd, 0xe2a7e6, 0x6baf0, 0xe1a3ed, 0x2bcda, 0xe485bc, 0x3df22, 0xf14df3, 0x68718, 0xf972e7, 0x6881b, 0xfe71ef, 0x98618, 0xfc71ee, 0xb8a12, 0xf071e1, 0xd8036, 0xf25c84, 0xde006, 0xf86349, 0x102b79, 0xc63e69, 0x202e73, 0xd0216e, 0x3e2d79, 0xdc2f73, 0x3c2c79, 0xd92974, 0x3c2b7f, 0xd92974, 0x3c2d78, 0xd82974, 0x3e2d7b, 0xd92b75, 0x312c78, 0xec2663, 0xe0a36, 0xe46aa2, 0x1cc57f, 0xe71981, 0x18e37e, 0xe41d83, 0x1be37c, 0xe41f83, 0x1be37e, 0xe40ba6, 0x1fb825, 0xedc41a, 0x1c8208, 0xc09d03, 0x1eb357, 0xe9d6f3, 0x17482e, 0xe880db, 0x176a27, 0xe893d7, 0x17660f, 0xe8b3be, 0x1f3bd2, 0xfa79fd, 0x186ff2, 0xce62e7, 0x1026b9,
				0xe9b608, 0x167eef, 0xec9c13, 0x136dec, 0xec9113, 0x136dec, 0xed9213, 0x106ded, 0xef9219, 0x1066c1, 0xef8003, 0x101d79, 0xf05e49, 0x2e4e55, 0xcc427d, 0x165c3c, 0xfa0643, 0xe9b83, 0xf14d70, 0xea78d, 0xf65571, 0xbac8b, 0xf2547d, 0x5a388, 0xf25a70, 0x7a388, 0xf25a72, 0xaa288, 0xf35572, 0x8a28a, 0xf15572, 0x9ad84, 0xfe5472, 0x9ad84, 0xf15572, 0x9ad84, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572 };
		System.arraycopy(aFor, 0, key, 105310, aFor.length);
	}

	private static void init353(int[] key) {
		int[] aFor = { 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x8ad8a, 0xf05572, 0x9ad84, 0xf05a7c, 0x8a286, 0xf05a7c, 0x8a284, 0xf05a7c, 0x9a28a, 0xf15a7c, 0x6a286, 0xf15a7c, 0x6a384, 0xfe5b7c, 0x6a384, 0xff547c, 0x4a38a, 0xff5472, 0x6ad89, 0xfe5a75, 0x9af8f, 0xf25877, 0xda281, 0xf25664, 0xd95cd, 0xe6e798, 0x3cc288, 0xdfd49b, 0x3af1a5, 0xd6bdd9, 0x243c1a, 0xd188f6, 0x245702, 0xddadfc, 0x245702, 0xdfacff, 0x255906, 0xdcacf0, 0x275b04, 0xdfacf6, 0x265902, 0xd0adf7, 0x275a00, 0xd0a2fa, 0x245800, 0xd1a3f1, 0x2d5f13, 0xd2afc2, 0x2d1e5b, 0xcb4d18, 0x13461e, 0xf14c11, 0x15622a, 0xfb0755, 0x3a284, 0xf8727f, 0x49b80, 0xfb607f, 0x49e80, 0xfb607c, 0x49f81, 0xfa617f, 0x59f80, 0xfa6178,
				0x59b9f, 0xfa7457, 0x5a8f5, 0xfa339c, 0xb7da1, 0xd073bc, 0x34778a, 0xee7bc6, 0xe374e, 0xf19c9b, 0xe6965, 0xf69091, 0xe6762, 0xf49f9b, 0x36967, 0xfa9199, 0x26665, 0xfa9e9f, 0x26667, 0xfa9e9f, 0x26665, 0xfa9e9f, 0xd6767, 0xf89e9f, 0xd6765, 0xf89e9f, 0x6667, 0xf99e91, 0x26662, 0xf99e91, 0x696b, 0xf89e96, 0xf666b, 0xf99e9c, 0x6474, 0xff90ad, 0x5a01, 0xf52469, 0x160940, 0xf31956, 0x1b0c4a, 0xf1176f, 0x170b47, 0xff2f75, 0x1a0940, 0xfc257a, 0x1f0f40, 0xfc207b, 0x1e0e4c, 0xfc217f, 0x1e0e4c, 0xfc2179, 0x1c0e40, 0xfc2179, 0x1c0e4e, 0xfe217b, 0x1d0e49, 0xfe3e7a, 0x1e0f4c, 0xc03f75, 0x1f0e4e, 0xfe3f75, 0x1d1344, 0xf53f69, 0x121640, 0xfa3066, 0x122e7a, 0xfe3564, 0x17237b, 0xf0345e, 0x181671, 0xfd3142, 0x1e1f75, 0xfc3142, 0x1e1f75, 0xfc3040, 0x1e1f73, 0xfc3040, 0x1c1f79, 0xc33040,
				0x1c0077, 0xfc2f42, 0x1a037b, 0xf32942, 0x1a037b, 0xfc2f4c, 0x1e0079, 0xfe304a, 0x1d0079, 0xfc2e4b, 0x18017d, 0xfe2c4e, 0x170463, 0xff2441, 0x133e5a, 0xf42b44, 0x130a7e, 0xfb3116, 0x1c6b88, 0xeef959, 0x1933b0, 0xe6c64f, 0x193db3, 0xe1c545, 0x193dbf, 0xeccb45, 0x1b30b9, 0xe7cc4b, 0x1a3e9d, 0xe5e22f, 0x1a59a9, 0xefd8fb, 0x69ec8, 0xdf89df, 0x3d9ac2, 0xd789e0, 0x3d9bff, 0xdd91e9, 0x9af1, 0xdb93e5, 0x49af4, 0xd89df9, 0x197eb, 0xdd9af8, 0x3988eb, 0xde9bfb, 0x3788ea, 0xec9af6, 0xdb5a5, 0xe1d33d, 0x1d67db, 0xe6ba24, 0x1943db, 0xe6bd24, 0x1940db, 0xe6bc27, 0x1941d1, 0xe6a803, 0x191b81, 0xef60c3, 0x1c27d4, 0xc238d9, 0x23168f, 0xd47227, 0x2deff9, 0xd3290e, 0x2cc1f2, 0xd33b04, 0x2cc0ef, 0xd31c2a, 0x248952, 0xc3d864, 0x26f86b, 0xf8ea78, 0x19dd2c, 0xecae8d, 0x120257, 0xeacca5, 0x143c5a,
				0xe9c2a5, 0x133f5a, 0xefc0a5, 0x123e5a, 0xedc3ac, 0x122d7f, 0xedfdd5, 0x117bb5, 0xf33b9e, 0x282eba, 0xca36fa, 0x141a9a, 0xfb7306, 0xcc3d6, 0xf32928, 0xddfd7, 0xfa272a, 0xdd0d3, 0xfa2724, 0x2dfdc, 0xfa2724, 0xddedc, 0xfa2724, 0x2dfdc, 0xfa2724, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824 };
		System.arraycopy(aFor, 0, key, 105610, aFor.length);
	}

	private static void init354(int[] key) {
		int[] aFor = { 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0x3d0dc, 0xfb2824, 0xdfd2, 0xf9282a, 0xed1d2, 0xfb2828, 0xcddd2, 0xf72b28, 0x9d1df, 0xf62438, 0x9e791, 0xe295c4, 0x39b0cb, 0xdca5d8, 0x3981e7, 0xd5ca9a, 0x274a5f, 0xd2feb1, 0x272547, 0xdadfb8, 0x232546, 0xd5d2bf, 0x222747, 0xd9d0b1, 0x252844, 0xdcd0b0, 0x262a4a, 0xded2b2, 0x262a4a, 0xd1d2b0, 0x27254b, 0xdfdebf, 0x22255d, 0xddd492, 0x226505, 0xc43646, 0x1c3d40, 0xfe374f, 0x1a1a70, 0xf57ef1, 0xddb20, 0xf00bd9, 0xce326, 0xf319d9, 0xce426, 0xf21ada, 0xce527, 0xf21bdb, 0xde524, 0xf21ade,
				0xde136, 0xf213f8, 0xdf25d, 0xf06d36, 0x2309, 0xda2e15, 0x3c2b24, 0xe12562, 0x269e1, 0xfdc033, 0x234cc, 0xf5cd3a, 0x235c9, 0xf8cc3e, 0xf3ac5, 0xf7cd38, 0x35c4, 0xf7cd3e, 0xe3ac4, 0xf7cd3e, 0xe3ac6, 0xf6c23e, 0x13bc6, 0xf4c23e, 0x33ac4, 0xf4c23e, 0xc3ac6, 0xf5c230, 0xc3ac3, 0xf5c237, 0xe34cd, 0xf7c230, 0x237cd, 0xf6c13e, 0x13bdb, 0xfece0e, 0x107a7, 0xf77bc0, 0x1553e9, 0xf158ff, 0x1d4ce0, 0xf05bc1, 0x1648db, 0xf259c3, 0x2f53d2, 0xf15bc0, 0x2d59d2, 0xf35dc0, 0x2e59cc, 0xf35cc6, 0x2e59cc, 0xf35dc0, 0x2f59cf, 0xf35dc0, 0x2f58cd, 0xf25dc7, 0x2d59cf, 0xcd5fc8, 0x1059c5, 0xc95fc8, 0x1159d9, 0xcd5fcb, 0x2d5cc7, 0xcc58cc, 0x2e54da, 0xca46c1, 0x2253da, 0xcd4efa, 0x3d53d9, 0xd148f8, 0x395de4, 0xe654f5, 0x3a51f8, 0xe755f7, 0x3a51f8, 0xe555f4, 0x3a51fc, 0xe754f4, 0x3c51fb, 0xe557f4,
				0x3c51f8, 0xe757f4, 0x755f9, 0xe554f6, 0x755f9, 0xd856f6, 0x453fa, 0xdf55f0, 0x350fc, 0xdd55f1, 0x253fe, 0xdc55ef, 0x3d5efc, 0xda4ce4, 0x365afc, 0xd24fe1, 0x346ddb, 0xd357bc, 0x350c22, 0xc79ef3, 0x3f571a, 0xc0a2e5, 0x3f5919, 0xc7a1ef, 0x305913, 0xc4acea, 0x325611, 0xc9ade0, 0x365c36, 0xc98084, 0x363b03, 0xc1bb56, 0x2afa64, 0xf3ef7d, 0x10f95a, 0xfae66f, 0x15c82e, 0xe4f262, 0x15bb34, 0xfcf364, 0xcb836, 0xe2f179, 0xcba37, 0xe7f808, 0x9ce22, 0xe5e63a, 0x9fb29, 0xd4ed32, 0xbdd63, 0xe1bbf6, 0x1a0813, 0xe6d4ec, 0x192d13, 0xe6d3ec, 0x192e13, 0xe6d2ef, 0x192f1b, 0xe6c9d5, 0x1862aa, 0xe91095, 0x65086, 0xda4c8b, 0x3a61de, 0xcc0476, 0x3b98a9, 0xc15e5e, 0x3eb7a2, 0xc14d58, 0x3eb1ad, 0xc1527c, 0x39f7f9, 0xd59fbb, 0x3aa7a2, 0xd9bdb1, 0x69af8, 0xe9cc76, 0x1041b1, 0xebfd58, 0x1411a5,
				0xebee5a, 0x1511a5, 0xebee5a, 0x1510a5, 0xeaea56, 0x153493, 0xea8003, 0x18e840, 0xc6c75c, 0x1ddd71, 0xfbf527, 0x1db3a3, 0xea311a, 0x10f3c5, 0xef073a, 0x11fcc5, 0xe70638, 0x11f1c1, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636 };
		System.arraycopy(aFor, 0, key, 105910, aFor.length);
	}

	private static void init355(int[] key) {
		int[] aFor = { 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe60636, 0x1efece, 0xe90736, 0x1bfcce, 0xea0734, 0x19f0cc, 0xee0934, 0x12f2c3, 0xed012b, 0x12c381, 0xfcb3d6, 0x2290c6, 0xc785d5, 0x22a0eb, 0xc8ed91, 0x386f50, 0xcfdcbc, 0x370b48, 0xc8f2b7, 0x320b48, 0xc4fcb1, 0x380448, 0xc6fdbe, 0x380749, 0xc5fab2, 0x3d044c, 0xc8ffb7, 0x30074f, 0xcaf2b6, 0x37014a, 0xc9f8bc, 0x37055d, 0xc8f790, 0x374506, 0xd11647, 0x91d41, 0xeb174e, 0xf3a71, 0xe05ef0, 0x18fb21, 0xe52bd8, 0x19c327, 0xe639d8, 0x19c427, 0xe73adb, 0x19c526,
				0xe43ada, 0x1bc425, 0xe43bdd, 0x1bc139, 0xe430f0, 0x1bd255, 0xe0723e, 0x103c01, 0xcb311b, 0x2d343c, 0xf03a00, 0x127178, 0xedd7b0, 0x12264e, 0xeadeb6, 0x1d2644, 0xe7ddb1, 0x1e2a49, 0xe8ddb2, 0x1c2748, 0xe9deb2, 0x12284e, 0xeeddb2, 0x152a4a, 0xecd2be, 0x1b2b4a, 0xecd2be, 0x152a48, 0xeeddb0, 0x172546, 0xefddbe, 0x182446, 0xe0dcbc, 0x1c2a46, 0xe0dfba, 0x182845, 0xeddfb3, 0x1a2457, 0xe5d183, 0x1a1b2a, 0xee6643, 0xc4e6e, 0xea4774, 0x185357, 0xeb4677, 0x6526b, 0xe1427e, 0x14b70, 0xe34c7d, 0x4d70, 0xe54c7e, 0x64f75, 0xe54b7c, 0x64f75, 0xe54c7e, 0x44f70, 0xe54c7e, 0x44873, 0xe74c7a, 0x24f7d, 0xe64b78, 0x74f73, 0xd94a7e, 0x74f6e, 0xe74b60, 0x1486a, 0xe94d66, 0xf4772, 0xe8576a, 0xf4272, 0xe45969, 0x9464a, 0xe75b69, 0xc4f72, 0xef477c, 0xc4477, 0xe8477c, 0xc4477, 0xef4070, 0xc4574,
				0xed4071, 0xc447c, 0xec4171, 0x324776, 0xec4073, 0xd447a, 0xee4771, 0xe427a, 0xee4771, 0x30417a, 0xd04471, 0x31407c, 0xd54473, 0x354662, 0xeb4772, 0x354f60, 0xd35c79, 0x384563, 0xdd5d7c, 0x3e7c45, 0xd94622, 0x3f1dbc, 0xcd8f6d, 0x354684, 0xcab37b, 0x354887, 0xcdb071, 0x3b4788, 0xcfb271, 0x39488a, 0xc5b478, 0x3a46a0, 0xc59a12, 0x3a2691, 0xc7a5c5, 0x35e6f7, 0xd4f3d7, 0x37e4ef, 0xd2ccbf, 0x3980d3, 0xc0fa5c, 0x3f64fb, 0xd0fa5f, 0x3b60fe, 0xcbfb5e, 0x3f62c8, 0xcee3bb, 0x3c82f9, 0xd2c2e7, 0x22e5f2, 0xc2fde9, 0x1dcda6, 0xf7ab33, 0xb19d6, 0xf5c229, 0xa3bd6, 0xf5c429, 0xa3ad6, 0xf5c628, 0xa3ade, 0xf5db11, 0xf7b6c, 0xe31855, 0xb2d58, 0xd13554, 0xe0505, 0xfa6ca1, 0xcf27b, 0xfb348e, 0x4df75, 0xfb238e, 0x4dc74, 0xfb36ac, 0x18f23, 0xf40a70, 0x54551, 0xe76145, 0x387c07, 0xd44179,
				0x2731cd, 0xdb9911, 0x247ae8, 0xdb8116, 0x247cec, 0xdb8015, 0x247fef, 0xdb8601, 0x2448b7, 0xd8d8c4, 0x309be3, 0xd2bbf5, 0xfa0c6, 0xe89aae, 0x2f80e, 0xf562c1, 0x8af26, 0xf75adb, 0x9a326, 0xff54df, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0 };
		System.arraycopy(aFor, 0, key, 106210, aFor.length);
	}

	private static void init356(int[] key) {
		int[] aFor = { 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xf05bd0, 0x8a328, 0xfd5ad0, 0xca628, 0xfd5ad0, 0xfa226, 0xf85bde, 0x4a029, 0xfb53c3, 0x4926f, 0xf4fd36, 0x2ade24, 0xcfcb37, 0x2ced0b, 0xc6a073, 0x2923cc, 0xde9726, 0x2240d0, 0xddb62f, 0x264cd0, 0xdeb629, 0x2540db, 0xdbb535, 0x2641d8, 0xdcb42a, 0x2841d3, 0xdbb728, 0x2240d2, 0xdeb62a, 0x2045d1, 0xdfb223, 0x214fc2, 0xdebd0f, 0x210c99, 0xc75fd8, 0x1f54de, 0xfd5ed1, 0x1970ec, 0xf6146d, 0xeb1bc, 0xf56045, 0x988ba, 0xf67245, 0x98cba, 0xf77246, 0x98dbb, 0xf47247, 0xb8cb8, 0xf47340,
				0xa8fa5, 0xf57d6c, 0xa9dca, 0xf203a6, 0x24d99, 0xdf4280, 0x3944a0, 0xe5488e, 0x40fe5, 0xfb9158, 0x478a2, 0xfd8c5a, 0xa74a8, 0xf08f5b, 0xa76ac, 0xfd815b, 0x97ba3, 0xfc825b, 0x77a7, 0xfe835b, 0x275ad, 0xfb8d59, 0xc74ad, 0xf48c5b, 0xf7bad, 0xf38d5b, 0xa75ad, 0xf28d55, 0x774a9, 0xf08c55, 0xb7bad, 0xf78d57, 0xc75a8, 0xf48d5e, 0xc77bc, 0xf3826d, 0xc48c8, 0xff34ac, 0x1e1c81, 0xfa169b, 0x171987, 0xfa0d9a, 0x1311b9, 0xf0319d, 0x2c11bc, 0xf00e9f, 0x2f15ba, 0xf00f9e, 0x2d11bd, 0xf10e9e, 0x2c10bd, 0xf00f98, 0x2c11b0, 0xf60e98, 0x2a11be, 0xf70f9b, 0x1712ba, 0xc90f9a, 0x1312b9, 0xca329f, 0x122cb6, 0xcb3291, 0x2a2eb2, 0xc834ae, 0x2e2ab0, 0xcb34ab, 0x222ab1, 0xc836af, 0x242b8a, 0xc33cae, 0x252688, 0xc13cae, 0x20208b, 0xff3dae, 0x22238d, 0xfe03ac, 0x2323b2, 0xfe3cad, 0x232288, 0xfe3cad,
				0x221cb2, 0xfe3cac, 0x221c8d, 0xfe03ae, 0x27228d, 0xff03ae, 0x27228d, 0xfe02a8, 0x241f8c, 0xfa01a5, 0x271c8f, 0xc702a6, 0x271c80, 0xc301a0, 0x2616b7, 0xc500ac, 0x262195, 0xc11bf2, 0x27406e, 0xd5d2bf, 0x221856, 0xddeda9, 0x221655, 0xdaeea3, 0x2c195a, 0xd9efa2, 0x2f155f, 0xd1eeab, 0x2e1f71, 0xd1c6df, 0x2e71a3, 0xd2f1ef, 0x22cac5, 0xc2dbe4, 0x27c1a3, 0xc2f2c4, 0x319850, 0xce2e9f, 0x31c06a, 0xce3098, 0x31c060, 0xce3295, 0x31d977, 0xce18df, 0x3196bf, 0xc8ce95, 0x3efc8d, 0xdce697, 0x2c9c7, 0xe9ac50, 0x171eb3, 0xe9c24c, 0x163bb3, 0xe9c44e, 0x163ab1, 0xe9c64f, 0x163dba, 0xe9e374, 0x137b0f, 0xf92c39, 0x1f0735, 0xc8123e, 0x15216e, 0xe64ecf, 0x11ea15, 0xe620e6, 0x19ce18, 0xe630e7, 0x19cf1c, 0xe63fc0, 0x18f45c, 0xe5573b, 0x1c3b0c, 0xfa0811, 0x271c27, 0xc13943, 0x2968d7, 0xd1f91f,
				0x2e2eee, 0xd1d911, 0x2e23eb, 0xd1d918, 0x2e25f5, 0xd1d429, 0x2e6eb4, 0xc402e7, 0x1e22f6, 0xfd37ef, 0x1d12ab, 0xf1422b, 0xc690, 0xf87572, 0x6ad9d, 0xf95b60, 0x7a19b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863 };
		System.arraycopy(aFor, 0, key, 106510, aFor.length);
	}

	private static void init357(int[] key) {
		int[] aFor = { 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x8a09b, 0xf05863, 0x9af99, 0xf15761, 0x5ad97, 0xf15761, 0x2af95, 0xfa5763, 0x4ad9a, 0xfb5f76, 0x49ed8, 0xeaee82, 0x37ca90, 0xd5dd83, 0x37fabf, 0xdeb4c9, 0x313774, 0xc9849d, 0x345d6e, 0xcba891, 0x31536e, 0xc6af96, 0x3f5971, 0xc1aaae, 0x3f4173, 0xce9caf, 0x217d41, 0xd594bb, 0x2f6140, 0xd399b7, 0x296f42, 0xd597ae, 0x2a6c70, 0xd59cbd, 0x2a2d2b, 0xc27f6a, 0x1a736f, 0xf87960, 0x1c575d, 0xf333dc, 0xb960d, 0xf047f4, 0xcaf0b, 0xf355f4, 0xcab0b, 0xf255f7, 0xcaa08, 0xf155f6, 0xeaa09, 0xf155f1,
				0xeab16, 0xf15dd9, 0xeb868, 0xf71a1d, 0x64b5e, 0xdb5b49, 0x3c5d5f, 0xe1507c, 0x141d, 0xfa81ae, 0x55e58, 0xfeafa4, 0x75750, 0xfcaba4, 0x65251, 0xfea5a4, 0x65d52, 0xfea5a4, 0x2535e, 0xfea5a4, 0x55252, 0xfcaaa4, 0x4525c, 0xfcaaa6, 0x75c5c, 0xfcaba4, 0x55352, 0xf2aaaa, 0x75356, 0xf2aaaa, 0xa5252, 0xf3a5aa, 0x95d57, 0xf0a5a3, 0xb5c43, 0xf4ad89, 0xb6b15, 0xf9174b, 0x193f6d, 0xf83679, 0x1f2661, 0xf63845, 0x1c0307, 0xf1545e, 0x1f3d34, 0xf04e47, 0x5393c, 0xf14f46, 0x1e383f, 0xf24046, 0x1c373f, 0xf04f44, 0x1c383b, 0xf74044, 0x1b373b, 0xf54040, 0x73739, 0xf64141, 0x1a3438, 0xf64d46, 0x1a34c6, 0xf643bb, 0x437cc, 0xf65eaf, 0x300e4, 0xf149d0, 0x37af9, 0xe865db, 0x70f3, 0xdf63dd, 0x355191, 0xcf09fc, 0x357b82, 0xda0df9, 0x367580, 0xda0df8, 0x34758c, 0xc502fa, 0x377781, 0xc302fd, 0x31748b,
				0xc302fd, 0x317485, 0xde03fc, 0x327b85, 0xd902fc, 0x337884, 0xd801fd, 0x337687, 0xc20efa, 0x367b86, 0xc808fc, 0x31559d, 0xdc68a0, 0x3a77bc, 0xdc60a1, 0x387f9b, 0xde46fd, 0x381d61, 0xca8fae, 0x3d4547, 0xc2b0b8, 0x3d4a44, 0xc5b2b2, 0x304544, 0xc5b3bc, 0x334941, 0xceb3b4, 0x315c6c, 0xca8dcb, 0x3720a5, 0xc3559b, 0x2c6fbc, 0xce7c99, 0x2966cb, 0xc857ba, 0x223c24, 0xdd81ff, 0x227402, 0xdc8cfa, 0x217404, 0xde8ff8, 0x217812, 0xdeb3b9, 0x2026e5, 0xd07dc4, 0x2149d0, 0xfe50c8, 0x237f98, 0xc81a0f, 0x36a8ec, 0xc97313, 0x3689ec, 0xc97617, 0x3689e8, 0xc97414, 0x368ee0, 0xc95330, 0x36c6b1, 0xc6928c, 0x2fb49c, 0xf7a791, 0x2c90de, 0xd8e77f, 0x2348a2, 0xda9954, 0x2568ab, 0xda9654, 0x2568af, 0xda9d4f, 0x2540e2, 0xdaff66, 0x257a37, 0xc24512, 0x184931, 0xf95a75, 0x1a6607, 0xee18a9, 0x11dd4e,
				0xee36b1, 0x11c34d, 0xee3ba3, 0x11c877, 0xee2bcc, 0x11834f, 0xf2d40f, 0x27da1e, 0xf8d738, 0x27fb6e, 0xc89cf9, 0x33342d, 0xcce5de, 0x320026, 0xccf4da, 0x360c23, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5 };
		System.arraycopy(aFor, 0, key, 106810, aFor.length);
	}

	private static void init358(int[] key) {
		int[] aFor = { 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc1f5d5, 0x390d2d, 0xc0fad5, 0x3b0c2f, 0xc2fbd7, 0x350221, 0xc2fbd5, 0x340d21, 0xcdf5d7, 0x330f2e, 0xccfdc2, 0x333c72, 0xde4c28, 0x5683a, 0xe77f2b, 0x55817, 0xec166f, 0x1e97d0, 0xe7253a, 0x1cfcc8, 0xe30a36, 0x1af7c9, 0xe00a3f, 0x1ffee3, 0xe01633, 0x1fc1ff, 0xeb0633, 0xcfd7, 0xf21420, 0x8e6dd, 0xf21c27, 0xae5d4, 0xf31f3e, 0xce4e3, 0xf3142e, 0xca5b8, 0xe4f7f9, 0x3cfbfc, 0xdef1f3, 0x3adfce, 0xd4ba4f, 0x2c1f9e, 0xd7ce67, 0x2c2798, 0xd2dc67, 0x2d2298, 0xd0dd64, 0x2c229b, 0xd1dd65,
				0x2e229a, 0xd1dd60, 0x2e208a, 0xd1d952, 0x2e3792, 0xd59e13, 0x3acd55, 0xe1dd46, 0x5da48, 0xdbd454, 0x3b9408, 0xc31fa3, 0x3cca51, 0xc726ae, 0x3dde57, 0xc723a1, 0x3fdb57, 0xc82da3, 0x30d555, 0xc92da3, 0x32da5b, 0xc92da3, 0x32da5b, 0xcb2da3, 0x33da5f, 0xcb2da3, 0x33d559, 0xcb2da1, 0x33d559, 0xc42ca1, 0x31d55d, 0xc42ca7, 0x33d551, 0xcb2da7, 0x33da5b, 0xcf23af, 0x31da73, 0xce30b3, 0x318f22, 0xc2f774, 0x23df57, 0xc3d646, 0x20da52, 0xc4f879, 0x29ad18, 0xd32b97, 0x2e8038, 0xd23a83, 0x2dfb47, 0xd23b85, 0x2df843, 0xd23c87, 0x2dff41, 0xd23b87, 0x2dff4d, 0xd23b87, 0x2df84d, 0xd23b8b, 0x2df84f, 0xd23b8b, 0x2dfa4f, 0xd23e86, 0x2dfb4d, 0xd2388b, 0x2d8734, 0xd22ba9, 0x2da4c3, 0xd5ce81, 0x2c88b3, 0xc2ab95, 0x2bbbbe, 0xf3b58a, 0x1bf1ed, 0xe47b4b, 0x1bc081, 0xe40349, 0x1bc78f, 0xe4024c,
				0x1bc18d, 0xe4024c, 0x1bc38a, 0xe40342, 0x1bc286, 0xe40045, 0x1bc181, 0xe40345, 0x1bc081, 0xe40442, 0x1bc181, 0xe60742, 0x1bc480, 0xe40742, 0x1bc683, 0xe4783e, 0x1bedac, 0xefb4f8, 0xa96e4, 0xe281f8, 0x19fc1, 0xe4a5a6, 0x2fe3a, 0xf06cf5, 0x7a61c, 0xf853e3, 0x7a91d, 0xff51eb, 0x9a71d, 0xff50e4, 0x9aa19, 0xf552ec, 0x8b93b, 0xfe709b, 0x8d1fb, 0xe4bbd5, 0xf8df4, 0xef9ed0, 0xb8781, 0xd5a8f5, 0x34c455, 0xca7988, 0x358176, 0xc27d8e, 0x378472, 0xcb7f8b, 0x348763, 0xcd4cc4, 0x34db9c, 0xd88182, 0x35b491, 0xe9ae89, 0x3580d8, 0xdfe44f, 0x2156ac, 0xde8d53, 0x2177ac, 0xde8856, 0x2177ab, 0xde8b52, 0x2177a3, 0xdea86c, 0x213eef, 0xd66fae, 0x3b4cbb, 0xe25daa, 0x3c61f9, 0xcae35c, 0x355fbf, 0xce8546, 0x3076b9, 0xcf8846, 0x3076bd, 0xcf8c55, 0x306095, 0xcfb734, 0x302f5c, 0xd36671, 0x76e62,
				0xd86448, 0x3d5510, 0xc83b87, 0x379550, 0xc84da6, 0x37a653, 0xc852ba, 0x37b005, 0xc87b9a, 0x37eff6, 0xd0a5c1, 0x5a9df, 0xdca7e6, 0xa9380, 0xe6e92b, 0x192dce, 0xe6c530, 0x1834cb, 0xe0c73c, 0x1431c9, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e };
		System.arraycopy(aFor, 0, key, 107110, aFor.length);
	}

	private static void init359(int[] key) {
		int[] aFor = { 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe2c93e, 0x1a31c6, 0xe3c63e, 0x1830c4, 0xe3c73c, 0x1830ca, 0xe3c73e, 0x1933ca, 0xe5c53c, 0x1b3fc5, 0xe4cc29, 0x1b0e87, 0xf07fde, 0x2a5ace, 0xc84ddf, 0x2a6ae3, 0xc62699, 0x32595a, 0xc9e8b4, 0x303047, 0xcec9b8, 0x363742, 0xc9caac, 0x362f65, 0xcc91c1, 0x393560, 0xc092dd, 0x2e2102, 0xdceefb, 0x251e04, 0xdce3fa, 0x2a180f, 0xd2e3e5, 0x2d183b, 0xd2f7f4, 0x2d4662, 0xcb1523, 0x131926, 0xf11329, 0x153d14, 0xfb5895, 0x3fd44, 0xf82cbd, 0x3c542, 0xfd3ebd, 0x2c042, 0xff3fbe, 0x3c041, 0xf83fbf,
				0x7c040, 0xf83ebb, 0x7c34a, 0xf83fae, 0x7cd60, 0xfc7cee, 0x1320a2, 0xca38b3, 0x2e35b8, 0xf03aa1, 0x2e03f6, 0xdc7d55, 0x23b5bb, 0xde5344, 0x25abbb, 0xdd5740, 0x25afb8, 0xd2584f, 0x25a1b7, 0xd25841, 0x2aa0b9, 0xd35743, 0x2aa1be, 0xd25643, 0x25aebe, 0xd05744, 0x24adbc, 0xd0574a, 0x25aeb0, 0xd0574a, 0x27afb0, 0xdf5748, 0x27afb0, 0xdf5748, 0x27afb2, 0xda5543, 0x25a195, 0xda7e27, 0x25cda7, 0xd6bfec, 0x3399f2, 0xd791e0, 0x3797f6, 0xd7b4c1, 0x27dc41, 0xd87681, 0x27ac66, 0xd84393, 0x27bb6d, 0xd84291, 0x27b766, 0xd84190, 0x27b467, 0xd84190, 0x27b469, 0xd84190, 0x27b569, 0xd8419e, 0x27b26a, 0xd8449c, 0x27b769, 0xd84193, 0x27b46a, 0xd8419d, 0x27b373, 0xd86ab1, 0x27ddce, 0xdb5885, 0x2109b7, 0xcc2a96, 0x2a21bd, 0xfe2d87, 0x197b06, 0xe6c9d7, 0x19242c, 0xe6d1d7, 0x19272e, 0xe6d1d8,
				0x19242c, 0xe6d0d8, 0x192321, 0xe6d7da, 0x192323, 0xe6d7da, 0x192423, 0xe6d0d4, 0x192423, 0xe6d0d5, 0x192621, 0xe6d1d5, 0x192d22, 0xe6d6d7, 0x192e39, 0xe6dcdc, 0x196771, 0xed0b2d, 0xd2e39, 0xeb382d, 0x8271a, 0xed1d7d, 0xb41e7, 0xf9d22a, 0xe18c3, 0xf1ed3c, 0xe17c2, 0xf6ef3a, 0x19ce, 0xf7e036, 0x11acb, 0xfce23e, 0x20be8, 0xf4ce75, 0xc552d, 0xe13004, 0x8051a, 0xd61339, 0x300e68, 0xd1391e, 0x344cb9, 0xc98c66, 0x367b9b, 0xcd876c, 0x357099, 0xca876b, 0x35728f, 0xcfba2c, 0x342e75, 0xdd7969, 0x314a7d, 0xea5167, 0x367f36, 0xdc1ba1, 0x22a942, 0xdd72bd, 0x228842, 0xdd77b8, 0x228843, 0xdd75b5, 0x228b5e, 0xdd5596, 0x22c5eb, 0xd78ed5, 0x3a92cd, 0xe19fda, 0x1dd81, 0xfc4d31, 0x386da, 0xf86521, 0x790de, 0xf86c21, 0x790dd, 0xf86c32, 0x79be5, 0xf87258, 0x7c0de, 0xe19fe1, 0x358ceb, 0xe887ff,
				0xaa2c4, 0xe4f1b1, 0x11780b, 0xeec2ef, 0x111f06, 0xeef2e4, 0x11344c, 0xeeaa3b, 0x16c07d, 0xf6f358, 0x21e168, 0xfbc330, 0x2496a1, 0xca0067, 0x35da89, 0xca2275, 0x35db8e, 0xc22c79, 0x36d480, 0xc02e7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b };
		System.arraycopy(aFor, 0, key, 107410, aFor.length);
	}

	private static void init360(int[] key) {
		int[] aFor = { 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x37d783, 0xcf2f7b, 0x36d881, 0xcd2f79, 0x36d88f, 0xca2e79, 0x30da8d, 0xcc2c7b, 0x32d682, 0xcd256e, 0x32e6c2, 0xd99495, 0x2b19a, 0xe1a78b, 0x282b5, 0xefc9c9, 0x19b70c, 0xe507fc, 0x1cdf09, 0xe328f4, 0x1cd01a, 0xe324c4, 0x1cef6a, 0xf96b1b, 0x230f6b, 0xd38dce, 0x272a13, 0xd4e3ea, 0x2e0d15, 0xd7f0ea, 0x210a13, 0xd8f1fd, 0x250d1d, 0xdafdd2, 0x254c44, 0xc31f05, 0x1b1300, 0xf9190f, 0x1d3732, 0xf352b3, 0xbf762, 0xf0269b, 0xbcf64, 0xf4359b, 0xbcb64, 0xf63498, 0xacb67, 0xf13499,
				0xecb66, 0xf1349b, 0xecb61, 0xf1308c, 0xec25b, 0xf677c3, 0x191f91, 0xc23984, 0x262a88, 0xf83b90, 0x2509c2, 0xd77a62, 0x28c789, 0xd72676, 0x2ad189, 0xd22d74, 0x2ad58e, 0xd22d76, 0x27d48e, 0xd22d76, 0x25d48e, 0xdd2c74, 0x25da8b, 0xd22d74, 0x27d488, 0xd32e70, 0x27d584, 0xd32e70, 0x26d78a, 0xd12f76, 0x28d88c, 0xd12f74, 0x28d88c, 0xd12f76, 0x28d78b, 0xd62d7a, 0x28c3b7, 0xd71012, 0x28b562, 0xdcdc20, 0x3aff3d, 0xdcf72a, 0x38ff08, 0xdbd94e, 0x2ab6dd, 0xd50309, 0x2be6f1, 0xd9130f, 0x2eeff0, 0xd8140f, 0x2feff3, 0xd61409, 0x2ceef3, 0xd6140f, 0x2feef1, 0xd6140f, 0x2cedf1, 0xd6170b, 0x2aeffe, 0xd51307, 0x2ceafe, 0xd61103, 0x2febff, 0xd21705, 0x2deef7, 0xd63336, 0x2c8b4d, 0xde0e09, 0x285c24, 0xc67806, 0x2e7429, 0xff7f15, 0x222a96, 0xdd9f40, 0x226dbf, 0xd49641, 0x226dbf, 0xdb9645,
				0x266fbd, 0xdb9647, 0x216fb8, 0xd69547, 0x216fb8, 0xd69547, 0x2f6fb8, 0xd59646, 0x286eba, 0xd59740, 0x2e6eba, 0xd79540, 0x256eb8, 0xd1904e, 0x296ca0, 0xd6964a, 0x2955e5, 0xc724be, 0x1802ac, 0xf015be, 0x130a89, 0xf630ee, 0x126c74, 0xe3f8bf, 0x153356, 0xeac7a9, 0x153d57, 0xeccaaf, 0x1b3d5a, 0xecc4a2, 0x1b3f5c, 0xe5c6a9, 0x1a2c71, 0xe1e8ec, 0x1e71b5, 0xeb149c, 0x32087, 0xe33ba2, 0x811fb, 0xe4597e, 0xbdec4, 0xf4172d, 0xbe1d2, 0xf21825, 0xfe1dd, 0xf0192f, 0xfeec9, 0xf1276e, 0xcb335, 0xe7e52b, 0xcd73f, 0xd0cb24, 0xce575, 0xe681ec, 0x1a3309, 0xe4eff6, 0x1b1609, 0xe4e9f3, 0x1b1609, 0xe4e8f8, 0x1b171a, 0xe4cca1, 0x1945d3, 0xf604e5, 0x1f16f2, 0xc71fe9, 0x26598f, 0xd9c234, 0x261bc4, 0xddf63a, 0x220ec5, 0xddf23a, 0x220cc5, 0xddf23d, 0x220dd7, 0xddfb02, 0x223898, 0xca40c8, 0x136bda,
				0xf071c8, 0x136ee3, 0xf45bb6, 0x1f0639, 0xe68883, 0x194c52, 0xe69a9d, 0x190511, 0xf66c41, 0x155465, 0xc24f7f, 0x1c6e36, 0xf626b5, 0x1c580d, 0xecebd1, 0x120c20, 0xeff5d6, 0x130e2f, 0xebf6d7, 0x1f0c2d, 0xebf6d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7 };
		System.arraycopy(aFor, 0, key, 107710, aFor.length);
	}

	private static void init361(int[] key) {
		int[] aFor = { 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x1c0f2f, 0xe4f7d7, 0x130e2f, 0xe4f7d7, 0x1e0f2e, 0xe5f8d6, 0x1c0d20, 0xe7fad8, 0x1c0121, 0xe3f4cb, 0x1c3267, 0xf55f36, 0x157939, 0xf36c29, 0x104f15, 0xff026a, 0xb7dac, 0xf6cf5f, 0xd17a7, 0xf2fa54, 0xd1e82, 0xf2d733, 0xd4644, 0xdf057f, 0x1b2b36, 0xf14dae, 0x2d074, 0xf6158d, 0xdf972, 0xf7038d, 0xffb72, 0xf60187, 0xcfc65, 0xf30eaa, 0xcbc3c, 0xeaef7d, 0x32e47b, 0xd3ed75, 0x37c348, 0xd9a6c9, 0x210318, 0xdad2e1, 0x213b1e, 0xdec1e1, 0x213f1e, 0xdec0e3, 0x203f1c, 0xdec0e3,
				0x213f1c, 0xdec1e3, 0x203d1e, 0xdfc0e8, 0x20360b, 0xdbf4ae, 0x2c74ce, 0xc437e9, 0x2f12f1, 0xf004ed, 0x102abd, 0xf9752d, 0x5dff6, 0xfa0608, 0x7f2f7, 0xf00e08, 0x9f4f4, 0xfa0302, 0x8f8f8, 0xf80100, 0xefbfd, 0xf90300, 0xcfbff, 0xfa0200, 0xcfefc, 0xfa030a, 0xfefc, 0xf9060f, 0x5f1f4, 0xfd020d, 0x1f5f6, 0xfb000f, 0xf6f5, 0xf9020f, 0x1f5f2, 0xfe0e04, 0x1e6c2, 0xfa2550, 0xcb60c, 0xfcea3a, 0x15cb1b, 0xfccd3a, 0x1ac815, 0xfeea41, 0x79fe5, 0xf82505, 0x7c8fa, 0xf03f05, 0x8c8f8, 0xf03103, 0x6c9f4, 0xf03101, 0x7c6f4, 0xf03101, 0x6c9f6, 0xf23101, 0x4c9f6, 0xf33e03, 0x8c6f0, 0xf03102, 0x7c6f7, 0xf13e00, 0x6c7f8, 0xfd3d0e, 0x2c4e0, 0xf81f5e, 0x1aa26, 0xf22b65, 0x16449, 0xea4068, 0x94943, 0xda4602, 0x41086, 0xfba452, 0x456ad, 0xfdad57, 0xa5aa0, 0xfdac54, 0x15ba0, 0xfdad56, 0x55bad,
				0xf2a350, 0x454ab, 0xf2a350, 0x555ab, 0xf2a252, 0x857ab, 0xf2a15c, 0x954ab, 0xf3a152, 0x657aa, 0xfead5d, 0x357ac, 0xfca34a, 0x363e7, 0xec12bc, 0x3337ac, 0xdb20be, 0x383f89, 0xdd06e0, 0x395a7a, 0xcbcfb6, 0x3d045f, 0xc2f1a0, 0x3d085f, 0xc4ffa7, 0x320953, 0xc5f0ab, 0x3c0a57, 0xc3f3a4, 0x3c1776, 0xc2a9ec, 0x3d27be, 0xcb7b98, 0x235482, 0xfd4ea6, 0x117ff8, 0xff2b68, 0x13a5ab, 0xed755e, 0x1282a1, 0xe4795f, 0x1d80a4, 0xe27851, 0x1d8eb9, 0xe14715, 0x1ad648, 0xf48e6d, 0x1ebf7e, 0xc3a465, 0x1e8934, 0xf3eea8, 0xa5e4d, 0xf783b2, 0x87b4d, 0xf784b7, 0x87841, 0xf786aa, 0x87b7d, 0xf7a3d1, 0x2dcb0, 0xe6ea9b, 0x4e08c, 0xdde8ab, 0x3ea3d9, 0xc10a14, 0x3ee3ef, 0xc01510, 0x3fe9ef, 0xc01710, 0x3fe9ef, 0xc11610, 0x3de9e8, 0xc21600, 0x3dcbb2, 0xc76dc5, 0x2c34f5, 0xca19ed, 0x290ecf, 0xc919f8,
				0x2a37a3, 0xd86fdd, 0x27e346, 0xd875de, 0x2412bd, 0xfe3995, 0x242b80, 0xf1279f, 0x181ef8, 0xe7654a, 0x19d0a8, 0xef0558, 0x14f7af, 0xef0b58, 0x13fca3, 0xeb0a5a, 0x1ef3a2, 0xe80855, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955 };
		System.arraycopy(aFor, 0, key, 108010, aFor.length);
	}

	private static void init362(int[] key) {
		int[] aFor = { 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe70955, 0x1ff1ad, 0xe80855, 0x1df1ad, 0xe80855, 0x10f0ad, 0xe90757, 0x1ef2af, 0xe60a57, 0x1cf6a0, 0xe30048, 0x1cc3e1, 0xf1b3b3, 0x1195bc, 0xf481b3, 0x17a48d, 0xfce9f0, 0x136934, 0xe8c6d9, 0x171f2e, 0xe8c2cf, 0x16706b, 0xff0b0f, 0x184138, 0xcc651c, 0x1a494c, 0xe82ed2, 0x1bb505, 0xe971f6, 0x159b09, 0xe961f6, 0x139909, 0xea60fe, 0x129c1f, 0xed6ed2, 0x12dc44, 0xf48f05, 0x2c8403, 0xcd8d0d, 0x29a032, 0xc6c4b3, 0x3e6162, 0xc5b09b, 0x385964, 0xc7a59b, 0x385b64, 0xc7a499, 0x395b66,
				0xc7a499, 0x385a66, 0xc7a499, 0x385a66, 0xc7a49d, 0x385d77, 0xc78dc3, 0x3810b7, 0xce728d, 0x3c4ba9, 0xdc5789, 0x372c3, 0xeb2347, 0x11bd88, 0xee6872, 0x119d8d, 0xe66172, 0x139888, 0xe16e7d, 0x159485, 0xe66d7c, 0x119580, 0xe6637b, 0x1a9486, 0xe46c7a, 0x1b9a83, 0xe46379, 0x1b9b80, 0xe46e79, 0x1b9882, 0xe26a7b, 0x199c81, 0xe06977, 0x1b9f8d, 0xe36976, 0x1b9e89, 0xe4677c, 0x1b87c3, 0xe33141, 0x17b40c, 0xf8e727, 0x11f838, 0xf6f01f, 0x13f623, 0xf7d041, 0xfa9ed, 0xf06909, 0xf98f6, 0xf76f0b, 0xf99f2, 0xf76f05, 0x98f2, 0xf66007, 0x197f2, 0xf66007, 0x98f0, 0xf46007, 0x298f0, 0xf56f05, 0xe97f6, 0xf66004, 0x197f1, 0xf76f06, 0x96fe, 0xfb6c0b, 0x495e5, 0xfe4e5b, 0x5fd22, 0xf17d67, 0x23349, 0xe8176a, 0xb1e46, 0xd81005, 0x64683, 0xf9f555, 0x607aa, 0xfdfc51, 0x50ba4, 0xf2fd56, 0x90aa2,
				0xf2fd54, 0x50aad, 0xfdf257, 0xa05ae, 0xfdf257, 0xb05ae, 0xfdf257, 0xa05a0, 0xf0f059, 0xb05a0, 0xf0f15b, 0x704a1, 0xfdfc58, 0x305ab, 0xfcf143, 0x331ec, 0xec41b1, 0x3365a0, 0xdb72b2, 0x3f6c85, 0xd954ec, 0x3d0876, 0xcc9cbd, 0x3a5754, 0xc5a2ab, 0x3a5b54, 0xc3acae, 0x355a58, 0xc3a2ad, 0x345b55, 0xcbada5, 0x344d68, 0xcfffe7, 0x3581ad, 0xdaccb1, 0x33e0a8, 0xeefb8e, 0x6cad1, 0xef9f40, 0x81385, 0xf3dd72, 0xc2b8d, 0xf9d173, 0x1288e, 0xffd178, 0x2794, 0xfbee3a, 0x17c67, 0xef2444, 0x31556, 0xdd0e4f, 0x3221f, 0xef4484, 0x16f461, 0xeb2b9e, 0x14d361, 0xeb2d9b, 0x14d068, 0xeb2a8c, 0x14dd4b, 0xeb0dd6, 0x1e708c, 0xfb45a4, 0x194cba, 0xc1468b, 0x2316f6, 0xdcba24, 0x2357d9, 0xdfac26, 0x2052d9, 0xdfac26, 0x2153d9, 0xddac26, 0x2453d9, 0xdbac28, 0x245ee3, 0xdb8e7d, 0x220b29, 0xc0350b, 0x1d2111,
				0xf82e38, 0x1d3704, 0xfa1b4f, 0x1b2703, 0xf2624f, 0x1a4d7a, 0xf9565c, 0x104377, 0xcc584d, 0x260fc9, 0xd9ad06, 0x2676fe, 0xdc9a05, 0x246cfc, 0xdd950b, 0x2663f7, 0xdc9b0a, 0x2b62fc, 0xdf9b0f, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01 };
		System.arraycopy(aFor, 0, key, 108310, aFor.length);
	}

	private static void init363(int[] key) {
		int[] aFor = { 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2763f9, 0xdf9b01, 0x2862f7, 0xdf9b0f, 0x2763f5, 0xde9409, 0x2861f3, 0xdf980b, 0x2765fc, 0xd8931b, 0x2752b3, 0xd520e6, 0xb04eb, 0xe912e4, 0x93bd9, 0xe168a2, 0xdef1d, 0xf543c0, 0xa801b, 0xf539a1, 0xbbad5, 0xefffe7, 0xee0f4, 0xd9f3e3, 0x4c1b7, 0xf7ae17, 0x6cf, 0xf5cd3e, 0xb20c3, 0xf6db3c, 0xf21c3, 0xf7da37, 0xe26ea, 0xf1d421, 0xe66b7, 0xe835f4, 0x303ef2, 0xd137fc, 0x351ac3, 0xda7e42, 0x22db93, 0xd90a6a, 0x23ec95, 0xdc156a, 0x23e895, 0xdd1669, 0x23e994, 0xde1668, 0x21e897,
				0xde1668, 0x21e897, 0xde156b, 0x21ef87, 0xde323a, 0x2184b8, 0xde05f6, 0x2848c6, 0xc96be5, 0x1475da, 0xf44bb5, 0x6c00d, 0xf90dfd, 0x6f802, 0xf104fd, 0x4fd05, 0xf004f0, 0x6fc07, 0xfe04ff, 0x7f307, 0xfb07f5, 0x4e918, 0xfb08fb, 0x4dd1a, 0xfb00f5, 0x4e103, 0xfb09f8, 0x4fa04, 0xff0ff3, 0x6f705, 0xf001f1, 0x8f909, 0xff01f5, 0x6f80a, 0xf901f9, 0x6db4f, 0xf3713c, 0x1c0607, 0xf14c18, 0x166c05, 0xf0632b, 0x2e6e6c, 0xf14103, 0xc0ac, 0xff0848, 0xfeb6, 0xf7074e, 0x1f1b8, 0xf9074f, 0x1ffb7, 0xf9074f, 0xf0b7, 0xf8084f, 0xff0b5, 0xfa094f, 0xdf1b5, 0xf5094d, 0xefebb, 0xf4084e, 0xcf0b4, 0xfa074d, 0xdffb7, 0xf60541, 0x9fdaf, 0xf52710, 0xb966b, 0xfce82c, 0x9a51c, 0xe38139, 0x8917, 0xd48453, 0xbd1da, 0xf46300, 0xb92ff, 0xf16902, 0x690fa, 0xf3670e, 0x49efa, 0xf3670e, 0x59ffb, 0xf2660d, 0x59ffb,
				0xf26603, 0x79ffb, 0xf36503, 0x69cf9, 0xf16403, 0x893ff, 0xf16502, 0x493f9, 0xfd6a02, 0x393f7, 0xfc671e, 0x3a7af, 0xedd6f0, 0x33f3e3, 0xdbe4f0, 0x3ffac9, 0xd9c2a0, 0x3d9e3a, 0xcc0af1, 0x3ac118, 0xc534e7, 0x3acd18, 0xc33ae2, 0x34cd15, 0xc235e0, 0x3acc14, 0xc53bfa, 0x3ae73d, 0xc24fba, 0x362485, 0xdb1993, 0x3d3c85, 0xe227ac, 0x512cb, 0xed4b52, 0x4c49e, 0xf80967, 0x7fc98, 0xf00464, 0x9fc9a, 0xf70462, 0x8f38c, 0xf03822, 0x8ab79, 0xe4f166, 0x8c068, 0xe8da7f, 0x36f032, 0xd895a9, 0x20274f, 0xdbf8b0, 0x24004f, 0xdbfeb5, 0x240247, 0xdbf19e, 0x24162c, 0xdba8a8, 0x2edce4, 0xc8edc2, 0x2be7e7, 0xf2e8d8, 0x17b054, 0xe80489, 0x17f576, 0xea0b89, 0x15f576, 0xea0b89, 0x15f576, 0xea0b89, 0x14f476, 0xeb0b81, 0x14f75f, 0xeb079a, 0x14a9e4, 0xf7f3d2, 0x2bd2ce, 0xc1c4ea, 0x27d7cc, 0xc7c6e9,
				0x1fd4ca, 0xc3c0eb, 0x22cff1, 0xc4dcd5, 0x2cfd95, 0xf1c5f5, 0x1a475f, 0xe581b9, 0x1a7546, 0xe48cbb, 0x1f7a41, 0xe68eb9, 0x1c7b45, 0xe683b8, 0x1f7a4f, 0xe98dbe, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0 };
		System.arraycopy(aFor, 0, key, 108610, aFor.length);
	}

	private static void init364(int[] key) {
		int[] aFor = { 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117548, 0xe98db0, 0x117546, 0xe98dbe, 0x107a44, 0xe98db8, 0x1f7842, 0xe881ba, 0x107c4c, 0xef8aa9, 0x104b01, 0xe23954, 0x3e1a5a, 0xdf024a, 0x12e70, 0xec7709, 0x1bf9b0, 0xe26675, 0x18f3d6, 0xe38cab, 0x15dae1, 0xfef7c0, 0x1ae4ce, 0xcfe8da, 0x2ed681, 0xd35f2f, 0x2c9fc9, 0xd04431, 0x2fb6ca, 0xd44f30, 0x2cb7ca, 0xd44d25, 0x28b0fe, 0xd74432, 0x28f5a4, 0xcea6e7, 0x16ade1, 0xf7a5f1, 0x1388ce, 0xfcec4f, 0x4499e, 0xf99967, 0x57098, 0xfa8a67, 0x57798, 0xfa8865, 0x57798, 0xfa8865,
				0x5769a, 0xfa8865, 0x5769a, 0xfa8867, 0x5748a, 0xfa9548, 0x52ac0, 0xffa795, 0xdf2a3, 0xd2d480, 0xfc2b3, 0xd6ebe4, 0x3f9f7a, 0xc05c98, 0x3faf67, 0xc75398, 0x32aa60, 0xc55396, 0x33a560, 0xca5d96, 0x31a565, 0xce5689, 0x318f58, 0xdf21f7, 0x3ab351, 0xcf1293, 0x36ab4d, 0xcc7abc, 0x339440, 0xcd6dbd, 0x36974b, 0xce6ebf, 0x399749, 0xcf60b0, 0x37994e, 0xc863bd, 0x37b612, 0xc32b75, 0x334244, 0xdd005e, 0x3b1f44, 0xdf0c74, 0x3f1422, 0xe0285f, 0xfa2eb, 0xf06d0d, 0xf95f0, 0xf76f07, 0x98fe, 0xfa6005, 0x298ff, 0xfa6005, 0x397fd, 0xfb6f05, 0xc97ff, 0xfb6f03, 0x397f9, 0xfa6003, 0x197fb, 0xfb610c, 0x396f0, 0xf5610b, 0x299f1, 0xf96307, 0x69be9, 0xfb4157, 0x4f12c, 0xfe8c6b, 0x8c147, 0xe3e566, 0x7ed48, 0xd1e00c, 0x30b485, 0xcf065f, 0x30f6a0, 0xcb0c5f, 0x33f4a5, 0xc60353, 0x33f9a5, 0xc60351,
				0x32faa2, 0xc70056, 0x30f9a2, 0xc50354, 0x30faac, 0xc40054, 0x31f9ae, 0xc60154, 0x3ff6a8, 0xc60154, 0x33f7ae, 0xca0e57, 0x37f4a4, 0xc8004d, 0x37c0fc, 0xdbb1a3, 0x794b0, 0xef82a5, 0xa9f9c, 0xe2a7f5, 0x6fb6f, 0xe96fa2, 0x1da345, 0xe255ba, 0x1daf45, 0xe558b9, 0x1da043, 0xe857b7, 0x10ae44, 0xef57a8, 0x108e6c, 0xe92eee, 0x1873d7, 0xf641c2, 0x115fd4, 0xf043fa, 0x197e95, 0xf21b31, 0x1c81e4, 0xe3531f, 0x1ca5e0, 0xe45d18, 0x1da4e3, 0xe05d1b, 0x1faaf5, 0xe8615b, 0x1ff502, 0xf3ae1e, 0x1f9c12, 0xff8707, 0x1fab48, 0xf1ced1, 0x87d36, 0xf3a2c9, 0xc5a36, 0xf3a4ce, 0xc583e, 0xf3b1f5, 0xc656a, 0xf1c204, 0x7a53b, 0xe28818, 0x38434, 0xd4917d, 0x37f1e9, 0xc84908, 0x37bdf7, 0xc94208, 0x37bdf7, 0xc84208, 0x37bcf7, 0xc84108, 0x37bff7, 0xc8420d, 0x37bee4, 0xc84733, 0x3781a9, 0xdbfdfd, 0x31bcd3,
				0xc096f6, 0x2c8fd6, 0xc49fcb, 0x2c8fd4, 0xc580cb, 0x2f8cd0, 0xc99ef8, 0x21aeac, 0xcec921, 0x337ff5, 0xce9f01, 0x3169fa, 0xcb9103, 0x3067f9, 0xc99301, 0x3165fa, 0xc89c01, 0x3265f6, 0xcb9d02, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c };
		System.arraycopy(aFor, 0, key, 108910, aFor.length);
	}

	private static void init365(int[] key) {
		int[] aFor = { 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x3365f4, 0xcb9d0c, 0x306afa, 0xcb9d02, 0x306bf8, 0xc99c04, 0x3f6afc, 0xc79204, 0x3c6ef0, 0xc39b15, 0x3c59bc, 0xd229eb, 0xb0dfa, 0xea17e9, 0x353cdf, 0xc666b0, 0x39ef18, 0xc467ba, 0x370dcb, 0xda468d, 0x3677a7, 0xda56bc, 0x3944ab, 0xf254b0, 0x2b1ad3, 0xd6bb69, 0x29609b, 0xd48c67, 0x297b9e, 0xd3826b, 0x2b7598, 0xd28f74, 0x2e73ae, 0xd18062, 0x2e31f5, 0xc863b1, 0x1068b9, 0xf160a9, 0x154d96, 0xfa2917, 0x28cc6, 0xff5c3f, 0xb6c0, 0xff4d3f, 0xb0c0, 0xff4f3d, 0xb0c6, 0xfe4f3c,
				0x1b2c0, 0xfe4e3d, 0x1b0c2, 0xfe4e39, 0x1b2d6, 0xfe541e, 0x39c8a, 0xfa07ed, 0xb67ac, 0xe94a8a, 0x3245a2, 0xe05d9d, 0x23c15, 0xfd84c3, 0x2743e, 0xfb8ec2, 0xd793b, 0xf88ecd, 0x783a, 0xfb8fce, 0x6753f, 0xf981d7, 0x64064, 0xdb3711, 0x147e70, 0xf01ef8, 0x1d9743, 0xef24a3, 0x15c45a, 0xe833a5, 0x13c95d, 0xea31a9, 0x1dc65c, 0xea31a9, 0x1cc95c, 0xe332b0, 0x1cfd1a, 0xe86d45, 0x18356c, 0xf70279, 0x111f6f, 0xf2085f, 0x102c3f, 0xf560b2, 0x1af40f, 0xe521e5, 0x1adb1b, 0xed22e3, 0x1bd718, 0xe22fe6, 0x1bd81a, 0xe22fe0, 0x1bd818, 0xe320e0, 0x14d81a, 0xe320e0, 0x1bd81a, 0xe22fe0, 0x19d818, 0xe22fe0, 0x1ad81c, 0xec2fe7, 0x14d71d, 0xe92eeb, 0x16d605, 0xe80fb9, 0x17bfc1, 0xecc283, 0x1b8ca4, 0xf6a8b8, 0x13a091, 0xc5add0, 0x24f958, 0xdb4b82, 0x24bb7d, 0xda4282, 0x26b77e, 0xdf4386, 0x26bb70,
				0xd14284, 0x27bb76, 0xd14082, 0x26b976, 0xd14080, 0x26b978, 0xde4180, 0x27b67a, 0xdc4080, 0x20b67a, 0xdc4080, 0x2ab676, 0xd34c83, 0x2eb76c, 0xd14288, 0x2e8025, 0xc5f37e, 0x1ed56f, 0xf9c27c, 0x1cdf4b, 0xf4e72c, 0x10bbb0, 0xff2f7d, 0xbe39a, 0xf41565, 0xbef9a, 0xf31866, 0xbef9a, 0xfd196c, 0x5e19c, 0xfa1875, 0x5ceca, 0xf256b6, 0x1f1b85, 0xf23392, 0x152686, 0xf139b7, 0x1a71c0, 0xf5046e, 0x7acb5, 0xfa764e, 0x58cb1, 0xf07642, 0x68db7, 0xfd7742, 0x28fae, 0xf54400, 0xd158, 0xeb8a44, 0x7b848, 0xe7a35d, 0x68d13, 0xe8e88a, 0x115b6d, 0xeb8592, 0x147d6d, 0xeb8395, 0x14787b, 0xeba5b9, 0x14123f, 0xed976d, 0x1fc55d, 0xfae07d, 0x1bf14e, 0xc1d316, 0x26bdb7, 0xd97c50, 0x2689af, 0xd87650, 0x2789af, 0xd87750, 0x278bac, 0xd87751, 0x278bae, 0xd87651, 0x278aa7, 0xd87043, 0x27a5ee, 0xdf059c,
				0x2862de, 0xdc23f4, 0x3402e8, 0xd211f2, 0x3903e9, 0xcb17c8, 0x2507d7, 0xc512fc, 0x21519e, 0xdec42d, 0x2126de, 0xd8c926, 0x243fdc, 0xd8c725, 0x2530de, 0xdec726, 0x263fd0, 0xd1c626, 0x2831dc, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626 };
		System.arraycopy(aFor, 0, key, 109210, aFor.length);
	}

	private static void init366(int[] key) {
		int[] aFor = { 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x293ede, 0xd1c626, 0x2a31d0, 0xd1c628, 0x2831d2, 0xd1c62e, 0x2730d6, 0xdfc820, 0x2334d4, 0xdcc031, 0x23019b, 0xcf6fcc, 0x164ada, 0xf556cd, 0x1470e2, 0xe23bbf, 0x1d553b, 0xe5304c, 0xd7208, 0xed5728, 0x9403c, 0xef5325, 0xa4e0f, 0xd27f4c, 0x3806c7, 0xc7b808, 0x3854f1, 0xc3a20d, 0x395bfa, 0xc0a30e, 0x3854fb, 0xc3ad16, 0x3f56ca, 0xc0a707, 0x3f1690, 0xd944d4, 0x14fdc, 0xe047cc, 0x46af3, 0xeb0e72, 0x13aba3, 0xee7b5a, 0x139ca4, 0xec655b, 0x1398a4, 0xec6659, 0x1399a2, 0xec6659,
				0x139ba4, 0xec6559, 0x139ba6, 0xec655d, 0x1398b2, 0xec7661, 0x13afc8, 0xec1fb7, 0x1872f8, 0xfb42d1, 0x264ef0, 0xf743c1, 0x1615bc, 0xe9a46e, 0x164b95, 0xeab168, 0x1c4693, 0xe9b069, 0x114692, 0xeab164, 0x164d96, 0xe9b57e, 0x160fd6, 0xcb6d8c, 0x545ba, 0xe17ce1, 0x62273, 0xebadb7, 0x18685d, 0xe08ea1, 0x196159, 0xe296a1, 0x196159, 0xe196aa, 0x166f44, 0xe995a3, 0x165307, 0xe62f50, 0xc6c71, 0xe14562, 0x45f74, 0xe04143, 0x36d2f, 0xe43ab3, 0xaa176, 0xf57898, 0xa8067, 0xf27a9e, 0x48f64, 0xfc7899, 0x58f63, 0xfc789b, 0x5806d, 0xfd789b, 0x58063, 0xf27899, 0xa8063, 0xf2789b, 0x98f63, 0xf2789b, 0xa8f67, 0xfc789c, 0x48066, 0xf97990, 0x6817c, 0xfb5bc0, 0x4ebb9, 0xfe96fa, 0xbd9dd, 0xe0fcc7, 0x4f5e0, 0xd2fbdf, 0xdad5b, 0xf21f8d, 0xdee72, 0xf3178d, 0xfe271, 0xf6168b, 0xfe171, 0xf71989,
				0xe17a, 0xf81b8f, 0xe27b, 0xf81a8d, 0xe275, 0xf81a8f, 0x1ed75, 0xfa1b8f, 0x6ed75, 0xfd1a8d, 0xbec79, 0xf2168d, 0xfed61, 0xf01b83, 0xfda28, 0xe3a873, 0x388e60, 0xdf9973, 0x3a8444, 0xd3b323, 0x35e8bf, 0xda7c72, 0x2eb095, 0xd1466a, 0x2ebc95, 0xd64b69, 0x2eb294, 0xd94563, 0x20bc8c, 0xdf4b6a, 0x2099dd, 0xd516ab, 0x3c5686, 0xd74a92, 0x305b81, 0xd57bb3, 0x3e2bc9, 0xccaf7c, 0x39199f, 0xc5c662, 0x3a3a9f, 0xcfc76d, 0x3a3b99, 0xc1c06a, 0x3e3784, 0xc6fd34, 0x33686d, 0xd83371, 0x32017d, 0xd21a68, 0x323725, 0xdf52b2, 0x24e157, 0xd83fa8, 0x27c657, 0xd838a1, 0x27c24d, 0xd813fa, 0x268e88, 0xd4ebb0, 0x3ad492, 0xdcf48d, 0x38ecb0, 0xe6c3d6, 0xabf78, 0xf57992, 0xa8f6d, 0xf47092, 0xb8f6d, 0xf47090, 0xb8d6a, 0xf47097, 0xb8d68, 0xf47097, 0xb8f6a, 0xf47287, 0xb9138, 0xf42bb1, 0xbace5, 0xf2f9ca,
				0x15dfd7, 0xf6cdc0, 0x18dbdb, 0xebc3fb, 0x6d3e4, 0xdac4cf, 0x3888a6, 0xc72d1b, 0x38dce7, 0xc12b1d, 0x3ed0e1, 0xc02819, 0x3bdfe1, 0xc32916, 0x35d1e5, 0xc22813, 0x3bdfe9, 0xc22815, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817 };
		System.arraycopy(aFor, 0, key, 109510, aFor.length);
	}

	private static void init367(int[] key) {
		int[] aFor = { 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0ef, 0xc22817, 0x3ad0e1, 0xc22817, 0x35d0ed, 0xc22811, 0x34dee9, 0xcd261d, 0x33ddef, 0xcc2e0a, 0x33eea6, 0xde80fd, 0x7a7e6, 0xefbaff, 0x7a5d6, 0xf788eb, 0x1b5a4, 0xef8de1, 0x1fbfd5, 0xf7a1cb, 0x1db3dc, 0xfdbfc7, 0x1e9985, 0xf7c3f3, 0xf654f, 0xf8b690, 0x7426a, 0xffbb91, 0x54368, 0xfcb492, 0x4436f, 0xfdba98, 0x14079, 0xfeb0a8, 0x10131, 0xe75375, 0x3f587d, 0xde506d, 0x3a7d52, 0xd519d1, 0x2dbc00, 0xd06cf9, 0x2e8406, 0xd17ef9, 0x2e8306, 0xd17efc, 0x2e8107, 0xd17ffd,
				0x2e8207, 0xd17efb, 0x2e8307, 0xd17cfd, 0x2e810c, 0xd177d1, 0x2e9e11, 0xd15c89, 0x272ad2, 0xc705fb, 0x2409e5, 0xf201c9, 0x1051be, 0xeffd72, 0x101485, 0xedec7b, 0x141484, 0xe3e37b, 0x191785, 0xe3e27e, 0x1a1988, 0xe5e062, 0x1a5fc5, 0xf23591, 0x2a168d, 0xcd35a2, 0x2902c0, 0xc2645d, 0x2ff889, 0xda3f7c, 0x22df84, 0xdd2a7b, 0x22d284, 0xde2570, 0x22dc98, 0xdd2a46, 0x229cdd, 0xc7ff96, 0x27d58a, 0xcfcc99, 0x29db84, 0xcefec4, 0x28c9be, 0xc3ac12, 0x2c0fc3, 0xd1d430, 0x2e23cf, 0xd7da36, 0x2f2cc1, 0xd6db39, 0x2f2cc1, 0xd6db39, 0x2f23cf, 0xd7db39, 0x2f23c1, 0xd8da39, 0x2f23c1, 0xd7db39, 0x2b23c0, 0xd2d438, 0x2a23c4, 0xdcd43f, 0x2b2cc5, 0xd0d630, 0x2f2fda, 0xd3f564, 0x2e441b, 0xda3b51, 0x356a7d, 0xd34d60, 0x324647, 0xe6497a, 0x381ef8, 0xc7aa2b, 0x3858d6, 0xc2a42d, 0x3a53d1, 0xcca42a,
				0x3b5cd7, 0xcca42b, 0x3553d1, 0xc9ab28, 0x3053de, 0xc9ab28, 0x3153d0, 0xc9ab2a, 0x3e53d6, 0xc6a42a, 0x3e5cd0, 0xc6a428, 0x355cdc, 0xcda728, 0x335dc6, 0xcca922, 0x33698f, 0xdc19d0, 0x23dc7, 0xe828de, 0xf34e7, 0xe60380, 0x581c, 0xefccd3, 0x1b0034, 0xe4f6cb, 0x1b0c34, 0xe3fbc9, 0x1b0237, 0xecf5c0, 0x170c2d, 0xe8facc, 0x17367d, 0xe3b10d, 0x822b, 0xe69225, 0x992a, 0xe6b818, 0xde165, 0xf972d9, 0x1b632, 0xf853cd, 0x5ae32, 0xf752c1, 0x1a934, 0xfc53c1, 0x3a630, 0xff6e83, 0x7fddc, 0xeca7fd, 0x695f3, 0xd88ee6, 0x7a0ad, 0xebc439, 0x1077da, 0xeca925, 0x1353da, 0xecad2f, 0x1355c5, 0xef9168, 0x11190a, 0xff552c, 0x137b3a, 0xf66127, 0x137c63, 0xf24613, 0x19c2a2, 0xe40545, 0x1bf2ba, 0xe50d45, 0x1af2be, 0xe50d44, 0x1af2b9, 0xe50d46, 0x1bf2b9, 0xe50d46, 0x18f2bc, 0xe70c53, 0x18e596, 0xe72300,
				0x18b55e, 0xe0ea6d, 0x7c370, 0xe3d165, 0x9c97c, 0xe7d061, 0xedf7c, 0xd7cb54, 0x368c37, 0xc91484, 0x36f077, 0xc9058c, 0x36fc7b, 0xca058f, 0x3cfd7c, 0xcf0588, 0x39f271, 0xc10a8b, 0x39f271, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b };
		System.arraycopy(aFor, 0, key, 109810, aFor.length);
	}

	private static void init368(int[] key) {
		int[] aFor = { 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x39f273, 0xc10a8b, 0x36f373, 0xc30a8b, 0x36f371, 0xc10b8b, 0x37fd7d, 0xce0589, 0x31ff7f, 0xce0d97, 0x31cd27, 0xdebf47, 0x5965c, 0xee8d4b, 0x4956a, 0xe2834e, 0x1956b, 0xe58d48, 0x9b54, 0xe48a4c, 0xf9e6a, 0xd3885b, 0x37ca3c, 0xcb4097, 0x34967c, 0xcb7884, 0x308178, 0xc97b84, 0x33837d, 0xca7487, 0x3d8378, 0xc47a81, 0x388167, 0xc772b4, 0x38c32d, 0xdd976e, 0x59d64, 0xe49575, 0xb834, 0xefdcb7, 0x187b79, 0xe3aa8c, 0x1c4071, 0xe3b98c, 0x1c407f, 0xe3b597, 0x1c4474, 0xe3ac94,
				0x1c4d75, 0xe39397, 0x1c777d, 0xe39c93, 0x1c6d7c, 0xe39b94, 0x1c6842, 0xe3bbf3, 0x1d3d98, 0xf800a8, 0x190ebd, 0xcf059c, 0x2a4ef3, 0xd5ed34, 0x2a32c2, 0xd4c23d, 0x2834c2, 0xd2cc3d, 0x2939c2, 0xd2cf3e, 0x2735cd, 0xd8c22b, 0x27028c, 0xd46dda, 0x344cd5, 0xd043c6, 0xe5c86, 0xed15fb, 0xe6a46, 0xe2dba1, 0x170d54, 0xe8f8ab, 0x170154, 0xe9f7a7, 0x160045, 0xe9f291, 0x165801, 0xcb083f, 0x1c1f2b, 0xfe143b, 0x180120, 0xf02b64, 0x1962ed, 0xf71450, 0x7bb8a, 0xfb5b7d, 0x4ac82, 0xf3557a, 0x4a28f, 0xfc5a79, 0x5ad81, 0xfc5a79, 0x5a28f, 0xfd5a79, 0x5a281, 0xf25b79, 0x5a281, 0xfd5a79, 0x7a38e, 0xfe5476, 0x6ac8c, 0xf05b77, 0x7a38d, 0xfc5978, 0x3a194, 0xff7b2a, 0x4caaa, 0xf7b5e6, 0x19e4c8, 0xfdccd7, 0x1dc7f0, 0xcec8cd, 0x109f4d, 0xef2b9c, 0x10d867, 0xea249c, 0x12dc66, 0xe52a9a, 0x12d267,
				0xe52a9a, 0x1dd260, 0xe72a99, 0x1cdd6f, 0xe72a97, 0x1edd6d, 0xe62a91, 0x13d36d, 0xe62a91, 0x11d26d, 0xe62a97, 0x15dd6f, 0xed279a, 0x13dd74, 0xec2996, 0x13e93b, 0xfc9964, 0x23ba7c, 0xc9af65, 0x2eb252, 0xc78535, 0x21deab, 0xce4a7a, 0x3a869d, 0xc57062, 0x388b9d, 0xcf7361, 0x39849a, 0xcc736e, 0x348a87, 0xcb7f5b, 0x34b7fd, 0xc6349a, 0x191ebb, 0xfb19b0, 0x1d1fa1, 0xf83e94, 0x125e15, 0xe7c1d7, 0x1e1127, 0xe6fad8, 0x1a0727, 0xe9fed2, 0x1f042b, 0xe2fdd3, 0x1d0920, 0xe1ce95, 0x195cf4, 0xf505d7, 0x1f37d9, 0xc12ccc, 0x1c0287, 0xf06613, 0xbd5f0, 0xf50a0f, 0xaf0f0, 0xf50c01, 0xaffde, 0xf04643, 0x3280c, 0xe01919, 0x50214, 0xe6160e, 0x3247, 0xe57b3e, 0x16ef80, 0xe93a72, 0x16c38d, 0xe83c70, 0x17c38a, 0xe83c70, 0x17c28f, 0xe83d70, 0x16c28f, 0xe83d70, 0x16c285, 0xe93960, 0x16dddd, 0xe91949,
				0x168a28, 0xeed01b, 0x8f401, 0xeee514, 0x4f00d, 0xebe810, 0x2f80b, 0xd9ea2f, 0x3bd67b, 0xc156e2, 0x3e9f39, 0xc17dd6, 0x3e8e20, 0xc276d7, 0x3a8c20, 0xcc76d9, 0x3b8e23, 0xcc78d8, 0x3a8f21, 0xc277db, 0x3b8023, 0xc277db, 0x3a8f23, 0xc277db, 0x358e23, 0xc277db, 0x3a8f23, 0xc277db, 0x3a8f23, 0xc277db, 0x3a8f23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db };
		System.arraycopy(aFor, 0, key, 110110, aFor.length);
	}

	private static void init369(int[] key) {
		int[] aFor = { 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xcd76db, 0x358e23, 0xc276d9, 0x368e22, 0xc374df, 0x358e26, 0xc376d3, 0x348021, 0xc878d6, 0x37822a, 0xc871db, 0x37b26d, 0xdedd37, 0x1f12f, 0xeded3f, 0xfa20, 0xe9e801, 0xff21, 0xe5ed38, 0xde12e, 0xe5f00d, 0xcd34b, 0xe8ee23, 0x79cbf, 0xf82c6f, 0x7c496, 0xfc306d, 0xc992, 0xfb336d, 0xcc49a, 0xf53f60, 0x2c79d, 0xf93c64, 0xc787, 0xff3354, 0x84cd, 0xe1d7f2, 0x36def9, 0xd0d7e1, 0x35fca3, 0xdb9922, 0x2237ef, 0xdeef1d, 0x2105ea, 0xdefd19, 0x210fc1, 0xdeec7e, 0x202bd6, 0xd68e44, 0x270dc0,
				0xdf8854, 0x2a1cf3, 0xd0af36, 0x2c7cd7, 0xd19b3e, 0x2e6adc, 0xd1b11d, 0x2e276b, 0xc57558, 0x2c504f, 0xf94259, 0x260205, 0xdb8fb0, 0x24485e, 0xdd96a3, 0x22645c, 0xdc9ca3, 0x26685d, 0xdf9fa5, 0x266249, 0xd99690, 0x262d33, 0xc84c7e, 0x105878, 0xf55769, 0x174a50, 0xf8052d, 0xa8cef, 0xf7331d, 0xceeea, 0xf31615, 0xceeea, 0xf21819, 0xfe9c0, 0xf00e04, 0xd9179, 0xd6d84b, 0xccc58, 0xebc04a, 0xacf58, 0xe4fb11, 0xb9b87, 0xfe0857, 0xbc9b0, 0xf72e4a, 0xcd6b5, 0xfb2d4f, 0xedabb, 0xf9234d, 0xd4b5, 0xf9234d, 0x1dbbb, 0xf9234d, 0x1dbb5, 0xf9234f, 0xedbb5, 0xf6234d, 0xfdbbb, 0xf42c43, 0xddbb9, 0xfa2d42, 0xfd4b8, 0xf52f4e, 0xad7a0, 0xf70e1f, 0xabf60, 0xfec02a, 0xe9004, 0xe9b625, 0x9bd0c, 0xd8ad31, 0x7fbb1, 0xf84f60, 0x7bd9b, 0xfc4660, 0xb39c, 0xf94166, 0x1b49a, 0xf94d61, 0xcb696, 0xfb4a6e,
				0x2bd96, 0xf94b6c, 0x2bd90, 0xfa4a6c, 0xeb096, 0xfa4a6c, 0xdb290, 0xf5456c, 0x3b097, 0xf44760, 0x9bc8e, 0xf64a6e, 0x989c5, 0xe5e69c, 0x38c58b, 0xd0d392, 0x36cfa0, 0xdef8c3, 0x3aa362, 0xd530b6, 0x22fa51, 0xdd0cae, 0x20f752, 0xd50da4, 0x20f45c, 0xd708a9, 0x2ff34f, 0xd0009e, 0x2fc709, 0xdd4650, 0x3f6c70, 0xdb6a61, 0x336e7a, 0xd64e44, 0x3923cb, 0xcc8f02, 0x3152f0, 0xc7bc0b, 0x3d4bf5, 0xc7b20b, 0x324bf7, 0xcfb00b, 0x3046fb, 0xc88c48, 0x301e29, 0xdb460b, 0x30751a, 0xed690d, 0x314742, 0xd822d5, 0x249633, 0xdb48cc, 0x24be30, 0xdb49d5, 0x24a41f, 0xdc0a98, 0x2c69d0, 0xf049c4, 0x1159c8, 0xcf56d1, 0x2c789c, 0xc11816, 0x3fb4c2, 0xc06f3a, 0x3f97c5, 0xc0683e, 0x3f96c5, 0xc0683e, 0x3f96c1, 0xc06b3e, 0x3f90c1, 0xc06d3c, 0x3f96db, 0xc06610, 0x3cd982, 0xcb4be6, 0x3a2ad9, 0xd411fe, 0x3e0ce6,
				0xd900f6, 0x320be3, 0xdd04f9, 0x3015e2, 0xd104fc, 0x372fc0, 0xd160a2, 0x2bf408, 0xd435de, 0x2bd72c, 0xd525d0, 0x2ed32a, 0xd72ad3, 0x21dc2b, 0xd825d0, 0x2fd32b, 0xd624d7, 0x2ad32c, 0xd124d4, 0x29dc2e, 0xde24d4, 0x2adc2d, 0xd92bd5, 0x2edc22, 0xd424db, 0x2ddc2d, 0xd524d5, 0x22dd2d, 0xd724d7, 0x20dc2d, 0xd824d7, 0x21dc21, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7 };
		System.arraycopy(aFor, 0, key, 110410, aFor.length);
	}

	private static void init370(int[] key) {
		int[] aFor = { 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd824d7, 0x20dc2f, 0xd724d5, 0x22dd29, 0xd427d4, 0x21de2c, 0xd429d8, 0x23df2a, 0xd828de, 0x25df29, 0xda2ec2, 0x25ea73, 0xc99829, 0x28b43e, 0xc7a82f, 0x29bf31, 0xc6a815, 0x28b035, 0xcfa428, 0x2ea836, 0xceb100, 0x288d69, 0xc3eaf1, 0x337231, 0xcab5d3, 0x35472e, 0xc3b0d5, 0x36442f, 0xc1b2d4, 0x374422, 0xcebcd6, 0x314b24, 0xceb2c8, 0x314b17, 0xcebbc7, 0x310a5f, 0xdb581b, 0x5214, 0xe35401, 0x47840, 0xfc10c1, 0x3be09, 0xfc6be5, 0x38e15, 0xfc65f6, 0x38549, 0xfc49eb, 0x3e892, 0xeb80df,
				0x30b9e8, 0xee81ae, 0xcd3c7, 0xe0535d, 0x11e68c, 0xe63160, 0x19da8d, 0xe60543, 0x19adc1, 0xe8c180, 0x4fa9c, 0xd2e18e, 0xcd7de, 0xf0a07a, 0xf0e9a, 0xf3c162, 0xc2e9d, 0xf1d562, 0xa239e, 0xf3db6d, 0xa2689, 0xf5d558, 0xa63c2, 0xed3a87, 0x393482, 0xd83e8d, 0x3e18b2, 0xca4431, 0x30dcf8, 0xcf150b, 0x36f5fe, 0xc90d01, 0x34f7fe, 0xcb0c0b, 0x34e2db, 0xcb3475, 0x33be12, 0xd1fc3e, 0xfee2d, 0xeae738, 0xbe822, 0xfad775, 0xba1d0, 0xf00c0f, 0xaddfe, 0xf13002, 0xacafd, 0xff3104, 0x9c9f1, 0xf13107, 0x8c6ff, 0xf13107, 0x9c9f1, 0xfe3007, 0x7c7fd, 0xff3f07, 0x7c7fd, 0xff3f05, 0x6c7f3, 0xfd300b, 0x4c7f1, 0xf3310a, 0x6c8f0, 0xfc3306, 0x3cbe8, 0xfe1257, 0xa32c, 0xf6dc6b, 0x59245, 0xedb764, 0xcbd4f, 0xdfb270, 0x3ee4f0, 0xc15021, 0x3ea2db, 0xc45e20, 0x38a9dd, 0xc35d26, 0x3babdd, 0xcd5c24, 0x3fa5d6,
				0xcb5e22, 0x32a7db, 0xce5026, 0x32a7db, 0xcb5f26, 0x3ea4df, 0xcb5f26, 0x32a6df, 0xc85e24, 0x3eabdf, 0xc75c27, 0x3ba0d7, 0xc45437, 0x3b979d, 0xd6e7c7, 0x9c2df, 0xe3d7c8, 0x4cafb, 0xedf29f, 0xba83e, 0xf93beb, 0xf003, 0xff06fe, 0x3fa02, 0xf601f5, 0x2fb03, 0xfa07ed, 0x3f033, 0xfc1cf7, 0x3a37d, 0xf7d82d, 0x13ff0c, 0xf7fa1b, 0x1eff3d, 0xfadd7a, 0x17a9ef, 0xe01e3e, 0x1ffbca, 0xe60f31, 0x1bf7ce, 0xe10e31, 0x14f7cd, 0xef0c34, 0x10fbda, 0xe73068, 0x1fa337, 0xf2f415, 0x1fc604, 0xc1dd13, 0x1ff243, 0xf497db, 0xf243e, 0xf1ffc2, 0xe0d36, 0xf1fce1, 0xe1954, 0xf4bf23, 0x19ea1d, 0xc2f209, 0x27fe1d, 0xc7f13f, 0x25c668, 0xd6b1f3, 0x297515, 0xd790ee, 0x286d11, 0xd792ea, 0x286c10, 0xd790eb, 0x286c15, 0xd797ea, 0x286011, 0xd796ff, 0x287d32, 0xd7a782, 0x2d3ced, 0xce61d7, 0x1050f4, 0xf14dea,
				0x2c59f4, 0xf049e8, 0x2c47f2, 0xf04ae5, 0x145bf2, 0xfe42ec, 0x155dc6, 0xc379f4, 0x242786, 0xdab833, 0x2569d5, 0xda8a20, 0x277ad9, 0xd98324, 0x207add, 0xd88024, 0x2f77dd, 0xd28c23, 0x2b79d5, 0xd18f22, 0x2977da, 0xde8f20, 0x2875db, 0xd18f27, 0x2977dd, 0xde822b, 0x2775d3, 0xdf8d2b, 0x2a74d3, 0xdf8d29, 0x2875d3, 0xd08d29, 0x2975df, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29 };
		System.arraycopy(aFor, 0, key, 110710, aFor.length);
	}

	private static void init371(int[] key) {
		int[] aFor = { 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2875d1, 0xd08d29, 0x2975df, 0xd08d29, 0x277ad0, 0xd08d29, 0x2875d1, 0xd38f24, 0x2f75cf, 0xd08114, 0x2f3f8b, 0xc656c7, 0x1d72d5, 0xed69c0, 0x1d71dd, 0xed66ff, 0x73dd, 0xe969f1, 0x3277cb, 0xef4fab, 0x62933, 0xf3b1f4, 0x87317, 0xf796ef, 0x86810, 0xfc95ea, 0xf6911, 0xf795ec, 0xb6e15, 0xf69dfc, 0x9752c, 0xf6af96, 0x9633a, 0xf6dba4, 0x95ed3, 0xe71eec, 0x3812ff, 0xda18e8, 0x3d30d0, 0xcb64b9, 0x34e126, 0xcb419e, 0x34f121, 0xcb5e8f, 0x34fa04, 0xcb6b68, 0x3c0c2a, 0xe73e3f,
				0x2b343f, 0xe53f30, 0x31180a, 0xd47875, 0x25dbb8, 0xdd154e, 0x23f3b2, 0xdc116f, 0x21abff, 0xd522ac, 0x257687, 0xf95e9d, 0x1977da, 0xee2156, 0x17a895, 0xed1171, 0x16f886, 0xe1017e, 0x1cf884, 0xe0006b, 0x1dfeb5, 0xe20a79, 0x1db9ee, 0xfeedad, 0x2fe6a5, 0xf3ecb6, 0x2cc1f5, 0xdcaa7d, 0x2507ac, 0xd8dd54, 0x2d35ad, 0xd5ce52, 0x2231ad, 0xddcc59, 0x222b9d, 0xdd9509, 0x2bfa58, 0xc7c271, 0x26d267, 0xc6d57b, 0x1fd951, 0xf29c38, 0x61680, 0xf9df71, 0x63e88, 0xfbcf75, 0x13589, 0xf4cf7f, 0xd3688, 0xf4ce7e, 0xd3986, 0xf4ce7e, 0xc3688, 0xfbcf7e, 0x23884, 0xfac07e, 0x23886, 0xfac07e, 0x33888, 0xf8cf7e, 0x13884, 0xf6ce7f, 0x33785, 0xf9cc73, 0x6349d, 0xfbee21, 0x65c59, 0xf0dc1b, 0x59231, 0xeeb62e, 0xabe05, 0xdcb344, 0x3fe7c6, 0xc05515, 0x3fa1e8, 0xcb5e13, 0x3fa6e8, 0xca5012, 0x33a7ee,
				0xca5016, 0x3da7e3, 0xc45d16, 0x32a5e3, 0xc45d14, 0x3cabed, 0xcb5c14, 0x38a5e1, 0xcb5f12, 0x3ca7e1, 0xc45014, 0x3ca6ed, 0xc75f17, 0x39a1e3, 0xc65406, 0x3997ab, 0xd7e6f0, 0x35c2e4, 0xdcd1f7, 0x3bccc2, 0xdcf9a7, 0x39a13a, 0xcd30eb, 0x34f80d, 0xcb0cf3, 0x31f70c, 0xc30bf1, 0x36f704, 0xcb0def, 0x34e33d, 0xcb388f, 0x3493f4, 0xc2febd, 0x27db99, 0xc4d387, 0x20d5aa, 0xfff1e5, 0x13897e, 0xef49a7, 0x10a750, 0xe851a9, 0x13a855, 0xeb50af, 0x1ea957, 0xe252a1, 0x1da44a, 0xe46ee4, 0x1fffb9, 0xefa999, 0x9888, 0xe1829d, 0x3eaed7, 0xd0cb44, 0x2f78a5, 0xd0a45c, 0x2f56b6, 0xd0bf71, 0x2f6deb, 0xd8fb88, 0x34b1bb, 0xefa0aa, 0xaa3bd, 0xd6aa94, 0xb91f4, 0xf31e5a, 0xcffaf, 0xf60b51, 0x8f5af, 0xf60a52, 0x9f5af, 0xf60a52, 0x9f6ad, 0xf60154, 0x9e68a, 0xf6304a, 0x9f2d1, 0xf655ac, 0x434ee, 0xd81ff5,
				0x70bed, 0xe21cc1, 0x23b86, 0xe600de, 0x54391, 0xe17daf, 0x95185, 0xe27199, 0xb608f, 0xd26b9a, 0x315fdf, 0xc6305c, 0x3a93eb, 0xc0563c, 0x3cb4d3, 0xc0412f, 0x35b8d7, 0xc64122, 0x35b4d6, 0xc34220, 0x39bbd7, 0xc2412f, 0x3bb8d8, 0xcc4f2f, 0x3bb7d5, 0xc24f28, 0x38b7d5, 0xc0412e, 0x38b9d4, 0xc0412c, 0x37b8d4, 0xc0412c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c };
		System.arraycopy(aFor, 0, key, 111010, aFor.length);
	}

	private static void init372(int[] key) {
		int[] aFor = { 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf402c, 0x37b8d4, 0xcf4022, 0x33b8d7, 0xca4023, 0x3db7da, 0xc54026, 0x3fbadc, 0xc14033, 0x3eb6e8, 0xc15d2e, 0x3eeca0, 0xd8b69f, 0xfaf92, 0xfeb688, 0x10a197, 0xf4b188, 0x2bbead, 0xcf99e8, 0x2dd186, 0xc6a31b, 0x3238d2, 0xcdf93a, 0x3227cc, 0xcdd636, 0x3221c0, 0xcdd42e, 0x3223db, 0xcddb2c, 0x322edd, 0xcdcf0c, 0x3205aa, 0xcea2d4, 0x3e25be, 0xd04ce6, 0x3b0ed9, 0xd028f4, 0x3d3ce9, 0xd329f7, 0x390bdb, 0xd139e4, 0x347bb1, 0xd036d1, 0x31668e, 0xef35d8, 0x367a9a, 0xee3cb5, 0x360ea9,
				0xf912a1, 0x301fa0, 0xf90eb1, 0x322887, 0xec75fc, 0x1d532, 0xf419ca, 0xeff35, 0xf116dc, 0xed97b, 0xf0720e, 0x80148, 0xe9376c, 0x32215e, 0xd10903, 0x325192, 0xc6ca5b, 0x392baf, 0xc6d650, 0x3b21a9, 0xc5d644, 0x3a2a9f, 0xc5d854, 0x3a6bc1, 0xdf3885, 0xa3497, 0xd738b6, 0xb0afb, 0xe47d68, 0x18c0b0, 0xe6274b, 0x11d5b3, 0xe62848, 0x15d6b0, 0xea2c57, 0x15f5e7, 0xe95492, 0x1807aa, 0xea2b89, 0xe3b95, 0xd330bd, 0x424fd, 0xe26a80, 0x11f447, 0xee14b9, 0x11f946, 0xea0dbd, 0x12f545, 0xe702b1, 0x1cf849, 0xe60ebc, 0x1ff944, 0xe701bc, 0x1ff94a, 0xe800bc, 0x10f846, 0xe800bc, 0x1ff944, 0xe701b2, 0x1ef944, 0xe50eb2, 0x1cf948, 0xeb0eb1, 0x1ef749, 0xe40cbc, 0x1bf452, 0xe62eee, 0x1b9d98, 0xed1dd8, 0x1853f2, 0xf377ed, 0x177fc1, 0xc17282, 0x242106, 0xdb90d2, 0x24662d, 0xd698d7, 0x26612f, 0xd496d5,
				0x2d6e28, 0xd499d2, 0x2d6c24, 0xd59bd1, 0x216224, 0xd59ad3, 0x226d2a, 0xd59add, 0x266328, 0xd59add, 0x236228, 0xdb95dd, 0x2c6025, 0xd699d2, 0x296422, 0xd691c2, 0x295569, 0xda2432, 0x3c0124, 0xd21733, 0x350b0a, 0xd13d6d, 0x3065f1, 0xc0f721, 0x373ec4, 0xc8ca39, 0x3e31c6, 0xcfca3b, 0x3a30cd, 0xc5c827, 0x3a2ae3, 0xc59474, 0x3f1d2b, 0xcc4511, 0x286533, 0xcb6f16, 0x16662f, 0xcf4d71, 0x2733d7, 0xd9fb35, 0x2609cf, 0xdef137, 0x2609cf, 0xd0ff39, 0x2706cf, 0xd9fd3b, 0x260bd2, 0xddc17e, 0x265325, 0xc8043b, 0x263634, 0xc62d21, 0x19016b, 0xf465f9, 0xbd727, 0xf40ad2, 0xbe732, 0xf4329c, 0xb82e7, 0xfdfbac, 0x13c486, 0xccd593, 0x2dd3b7, 0xfbdc8d, 0x2096f8, 0xda353d, 0x25dac3, 0xdf213e, 0x23dfc5, 0xdd203c, 0x22dfca, 0xdd223e, 0x22d5c8, 0xdd332a, 0x22f69e, 0xd8691a, 0x371e4e, 0xd84474,
				0x76a6a, 0xd27e7f, 0xb6757, 0xee5507, 0x30283, 0xf47b1c, 0x9f486, 0xf67f01, 0x192552, 0xc00d70, 0x19007e, 0xfb1168, 0x190f40, 0xf83804, 0x1b5876, 0xe9ccd0, 0x160807, 0xe9edf4, 0x161f0f, 0xe9e3f0, 0x16190f, 0xece1f4, 0x1b1603, 0xe2eff4, 0x1b1603, 0xece1f6, 0x1a1700, 0xede0f9, 0x151705, 0xeceff8, 0x151804, 0xeceffe, 0x141708, 0xeceffe, 0x1b1608, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe };
		System.arraycopy(aFor, 0, key, 111310, aFor.length);
	}

	private static void init373(int[] key) {
		int[] aFor = { 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x141706, 0xeceffe, 0x151609, 0xedeeff, 0x1b1906, 0xe3e0fd, 0x181a0b, 0xe7eeef, 0x180b2e, 0xe7db88, 0x184efa, 0xff0bca, 0x2806c1, 0xc715dc, 0x2b00f8, 0xc917d5, 0x140894, 0xf242e6, 0x1fc649, 0xe37ea8, 0x1cad51, 0xe349ae, 0x1cac43, 0xe37890, 0x1cc42a, 0xe37891, 0x1cc12a, 0xe37b90, 0x1ccc3f, 0xe36db4, 0x1eeee8, 0xf3b5dc, 0x1380fd, 0xc999e9, 0x1493f8, 0xfd98ee, 0xf97f4, 0xfd86ed, 0x1595f8, 0xcb85ea, 0x1189fa, 0xc885e9, 0x782f8, 0xc890e1, 0x18b1c9, 0xcc9efa, 0x11a4c5,
				0xcb9b86, 0x1edec3, 0xd0978d, 0x9c8e1, 0xee407f, 0x1f7a5, 0xf3205d, 0x4cba2, 0xfa3853, 0x5d095, 0xfa1e35, 0x58d5e, 0xe3ce6e, 0x35c977, 0xeec345, 0x33f623, 0xc38d8b, 0x3d4f6f, 0xc2a690, 0x394969, 0xc4bf99, 0x3a4843, 0xc5a48b, 0x3a0a19, 0xd2455e, 0xa4f40, 0xd7456d, 0x87332, 0xfb0c96, 0x4c772, 0xfb3689, 0x1c366, 0xf93f8d, 0xfc16a, 0xf036bd, 0xffd20, 0xe08277, 0x6b369, 0xf4af75, 0x13bb56, 0xf2a16d, 0x2b8933, 0xcceda9, 0x3d597c, 0xc2ab83, 0x3d5c7c, 0xc4ab86, 0x335c71, 0xc5aa87, 0x395270, 0xc0a784, 0x39507c, 0xc1a884, 0x395072, 0xcea984, 0x36517e, 0xcea984, 0x39507c, 0xc1a88a, 0x38507c, 0xc3a78a, 0x3a5072, 0xcda78b, 0x3a5e73, 0xc1a486, 0x3e5c68, 0xc386d4, 0x3835ad, 0xccb5ee, 0x3efac0, 0xd6dfe3, 0x37d6d3, 0xe3db97, 0x68911, 0xf938c5, 0x6cb38, 0xf335c3, 0x1ce39, 0xf236c2, 0x4cf3c,
				0xfc38c1, 0xbcd3b, 0xf335c1, 0x5cf3a, 0xf335c1, 0xacc3a, 0xf335c1, 0x6ce38, 0xf532c3, 0x3c83e, 0xfa30c3, 0x2c839, 0xf83fc9, 0x4c828, 0xfb23e4, 0x49472, 0xeaf038, 0x9ed2c, 0xe7fe37, 0x2e00c, 0xe6dd67, 0x6bcc3, 0xeb2516, 0x1febf1, 0xe01d0f, 0x17e1f0, 0xe61a0d, 0x10e2f8, 0xef1514, 0x10c4ac, 0xea5dd4, 0x53ce9, 0xf402ce, 0x121bd0, 0xf10be0, 0x2a13b0, 0xf12ccc, 0x18a075, 0xe57199, 0x1a8766, 0xe27e9d, 0x15896a, 0xe37f9c, 0x14866a, 0xea7d98, 0x158a7f, 0xec41d5, 0x14d58c, 0xfe8f91, 0x16ba9c, 0xcca489, 0x118bd9, 0xfaee4e, 0x5c94, 0xff8679, 0x58b7, 0xfceb27, 0x49570, 0xf4c540, 0x1fee5c, 0xfaf643, 0x1fed02, 0xc3c361, 0x20a9fc, 0xdd1e20, 0x22eddf, 0xdc1321, 0x23ecd9, 0xdc1236, 0x23eed4, 0xdc0604, 0x23c8bb, 0xdc6327, 0x20e74b, 0xd0bd74, 0x339063, 0xef886f, 0x379f73, 0xeeb54a, 0x33fe14,
				0xdf8b87, 0x212a57, 0xde95b0, 0x214957, 0xde9083, 0x21341d, 0xc85c7e, 0x2a6145, 0xcd486c, 0x105b7f, 0xc7546d, 0x1f7643, 0xf42621, 0xf59ba, 0xf0fa7b, 0xe46a3, 0xf1904d, 0xa73b4, 0xf39d48, 0x46bb3, 0xf29344, 0xb6bb2, 0xf19247, 0x96ab1, 0xff9246, 0xb6abf, 0xf29242, 0xe67be, 0xf09244, 0xc64b2, 0xf49d46, 0x66b2, 0xf49c44, 0x364be, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44 };
		System.arraycopy(aFor, 0, key, 111610, aFor.length);
	}

	private static void init374(int[] key) {
		int[] aFor = { 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0x364bc, 0xfb9c44, 0xc65bc, 0xf99c44, 0xa65bd, 0xfc9f44, 0x763b2, 0xf88c6f, 0x75ec4, 0xf8ee47, 0x79813, 0xeda134, 0x36ad26, 0xd1a307, 0x36ba37, 0xd1967c, 0x35d513, 0xd8a6b1, 0x290c63, 0xd6d09f, 0x293c60, 0xd6d39a, 0x2d1f5c, 0xf090de, 0x3cc692, 0xe292c3, 0x38dd97, 0xe38dc2, 0x3fdc8c, 0xe394b0, 0x3ca996, 0xe28281, 0x3c9b92, 0xe19780, 0x38948d, 0xd99d9b, 0x3d9381, 0xe29d95, 0x388d85, 0xe0808c, 0x3b878f, 0xe7818b, 0x338480, 0xe493a2, 0xcd2f0, 0xf3bf70, 0xc30d3, 0xf39162, 0xc3ed4, 0xf38f62,
				0xc36a0, 0xf3fd79, 0xc1d8c, 0xf6f673, 0xf058c, 0xf4f278, 0xa01af, 0xf5e214, 0xa4494, 0xef14ac, 0x3c1ca0, 0xdc1480, 0x393fd2, 0xd46158, 0x20f89d, 0xd93f77, 0x22db81, 0xdd2d70, 0x22d8a5, 0xdd3c1f, 0x229b98, 0xcad0da, 0x13d8ff, 0xcfd0c5, 0x11e6af, 0xe76400, 0x18b7ea, 0xe74210, 0x1bbaff, 0xe74119, 0x19bac3, 0xe64a0b, 0x19f186, 0xf193b9, 0x2d84b7, 0xc18ba1, 0x2b908c, 0xcfbcc2, 0x10fabc, 0xfc7b09, 0xdbed7, 0xf24628, 0xcbfd7, 0xf4472d, 0x2b0d4, 0xf54723, 0xfbed4, 0xf44922, 0xdbeda, 0xf54622, 0x2bfda, 0xf5462c, 0xdbed4, 0xf5462e, 0x2bfd6, 0xfa4720, 0x3bfd4, 0xf84822, 0x1bfda, 0xf64823, 0x1b1db, 0xfa4b2e, 0x5b3c0, 0xf8697e, 0x5db07, 0xf15b40, 0x10b70, 0xe62e55, 0x62465, 0xd52a23, 0x3679ab, 0xc9c97d, 0x363b80, 0xcfc67c, 0x3a3d87, 0xc8ca7d, 0x3e3d86, 0xc4c57d, 0x3b3286, 0xc4cb7a,
				0x3b3382, 0xc4c47a, 0x3b3282, 0xc4c47a, 0x3b3c82, 0xc4c478, 0x3b3286, 0xc4c47a, 0x3b3c80, 0xc4ce69, 0x3b27a2, 0xc4f30d, 0x3b6e74, 0xdd3e4c, 0x62e40, 0xe32559, 0x60565, 0xef4d11, 0x838a2, 0xf89242, 0xd47ae, 0xf2be53, 0x544ac, 0xf6bc57, 0xe45a3, 0xf1bd4e, 0xe79e5, 0xfe03b9, 0x18429c, 0xf46a84, 0x107d98, 0xf75da5, 0x136fcb, 0xfa3154, 0x14ae9a, 0xe9776f, 0x168f90, 0xe1746c, 0x148294, 0xe17562, 0x168c94, 0xe87760, 0x178087, 0xee4b2d, 0x16df74, 0xfd8669, 0x15b364, 0xcfae73, 0x158120, 0xf8e6ba, 0x75560, 0xf88386, 0x74c3c, 0xf3df4c, 0x1b9178, 0xf8b56a, 0x1ba264, 0xfcbc4c, 0x128b2f, 0xffd1be, 0xe4279, 0xf18c8d, 0xe7a72, 0xf18689, 0xe7c79, 0xf18499, 0xe7653, 0xf2b4c9, 0x1c31a6, 0xc263e7, 0x215fcd, 0xc676d6, 0x286bc0, 0xf160cf, 0x2f4cf3, 0xd92a8e, 0x25b320, 0xde04f0, 0x21d405,
				0xde34fb, 0x21df08, 0xde38ed, 0x21eb3f, 0xde5c8a, 0x21da0b, 0xc8964e, 0x118f5a, 0xf39d4a, 0x108950, 0xf6aa64, 0x149231, 0xf2c74d, 0x1ab4d2, 0xea2e13, 0x13efcd, 0xec0c3b, 0x13fbc4, 0xec0138, 0x11f8c0, 0xeb0135, 0x13f8c1, 0xe40135, 0x12f9c0, 0xe50e37, 0x19f8cd, 0xe70d37, 0x1bfbc1, 0xe20337, 0x16f9c1, 0xe40237, 0x11fbcd, 0xe60337, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335 };
		System.arraycopy(aFor, 0, key, 111910, aFor.length);
	}

	private static void init375(int[] key) {
		int[] aFor = { 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe60335, 0x1efbcd, 0xe90235, 0x1dfacc, 0xee0335, 0x1ff9cc, 0xeb0436, 0x10fac1, 0xee1619, 0x17ab80, 0xe225e5, 0x1779df, 0xfc4bff, 0x1d58e2, 0xc248c8, 0x266d8f, 0xca2bfb, 0x204059, 0xd3db94, 0x281673, 0xd7e68f, 0x281072, 0xd7e683, 0x2c252f, 0xf75677, 0x307166, 0xe7646d, 0x3d6b7f, 0xe4606a, 0x376c79, 0xe17e65, 0x36664d, 0xea477f, 0x36614a, 0xe94a7d, 0x9664a, 0xe94973, 0x36644a, 0xea487c, 0x32674e, 0xe95561, 0xb644a, 0xe85567, 0x336752, 0xea2203, 0x65a88, 0xf9f048, 0x620ae, 0xf9c15f,
				0x630aa, 0xf9c25b, 0x632a9, 0xf9c65e, 0x73ea2, 0xfec95e, 0x73ea2, 0xfcc651, 0x13eb5, 0xfece65, 0x174f6, 0xeb1fbc, 0x3e02ad, 0xe112b5, 0x23389, 0xea72e5, 0x50142, 0xfcab95, 0xb7f7f, 0xf48b93, 0xb7f5b, 0xf4a1fc, 0xb008a, 0xed48b6, 0x37409d, 0xd64dd5, 0x3477a2, 0xc2f315, 0x3d26e5, 0xc2d11a, 0x3d28ec, 0xc2dd0f, 0x3d3ace, 0xc2ea6c, 0x3d7d1c, 0xd93533, 0x53b3d, 0xe33225, 0xa161d, 0xe35078, 0x93fe6, 0xfb9c36, 0xf4fd0, 0xf2b72e, 0xb4ed5, 0xffb62c, 0x941d7, 0xfeb92d, 0x740da, 0xfdb92d, 0x541d5, 0xfdb92d, 0xa40d5, 0xfdb923, 0x541db, 0xfdb923, 0xa40db, 0xf2b82d, 0xb40d9, 0xf0b72d, 0x940d5, 0xfeb72c, 0xb4ed4, 0xf1b521, 0xe4dcf, 0xf39771, 0xd260a, 0xfb594d, 0x9167d, 0xe13258, 0x13868, 0xd2362c, 0x3165aa, 0xced57c, 0x312481, 0xcadf7a, 0x3d2682, 0xc9d077, 0x312784, 0xccd56a, 0x3336b5,
				0xcce060, 0x3331b2, 0xccfe60, 0x3330b0, 0xccff60, 0x332fb2, 0xccff66, 0x3331b1, 0xccff66, 0x3331b7, 0xccf809, 0x314497, 0xcee117, 0x35984e, 0xd2a665, 0xbab75, 0xeaa76b, 0xf8455, 0xfdd228, 0xc5feb, 0xfbe005, 0xd3df5, 0xf2c408, 0x83ef4, 0xf0c60c, 0x93ffd, 0xf6c814, 0x97f8a, 0xef1bc0, 0xe31d8, 0xe82bd7, 0x373cce, 0xdf0c86, 0x344101, 0xc23ebe, 0x348d61, 0xc85399, 0x37aa66, 0xc0519a, 0x34a463, 0xc25398, 0x35ab62, 0xcb5094, 0x34a67d, 0xc86fd1, 0x34fe8a, 0xc5a8aa, 0x3498a5, 0xd581bc, 0x9aae9, 0xfbcd77, 0x460a5, 0xfba777, 0x41de8, 0xf464bf, 0x154b9c, 0xc84096, 0x294b9d, 0xcc54b3, 0x3d04c9, 0xc58771, 0x3f3e95, 0xc0dc6a, 0x3f2d94, 0xc3cd49, 0x3c1e8d, 0xc3d03d, 0x3c16af, 0xca84f1, 0x29c8de, 0xfbd0d2, 0x24c1c1, 0xc2d2dd, 0x26cafe, 0xf5d4d1, 0x118da1, 0xef1216, 0x10c0f0, 0xef2504,
				0x11d5f9, 0xee2007, 0x11d6fd, 0xee2709, 0x11d4f0, 0xee381f, 0x11fca3, 0xfd80cd, 0x26b9e3, 0xce9ec3, 0x2987d8, 0xcb88c6, 0x1c84ec, 0xc799a5, 0x23aeca, 0xd3ce59, 0x245ef2, 0xdbe735, 0x2432d6, 0xdbd526, 0x2520de, 0xdcd929, 0x2a20db, 0xddda28, 0x2723dc, 0xdfd42f, 0x2423d7, 0xddd42f, 0x2623d7, 0xdfd42f, 0x282dd7, 0xddd42f, 0x292ed5, 0xddd42f, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d };
		System.arraycopy(aFor, 0, key, 112210, aFor.length);
	}

	private static void init376(int[] key) {
		int[] aFor = { 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42d, 0x2a2cd5, 0xd2d42f, 0x2423d3, 0xd0d42f, 0x202dd7, 0xd5d620, 0x282bd3, 0xd7ce01, 0x25628b, 0xcd10c5, 0x292fe6, 0xc80ef0, 0x151dd3, 0xcc08ea, 0x2f308f, 0xc05517, 0x32c1df, 0xcc0732, 0x37d8dc, 0xc82e2b, 0x34d9df, 0xcb2333, 0x34e998, 0xd96cf8, 0x759e0, 0xef4fe5, 0xb4be7, 0xe94aee, 0x344ee1, 0xd056d0, 0x366689, 0xd92afe, 0x284880, 0xde3b05, 0x264781, 0xdf3902, 0x264485, 0xd03901, 0x234683, 0xd5c6fd, 0x2cb884, 0xd4c4fe, 0x24b97e, 0xc832ea, 0x3d832a, 0xc153cb, 0x3eb43c,
				0xc246c1, 0x3fb83e, 0xc944c4, 0x35ba39, 0xcd46c2, 0x3aba3a, 0xcc41cf, 0x35b939, 0xce41ca, 0x32b820, 0xcd4efd, 0x329d50, 0xc5093d, 0x204c16, 0xc3680a, 0x1c7221, 0xfc5568, 0x1a1f12, 0xf561b8, 0x8a263, 0xf74f84, 0x8a13b, 0xf777a1, 0x8edc8, 0xeeabfe, 0x37a0d1, 0xd6b382, 0x3ef604, 0xc77bbb, 0x38a148, 0xc75bb7, 0x38a740, 0xc74b97, 0x3b8336, 0xc01c40, 0x34750a, 0xd0472e, 0x334a39, 0xd34118, 0x306a5b, 0xdc3720, 0x2fa39c, 0xd76178, 0x2f8397, 0xd17a6a, 0x288096, 0xde7a6b, 0x298296, 0xde7a6a, 0x298d9f, 0xd17569, 0x298d91, 0xde7469, 0x298d91, 0xdc7767, 0x248f9f, 0xdc7767, 0x2b8e9f, 0xd37669, 0x2a8e9d, 0xd17969, 0x288e91, 0xdf7968, 0x2a8090, 0xd07b66, 0x2f8388, 0xd25936, 0x2ce84d, 0xdb9608, 0x28d826, 0xc2fc05, 0x21f529, 0xf5fb6a, 0x17afec, 0xe81d3a, 0x17edc4, 0xed173e, 0x1ae0cb,
				0xe2183b, 0x1fe2d0, 0xe20404, 0x14b8aa, 0xff2124, 0x18a2a5, 0xf62224, 0x65da5, 0xe8dd24, 0x55ca5, 0xe8dc20, 0x18a2a8, 0xe8dc20, 0x6a3a5, 0xf6dcdc, 0x19aabd, 0xeac3f2, 0x1e8dca, 0xf4a6eb, 0x2eadf8, 0xf2bcdc, 0x2f959e, 0xdef319, 0x2b56d5, 0xd18421, 0x2663d5, 0xd9992b, 0x2760d4, 0xda992c, 0x206ec4, 0xdf9a19, 0x203688, 0xc660b6, 0x247da2, 0xc172af, 0x1b61b7, 0xfd59f8, 0x163b6e, 0xe1a3be, 0x166057, 0xec85af, 0x137e50, 0xeb82ab, 0x1e7451, 0xe68dac, 0x137450, 0xef8fa7, 0x10794a, 0xebb0fa, 0x1720a5, 0xe67587, 0x145a96, 0xf7438f, 0x296cd7, 0xdc044b, 0x23a789, 0xdc153e, 0x23b4bf, 0xccd2fb, 0x2ff1e5, 0xcef9f4, 0x2ef0e5, 0xf1d2d3, 0x1cb35b, 0xe21296, 0x1dc378, 0xe22982, 0x1df460, 0xed5bcb, 0xc843, 0xf24c28, 0x5327b, 0xe86949, 0xf5855, 0xd3545f, 0x375f49, 0xeb5457, 0x97917, 0xe1207c,
				0x1abccc, 0xe07919, 0x179af5, 0xe26e0c, 0x1595f0, 0xed6d08, 0x119bf0, 0xea6e09, 0x1194f6, 0xee600e, 0x1180d9, 0xe8317b, 0x64024, 0xf60a18, 0x1f2239, 0xf63a24, 0x283004, 0xcc2231, 0x200160, 0xd23c06, 0x3c6676, 0xd513f4, 0x24895f, 0xde488f, 0x21a07f, 0xda5787, 0x2dae71, 0xd45587, 0x29af72, 0xd05983, 0x28a175, 0xd0598d, 0x28a177, 0xd0598d, 0x28a175, 0xdf588d, 0x2aa177, 0xdf588d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d };
		System.arraycopy(aFor, 0, key, 112510, aFor.length);
	}

	private static void init377(int[] key) {
		int[] aFor = { 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd0598d, 0x28a175, 0xd05689, 0x28a376, 0xdf5789, 0x2ba27e, 0xd15b8a, 0x2ea065, 0xd140a8, 0x3cdcd6, 0xe484ed, 0x3cadfb, 0xe3bae2, 0x3da8d1, 0xe08b84, 0x1c702, 0xf24eb8, 0xd885e, 0xf26ea6, 0xd9f5e, 0xf668a6, 0xe9050, 0xf167bb, 0xebd0d, 0xfb1974, 0x1c414c, 0xc1665d, 0x17765a, 0xc47e51, 0xa7048, 0xd64205, 0x321b95, 0xc09d55, 0x37379b, 0xcaf34c, 0x352095, 0xcaf343, 0x352195, 0xcaf243, 0x352697, 0xcaf243, 0x352697, 0xcaf543, 0x352694, 0xcaff75, 0x361c9c, 0xcdf06f, 0x310397, 0xcaf46f,
				0x300d98, 0xc9f46f, 0x3e0396, 0xcafb61, 0x3e0293, 0xcbf860, 0x320094, 0xcff860, 0x320190, 0xcdf674, 0x3212ca, 0xcdad5f, 0x39d80d, 0xe6e028, 0x33f13d, 0xe8e01a, 0x9c450, 0xf998d0, 0x6336e, 0xf9d7b0, 0x60903, 0xf9c08d, 0x64dd6, 0xee0be7, 0x3d05cb, 0xdf2790, 0x3b771e, 0xcde1d8, 0x323f2a, 0xcdc4d3, 0x323f3c, 0xcddcf7, 0x307f76, 0xd91d34, 0x312410, 0xd93a0a, 0x3f372a, 0xe1261a, 0x3a154e, 0xd563db, 0x2ade07, 0xd53cfe, 0x2acd02, 0xd73af9, 0x2dc005, 0xda38f9, 0x2ccf05, 0xda38fe, 0x22c008, 0xdb3afd, 0x23c205, 0xd43bfd, 0x23c205, 0xd638f3, 0x2ec00b, 0xd638f3, 0x21c105, 0xd939f3, 0x21ce00, 0xda39f4, 0x22cf03, 0xd538fa, 0x20c102, 0xd93bf7, 0x26c007, 0xd81bb8, 0x24aac0, 0xd0d481, 0x2684ab, 0xc1a4b2, 0x29ac9e, 0xffa7de, 0x1ef258, 0xe1418e, 0x1eb371, 0xe9488b, 0x1fb179, 0xe54990,
				0x1ab04c, 0xe56cf5, 0x11fb83, 0xcfacc2, 0x1a9ce8, 0xc4b6c3, 0x1b9def, 0xfab0c1, 0x199cef, 0xfbb5c1, 0x1e9dee, 0xfab4dc, 0x189eee, 0xfbb2de, 0x1d98f6, 0xf6bdd4, 0x5a2ca, 0xf4b8d5, 0x10aef7, 0xdfbad2, 0xf8d9e, 0xe6f40f, 0x1b37d4, 0xe4df2e, 0x1e2cd5, 0xe7d428, 0x192dd7, 0xe6da22, 0x182cfd, 0xe7c035, 0x18634b, 0xf2337d, 0x12236d, 0xf52579, 0x292a67, 0xc3683c, 0x2d1398, 0xd2ab7a, 0x2a7e97, 0xd1906f, 0x2a6a99, 0xdc926a, 0x256b91, 0xd39e6b, 0x246595, 0xd8996f, 0x276f81, 0xdfa533, 0x273751, 0xca6074, 0x245167, 0xf84870, 0x207821, 0xde0bbd, 0x21970c, 0xde0e98, 0x258dc6, 0xc8d5f6, 0x2ef0e8, 0xf1f8ff, 0x2cf4dd, 0xf7dc98, 0x1eac09, 0xe119c6, 0x1ef92e, 0xe114c3, 0x1ea97a, 0xf4da17, 0x289857, 0xccad67, 0x298042, 0xc8a05b, 0x2bbb45, 0xf4aa5e, 0x2abb7e, 0xe7ad56, 0x30e50c, 0xca7faa,
				0x35a54a, 0xc94ba7, 0x3dbc49, 0xcf40ba, 0x3bb843, 0xc24fbf, 0x3fbb46, 0xc34dbe, 0x3bb544, 0xce40b1, 0x36b05c, 0xc95284, 0x36e31e, 0xdb9747, 0x33d46a, 0xdaff75, 0x7ea6d, 0xe7fe72, 0x4e951, 0xecc97c, 0xfea4e, 0xd7c773, 0x99119, 0xf10ab4, 0xed15c, 0xf03fa4, 0xac85a, 0xf231a1, 0xbc957, 0xfc3fa5, 0xbc653, 0xfe3fab, 0xbc651, 0xfe3fab, 0xbc653, 0xfc3fab, 0x4c753, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab };
		System.arraycopy(aFor, 0, key, 112810, aFor.length);
	}

	private static void init378(int[] key) {
		int[] aFor = { 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfd30ab, 0x5c853, 0xfc3faf, 0xcb50, 0xfc3faf, 0xbc858, 0xf731ac, 0x8c942, 0xf72b91, 0x28509, 0xebfe6d, 0x2b353, 0xe39e7d, 0x1b036, 0xeeff4b, 0x83e4, 0xfb303f, 0x4d5ca, 0xfb2c37, 0x1d8c1, 0xf82f39, 0xfd7c3, 0xf02c33, 0xec5f9, 0xf50058, 0x18e2d, 0xf1e577, 0x1bb039, 0xf3e076, 0x16b62a, 0xf8c5a2, 0x95161, 0xf2e98a, 0xe3e72, 0xf1d38f, 0xe2b71, 0xf1d28b, 0xe2b73, 0xf1d28b, 0xe2973, 0xf1d289, 0xe2873, 0xf1d28f, 0xe2a72, 0xf1d08c, 0xc2b70, 0xf0d78c, 0xc2c75, 0xf6d582, 0xe2271, 0xf9d485, 0xe237c,
				0xf8d485, 0xc2d77, 0xfbd786, 0x22f75, 0xf9d786, 0x52e72, 0xfad799, 0x52241, 0xfac2fa, 0x65c82, 0xee01bc, 0xf2aa2, 0xee3cb8, 0x322d9d, 0xda15d2, 0x2e6257, 0xd1c6c9, 0x2d674b, 0xd2f52c, 0x28936c, 0xcba048, 0x1cb97d, 0xf7840f, 0x1cedaa, 0xe44b7e, 0x1bae8d, 0xe4527c, 0x1baaa1, 0xe47f15, 0x1df47f, 0xfbb054, 0x1baa59, 0xf7bc41, 0x1da871, 0xc0b535, 0x1bf05e, 0xef7fef, 0x10aa02, 0xef5efd, 0x10ad00, 0xed5afb, 0x11ad00, 0xe65af9, 0x12ad05, 0xe754f9, 0x1fac0f, 0xe654fb, 0x1eac03, 0xe654fb, 0x11ad03, 0xe654f5, 0x1eac0d, 0xe654f5, 0x11ad03, 0xe955f5, 0x10ad01, 0xec55f4, 0x14a303, 0xe354fa, 0x16ad00, 0xef56f6, 0x10ae19, 0xea76a5, 0x14c4dd, 0xe7bfe3, 0x15f3c7, 0xfdecd2, 0x15e5fa, 0xc0eec1, 0x1ebb40, 0xe10f96, 0x1efc69, 0xe90795, 0x1fff66, 0xe4068c, 0x1bff57, 0xe428e4, 0x12a282, 0xf2e0ab,
				0x24f1a2, 0xf9f6a5, 0x25f0ad, 0xfbf6a4, 0x1af0ae, 0xfef5a4, 0x1bf1a8, 0xfef4a7, 0x23f0a8, 0xfef4a5, 0x1af0ab, 0xf2f7a4, 0x1cffb0, 0xf5f0ad, 0x12d79b, 0xf793cf, 0x1be049, 0xee47fe, 0x119b18, 0xef6ee2, 0x17991e, 0xef60e3, 0x14981c, 0xea6eef, 0x119e3d, 0xee7e88, 0x14ede0, 0xf6aec6, 0x2aa7c9, 0xcfa4d2, 0x12a9ff, 0xf9ee95, 0x166024, 0xe9aecf, 0x124d3c, 0xe9b8c5, 0x154333, 0xedbac0, 0x174239, 0xe0b5c0, 0x124337, 0xe8b8c1, 0x174f2c, 0xef839f, 0x1810fd, 0xf348d9, 0x1d7bcb, 0xc364dc, 0x155090, 0xe92203, 0x16ac9e, 0xe3d6ed, 0xd88d1, 0xe9b3cb, 0x36afd3, 0xd5b7f8, 0x3595bc, 0xd2decc, 0x225264, 0xdd96b6, 0x224e65, 0xdd8bdd, 0x270aab, 0xcf4d94, 0x115389, 0xf15e9a, 0x11598a, 0xf35797, 0x1648af, 0xf066e7, 0x1b5bb1, 0xfb15d2, 0x129643, 0xed528f, 0x12a477, 0xee5a8e, 0x1ba77e, 0xef5b8f,
				0x18ac78, 0xe35a82, 0x18ad7a, 0xef5b8e, 0x19a379, 0xec5a81, 0x14a67c, 0xeb5e8c, 0x14894e, 0xec2ec7, 0x1a579e, 0xee0ea5, 0x63783, 0xe1109f, 0x40b8e, 0xe61b81, 0x71193, 0xde1e8c, 0x52ece, 0xec4ab7, 0x1ae80d, 0xef2bd1, 0x1af23e, 0xec1bc4, 0x11e33a, 0xeb19c0, 0x1ce038, 0xeb18c2, 0x13e038, 0xeb18c2, 0x1ce13a, 0xeb18cc, 0x12ef34, 0xeb18cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc };
		System.arraycopy(aFor, 0, key, 113110, aFor.length);
	}

	private static void init379(int[] key) {
		int[] aFor = { 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xea17cc, 0x12ef34, 0xeb18cc, 0x14ec36, 0xea19ce, 0x12e03a, 0xe519ce, 0x19e13b, 0xe60cd2, 0x1dd91e, 0xe360b4, 0x17e7c7, 0xc1b581, 0x1be6d8, 0xe16041, 0x19d48c, 0xe10165, 0x1ef091, 0xe20762, 0x1efc9b, 0xe40667, 0x12f19c, 0xea066f, 0x1ce9b2, 0xe93678, 0x1af4c5, 0xe84474, 0x5e2d0, 0xeb4673, 0x6e3d5, 0xf55769, 0x390b0, 0xfe4a40, 0x1adb5, 0xfe5f4e, 0xa7b2, 0xfb5e4e, 0xa7b4, 0xfa5d4c, 0x3a6b4, 0xf45d4e, 0x3a6b2, 0xf45d4e, 0xea6b3, 0xf45a48, 0xea0b0, 0xf45947, 0x8a1b0, 0xf15946, 0x4a0be,
				0xf15944, 0x9aeb8, 0xf15642, 0x6afb6, 0xf15547, 0x9acb4, 0xf15547, 0x9adb1, 0xf15442, 0x6a0a7, 0xf94f72, 0x2f2e4, 0xeb70bd, 0x33f8d, 0xe51296, 0x380384, 0xde22ae, 0x361dec, 0xc74ab9, 0x351ff5, 0xc052b5, 0x37679e, 0xd57c80, 0x85ec1, 0xe50f40, 0x158bfe, 0xe13c1d, 0x1cd4ec, 0xe22d09, 0x1ddfc1, 0xe3145d, 0x106807, 0xcf5e18, 0x14511c, 0xf35f0a, 0x144531, 0xf77751, 0x1716df, 0xe5b418, 0x1a69ed, 0xe59112, 0x1867ec, 0xe49116, 0x1f64ef, 0xe79216, 0x126bec, 0xe49117, 0x1e68e2, 0xe49e11, 0x1d69e9, 0xe59111, 0x1268e9, 0xe5911f, 0x1d69e7, 0xe5911f, 0x1268e9, 0xea901f, 0x1368eb, 0xef901c, 0x1667e6, 0xe0911e, 0x156ae5, 0xef9612, 0x1060ff, 0xeab643, 0x141b35, 0xe66d0f, 0x82b10, 0xec3501, 0xc3d1e, 0xc3362d, 0x1f6251, 0xe0d083, 0x1f217c, 0xe4d882, 0x1c2e7b, 0xe2d78e, 0x1d2c67, 0xe2f6a6,
				0x167fd3, 0xcb40e0, 0x1253f0, 0xf25bfb, 0x2e5ff2, 0xf25bf5, 0x125efc, 0xf15af5, 0x1559fe, 0xf65af3, 0x165de1, 0xc858f1, 0x285afc, 0xc959ec, 0x1258fd, 0xc252e6, 0x1d68ad, 0xeb1124, 0x10bc9e, 0xe6714d, 0x1f9aa6, 0xe96c52, 0x1a9baa, 0xef6157, 0x149da8, 0xeb615e, 0x168f93, 0xe95a34, 0x19dd63, 0xc0e178, 0x16ea76, 0xc8e957, 0x12e716, 0xffab96, 0xa3452, 0xf5d4a5, 0xa245e, 0xf0d1a7, 0x92b53, 0xfed3a1, 0x72459, 0xf0d3ae, 0x72a58, 0xfad7ad, 0x52e46, 0xfce2e9, 0xa70b7, 0xe028a8, 0xd1ba4, 0xd004ab, 0x53ce2, 0xf8486c, 0x7cefb, 0xe891a4, 0x2ae8f, 0xe1889d, 0x399c88, 0xd8bbb6, 0x7f9d9, 0xe98d7a, 0x1f25ba, 0xe0f56f, 0x1f30d7, 0xeca0aa, 0x32e59f, 0xd9c9bd, 0x3ed3a8, 0xdddea7, 0x2d9b5, 0xe2cf9b, 0x3ee2c3, 0xdeaebf, 0x33c028, 0xc35083, 0x3bec45, 0xc40da6, 0x3bf45b, 0xc60fa5, 0x3ff751,
				0xc40fa2, 0x3af956, 0xc60ea2, 0x31f254, 0xc008a1, 0x34f05a, 0xc207a1, 0x3aff5b, 0xc507ae, 0x3aed72, 0xc43fcb, 0x3f8e47, 0xc61e24, 0x34761e, 0xd93501, 0x30100e, 0xd21f06, 0x331314, 0xd2020a, 0x38233b, 0xdc1076, 0x3071fc, 0xc4fc40, 0x314c9c, 0xc7826c, 0x3c6c93, 0xc4956d, 0x336d97, 0xca9a6d, 0x356e97, 0xca9a6f, 0x33629b, 0xcb9b6f, 0x336399, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f };
		System.arraycopy(aFor, 0, key, 113410, aFor.length);
	}

	private static void init380(int[] key) {
		int[] aFor = { 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xcb9b6f, 0x336397, 0xca946f, 0x346199, 0xc8966d, 0x3f6c9e, 0xcb956d, 0x336d95, 0xce9a62, 0x316892, 0xce8271, 0x3146c4, 0xd0cebc, 0x324bc1, 0xcdf47f, 0x321391, 0xcce068, 0x32199e, 0xc9e36b, 0x3e149e, 0xcbe266, 0x3d179c, 0xc4ee65, 0x381297, 0xc7ee65, 0x381b92, 0xc7e864, 0x381c97, 0xc7e867, 0x381b88, 0xc7e87b, 0x381c8d, 0xc7ea76, 0x381f8f, 0xc3ea76, 0x3b1c8f, 0xcceb76, 0x3a1381, 0xceeb76, 0x3a1381, 0xceeb76, 0x3a138f, 0xc9ea76, 0x38108f, 0xcbe978, 0x3d118d, 0xcae779, 0x30118c,
				0xc8e679, 0x3d1f81, 0xc9e57b, 0x311287, 0xc9ea7d, 0x31128b, 0xc9eb7f, 0x31128c, 0xc9eb78, 0x3e1382, 0xc9ea7a, 0x31118e, 0xceec62, 0x3133de, 0xc78256, 0x350301, 0xd85437, 0x67d2f, 0xdd643f, 0x8712f, 0xde653d, 0x9752e, 0xd47b3a, 0x3c772c, 0xe17b33, 0x74d69, 0xf13cc9, 0xa9415, 0xf059e1, 0xdb712, 0xf140f1, 0x8ad32, 0xfe67a9, 0x12e2cf, 0xcdaafa, 0x2d8ee1, 0xf79cfd, 0x29b9ba, 0xc4ed38, 0x28688a, 0xdbdf51, 0x2039a8, 0xddc357, 0x2134aa, 0xddc250, 0x2737a9, 0xdfc15e, 0x2a38a6, 0xdcc25f, 0x2735ab, 0xdcc358, 0x2534a0, 0xddcc58, 0x2a35a0, 0xddcc56, 0x243bae, 0xdcc356, 0x243ba0, 0xdcc356, 0x253ba2, 0xd9c355, 0x2034af, 0xd5c255, 0x2038a8, 0xd8c551, 0x2632be, 0xdce978, 0x2a58ff, 0xc7dcaa, 0x208193, 0xfdb8be, 0x2b9c8a, 0xe3bbc2, 0x38d248, 0xc7699c, 0x389961, 0xc46e9c, 0x3e9b67, 0xc36c90,
				0x3c9760, 0xc376b1, 0x34e920, 0xd28878, 0x8bd4b, 0xe99765, 0x35b24c, 0xee9664, 0x32b54c, 0xee9664, 0x33b44d, 0xef9766, 0x35b54a, 0xee9667, 0x30b54b, 0xef9365, 0x38b04a, 0xf49b70, 0x16f804, 0xe949bb, 0x16a34a, 0xe95bb2, 0x16a549, 0xea5bb0, 0x1ca149, 0xea5bb2, 0x12a24f, 0xee5bbd, 0x16b170, 0xeb63d7, 0x2ee8b, 0xd5a0a1, 0x8682, 0xd79fb7, 0x181ed, 0xebdb75, 0x1c76a7, 0xe39d5a, 0x1c68a5, 0xea9e5d, 0x1d66ae, 0xe8915c, 0x1f66ab, 0xe8915c, 0x106aa8, 0xee9658, 0x1160be, 0xe9a913, 0x11394e, 0xfa6f50, 0x175e5b, 0xcb4256, 0x10781c, 0xed0992, 0x127606, 0xf2225b, 0x121569, 0xcf3176, 0x1b2854, 0xf81301, 0x87ea0, 0xf4de71, 0xe1da9, 0xf1c170, 0xa7bd8, 0xd00a83, 0x172f95, 0xc83286, 0x2b2a92, 0xc9308f, 0x2912a3, 0xca29f7, 0x157e72, 0xf8ffc7, 0x75210, 0xf886e0, 0x76a11, 0xf89fe5, 0x26718,
				0xf591e4, 0x2641c, 0xfe92ea, 0x1671e, 0xf994ee, 0xd6f1a, 0xfc95ef, 0x46c12, 0xfd94ef, 0xa6117, 0xf194e2, 0xe6312, 0xf191f1, 0xe7333, 0xf1b5a8, 0xe2ac4, 0xfc4585, 0x1702ae, 0xf724b7, 0x1639a9, 0xf2228a, 0x133bae, 0xc71a98, 0x125df7, 0xf22952, 0x198880, 0xe84f6d, 0x13a392, 0xef5f6d, 0x1aa691, 0xe3516b, 0x1ca593, 0xe35065, 0x18a791, 0xe05e62, 0x18a694, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c };
		System.arraycopy(aFor, 0, key, 113710, aFor.length);
	}

	private static void init381(int[] key) {
		int[] aFor = { 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe1516c, 0x19a994, 0xe05e6c, 0x1ba994, 0xe25162, 0x16aa96, 0xe55065, 0x13a890, 0xea5f68, 0x15a695, 0xea516d, 0x158cba, 0xfe3913, 0x158ab5, 0xea517a, 0x15a888, 0xe3537d, 0x14ab8e, 0xed517b, 0x1aa883, 0xec5f7a, 0x14a886, 0xec5e7f, 0x10a98b, 0xef5e7f, 0x10a789, 0xef5e7f, 0x11a990, 0xee5061, 0x11ab99, 0xee5260, 0x11a99a, 0xed5263, 0x17a89f, 0xef5065, 0x17a89d, 0xef506b, 0x18a99d, 0xe0516b, 0x1ba693, 0xe7506b, 0x1ba693, 0xe2516b, 0x14ab92, 0xe1506b, 0x14a993, 0xec5165, 0x17a693,
				0xec5165, 0x14a891, 0xe35167, 0x1aa89e, 0xe25064, 0x1aa89e, 0xe25066, 0x19a790, 0xe05068, 0x18a892, 0xef5068, 0x18a990, 0xe55361, 0x1ebfb4, 0xe66b06, 0x11df8c, 0xe64be6, 0x923ae, 0xee6287, 0x84791, 0xd54d92, 0xb4e95, 0xef4d84, 0x6489a, 0xdc44aa, 0x3b0edf, 0xc09e61, 0x3d5d8d, 0xcb8174, 0x327181, 0xca8467, 0x3275b3, 0xc8a80e, 0x3f1d93, 0xc890ee, 0x39c9b8, 0xebe580, 0x3fd8dc, 0xc7a67b, 0x3c09ae, 0xc4d840, 0x3828be, 0xc1d040, 0x3a27b8, 0xc1d040, 0x3827ba, 0xc0df40, 0x3425b6, 0xc1df40, 0x3a28b6, 0xc6de40, 0x3d29b8, 0xc5d140, 0x3228b8, 0xc5d14e, 0x3c26b6, 0xc4de4e, 0x3c26b6, 0xc4de40, 0x3d26b4, 0xc6d142, 0x3c29bf, 0xc9df45, 0x3c25b8, 0xc4d841, 0x3b20b1, 0xc2c666, 0x3517dc, 0xdaa241, 0x353fc9, 0xdfb7b6, 0x38ce30, 0xe5b7a1, 0xc1318, 0xf3c4ff, 0xc3707, 0xf6cffe, 0xd3806, 0xf6cdf3,
				0xa351c, 0xf4dec1, 0xd1a77, 0xe287e5, 0xe0364, 0xfe7d1a, 0x130767, 0xff7e1b, 0x140467, 0xfd7f19, 0x160599, 0xfd7f19, 0x140599, 0xf87ee4, 0x16059c, 0xf979e5, 0x13039c, 0xcd781c, 0x27e6b7, 0xd83055, 0x27c5a2, 0xd93c54, 0x25c4a3, 0xdc3c55, 0x24caa2, 0xdd3d58, 0x24c4a1, 0xdf3f52, 0x25cd8f, 0xda2c4d, 0x2c99c6, 0xc112a0, 0x2b79fc, 0xce2e9b, 0x107e13, 0xff03a8, 0x6bf76, 0xf94f89, 0x6b776, 0xf0428d, 0x3b57b, 0xf64f8d, 0xb874, 0xf64081, 0xb971, 0xfe439f, 0x1b077, 0xff75c6, 0x7fea6, 0xecae84, 0x1828f, 0xde9b9f, 0x2b5d8, 0xf9d354, 0x640e4, 0xfec77d, 0x4b605, 0xe8e752, 0x34d41a, 0xdf856f, 0x290ed0, 0xd6cd3e, 0x2a10d2, 0xd5fc34, 0x282e8b, 0xdb8f00, 0x38d848, 0xdbec67, 0x3ac54c, 0xd58704, 0x3ae06f, 0xc866fa, 0x25f140, 0xd0439b, 0x2f8f70, 0xd06a88, 0x2f9675, 0xd86b8c, 0x299270, 0xd86a8e,
				0x2c9d70, 0xd5658d, 0x289276, 0xd16183, 0x29997b, 0xd16183, 0x2b997a, 0xd66080, 0x2c9677, 0xd66080, 0x2b987c, 0xd46486, 0x298966, 0xd557a0, 0x2c9e03, 0xdf3482, 0x28baec, 0xdbd0bb, 0x3597fa, 0xeabbd5, 0x358eed, 0xdfd489, 0x345d2b, 0xd3fae2, 0x3d3f05, 0xcfe6f3, 0x36080d, 0xcdf2f2, 0x380b0e, 0xcdf2f4, 0x34050c, 0xcdfdf8, 0x35040b, 0xcdfdf8, 0x310b00, 0xcdfdfa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa };
		System.arraycopy(aFor, 0, key, 114010, aFor.length);
	}

	private static void init382(int[] key) {
		int[] aFor = { 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340a02, 0xccf2fa, 0x340403, 0xccfcfb, 0x38060d, 0xccfdf9, 0x3b040d, 0xc3f3f8, 0x3b0501, 0xc5f0f9, 0x3a1c12, 0xc0fdce, 0x3b1d1b, 0xc4f3f9, 0x3c0916, 0xcef5e2, 0x380d15, 0xc1f4ee, 0x370c19, 0xc0f5e1, 0x3a0f1d, 0xc0f9ea, 0x3f0f13, 0xc3f9e5, 0x390010, 0xc1f9e4, 0x390017, 0xc1fae2, 0x360118, 0xc2f9ef, 0x350019, 0xc3f8ec, 0x360116, 0xc5f6ee, 0x3c0f15, 0xc5f6ec, 0x3d0c1b, 0xc4f5ec, 0x39021b, 0xc6f4ec, 0x390215, 0xc4f5ec, 0x310314, 0xc2fae3, 0x360214, 0xc1fbe2, 0x380314,
				0xc2fae3, 0x380316, 0xc2fae1, 0x3b0d19, 0xc3f5e3, 0x340d19, 0xc3f4e1, 0x380319, 0xc3f4e1, 0x3a031b, 0xc2fbe1, 0x38001c, 0xc0f9e8, 0x390c01, 0xc5e0d4, 0x3c3760, 0xc1f5f8, 0x3a6b8d, 0xd506c6, 0x3531e2, 0xe53eea, 0x3437e6, 0xec39f8, 0x362bd7, 0xfb3693, 0x1b571f, 0xe5f9ca, 0x1a1a35, 0xe4ebca, 0x191c31, 0xe3ebdf, 0x191f3b, 0xe7f0e7, 0x182e29, 0xe7e7e9, 0x187f70, 0xd4312a, 0x136347, 0xeec184, 0x111971, 0xecf18a, 0x150370, 0xe0f685, 0x1c0171, 0xe7f685, 0x1f0e7f, 0xeaf783, 0x1e0d75, 0xeaf486, 0x110370, 0xecf489, 0x170273, 0xeffa8b, 0x170273, 0xe0fb85, 0x190c7d, 0xe0fb85, 0x18037d, 0xe0fb8b, 0x19037d, 0xe1f488, 0x1a0d76, 0xeffb8d, 0x1d0171, 0xebfb88, 0x15027b, 0xe9ed9d, 0x15077d, 0xefd9ae, 0x110d68, 0xeec2a0, 0x110b6f, 0xeac3b8, 0x12155c, 0xe9f2ac, 0x120759, 0xeafead, 0x110955,
				0xeafca0, 0x100a53, 0xecf9bf, 0x131d64, 0xedcba8, 0x120760, 0xedcea7, 0x12086e, 0xedcea5, 0x12066c, 0xedcfa5, 0x12076e, 0xedcfa5, 0x12086d, 0xedc0aa, 0x120668, 0xedcfab, 0x120363, 0xeec9a8, 0x141c75, 0xebf183, 0x140878, 0xeef280, 0x140b77, 0xe8f380, 0x14057a, 0xeff083, 0x170674, 0xeefe87, 0x16086e, 0xe9f8b7, 0x16240f, 0xe9e1ae, 0x144a3b, 0xe4dbae, 0x5a502, 0xee3dcc, 0x14f125, 0xeb02da, 0x14fb25, 0xe20cd9, 0x16f420, 0xe30dd8, 0x14f522, 0xe302d7, 0x1af825, 0xe503d4, 0x1af63a, 0xe03082, 0xfbde8, 0xd4edc1, 0xdddd2, 0xc2c3ca, 0x13f281, 0xf4910a, 0xb33cc, 0xf4841c, 0xb2fab, 0xfa5327, 0x250555, 0xc874c3, 0x30de11, 0xcf01ec, 0x33ee1a, 0xca1cf2, 0x35f424, 0xca21e7, 0x31ad66, 0xe3e924, 0x32d365, 0xc0bf10, 0x3f13be, 0xc0c368, 0x3f1582, 0xc5c976, 0x382d8f, 0xc5c273, 0x3d3586,
				0xcccd77, 0x3c348f, 0xcece72, 0x3a398c, 0xcdc171, 0x37398a, 0xcdc173, 0x373b8f, 0xcecc77, 0x353980, 0xcecc75, 0x30398d, 0xc9cd75, 0x3c398f, 0xcacc75, 0x313b81, 0xcaca64, 0x3120b4, 0xceff0a, 0x312dbe, 0xce8628, 0x3eeb4d, 0xf5d274, 0x259b32, 0xdf0ba6, 0x20c57c, 0xdb1b8c, 0x21fc77, 0xd81288, 0x23e674, 0xdb108d, 0x2ee971, 0xda138b, 0x22eb73, 0xda1385, 0x2fe976, 0xd81082, 0x24e678, 0xda1284, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86 };
		System.arraycopy(aFor, 0, key, 114310, aFor.length);
	}

	private static void init383(int[] key) {
		int[] aFor = { 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d86, 0x23e57e, 0xdb1d84, 0x2ceb7f, 0xdb1383, 0x2ee97e, 0xdb1287, 0x23eb73, 0xd81380, 0x23e573, 0xd81086, 0x25e97c, 0xd81086, 0x27eb7e, 0xda1288, 0x2de57d, 0xd51d85, 0x2fea7b, 0xd71f87, 0x2ee87b, 0xd61083, 0x2ceb75, 0xdb1d87, 0x26ea7e, 0xdf1e86, 0x28e67c, 0xdb1184, 0x2fe97f, 0xdc1e85, 0x28e47f, 0xda128a, 0x23ea7c, 0xd41c88, 0x22e671, 0xd41c8a, 0x2ce976, 0xdb1f8a, 0x28e67d, 0xdb1c8e, 0x2ce47c, 0xd4138f, 0x2fe678, 0xd51381, 0x2fea7f, 0xd61083, 0x20ea7a, 0xd6118d, 0x2eeb7a,
				0xd6138c, 0x2de474, 0xd6118d, 0x2ae777, 0xd3108d, 0x21eb7b, 0xd3178f, 0x2bef79, 0xd01881, 0x2bee7b, 0xd21981, 0x26ed77, 0xd11a80, 0x2fe176, 0xd01d87, 0x2fe95a, 0xd00d9f, 0x2fc13d, 0xd86243, 0x331623, 0xea5864, 0x3d102e, 0xe4587b, 0x3f151e, 0xea4f67, 0xdddd4, 0xf2113c, 0xdfec3, 0xf60b3c, 0xdfcc4, 0xf70a37, 0xcf2c4, 0xf30830, 0xcf0c4, 0xf30035, 0xcc2ff, 0xda406e, 0xac1f9, 0xf50320, 0xaf3df, 0xf40420, 0xcf2d7, 0xf50a23, 0xbfdcc, 0xf70a3d, 0x2f3c1, 0xf1083f, 0x5f2c7, 0xf30a32, 0xafdca, 0xf60a31, 0xffdcb, 0xf70533, 0xffdcb, 0xf8043d, 0x1f3c5, 0xf8043d, 0xfcc5, 0xf80433, 0x1fcc5, 0xf90b30, 0x2f2ce, 0xf40532, 0x7fecc, 0xf3063b, 0xefec9, 0xf10826, 0xef1d2, 0xf10623, 0xef0c9, 0xf10926, 0xefede, 0xf10920, 0xefedf, 0xf20825, 0x4ffd7, 0xf30724, 0x8f0dc, 0xf40626, 0xef3df, 0xf70427,
				0xcfcd4, 0xf30424, 0xcfdd4, 0xf30527, 0xcf0df, 0xf30425, 0xcf2dd, 0xf3052a, 0xcfcdc, 0xf3052a, 0xcf2dd, 0xf30425, 0xcf1d2, 0xf30425, 0xcfcdd, 0xf30a2a, 0xcfed2, 0xf00929, 0x8f1d3, 0xfe0924, 0x8f1d7, 0xf10923, 0xdffd9, 0xf00c22, 0xaf9db, 0xfd0e2c, 0x5f3db, 0xff0f35, 0xf8eb, 0xff1525, 0xcee7, 0xf90825, 0x15b9ea, 0xe50709, 0x1cd9e6, 0xe3211b, 0x1bd8e6, 0xef211a, 0x1bd9e3, 0xec2119, 0x17d7e3, 0xee2215, 0x14d5e7, 0xeb2213, 0x14d6e7, 0xe0042e, 0xfaca2, 0xd0d7fb, 0xeb3b7, 0xdbe5f8, 0x1868f, 0xe60e25, 0x1acec3, 0xe5113e, 0x1acad7, 0xe97914, 0xcf5be, 0xe16f06, 0x1ca1e4, 0xe35519, 0x1dacef, 0xea5b02, 0x14a3ea, 0xeb5009, 0x14eebe, 0xc990c2, 0x1fe3ba, 0xec4113, 0x139dcd, 0xec6a3a, 0x1390c6, 0xea673a, 0x179fc5, 0xe8673a, 0x1593cf, 0xe9643c, 0x139dc8, 0xea673d, 0x1390c7, 0xe4663c,
				0x129ec9, 0xe7643f, 0x129dc7, 0xe56a30, 0x1f9ec6, 0xe26a31, 0x1d9ccd, 0xe06433, 0x159dcf, 0xe16433, 0x1b9ec9, 0xe6643c, 0x1b93d5, 0xe46a30, 0x1b9eec, 0xe4442a, 0x1ce5b0, 0xc691c2, 0x1beebf, 0xe42e00, 0x1bddf8, 0xe52407, 0x19ddf8, 0xe32503, 0x18d2f7, 0xef2406, 0x18ddfe, 0xed2404, 0x14d3fe, 0xec2b06, 0x19d1f2, 0xec2b04, 0x15ddf9, 0xee2b04, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406 };
		System.arraycopy(aFor, 0, key, 114610, aFor.length);
	}

	private static void init384(int[] key) {
		int[] aFor = { 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2406, 0x17dcfe, 0xef2404, 0x18dcf8, 0xe02505, 0x16dff8, 0xe32602, 0x14def1, 0xef2602, 0x12def7, 0xe92901, 0x10d3ff, 0xe42403, 0x13dffd, 0xeb2300, 0x1cd4f7, 0xe4220e, 0x1ed5f0, 0xe8260c, 0x11d1f0, 0xe62607, 0x1cddf2, 0xe92b03, 0x15d3fa, 0xec2400, 0x15defe, 0xe12702, 0x17defd, 0xe32901, 0x16d2fa, 0xe5250c, 0x1edff4, 0xe92900, 0x1ed0f6, 0xeb260e, 0x11d1f0, 0xe8290e, 0x1ed3f7, 0xeb2f02, 0x13d4f6, 0xea2e03, 0x16d6fa, 0xea2101, 0x12d7fa, 0xe52003, 0x12d9fb, 0xe7230d, 0x10dafb,
				0xe7230d, 0x1ddbf6, 0xe02c0d, 0x1cd9f1, 0xe52e0b, 0x17d5fd, 0xe52909, 0x1dd1ff, 0xe62607, 0x1dd1ff, 0xe62705, 0x1ed1fc, 0xe72805, 0x1fdef2, 0xe52900, 0x1fdfea, 0xe02c37, 0x1fc7fa, 0xe01143, 0x1faef3, 0xe20457, 0x1daffb, 0xe20449, 0x1da9f4, 0xe11d3c, 0x1cd1dd, 0xe3352e, 0x1cc3d1, 0xe43b2b, 0x1ccddc, 0xe43a29, 0x1cc2d1, 0xe53b28, 0x1dc2d3, 0xe2372a, 0x1de8cc, 0xeb2e1e, 0x1ee8c8, 0xe10826, 0x1efbdc, 0xe40120, 0x1df8d7, 0xea0e26, 0x17f7d6, 0xec0f27, 0x18f7de, 0xea0d22, 0x1ff4da, 0xe90c2f, 0x11f4d5, 0xeb0c2e, 0x12fbd4, 0xea032c, 0x12fbd4, 0xea0322, 0x12fbda, 0xeb0c22, 0x13f4da, 0xeb0c22, 0x11f5d5, 0xe60321, 0x1cf9dd, 0xeb0121, 0x1efbdc, 0xed0c24, 0x17fbd6, 0xea0322, 0x10f5d7, 0xec0d22, 0x11f5d0, 0xea0e23, 0x1df7db, 0xea0c25, 0x10f7da, 0xe80f20, 0x1ff6d4, 0xe70f20, 0x1cf8d8,
				0xe70e22, 0x1ff8d9, 0xea0d2e, 0x1ef7d6, 0xe8082c, 0x1bf5d9, 0xed0e2c, 0x17f6d7, 0xeb012a, 0x12f8d1, 0xe40326, 0x12f8d3, 0xe40326, 0x1cfbde, 0xe70023, 0x1dfbdc, 0xea0320, 0x1dfbda, 0xe40126, 0x1dfbda, 0xe80220, 0x1ffada, 0xe9022d, 0x1ffade, 0xe7032a, 0x1bf5d0, 0xe0012b, 0x1af4d2, 0xed032b, 0x1bffd1, 0xe80522, 0x1ffece, 0xe4072a, 0x1bf7f7, 0xe51016, 0x12c8fc, 0xe8290b, 0x1fc3f8, 0xe43a02, 0x13c2f8, 0xe53803, 0x13cffa, 0xea3601, 0x16c1fa, 0xed340d, 0x17c2f8, 0xec340b, 0x12ccf1, 0xe82b12, 0x17fcd6, 0xe93e7c, 0x1684d5, 0xeb347f, 0x1681be, 0xe84562, 0x179b99, 0xe97766, 0x179b9e, 0xe04079, 0x1887a4, 0xe75740, 0x1cb3aa, 0xe34a5d, 0x14bcaf, 0xe2455d, 0x1abead, 0xe54841, 0x1aa89a, 0xe26a58, 0x14d79b, 0xe9044c, 0x16f5bd, 0xee0f4a, 0x18f0b0, 0xeb0c49, 0x1cf7b5, 0xea0342, 0x17f7b7,
				0xe80243, 0x13f4b3, 0xe40242, 0x1ff5ba, 0xe60c41, 0x13f6b7, 0xe70d43, 0x13f5b4, 0xea0e4e, 0x16f6b7, 0xeb0240, 0x15f7ba, 0xee0140, 0x1af9bb, 0xe90042, 0x1ff8b5, 0xe5024d, 0x1dfbbe, 0xe1074c, 0x1affa5, 0xe51044, 0x1ac189, 0xe27d35, 0x1abff5, 0xe55d15, 0x1aa6e9, 0xec5c12, 0x15a7e8, 0xec5e1f, 0x10a7eb, 0xe95f18, 0x1ea6ee, 0xe95e14, 0x10a9ee, 0xe95e14, 0x1ea7e2, 0xeb5e1a, 0x13a9e6, 0xea5f1b, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19 };
		System.arraycopy(aFor, 0, key, 114910, aFor.length);
	}

	private static void init385(int[] key) {
		int[] aFor = { 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e1, 0xea5f19, 0x12a7e3, 0xea5f19, 0x1da7e3, 0xea5e1b, 0x12a6ed, 0xeb5e1b, 0x12a6ed, 0xeb5115, 0x1ca6ec, 0xea5115, 0x1ca6ec, 0xeb5f14, 0x13a7ec, 0xeb5f14, 0x13a7ee, 0xeb5f14, 0x13a7ee, 0xeb5f16, 0x13a7e0, 0xeb5f16, 0x12a8ee, 0xea5016, 0x12a8ec, 0xe55016, 0x12a8ec, 0xe55016, 0x12a9ee, 0xe55016, 0x1da8ee, 0xe55016, 0x1da8ee, 0xe55016, 0x1da8ec, 0xe55016, 0x12a9ee, 0xe55018, 0x1da8ee, 0xe55018, 0x1ca7e0, 0xe55018, 0x1da8e2, 0xe5501a, 0x1da8e2, 0xea511a, 0x12a9e2,
				0xea511a, 0x12a9e2, 0xeb5e1a, 0x12a9e0, 0xea5118, 0x1da8e0, 0xea5116, 0x12a9ee, 0xeb5e16, 0x12a9ee, 0xeb5e16, 0x1da8e0, 0xeb5e16, 0x1da8e0, 0xe55f15, 0x1ca7e1, 0xe25e12, 0x1da4fd, 0xe25e0c, 0x1da8fe, 0xe25d0c, 0x1da8f8, 0xe25c0e, 0x1da8f7, 0xe25c0d, 0x1daaf3, 0xe2530d, 0x1ba4f7, 0xe35c0f, 0x1ba4f7, 0xe35c0f, 0x1ba4f7, 0xec5300, 0x1ba4f7, 0xe15200, 0x1ea6f6, 0xe1510c, 0x1ea9f1, 0xe15c08, 0x1baaff, 0xec5d08, 0x14a5f0, 0xe35205, 0x1aaaf1, 0xe35207, 0x14abff, 0xe35305, 0x14aafd, 0xec5205, 0x14aafd, 0xec5205, 0x14aafd, 0xec5205, 0x14aafd, 0xec5205, 0x14aafd, 0xec5205, 0x14aafd, 0xec5205, 0x14aafd, 0xec5205, 0x14aafd, 0xec5207, 0x1baafd, 0xec5305, 0x15abf3, 0xec5305, 0x14a5f2, 0xec5207, 0x14a5f2, 0xe35207, 0x14a5f0, 0xe25209, 0x15a5f0, 0xe25207, 0x1aaaf1, 0xe25207, 0x1ba5ff,
				0xe25207, 0x1aaafd, 0xe25205, 0x15abfd, 0xe3530a, 0x15abff, 0xe3530a, 0x14a4fd, 0xec5204, 0x1ba5f3, 0xed5d04, 0x1ba5f1, 0xed5d04, 0x1aaaf3, 0xed5d04, 0x1aaafd, 0xed5d04, 0x1aaaf3, 0xed5d04, 0x1aaaf3, 0xec5204, 0x14aafc, 0xec5204, 0x14aaf2, 0xec5204, 0x15a5fc, 0xec5206, 0x15a5fe, 0xed5d06, 0x1ba5f1, 0xec5c07, 0x14a5f3, 0xee5f01, 0x10a6f2, 0xef5f05, 0x10a7fb, 0xef5f04, 0x14a9fe, 0xec5106, 0x14a9fe, 0xe35006, 0x1ba8fe, 0xe35006, 0x1aa7fe, 0xe35006, 0x1ba6f1, 0xe35104, 0x1aa6fc, 0xe45f0a, 0x1ba8fa, 0xe4500b, 0x1ba7f9, 0xe4510c, 0x1ba7f6, 0xe45208, 0x1ba7f7, 0xe75009, 0x1aa7f2, 0xe55008, 0x1aa6f6, 0xe55f09, 0x1baaf1, 0xe35d04, 0x15abf0, 0xe25c05, 0x1aa5f1, 0xe15205, 0x1ea7f1, 0xe15107, 0x1ea6fe, 0xe15e06, 0x1ca7fe, 0xe55e07, 0x13a6f0, 0xe55e07, 0x10a9f1, 0xe65f07, 0x1fa8ff,
				0xe45f09, 0x1da7ff, 0xe55f09, 0x1ca8f1, 0xe45009, 0x13a9f1, 0xe45007, 0x13a9ff, 0xeb5107, 0x12a6ff, 0xeb5107, 0x12a6ff, 0xeb5107, 0x1ca9fd, 0xeb5005, 0x1da6f3, 0xeb5005, 0x1da6f1, 0xeb5103, 0x12a9f0, 0xed5e04, 0x12a8f2, 0xed5e05, 0x12a8f3, 0xed5e05, 0x17a6fc, 0xe15e0b, 0x17a8fd, 0xe15e0b, 0x19a9fe, 0xee5e0b, 0x16a6f3, 0xee5e0b, 0x16a6f3, 0xee5e0b, 0x16a6f3, 0xe15f0b, 0x19a7f1, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b };
		System.arraycopy(aFor, 0, key, 115210, aFor.length);
	}

	private static void init386(int[] key) {
		int[] aFor = { 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x19a7f3, 0xe15f0b, 0x16a8fc, 0xe15f0b, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc,
				0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x19a7f3, 0xee5004, 0x16a8fc, 0xee5004, 0x17a9fd, 0xee5004, 0x17a9fd, 0xee5004, 0x17a9fd, 0xee5004, 0x17a9fd, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xee5004, 0x16a8fc, 0xe15f0b, 0x16a8fc, 0xe15f0b, 0x16a8fc, 0xef5105, 0x15abff, 0xed5307, 0x1aa4f0, 0xe25c08, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x14aafe, 0xe35d09, 0x14aafe, 0xe35d09, 0x14aafe, 0xe35d09, 0x14aafe, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1,
				0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe25c08, 0x1ba5f1, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x15abff, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1ba5f1, 0xe25c08, 0x1ba5f1, 0xe25c08, 0x1ba5f1, 0xe25c08, 0x1aa4f0, 0xed5307, 0x1aa4f0, 0xe25c08, 0x1ba5f1, 0xe25c08, 0x1aa4f0, 0xed5307, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe35d09, 0x1aa4f0, 0xe35d09, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe,
				0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xe35d09, 0x1aa4f0, 0xe35d09, 0x1aa4f0, 0xe35d09, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xec5206, 0x14aafe, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307 };
		System.arraycopy(aFor, 0, key, 115510, aFor.length);
	}

	private static void init387(int[] key) {
		int[] aFor = { 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1ba5f1, 0xe25c08, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xe35d09, 0x14aafe, 0xec5206, 0x1ba5f1, 0xed5307, 0x15abff, 0xec5206, 0x15abff, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x15abff, 0xe25c08, 0x15abff, 0xe25c08, 0x15abff, 0xe25c08, 0x15abff, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xed5307, 0x1aa4f0, 0xed5307, 0x1ba5f1, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xec5206, 0x15abff, 0xed5307, 0x1aa4f0, 0xed5307, 0x1aa4f0, 0xed5307, 0x1aa4f0, 0xed5307, 0x1aa4f0, 0xe25c08, 0x1ba5f1, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1ba5f1, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x15abff, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1ba5f1, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08 };
		System.arraycopy(aFor, 0, key, 115810, aFor.length);
	}

	private static void init388(int[] key) {
		int[] aFor = { 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x1aa4f0, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x1aa4f0, 0xec5206, 0x14aafe, 0xed5307, 0x15abff, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1,
				0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x14aafe, 0xe35d09, 0x14aafe, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1aa4f0, 0xe35d09, 0x1aa4f0, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe25c08, 0x1ba5f1, 0xe35d09, 0x14aafe, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1aa4f0, 0xe35d09, 0x1ba5f1,
				0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09 };
		System.arraycopy(aFor, 0, key, 116110, aFor.length);
	}

	private static void init389(int[] key) {
		int[] aFor = { 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1,
				0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x14aafe, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x14aafe, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1,
				0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1aa4f0, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe25c08, 0x1ba5f1, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1ba5f1, 0xe25c08, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1,
				0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x14aafe, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09 };
		System.arraycopy(aFor, 0, key, 116410, aFor.length);
	}

	private static void init390(int[] key) {
		int[] aFor = { 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1,
				0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1,
				0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xec5206, 0x1ba5f1, 0xe35d09, 0x1aa4f0, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1,
				0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x14aafe, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09 };
		System.arraycopy(aFor, 0, key, 116710, aFor.length);
	}

	private static void init391(int[] key) {
		int[] aFor = { 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1,
				0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe25c08, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xec5206, 0x14aafe, 0xe35d09, 0x14aafe, 0xec5206, 0x15abff, 0xed5307, 0x1aa4f0, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff,
				0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307 };
		System.arraycopy(aFor, 0, key, 117010, aFor.length);
	}

	private static void init392(int[] key) {
		int[] aFor = { 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff,
				0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x15abff, 0xed5307, 0x14aafe, 0xec5206, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe,
				0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe25c08, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xec5206, 0x14aafe, 0xed5307, 0x14aafe, 0xec5206, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x1ba5f1, 0xec5206, 0x14aafe,
				0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x14aafe, 0xec5206, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1ba5f1, 0xe35d09, 0x1aa4f0, 0xe35d09, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08 };
		System.arraycopy(aFor, 0, key, 117310, aFor.length);
	}

	private static void init393(int[] key) {
		int[] aFor = { 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08 };
		System.arraycopy(aFor, 0, key, 117610, aFor.length);
	}

	private static void init394(int[] key) {
		int[] aFor = { 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08 };
		System.arraycopy(aFor, 0, key, 117910, aFor.length);
	}

	private static void init395(int[] key) {
		int[] aFor = { 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08 };
		System.arraycopy(aFor, 0, key, 118210, aFor.length);
	}

	private static void init396(int[] key) {
		int[] aFor = { 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08 };
		System.arraycopy(aFor, 0, key, 118510, aFor.length);
	}

	private static void init397(int[] key) {
		int[] aFor = { 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08 };
		System.arraycopy(aFor, 0, key, 118810, aFor.length);
	}

	private static void init398(int[] key) {
		int[] aFor = { 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08 };
		System.arraycopy(aFor, 0, key, 119110, aFor.length);
	}

	private static void init399(int[] key) {
		int[] aFor = { 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08 };
		System.arraycopy(aFor, 0, key, 119410, aFor.length);
	}

	private static void init400(int[] key) {
		int[] aFor = { 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08 };
		System.arraycopy(aFor, 0, key, 119710, aFor.length);
	}

	private static void init401(int[] key) {
		int[] aFor = { 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08 };
		System.arraycopy(aFor, 0, key, 120010, aFor.length);
	}

	private static void init402(int[] key) {
		int[] aFor = { 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0,
				0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08, 0x1aa4f0, 0xe25c08 };
		System.arraycopy(aFor, 0, key, 120310, aFor.length);
	}
};
